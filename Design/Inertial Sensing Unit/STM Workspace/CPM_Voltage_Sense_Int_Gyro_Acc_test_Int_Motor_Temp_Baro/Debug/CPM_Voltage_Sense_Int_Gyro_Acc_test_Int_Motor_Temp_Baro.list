
CPM_Voltage_Sense_Int_Gyro_Acc_test_Int_Motor_Temp_Baro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000750c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080076d8  080076d8  000176d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007728  08007728  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007730  08007730  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000078  080077b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080077b0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013470  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdb  00000000  00000000  00033518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000360f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024049  00000000  00000000  000382c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f7d  00000000  00000000  0005c311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df145  00000000  00000000  0007228e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001513d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  00151424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080076bc 	.word	0x080076bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	080076bc 	.word	0x080076bc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b974 	b.w	8000f10 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468e      	mov	lr, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14d      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	4694      	mov	ip, r2
 8000c52:	d969      	bls.n	8000d28 <__udivmoddi4+0xe8>
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	b152      	cbz	r2, 8000c70 <__udivmoddi4+0x30>
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	f1c2 0120 	rsb	r1, r2, #32
 8000c62:	fa20 f101 	lsr.w	r1, r0, r1
 8000c66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	0c21      	lsrs	r1, r4, #16
 8000c76:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7a:	fa1f f78c 	uxth.w	r7, ip
 8000c7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c86:	fb06 f107 	mul.w	r1, r6, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c96:	f080 811f 	bcs.w	8000ed8 <__udivmoddi4+0x298>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 811c 	bls.w	8000ed8 <__udivmoddi4+0x298>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb00 f707 	mul.w	r7, r0, r7
 8000cb8:	42a7      	cmp	r7, r4
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x92>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	f080 810a 	bcs.w	8000edc <__udivmoddi4+0x29c>
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	f240 8107 	bls.w	8000edc <__udivmoddi4+0x29c>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	1be4      	subs	r4, r4, r7
 8000cd8:	2600      	movs	r6, #0
 8000cda:	b11d      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cdc:	40d4      	lsrs	r4, r2
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0xc2>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80ef 	beq.w	8000ed2 <__udivmoddi4+0x292>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x160>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xd4>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80f9 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e0      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d26:	e7dd      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d28:	b902      	cbnz	r2, 8000d2c <__udivmoddi4+0xec>
 8000d2a:	deff      	udf	#255	; 0xff
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	f040 8092 	bne.w	8000e5a <__udivmoddi4+0x21a>
 8000d36:	eba1 010c 	sub.w	r1, r1, ip
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2601      	movs	r6, #1
 8000d44:	0c20      	lsrs	r0, r4, #16
 8000d46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	fb0e f003 	mul.w	r0, lr, r3
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x12c>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x12a>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	1a09      	subs	r1, r1, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1110 	mls	r1, r7, r0, r1
 8000d78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x156>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x154>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2ca>
 8000d94:	4608      	mov	r0, r1
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	e79c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000da0:	f1c6 0720 	rsb	r7, r6, #32
 8000da4:	40b3      	lsls	r3, r6
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa20 f407 	lsr.w	r4, r0, r7
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	431c      	orrs	r4, r3
 8000db8:	40f9      	lsrs	r1, r7
 8000dba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc6:	0c20      	lsrs	r0, r4, #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	fa02 f206 	lsl.w	r2, r2, r6
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2bc>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2bc>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e00:	fb09 1110 	mls	r1, r9, r0, r1
 8000e04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0c:	458e      	cmp	lr, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1e2>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1a:	458e      	cmp	lr, r1
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e26:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2a:	eba1 010e 	sub.w	r1, r1, lr
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46a6      	mov	lr, r4
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x212>
 8000e3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e42:	fa01 f707 	lsl.w	r7, r1, r7
 8000e46:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4a:	40f1      	lsrs	r1, r6
 8000e4c:	431f      	orrs	r7, r3
 8000e4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e78:	fb07 3610 	mls	r6, r7, r0, r3
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e82:	fb00 f60e 	mul.w	r6, r0, lr
 8000e86:	429e      	cmp	r6, r3
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x260>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1b9b      	subs	r3, r3, r6
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x28a>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0x104>
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e705      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6f8      	b.n	8000cd2 <__udivmoddi4+0x92>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f8>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f8>
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x28a>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1e2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b8>
 8000f00:	3b02      	subs	r3, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x12c>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e709      	b.n	8000d1e <__udivmoddi4+0xde>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x156>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000f1a:	23aa      	movs	r3, #170	; 0xaa
 8000f1c:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2316      	movs	r3, #22
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <read_calliberation_data+0x12c>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	21ee      	movs	r1, #238	; 0xee
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <read_calliberation_data+0x130>)
 8000f34:	f003 f92c 	bl	8004190 <HAL_I2C_Mem_Read>
	temp=Callib_Data;
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <read_calliberation_data+0x12c>)
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b42      	ldr	r3, [pc, #264]	; (8001048 <read_calliberation_data+0x134>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <read_calliberation_data+0x12c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <read_calliberation_data+0x12c>)
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <read_calliberation_data+0x138>)
 8000f54:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <read_calliberation_data+0x12c>)
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <read_calliberation_data+0x12c>)
 8000f60:	78db      	ldrb	r3, [r3, #3]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <read_calliberation_data+0x13c>)
 8000f6a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <read_calliberation_data+0x12c>)
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <read_calliberation_data+0x12c>)
 8000f76:	795b      	ldrb	r3, [r3, #5]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <read_calliberation_data+0x140>)
 8000f80:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <read_calliberation_data+0x12c>)
 8000f84:	799b      	ldrb	r3, [r3, #6]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <read_calliberation_data+0x12c>)
 8000f8c:	79db      	ldrb	r3, [r3, #7]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <read_calliberation_data+0x144>)
 8000f98:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <read_calliberation_data+0x12c>)
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <read_calliberation_data+0x12c>)
 8000fa4:	7a5b      	ldrb	r3, [r3, #9]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <read_calliberation_data+0x148>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <read_calliberation_data+0x12c>)
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <read_calliberation_data+0x12c>)
 8000fbc:	7adb      	ldrb	r3, [r3, #11]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <read_calliberation_data+0x14c>)
 8000fc8:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <read_calliberation_data+0x12c>)
 8000fcc:	7b1b      	ldrb	r3, [r3, #12]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <read_calliberation_data+0x12c>)
 8000fd4:	7b5b      	ldrb	r3, [r3, #13]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <read_calliberation_data+0x150>)
 8000fde:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <read_calliberation_data+0x12c>)
 8000fe2:	7b9b      	ldrb	r3, [r3, #14]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <read_calliberation_data+0x12c>)
 8000fea:	7bdb      	ldrb	r3, [r3, #15]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <read_calliberation_data+0x154>)
 8000ff4:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <read_calliberation_data+0x12c>)
 8000ff8:	7c1b      	ldrb	r3, [r3, #16]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <read_calliberation_data+0x12c>)
 8001000:	7c5b      	ldrb	r3, [r3, #17]
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <read_calliberation_data+0x158>)
 800100a:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <read_calliberation_data+0x12c>)
 800100e:	7c9b      	ldrb	r3, [r3, #18]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <read_calliberation_data+0x12c>)
 8001016:	7cdb      	ldrb	r3, [r3, #19]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <read_calliberation_data+0x15c>)
 8001020:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <read_calliberation_data+0x12c>)
 8001024:	7d1b      	ldrb	r3, [r3, #20]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <read_calliberation_data+0x12c>)
 800102c:	7d5b      	ldrb	r3, [r3, #21]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <read_calliberation_data+0x160>)
 8001036:	801a      	strh	r2, [r3, #0]

}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000e0 	.word	0x200000e0
 8001044:	200001b4 	.word	0x200001b4
 8001048:	200000dd 	.word	0x200000dd
 800104c:	20000094 	.word	0x20000094
 8001050:	20000096 	.word	0x20000096
 8001054:	20000098 	.word	0x20000098
 8001058:	2000009a 	.word	0x2000009a
 800105c:	2000009c 	.word	0x2000009c
 8001060:	2000009e 	.word	0x2000009e
 8001064:	200000a0 	.word	0x200000a0
 8001068:	200000a2 	.word	0x200000a2
 800106c:	200000a4 	.word	0x200000a4
 8001070:	200000a6 	.word	0x200000a6
 8001074:	200000a8 	.word	0x200000a8

08001078 <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800107e:	232e      	movs	r3, #46	; 0x2e
 8001080:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	22f4      	movs	r2, #244	; 0xf4
 8001094:	21ee      	movs	r1, #238	; 0xee
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <Get_UTemp+0x60>)
 8001098:	f002 ff80 	bl	8003f9c <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 800109c:	2005      	movs	r0, #5
 800109e:	f001 fccf 	bl	8002a40 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2302      	movs	r3, #2
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Get_UTemp+0x64>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	22f6      	movs	r2, #246	; 0xf6
 80010b4:	21ee      	movs	r1, #238	; 0xee
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <Get_UTemp+0x60>)
 80010b8:	f003 f86a 	bl	8004190 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <Get_UTemp+0x64>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <Get_UTemp+0x64>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	b29b      	uxth	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001b4 	.word	0x200001b4
 80010dc:	200000fc 	.word	0x200000fc

080010e0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80010e4:	f7ff ffc8 	bl	8001078 <Get_UTemp>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <BMP180_GetTemp+0x108>)
 80010ee:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80010f0:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <BMP180_GetTemp+0x108>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <BMP180_GetTemp+0x10c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9d6 	bl	80004ac <__aeabi_i2d>
 8001100:	4604      	mov	r4, r0
 8001102:	460d      	mov	r5, r1
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <BMP180_GetTemp+0x110>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9cf 	bl	80004ac <__aeabi_i2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <BMP180_GetTemp+0x114>)
 8001114:	f7ff fb5e 	bl	80007d4 <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff fa2e 	bl	8000580 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcd8 	bl	8000ae0 <__aeabi_d2iz>
 8001130:	4603      	mov	r3, r0
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <BMP180_GetTemp+0x118>)
 8001134:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <BMP180_GetTemp+0x11c>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9b5 	bl	80004ac <__aeabi_i2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <BMP180_GetTemp+0x120>)
 8001148:	f7ff fa1a 	bl	8000580 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4614      	mov	r4, r2
 8001152:	461d      	mov	r5, r3
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <BMP180_GetTemp+0x124>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	461a      	mov	r2, r3
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <BMP180_GetTemp+0x118>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4413      	add	r3, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9a2 	bl	80004ac <__aeabi_i2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff fb30 	bl	80007d4 <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fcb0 	bl	8000ae0 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <BMP180_GetTemp+0x128>)
 8001184:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <BMP180_GetTemp+0x118>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <BMP180_GetTemp+0x128>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <BMP180_GetTemp+0x12c>)
 8001192:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <BMP180_GetTemp+0x12c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3308      	adds	r3, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f986 	bl	80004ac <__aeabi_i2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <BMP180_GetTemp+0x130>)
 80011a6:	f7ff fb15 	bl	80007d4 <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc95 	bl	8000ae0 <__aeabi_d2iz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <BMP180_GetTemp+0x134>)
 80011ba:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <BMP180_GetTemp+0x134>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f973 	bl	80004ac <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <BMP180_GetTemp+0x138>)
 80011cc:	f7ff fb02 	bl	80007d4 <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcca 	bl	8000b70 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	ee07 3a90 	vmov	s15, r3
}
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}
 80011e8:	200000ac 	.word	0x200000ac
 80011ec:	2000009e 	.word	0x2000009e
 80011f0:	2000009c 	.word	0x2000009c
 80011f4:	40e00000 	.word	0x40e00000
 80011f8:	200000b4 	.word	0x200000b4
 80011fc:	200000a6 	.word	0x200000a6
 8001200:	40a00000 	.word	0x40a00000
 8001204:	200000a8 	.word	0x200000a8
 8001208:	200000b8 	.word	0x200000b8
 800120c:	200000c4 	.word	0x200000c4
 8001210:	40300000 	.word	0x40300000
 8001214:	200000d8 	.word	0x200000d8
 8001218:	40240000 	.word	0x40240000

0800121c <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af04      	add	r7, sp, #16
 8001222:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3334      	adds	r3, #52	; 0x34
 800122e:	b2db      	uxtb	r3, r3
 8001230:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 030f 	add.w	r3, r7, #15
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	22f4      	movs	r2, #244	; 0xf4
 8001246:	21ee      	movs	r1, #238	; 0xee
 8001248:	4822      	ldr	r0, [pc, #136]	; (80012d4 <Get_UPress+0xb8>)
 800124a:	f002 fea7 	bl	8003f9c <HAL_I2C_Mem_Write>
	}
	if(PCF==3|PCF==1) //Open
		{
			Press_RAW[1]=1;
		}*/
	switch (oss)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d81b      	bhi.n	800128c <Get_UPress+0x70>
 8001254:	a201      	add	r2, pc, #4	; (adr r2, 800125c <Get_UPress+0x40>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001275 	.word	0x08001275
 8001264:	0800127d 	.word	0x0800127d
 8001268:	08001285 	.word	0x08001285
	{
		case (0):
			HAL_Delay (5);
 800126c:	2005      	movs	r0, #5
 800126e:	f001 fbe7 	bl	8002a40 <HAL_Delay>
			break;
 8001272:	e00b      	b.n	800128c <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001274:	2008      	movs	r0, #8
 8001276:	f001 fbe3 	bl	8002a40 <HAL_Delay>
			break;
 800127a:	e007      	b.n	800128c <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 800127c:	200e      	movs	r0, #14
 800127e:	f001 fbdf 	bl	8002a40 <HAL_Delay>
			break;
 8001282:	e003      	b.n	800128c <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001284:	201a      	movs	r0, #26
 8001286:	f001 fbdb 	bl	8002a40 <HAL_Delay>
			break;
 800128a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2303      	movs	r3, #3
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <Get_UPress+0xbc>)
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	22f6      	movs	r2, #246	; 0xf6
 800129e:	21ee      	movs	r1, #238	; 0xee
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <Get_UPress+0xb8>)
 80012a2:	f002 ff75 	bl	8004190 <HAL_I2C_Mem_Read>
	//i2c_err=Press_RAW[1]&0x07;
	i2c_err=Press_RAW;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <Get_UPress+0xbc>)
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <Get_UPress+0xc0>)
 80012ac:	701a      	strb	r2, [r3, #0]
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <Get_UPress+0xbc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <Get_UPress+0xbc>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4413      	add	r3, r2
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <Get_UPress+0xbc>)
 80012be:	7892      	ldrb	r2, [r2, #2]
 80012c0:	441a      	add	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f1c3 0308 	rsb	r3, r3, #8
 80012c8:	fa42 f303 	asr.w	r3, r2, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001b4 	.word	0x200001b4
 80012d8:	200000f8 	.word	0x200000f8
 80012dc:	200000dc 	.word	0x200000dc

080012e0 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff97 	bl	800121c <Get_UPress>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4ba8      	ldr	r3, [pc, #672]	; (8001594 <BMP180_GetPress+0x2b4>)
 80012f4:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80012f6:	4ba8      	ldr	r3, [pc, #672]	; (8001598 <BMP180_GetPress+0x2b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4aa8      	ldr	r2, [pc, #672]	; (800159c <BMP180_GetPress+0x2bc>)
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8d3 	bl	80004ac <__aeabi_i2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	4ba5      	ldr	r3, [pc, #660]	; (80015a0 <BMP180_GetPress+0x2c0>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8cc 	bl	80004ac <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4ba2      	ldr	r3, [pc, #648]	; (80015a4 <BMP180_GetPress+0x2c4>)
 800131a:	f7ff fa5b 	bl	80007d4 <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f92b 	bl	8000580 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fbd5 	bl	8000ae0 <__aeabi_d2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	4a9b      	ldr	r2, [pc, #620]	; (80015a8 <BMP180_GetPress+0x2c8>)
 800133a:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800133c:	4b9b      	ldr	r3, [pc, #620]	; (80015ac <BMP180_GetPress+0x2cc>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8b2 	bl	80004ac <__aeabi_i2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <BMP180_GetPress+0x2d0>)
 800134e:	f7ff f917 	bl	8000580 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	4b96      	ldr	r3, [pc, #600]	; (80015b4 <BMP180_GetPress+0x2d4>)
 800135c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001360:	461a      	mov	r2, r3
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <BMP180_GetPress+0x2c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f89f 	bl	80004ac <__aeabi_i2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4620      	mov	r0, r4
 8001374:	4629      	mov	r1, r5
 8001376:	f7ff fa2d 	bl	80007d4 <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fbad 	bl	8000ae0 <__aeabi_d2iz>
 8001386:	4603      	mov	r3, r0
 8001388:	4a8b      	ldr	r2, [pc, #556]	; (80015b8 <BMP180_GetPress+0x2d8>)
 800138a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800138c:	4b86      	ldr	r3, [pc, #536]	; (80015a8 <BMP180_GetPress+0x2c8>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <BMP180_GetPress+0x2d8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4413      	add	r3, r2
 8001396:	4a89      	ldr	r2, [pc, #548]	; (80015bc <BMP180_GetPress+0x2dc>)
 8001398:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800139a:	4b88      	ldr	r3, [pc, #544]	; (80015bc <BMP180_GetPress+0x2dc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <BMP180_GetPress+0x2e0>)
 80013a4:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013a6:	4b87      	ldr	r3, [pc, #540]	; (80015c4 <BMP180_GetPress+0x2e4>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f87d 	bl	80004ac <__aeabi_i2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <BMP180_GetPress+0x2e0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a81      	ldr	r2, [pc, #516]	; (80015c0 <BMP180_GetPress+0x2e0>)
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f872 	bl	80004ac <__aeabi_i2d>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b7e      	ldr	r3, [pc, #504]	; (80015c8 <BMP180_GetPress+0x2e8>)
 80013ce:	f7ff fa01 	bl	80007d4 <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7ff f8d1 	bl	8000580 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <BMP180_GetPress+0x2d0>)
 80013ec:	f7ff f9f2 	bl	80007d4 <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb72 	bl	8000ae0 <__aeabi_d2iz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a6a      	ldr	r2, [pc, #424]	; (80015a8 <BMP180_GetPress+0x2c8>)
 8001400:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <BMP180_GetPress+0x2ec>)
 8001404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001408:	461a      	mov	r2, r3
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <BMP180_GetPress+0x2e0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f84a 	bl	80004ac <__aeabi_i2d>
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <BMP180_GetPress+0x2d0>)
 800141e:	f7ff f9d9 	bl	80007d4 <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fb59 	bl	8000ae0 <__aeabi_d2iz>
 800142e:	4603      	mov	r3, r0
 8001430:	4a61      	ldr	r2, [pc, #388]	; (80015b8 <BMP180_GetPress+0x2d8>)
 8001432:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001434:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <BMP180_GetPress+0x2c8>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <BMP180_GetPress+0x2d8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4413      	add	r3, r2
 800143e:	4a64      	ldr	r2, [pc, #400]	; (80015d0 <BMP180_GetPress+0x2f0>)
 8001440:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001442:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <BMP180_GetPress+0x2f4>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	009a      	lsls	r2, r3, #2
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <BMP180_GetPress+0x2f0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	441a      	add	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	3302      	adds	r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	da00      	bge.n	800145e <BMP180_GetPress+0x17e>
 800145c:	3303      	adds	r3, #3
 800145e:	109b      	asrs	r3, r3, #2
 8001460:	461a      	mov	r2, r3
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <BMP180_GetPress+0x2f8>)
 8001464:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <BMP180_GetPress+0x2fc>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	461a      	mov	r2, r3
 800146e:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <BMP180_GetPress+0x2e0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f818 	bl	80004ac <__aeabi_i2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <BMP180_GetPress+0x300>)
 8001482:	f7ff f9a7 	bl	80007d4 <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fb27 	bl	8000ae0 <__aeabi_d2iz>
 8001492:	4603      	mov	r3, r0
 8001494:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <BMP180_GetPress+0x2c8>)
 8001496:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <BMP180_GetPress+0x304>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f804 	bl	80004ac <__aeabi_i2d>
 80014a4:	4604      	mov	r4, r0
 80014a6:	460d      	mov	r5, r1
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <BMP180_GetPress+0x2e0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <BMP180_GetPress+0x2e0>)
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fff9 	bl	80004ac <__aeabi_i2d>
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <BMP180_GetPress+0x2e8>)
 80014c0:	f7ff f988 	bl	80007d4 <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f858 	bl	8000580 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <BMP180_GetPress+0x308>)
 80014de:	f7ff f979 	bl	80007d4 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff faf9 	bl	8000ae0 <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <BMP180_GetPress+0x2d8>)
 80014f2:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <BMP180_GetPress+0x2c8>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <BMP180_GetPress+0x2d8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	3302      	adds	r3, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ffd3 	bl	80004ac <__aeabi_i2d>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <BMP180_GetPress+0x30c>)
 800150c:	f7ff f962 	bl	80007d4 <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fae2 	bl	8000ae0 <__aeabi_d2iz>
 800151c:	4603      	mov	r3, r0
 800151e:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <BMP180_GetPress+0x2f0>)
 8001520:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <BMP180_GetPress+0x310>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <BMP180_GetPress+0x2f0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ffa9 	bl	800048c <__aeabi_ui2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <BMP180_GetPress+0x2c4>)
 8001540:	f7ff f948 	bl	80007d4 <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff faf0 	bl	8000b30 <__aeabi_d2uiz>
 8001550:	4603      	mov	r3, r0
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <BMP180_GetPress+0x314>)
 8001554:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <BMP180_GetPress+0x2b4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <BMP180_GetPress+0x2f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	fa41 f202 	asr.w	r2, r1, r2
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <BMP180_GetPress+0x318>)
 8001572:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <BMP180_GetPress+0x318>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db41      	blt.n	8001600 <BMP180_GetPress+0x320>
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <BMP180_GetPress+0x318>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	005a      	lsls	r2, r3, #1
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <BMP180_GetPress+0x314>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	461a      	mov	r2, r3
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <BMP180_GetPress+0x31c>)
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e040      	b.n	8001614 <BMP180_GetPress+0x334>
 8001592:	bf00      	nop
 8001594:	200000b0 	.word	0x200000b0
 8001598:	200000ac 	.word	0x200000ac
 800159c:	2000009e 	.word	0x2000009e
 80015a0:	2000009c 	.word	0x2000009c
 80015a4:	40e00000 	.word	0x40e00000
 80015a8:	200000b4 	.word	0x200000b4
 80015ac:	200000a6 	.word	0x200000a6
 80015b0:	40a00000 	.word	0x40a00000
 80015b4:	200000a8 	.word	0x200000a8
 80015b8:	200000b8 	.word	0x200000b8
 80015bc:	200000c4 	.word	0x200000c4
 80015c0:	200000cc 	.word	0x200000cc
 80015c4:	200000a2 	.word	0x200000a2
 80015c8:	40b00000 	.word	0x40b00000
 80015cc:	20000096 	.word	0x20000096
 80015d0:	200000bc 	.word	0x200000bc
 80015d4:	20000094 	.word	0x20000094
 80015d8:	200000c0 	.word	0x200000c0
 80015dc:	20000098 	.word	0x20000098
 80015e0:	40c00000 	.word	0x40c00000
 80015e4:	200000a0 	.word	0x200000a0
 80015e8:	40f00000 	.word	0x40f00000
 80015ec:	40100000 	.word	0x40100000
 80015f0:	2000009a 	.word	0x2000009a
 80015f4:	200000c8 	.word	0x200000c8
 80015f8:	200000d0 	.word	0x200000d0
 80015fc:	200000d4 	.word	0x200000d4
	else Press = (B7/B4)*2;
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <BMP180_GetPress+0x43c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <BMP180_GetPress+0x440>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	461a      	mov	r2, r3
 8001610:	4b44      	ldr	r3, [pc, #272]	; (8001724 <BMP180_GetPress+0x444>)
 8001612:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <BMP180_GetPress+0x444>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff47 	bl	80004ac <__aeabi_i2d>
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <BMP180_GetPress+0x448>)
 8001624:	f7ff f8d6 	bl	80007d4 <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <BMP180_GetPress+0x444>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff39 	bl	80004ac <__aeabi_i2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <BMP180_GetPress+0x448>)
 8001640:	f7ff f8c8 	bl	80007d4 <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe ff98 	bl	8000580 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fa42 	bl	8000ae0 <__aeabi_d2iz>
 800165c:	4603      	mov	r3, r0
 800165e:	4a33      	ldr	r2, [pc, #204]	; (800172c <BMP180_GetPress+0x44c>)
 8001660:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <BMP180_GetPress+0x44c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f640 32de 	movw	r2, #3038	; 0xbde
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff1c 	bl	80004ac <__aeabi_i2d>
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <BMP180_GetPress+0x450>)
 800167a:	f7ff f8ab 	bl	80007d4 <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa2b 	bl	8000ae0 <__aeabi_d2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <BMP180_GetPress+0x44c>)
 800168e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <BMP180_GetPress+0x444>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <BMP180_GetPress+0x454>)
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff06 	bl	80004ac <__aeabi_i2d>
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <BMP180_GetPress+0x450>)
 80016a6:	f7ff f895 	bl	80007d4 <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fa15 	bl	8000ae0 <__aeabi_d2iz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <BMP180_GetPress+0x458>)
 80016ba:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <BMP180_GetPress+0x444>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fef3 	bl	80004ac <__aeabi_i2d>
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <BMP180_GetPress+0x44c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <BMP180_GetPress+0x458>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fee7 	bl	80004ac <__aeabi_i2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <BMP180_GetPress+0x45c>)
 80016e4:	f7ff f876 	bl	80007d4 <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7fe fd90 	bl	8000214 <__adddf3>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff f9f0 	bl	8000ae0 <__aeabi_d2iz>
 8001700:	4603      	mov	r3, r0
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <BMP180_GetPress+0x444>)
 8001704:	6013      	str	r3, [r2, #0]
	return Press;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <BMP180_GetPress+0x444>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	200000d0 	.word	0x200000d0
 8001720:	200000c8 	.word	0x200000c8
 8001724:	200000d4 	.word	0x200000d4
 8001728:	40700000 	.word	0x40700000
 800172c:	200000b4 	.word	0x200000b4
 8001730:	40f00000 	.word	0x40f00000
 8001734:	ffffe343 	.word	0xffffe343
 8001738:	200000b8 	.word	0x200000b8
 800173c:	40300000 	.word	0x40300000

08001740 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fdc9 	bl	80012e0 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <BMP180_GetAlt+0x88>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80017cc <BMP180_GetAlt+0x8c>
 800175e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001762:	ee16 0a90 	vmov	r0, s13
 8001766:	f7fe feb3 	bl	80004d0 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80017b8 <BMP180_GetAlt+0x78>
 8001772:	ec43 2b10 	vmov	d0, r2, r3
 8001776:	f005 f885 	bl	8006884 <pow>
 800177a:	ec53 2b10 	vmov	r2, r3, d0
 800177e:	f04f 0000 	mov.w	r0, #0
 8001782:	4913      	ldr	r1, [pc, #76]	; (80017d0 <BMP180_GetAlt+0x90>)
 8001784:	f7fe fd44 	bl	8000210 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	a30b      	add	r3, pc, #44	; (adr r3, 80017c0 <BMP180_GetAlt+0x80>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fef3 	bl	8000580 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff f9e5 	bl	8000b70 <__aeabi_d2f>
 80017a6:	4603      	mov	r3, r0
 80017a8:	ee07 3a90 	vmov	s15, r3
}
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	cc745124 	.word	0xcc745124
 80017bc:	3fc85b95 	.word	0x3fc85b95
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40e5a540 	.word	0x40e5a540
 80017c8:	200000d4 	.word	0x200000d4
 80017cc:	47c5e680 	.word	0x47c5e680
 80017d0:	3ff00000 	.word	0x3ff00000

080017d4 <BMP180_Start>:

void BMP180_Start (void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80017d8:	f7ff fb9c 	bl	8000f14 <read_calliberation_data>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <DWT_Delay_Init+0x58>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <DWT_Delay_Init+0x58>)
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <DWT_Delay_Init+0x58>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <DWT_Delay_Init+0x58>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fa:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <DWT_Delay_Init+0x5c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <DWT_Delay_Init+0x5c>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <DWT_Delay_Init+0x5c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <DWT_Delay_Init+0x5c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <DWT_Delay_Init+0x5c>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800181a:	bf00      	nop
     __ASM volatile ("NOP");
 800181c:	bf00      	nop
  __ASM volatile ("NOP");
 800181e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <DWT_Delay_Init+0x5c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001828:	2300      	movs	r3, #0
 800182a:	e000      	b.n	800182e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800182c:	2301      	movs	r3, #1
  }
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000edf0 	.word	0xe000edf0
 800183c:	e0001000 	.word	0xe0001000

08001840 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <delay+0x40>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800184e:	f003 fb57 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8001852:	4603      	mov	r3, r0
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <delay+0x44>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001864:	bf00      	nop
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <delay+0x40>)
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad2      	subs	r2, r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d3f8      	bcc.n	8001866 <delay+0x26>
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e0001000 	.word	0xe0001000
 8001884:	431bde83 	.word	0x431bde83

08001888 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f002 f866 	bl	8003988 <HAL_GPIO_Init>
}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f002 f848 	bl	8003988 <HAL_GPIO_Init>
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DHT_Start>:


void DHT_Start (void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001904:	f7ff ff6c 	bl	80017e0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001908:	2102      	movs	r1, #2
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <DHT_Start+0x40>)
 800190c:	f7ff ffbc 	bl	8001888 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001910:	2200      	movs	r2, #0
 8001912:	2102      	movs	r1, #2
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <DHT_Start+0x40>)
 8001916:	f002 f9e3 	bl	8003ce0 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 800191a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800191e:	f7ff ff8f 	bl	8001840 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001922:	2201      	movs	r2, #1
 8001924:	2102      	movs	r1, #2
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <DHT_Start+0x40>)
 8001928:	f002 f9da 	bl	8003ce0 <HAL_GPIO_WritePin>
    delay (30);   // wait for 30us
 800192c:	201e      	movs	r0, #30
 800192e:	f7ff ff87 	bl	8001840 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001932:	2102      	movs	r1, #2
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DHT_Start+0x40>)
 8001936:	f7ff ffc5 	bl	80018c4 <Set_Pin_Input>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40020000 	.word	0x40020000

08001944 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800194e:	2028      	movs	r0, #40	; 0x28
 8001950:	f7ff ff76 	bl	8001840 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001954:	2102      	movs	r1, #2
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <DHT_Check_Response+0x58>)
 8001958:	f002 f9aa 	bl	8003cb0 <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10e      	bne.n	8001980 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8001962:	2050      	movs	r0, #80	; 0x50
 8001964:	f7ff ff6c 	bl	8001840 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001968:	2102      	movs	r1, #2
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <DHT_Check_Response+0x58>)
 800196c:	f002 f9a0 	bl	8003cb0 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <DHT_Check_Response+0x38>
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e001      	b.n	8001980 <DHT_Check_Response+0x3c>
		else Response = -1;
 800197c:	23ff      	movs	r3, #255	; 0xff
 800197e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001980:	bf00      	nop
 8001982:	2102      	movs	r1, #2
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <DHT_Check_Response+0x58>)
 8001986:	f002 f993 	bl	8003cb0 <HAL_GPIO_ReadPin>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f8      	bne.n	8001982 <DHT_Check_Response+0x3e>

	return Response;
 8001990:	79fb      	ldrb	r3, [r7, #7]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40020000 	.word	0x40020000

080019a0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	71bb      	strb	r3, [r7, #6]
 80019aa:	e037      	b.n	8001a1c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80019ac:	bf00      	nop
 80019ae:	2102      	movs	r1, #2
 80019b0:	481e      	ldr	r0, [pc, #120]	; (8001a2c <DHT_Read+0x8c>)
 80019b2:	f002 f97d 	bl	8003cb0 <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f8      	beq.n	80019ae <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80019bc:	2028      	movs	r0, #40	; 0x28
 80019be:	f7ff ff3f 	bl	8001840 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80019c2:	2102      	movs	r1, #2
 80019c4:	4819      	ldr	r0, [pc, #100]	; (8001a2c <DHT_Read+0x8c>)
 80019c6:	f002 f973 	bl	8003cb0 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10e      	bne.n	80019ee <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2201      	movs	r2, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	e00b      	b.n	8001a06 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	f1c3 0307 	rsb	r3, r3, #7
 80019f4:	2201      	movs	r2, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001a06:	bf00      	nop
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <DHT_Read+0x8c>)
 8001a0c:	f002 f950 	bl	8003cb0 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f8      	bne.n	8001a08 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	71bb      	strb	r3, [r7, #6]
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	d9c4      	bls.n	80019ac <DHT_Read+0xc>
	}
	return i;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020000 	.word	0x40020000

08001a30 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001a38:	f7ff ff62 	bl	8001900 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001a3c:	f7ff ff82 	bl	8001944 <DHT_Check_Response>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <DHT_GetData+0xb4>)
 8001a46:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001a48:	f7ff ffaa 	bl	80019a0 <DHT_Read>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <DHT_GetData+0xb8>)
 8001a52:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001a54:	f7ff ffa4 	bl	80019a0 <DHT_Read>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <DHT_GetData+0xbc>)
 8001a5e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001a60:	f7ff ff9e 	bl	80019a0 <DHT_Read>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <DHT_GetData+0xc0>)
 8001a6a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001a6c:	f7ff ff98 	bl	80019a0 <DHT_Read>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <DHT_GetData+0xc4>)
 8001a76:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001a78:	f7ff ff92 	bl	80019a0 <DHT_Read>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <DHT_GetData+0xc8>)
 8001a82:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <DHT_GetData+0xc8>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <DHT_GetData+0xb8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <DHT_GetData+0xbc>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <DHT_GetData+0xc0>)
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <DHT_GetData+0xc4>)
 8001a9e:	7812      	ldrb	r2, [r2, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4299      	cmp	r1, r3
 8001aa4:	d119      	bne.n	8001ada <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <DHT_GetData+0xc0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <DHT_GetData+0xc4>)
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <DHT_GetData+0xb8>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <DHT_GetData+0xbc>)
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000104 	.word	0x20000104
 8001ae8:	200000fe 	.word	0x200000fe
 8001aec:	200000ff 	.word	0x200000ff
 8001af0:	20000100 	.word	0x20000100
 8001af4:	20000101 	.word	0x20000101
 8001af8:	20000102 	.word	0x20000102

08001afc <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	4834      	ldr	r0, [pc, #208]	; (8001be0 <Max6675_Read_Temp+0xe4>)
 8001b0e:	f002 f8e7 	bl	8003ce0 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 8001b12:	2332      	movs	r3, #50	; 0x32
 8001b14:	2201      	movs	r2, #1
 8001b16:	4933      	ldr	r1, [pc, #204]	; (8001be4 <Max6675_Read_Temp+0xe8>)
 8001b18:	4833      	ldr	r0, [pc, #204]	; (8001be8 <Max6675_Read_Temp+0xec>)
 8001b1a:	f003 ff68 	bl	80059ee <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	482f      	ldr	r0, [pc, #188]	; (8001be0 <Max6675_Read_Temp+0xe4>)
 8001b24:	f002 f8dc 	bl	8003ce0 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <Max6675_Read_Temp+0xe8>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <Max6675_Read_Temp+0xf0>)
 8001b34:	701a      	strb	r2, [r3, #0]
Error=0;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <Max6675_Read_Temp+0xf4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <Max6675_Read_Temp+0xf0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d02b      	beq.n	8001b9c <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <Max6675_Read_Temp+0xf0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d120      	bne.n	8001b8e <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001b4c:	4829      	ldr	r0, [pc, #164]	; (8001bf4 <Max6675_Read_Temp+0xf8>)
 8001b4e:	f004 fb81 	bl	8006254 <HAL_TIM_Base_Start>
		while(timer_val<1)
 8001b52:	e011      	b.n	8001b78 <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <Max6675_Read_Temp+0xf0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d103      	bne.n	8001b64 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <Max6675_Read_Temp+0xf4>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
				break;
 8001b62:	e00d      	b.n	8001b80 <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <Max6675_Read_Temp+0xf8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <Max6675_Read_Temp+0xfc>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	0b5b      	lsrs	r3, r3, #13
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <Max6675_Read_Temp+0x100>)
 8001b76:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <Max6675_Read_Temp+0x100>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0e9      	beq.n	8001b54 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <Max6675_Read_Temp+0x100>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <Max6675_Read_Temp+0xf4>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e006      	b.n	8001b9c <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <Max6675_Read_Temp+0xf0>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d102      	bne.n	8001b9c <Max6675_Read_Temp+0xa0>
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <Max6675_Read_Temp+0xf4>)
 8001b98:	2203      	movs	r2, #3
 8001b9a:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <Max6675_Read_Temp+0xe8>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <Max6675_Read_Temp+0xe8>)
 8001ba4:	785b      	ldrb	r3, [r3, #1]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	10db      	asrs	r3, r3, #3
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb4:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bbc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc4:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8001bc8:	20fa      	movs	r0, #250	; 0xfa
 8001bca:	f000 ff39 	bl	8002a40 <HAL_Delay>
return Temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	ee07 3a90 	vmov	s15, r3
}
 8001bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020000 	.word	0x40020000
 8001be4:	20000108 	.word	0x20000108
 8001be8:	2000025c 	.word	0x2000025c
 8001bec:	2000010a 	.word	0x2000010a
 8001bf0:	2000010b 	.word	0x2000010b
 8001bf4:	200002b4 	.word	0x200002b4
 8001bf8:	d1b71759 	.word	0xd1b71759
 8001bfc:	2000031c 	.word	0x2000031c

08001c00 <barometer_sensor.0>:
  HAL_ADC_Init(&hadc1);
  MPU6050_Init();
  BMP180_Start();

  void barometer_sensor()
  {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 8001c0a:	f7ff fa69 	bl	80010e0 <BMP180_GetTemp>
 8001c0e:	eef0 7a40 	vmov.f32	s15, s0
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <barometer_sensor.0+0x40>)
 8001c14:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fb61 	bl	80012e0 <BMP180_GetPress>
 8001c1e:	eef0 7a40 	vmov.f32	s15, s0
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <barometer_sensor.0+0x44>)
 8001c24:	edc3 7a00 	vstr	s15, [r3]
  	  Altitude = BMP180_GetAlt(0);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fd89 	bl	8001740 <BMP180_GetAlt>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <barometer_sensor.0+0x48>)
 8001c34:	edc3 7a00 	vstr	s15, [r3]
  }
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000320 	.word	0x20000320
 8001c44:	20000324 	.word	0x20000324
 8001c48:	20000328 	.word	0x20000328

08001c4c <main>:
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
int main(void)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001c58:	f000 fe80 	bl	800295c <HAL_Init>
  SystemClock_Config();
 8001c5c:	f000 f896 	bl	8001d8c <SystemClock_Config>
  MX_GPIO_Init();
 8001c60:	f000 fa5e 	bl	8002120 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c64:	f000 fa3c 	bl	80020e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c68:	f000 f902 	bl	8001e70 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c6c:	f000 f952 	bl	8001f14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c70:	f000 f9ac 	bl	8001fcc <MX_SPI1_Init>
  MX_TIM1_Init();
 8001c74:	f000 f9e2 	bl	800203c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001c78:	f000 f97a 	bl	8001f70 <MX_I2C2_Init>
  HAL_ADC_Init(&hadc1);
 8001c7c:	4824      	ldr	r0, [pc, #144]	; (8001d10 <main+0xc4>)
 8001c7e:	f000 ff03 	bl	8002a88 <HAL_ADC_Init>
  MPU6050_Init();
 8001c82:	f000 fabf 	bl	8002204 <MPU6050_Init>
  BMP180_Start();
 8001c86:	f7ff fda5 	bl	80017d4 <BMP180_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temperature=Max6675_Read_Temp();
 8001c8a:	f7ff ff37 	bl	8001afc <Max6675_Read_Temp>
 8001c8e:	eef0 7a40 	vmov.f32	s15, s0
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <main+0xc8>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]

	  barometer_sensor();
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	469c      	mov	ip, r3
 8001c9c:	f7ff ffb0 	bl	8001c00 <barometer_sensor.0>


	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <main+0xcc>)
 8001ca2:	491e      	ldr	r1, [pc, #120]	; (8001d1c <main+0xd0>)
 8001ca4:	481e      	ldr	r0, [pc, #120]	; (8001d20 <main+0xd4>)
 8001ca6:	f000 fb15 	bl	80022d4 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <main+0xd8>)
 8001cac:	491e      	ldr	r1, [pc, #120]	; (8001d28 <main+0xdc>)
 8001cae:	481f      	ldr	r0, [pc, #124]	; (8001d2c <main+0xe0>)
 8001cb0:	f000 fb92 	bl	80023d8 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);

	  dht22_sensor();
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	469c      	mov	ip, r3
 8001cb8:	f000 f842 	bl	8001d40 <dht22_sensor.1>


	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, CV_Voltage_ui);
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <main+0xe4>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	481b      	ldr	r0, [pc, #108]	; (8001d34 <main+0xe8>)
 8001cc6:	f002 f80b 	bl	8003ce0 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8001cca:	4811      	ldr	r0, [pc, #68]	; (8001d10 <main+0xc4>)
 8001ccc:	f000 ff20 	bl	8002b10 <HAL_ADC_Start>
	  CpmVoltage = HAL_ADC_GetValue(&hadc1)*(5.0/4096.0);
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <main+0xc4>)
 8001cd2:	f001 f822 	bl	8002d1a <HAL_ADC_GetValue>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fbd7 	bl	800048c <__aeabi_ui2d>
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <main+0xec>)
 8001ce4:	f7fe fc4c 	bl	8000580 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe ff3e 	bl	8000b70 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <main+0xf0>)
 8001cf8:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	f000 fea0 	bl	8002a40 <HAL_Delay>
	  HAL_ADC_Stop(&hadc1);
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <main+0xc4>)
 8001d02:	f000 ffd7 	bl	8002cb4 <HAL_ADC_Stop>
	  HAL_Delay(100);
 8001d06:	2064      	movs	r0, #100	; 0x64
 8001d08:	f000 fe9a 	bl	8002a40 <HAL_Delay>
	  temperature=Max6675_Read_Temp();
 8001d0c:	e7bd      	b.n	8001c8a <main+0x3e>
 8001d0e:	bf00      	nop
 8001d10:	2000010c 	.word	0x2000010c
 8001d14:	20000318 	.word	0x20000318
 8001d18:	20000304 	.word	0x20000304
 8001d1c:	20000300 	.word	0x20000300
 8001d20:	200002fc 	.word	0x200002fc
 8001d24:	20000310 	.word	0x20000310
 8001d28:	2000030c 	.word	0x2000030c
 8001d2c:	20000308 	.word	0x20000308
 8001d30:	20000314 	.word	0x20000314
 8001d34:	40020000 	.word	0x40020000
 8001d38:	3f540000 	.word	0x3f540000
 8001d3c:	20000000 	.word	0x20000000

08001d40 <dht22_sensor.1>:
  {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	f8c7 c004 	str.w	ip, [r7, #4]
  	DHT_GetData(&DHT22_Data);
 8001d4a:	480d      	ldr	r0, [pc, #52]	; (8001d80 <dht22_sensor.1+0x40>)
 8001d4c:	f7ff fe70 	bl	8001a30 <DHT_GetData>
  	Temperature1 =((float)DHT22_Data.Temperature)/10.0;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <dht22_sensor.1+0x40>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <dht22_sensor.1+0x44>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
  	Humidity = ((float)DHT22_Data.Humidity)/10.0;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <dht22_sensor.1+0x40>)
 8001d66:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d6a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <dht22_sensor.1+0x48>)
 8001d74:	edc3 7a00 	vstr	s15, [r3]
  }
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000032c 	.word	0x2000032c
 8001d84:	20000334 	.word	0x20000334
 8001d88:	20000338 	.word	0x20000338

08001d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b094      	sub	sp, #80	; 0x50
 8001d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	2234      	movs	r2, #52	; 0x34
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fd6a 	bl	8006874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <SystemClock_Config+0xdc>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <SystemClock_Config+0xdc>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <SystemClock_Config+0xdc>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <SystemClock_Config+0xe0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <SystemClock_Config+0xe0>)
 8001dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <SystemClock_Config+0xe0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df0:	2310      	movs	r3, #16
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df4:	2302      	movs	r3, #2
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e00:	23b4      	movs	r3, #180	; 0xb4
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fac3 	bl	80053a0 <HAL_RCC_OscConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e20:	f000 f9ea 	bl	80021f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e24:	f002 ff36 	bl	8004c94 <HAL_PWREx_EnableOverDrive>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e2e:	f000 f9e3 	bl	80021f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e32:	230f      	movs	r3, #15
 8001e34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e36:	2302      	movs	r3, #2
 8001e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	2105      	movs	r1, #5
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 ff6f 	bl	8004d34 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e5c:	f000 f9cc 	bl	80021f8 <Error_Handler>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e76:	463b      	mov	r3, r7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001e84:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <MX_ADC1_Init+0x9c>)
 8001e86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001e8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <MX_ADC1_Init+0xa0>)
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001ed2:	f000 fdd9 	bl	8002a88 <HAL_ADC_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001edc:	f000 f98c 	bl	80021f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eec:	463b      	mov	r3, r7
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_ADC1_Init+0x98>)
 8001ef2:	f000 ff1f 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001efc:	f000 f97c 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000010c 	.word	0x2000010c
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	0f000001 	.word	0x0f000001

08001f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <MX_I2C1_Init+0x54>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_I2C1_Init+0x58>)
 8001f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_I2C1_Init+0x50>)
 8001f52:	f001 fedf 	bl	8003d14 <HAL_I2C_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f5c:	f000 f94c 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200001b4 	.word	0x200001b4
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	000186a0 	.word	0x000186a0

08001f70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <MX_I2C2_Init+0x54>)
 8001f78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <MX_I2C2_Init+0x58>)
 8001f7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_I2C2_Init+0x50>)
 8001fae:	f001 feb1 	bl	8003d14 <HAL_I2C_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fb8:	f000 f91e 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000208 	.word	0x20000208
 8001fc4:	40005800 	.word	0x40005800
 8001fc8:	00061a80 	.word	0x00061a80

08001fcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <MX_SPI1_Init+0x68>)
 8001fd2:	4a19      	ldr	r2, [pc, #100]	; (8002038 <MX_SPI1_Init+0x6c>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_SPI1_Init+0x68>)
 8001fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_SPI1_Init+0x68>)
 8001fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_SPI1_Init+0x68>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_SPI1_Init+0x68>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <MX_SPI1_Init+0x68>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_SPI1_Init+0x68>)
 8001ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_SPI1_Init+0x68>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_SPI1_Init+0x68>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_SPI1_Init+0x68>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_SPI1_Init+0x68>)
 8002014:	2200      	movs	r2, #0
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_SPI1_Init+0x68>)
 800201a:	220a      	movs	r2, #10
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_SPI1_Init+0x68>)
 8002020:	f003 fc5c 	bl	80058dc <HAL_SPI_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800202a:	f000 f8e5 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000025c 	.word	0x2000025c
 8002038:	40013000 	.word	0x40013000

0800203c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	463b      	mov	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <MX_TIM1_Init+0x9c>)
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <MX_TIM1_Init+0xa0>)
 800205c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <MX_TIM1_Init+0x9c>)
 8002060:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8002064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <MX_TIM1_Init+0x9c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <MX_TIM1_Init+0x9c>)
 800206e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <MX_TIM1_Init+0x9c>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <MX_TIM1_Init+0x9c>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_TIM1_Init+0x9c>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002086:	4814      	ldr	r0, [pc, #80]	; (80020d8 <MX_TIM1_Init+0x9c>)
 8002088:	f004 f894 	bl	80061b4 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002092:	f000 f8b1 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM1_Init+0x9c>)
 80020a4:	f004 f93e 	bl	8006324 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80020ae:	f000 f8a3 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM1_Init+0x9c>)
 80020c0:	f004 fb32 	bl	8006728 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80020ca:	f000 f895 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200002b4 	.word	0x200002b4
 80020dc:	40010000 	.word	0x40010000

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_DMA_Init+0x3c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <MX_DMA_Init+0x3c>)
 80020f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_DMA_Init+0x3c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2038      	movs	r0, #56	; 0x38
 8002108:	f001 f91d 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800210c:	2038      	movs	r0, #56	; 0x38
 800210e:	f001 f936 	bl	800337e <HAL_NVIC_EnableIRQ>

}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <MX_GPIO_Init+0xd0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <MX_GPIO_Init+0xd0>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <MX_GPIO_Init+0xd0>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_GPIO_Init+0xd0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT_Pin_Pin|CV_Enable_Pin|MT_CS_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	21c2      	movs	r1, #194	; 0xc2
 80021aa:	4812      	ldr	r0, [pc, #72]	; (80021f4 <MX_GPIO_Init+0xd4>)
 80021ac:	f001 fd98 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DHT_Pin_Pin MT_CS_Pin */
  GPIO_InitStruct.Pin = DHT_Pin_Pin|MT_CS_Pin;
 80021b0:	2382      	movs	r3, #130	; 0x82
 80021b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	480b      	ldr	r0, [pc, #44]	; (80021f4 <MX_GPIO_Init+0xd4>)
 80021c8:	f001 fbde 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 80021cc:	2340      	movs	r3, #64	; 0x40
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_GPIO_Init+0xd4>)
 80021e4:	f001 fbd0 	bl	8003988 <HAL_GPIO_Init>

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	e7fe      	b.n	8002200 <Error_Handler+0x8>
	...

08002204 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	2301      	movs	r3, #1
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <MPU6050_Init+0xc0>)
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2301      	movs	r3, #1
 800221a:	2275      	movs	r2, #117	; 0x75
 800221c:	21d0      	movs	r1, #208	; 0xd0
 800221e:	482a      	ldr	r0, [pc, #168]	; (80022c8 <MPU6050_Init+0xc4>)
 8002220:	f001 ffb6 	bl	8004190 <HAL_I2C_Mem_Read>
 8002224:	4603      	mov	r3, r0
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <MPU6050_Init+0xc8>)
 800222a:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <MPU6050_Init+0xc0>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b68      	cmp	r3, #104	; 0x68
 8002232:	d140      	bne.n	80022b6 <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <MPU6050_Init+0xcc>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800223a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <MPU6050_Init+0xcc>)
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2301      	movs	r3, #1
 800224a:	226b      	movs	r2, #107	; 0x6b
 800224c:	21d0      	movs	r1, #208	; 0xd0
 800224e:	481e      	ldr	r0, [pc, #120]	; (80022c8 <MPU6050_Init+0xc4>)
 8002250:	f001 fea4 	bl	8003f9c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MPU6050_Init+0xcc>)
 8002256:	2207      	movs	r2, #7
 8002258:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	2301      	movs	r3, #1
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MPU6050_Init+0xcc>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2301      	movs	r3, #1
 800226a:	2219      	movs	r2, #25
 800226c:	21d0      	movs	r1, #208	; 0xd0
 800226e:	4816      	ldr	r0, [pc, #88]	; (80022c8 <MPU6050_Init+0xc4>)
 8002270:	f001 fe94 	bl	8003f9c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <MPU6050_Init+0xcc>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	2301      	movs	r3, #1
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MPU6050_Init+0xcc>)
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2301      	movs	r3, #1
 800228a:	221c      	movs	r2, #28
 800228c:	21d0      	movs	r1, #208	; 0xd0
 800228e:	480e      	ldr	r0, [pc, #56]	; (80022c8 <MPU6050_Init+0xc4>)
 8002290:	f001 fe84 	bl	8003f9c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MPU6050_Init+0xcc>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MPU6050_Init+0xcc>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2301      	movs	r3, #1
 80022aa:	221b      	movs	r2, #27
 80022ac:	21d0      	movs	r1, #208	; 0xd0
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <MPU6050_Init+0xc4>)
 80022b0:	f001 fe74 	bl	8003f9c <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 80022b4:	e002      	b.n	80022bc <MPU6050_Init+0xb8>
	else check=-1;
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <MPU6050_Init+0xc0>)
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	701a      	strb	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000348 	.word	0x20000348
 80022c8:	200001b4 	.word	0x200001b4
 80022cc:	20000004 	.word	0x20000004
 80022d0:	20000349 	.word	0x20000349

080022d4 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af04      	add	r7, sp, #16
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2306      	movs	r3, #6
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	223b      	movs	r2, #59	; 0x3b
 80022f4:	21d0      	movs	r1, #208	; 0xd0
 80022f6:	4832      	ldr	r0, [pc, #200]	; (80023c0 <MPU6050_Read_Accel+0xec>)
 80022f8:	f001 ff4a 	bl	8004190 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80022fc:	7c3b      	ldrb	r3, [r7, #16]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21a      	sxth	r2, r3
 8002302:	7c7b      	ldrb	r3, [r7, #17]
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b21a      	sxth	r2, r3
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <MPU6050_Read_Accel+0xf0>)
 800230c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800230e:	7cbb      	ldrb	r3, [r7, #18]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21a      	sxth	r2, r3
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	b21b      	sxth	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b21a      	sxth	r2, r3
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <MPU6050_Read_Accel+0xf4>)
 800231e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002320:	7d3b      	ldrb	r3, [r7, #20]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21a      	sxth	r2, r3
 8002326:	7d7b      	ldrb	r3, [r7, #21]
 8002328:	b21b      	sxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <MPU6050_Read_Accel+0xf8>)
 8002330:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 8002332:	7c7b      	ldrb	r3, [r7, #17]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <MPU6050_Read_Accel+0xfc>)
 800233e:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <MPU6050_Read_Accel+0xf0>)
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8b0 	bl	80004ac <__aeabi_i2d>
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <MPU6050_Read_Accel+0x100>)
 8002352:	f7fe fa3f 	bl	80007d4 <__aeabi_ddiv>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fc07 	bl	8000b70 <__aeabi_d2f>
 8002362:	4602      	mov	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <MPU6050_Read_Accel+0xf4>)
 800236a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f89c 	bl	80004ac <__aeabi_i2d>
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MPU6050_Read_Accel+0x100>)
 800237a:	f7fe fa2b 	bl	80007d4 <__aeabi_ddiv>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7fe fbf3 	bl	8000b70 <__aeabi_d2f>
 800238a:	4602      	mov	r2, r0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MPU6050_Read_Accel+0xf8>)
 8002392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f888 	bl	80004ac <__aeabi_i2d>
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MPU6050_Read_Accel+0x100>)
 80023a2:	f7fe fa17 	bl	80007d4 <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fbdf 	bl	8000b70 <__aeabi_d2f>
 80023b2:	4602      	mov	r2, r0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]

}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200001b4 	.word	0x200001b4
 80023c4:	2000033c 	.word	0x2000033c
 80023c8:	2000033e 	.word	0x2000033e
 80023cc:	20000340 	.word	0x20000340
 80023d0:	20000004 	.word	0x20000004
 80023d4:	40d00000 	.word	0x40d00000

080023d8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af04      	add	r7, sp, #16
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	2306      	movs	r3, #6
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2301      	movs	r3, #1
 80023f6:	2243      	movs	r2, #67	; 0x43
 80023f8:	21d0      	movs	r1, #208	; 0xd0
 80023fa:	4831      	ldr	r0, [pc, #196]	; (80024c0 <MPU6050_Read_Gyro+0xe8>)
 80023fc:	f001 fec8 	bl	8004190 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002400:	7c3b      	ldrb	r3, [r7, #16]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b21a      	sxth	r2, r3
 8002406:	7c7b      	ldrb	r3, [r7, #17]
 8002408:	b21b      	sxth	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	b21a      	sxth	r2, r3
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <MPU6050_Read_Gyro+0xec>)
 8002410:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002412:	7cbb      	ldrb	r3, [r7, #18]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21a      	sxth	r2, r3
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <MPU6050_Read_Gyro+0xf0>)
 8002422:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002424:	7d3b      	ldrb	r3, [r7, #20]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	7d7b      	ldrb	r3, [r7, #21]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <MPU6050_Read_Gyro+0xf4>)
 8002434:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <MPU6050_Read_Gyro+0xec>)
 8002438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f835 	bl	80004ac <__aeabi_i2d>
 8002442:	a31d      	add	r3, pc, #116	; (adr r3, 80024b8 <MPU6050_Read_Gyro+0xe0>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fe f9c4 	bl	80007d4 <__aeabi_ddiv>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fb8c 	bl	8000b70 <__aeabi_d2f>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MPU6050_Read_Gyro+0xf0>)
 8002460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f821 	bl	80004ac <__aeabi_i2d>
 800246a:	a313      	add	r3, pc, #76	; (adr r3, 80024b8 <MPU6050_Read_Gyro+0xe0>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f9b0 	bl	80007d4 <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fb78 	bl	8000b70 <__aeabi_d2f>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MPU6050_Read_Gyro+0xf4>)
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f80d 	bl	80004ac <__aeabi_i2d>
 8002492:	a309      	add	r3, pc, #36	; (adr r3, 80024b8 <MPU6050_Read_Gyro+0xe0>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f99c 	bl	80007d4 <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fb64 	bl	8000b70 <__aeabi_d2f>
 80024a8:	4602      	mov	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40606000 	.word	0x40606000
 80024c0:	200001b4 	.word	0x200001b4
 80024c4:	20000342 	.word	0x20000342
 80024c8:	20000344 	.word	0x20000344
 80024cc:	20000346 	.word	0x20000346

080024d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_MspInit+0x58>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <HAL_MspInit+0x58>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_MspInit+0x58>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_MspInit+0x58>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_MspInit+0x58>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_MspInit+0x58>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2005      	movs	r0, #5
 8002514:	f000 ff17 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002518:	2005      	movs	r0, #5
 800251a:	f000 ff30 	bl	800337e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_ADC_MspInit+0xdc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d157      	bne.n	80025fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_ADC_MspInit+0xe0>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a2d      	ldr	r2, [pc, #180]	; (800260c <HAL_ADC_MspInit+0xe0>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_ADC_MspInit+0xe0>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_ADC_MspInit+0xe0>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_ADC_MspInit+0xe0>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_ADC_MspInit+0xe0>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002586:	2301      	movs	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258a:	2303      	movs	r3, #3
 800258c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	481d      	ldr	r0, [pc, #116]	; (8002610 <HAL_ADC_MspInit+0xe4>)
 800259a:	f001 f9f5 	bl	8003988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_ADC_MspInit+0xec>)
 80025a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025e2:	480c      	ldr	r0, [pc, #48]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025e4:	f000 fee6 	bl	80033b4 <HAL_DMA_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80025ee:	f7ff fe03 	bl	80021f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <HAL_ADC_MspInit+0xe8>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40012000 	.word	0x40012000
 800260c:	40023800 	.word	0x40023800
 8002610:	40020000 	.word	0x40020000
 8002614:	20000154 	.word	0x20000154
 8002618:	40026410 	.word	0x40026410

0800261c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a42      	ldr	r2, [pc, #264]	; (8002744 <HAL_I2C_MspInit+0x128>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d12c      	bne.n	8002698 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800265a:	23c0      	movs	r3, #192	; 0xc0
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800265e:	2312      	movs	r3, #18
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800266a:	2304      	movs	r3, #4
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	4835      	ldr	r0, [pc, #212]	; (800274c <HAL_I2C_MspInit+0x130>)
 8002676:	f001 f987 	bl	8003988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a31      	ldr	r2, [pc, #196]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002696:	e050      	b.n	800273a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <HAL_I2C_MspInit+0x134>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d14b      	bne.n	800273a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e0:	2312      	movs	r3, #18
 80026e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026ec:	2304      	movs	r3, #4
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	4619      	mov	r1, r3
 80026f6:	4815      	ldr	r0, [pc, #84]	; (800274c <HAL_I2C_MspInit+0x130>)
 80026f8:	f001 f946 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002702:	2312      	movs	r3, #18
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800270e:	2304      	movs	r3, #4
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	480e      	ldr	r0, [pc, #56]	; (8002754 <HAL_I2C_MspInit+0x138>)
 800271a:	f001 f935 	bl	8003988 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_I2C_MspInit+0x12c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
}
 800273a:	bf00      	nop
 800273c:	3730      	adds	r7, #48	; 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40005400 	.word	0x40005400
 8002748:	40023800 	.word	0x40023800
 800274c:	40020400 	.word	0x40020400
 8002750:	40005800 	.word	0x40005800
 8002754:	40020800 	.word	0x40020800

08002758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_SPI_MspInit+0xc0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d149      	bne.n	800280e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_SPI_MspInit+0xc4>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_SPI_MspInit+0xc4>)
 8002784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_SPI_MspInit+0xc4>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_SPI_MspInit+0xc4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <HAL_SPI_MspInit+0xc4>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_SPI_MspInit+0xc4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_SPI_MspInit+0xc4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_SPI_MspInit+0xc4>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_SPI_MspInit+0xc4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027ce:	2320      	movs	r3, #32
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027de:	2305      	movs	r3, #5
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4619      	mov	r1, r3
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <HAL_SPI_MspInit+0xc8>)
 80027ea:	f001 f8cd 	bl	8003988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ee:	2310      	movs	r3, #16
 80027f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027fe:	2305      	movs	r3, #5
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4806      	ldr	r0, [pc, #24]	; (8002824 <HAL_SPI_MspInit+0xcc>)
 800280a:	f001 f8bd 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40013000 	.word	0x40013000
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_TIM_Base_MspInit+0x3c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_TIM_Base_MspInit+0x40>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_TIM_Base_MspInit+0x40>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <HAL_TIM_Base_MspInit+0x40>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40010000 	.word	0x40010000
 8002868:	40023800 	.word	0x40023800

0800286c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <NMI_Handler+0x4>

08002872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002876:	e7fe      	b.n	8002876 <HardFault_Handler+0x4>

08002878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <MemManage_Handler+0x4>

0800287e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <UsageFault_Handler+0x4>

0800288a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b8:	f000 f8a2 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA2_Stream0_IRQHandler+0x10>)
 80028d6:	f000 fe1b 	bl	8003510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000154 	.word	0x20000154

080028e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <SystemInit+0x20>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	4a05      	ldr	r2, [pc, #20]	; (8002904 <SystemInit+0x20>)
 80028f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800290e:	490e      	ldr	r1, [pc, #56]	; (8002948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800291c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002922:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002924:	4c0b      	ldr	r4, [pc, #44]	; (8002954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002932:	f7ff ffd7 	bl	80028e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002936:	f003 ff79 	bl	800682c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800293a:	f7ff f987 	bl	8001c4c <main>
  bx  lr    
 800293e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002948:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800294c:	08007738 	.word	0x08007738
  ldr r2, =_sbss
 8002950:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002954:	20000350 	.word	0x20000350

08002958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002958:	e7fe      	b.n	8002958 <ADC_IRQHandler>
	...

0800295c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_Init+0x40>)
 8002966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_Init+0x40>)
 8002972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a07      	ldr	r2, [pc, #28]	; (800299c <HAL_Init+0x40>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002984:	2003      	movs	r0, #3
 8002986:	f000 fcd3 	bl	8003330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298a:	200f      	movs	r0, #15
 800298c:	f000 f808 	bl	80029a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002990:	f7ff fd9e 	bl	80024d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_InitTick+0x54>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x58>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fceb 	bl	800339a <HAL_SYSTICK_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00e      	b.n	80029ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	d80a      	bhi.n	80029ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f000 fcb3 	bl	8003346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_InitTick+0x5c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000008 	.word	0x20000008
 80029f8:	20000010 	.word	0x20000010
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000010 	.word	0x20000010
 8002a24:	2000034c 	.word	0x2000034c

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000034c 	.word	0x2000034c

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff ffee 	bl	8002a28 <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffde 	bl	8002a28 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000010 	.word	0x20000010

08002a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e033      	b.n	8002b06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fd40 	bl	800252c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ace:	f023 0302 	bic.w	r3, r3, #2
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa5c 	bl	8002f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
 8002af6:	e001      	b.n	8002afc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Start+0x1a>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0b2      	b.n	8002c90 <HAL_ADC_Start+0x180>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d018      	beq.n	8002b72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b50:	4b52      	ldr	r3, [pc, #328]	; (8002c9c <HAL_ADC_Start+0x18c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_ADC_Start+0x190>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9a      	lsrs	r2, r3, #18
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b64:	e002      	b.n	8002b6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f9      	bne.n	8002b66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d17a      	bne.n	8002c76 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002baa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	d106      	bne.n	8002bce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f023 0206 	bic.w	r2, r3, #6
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
 8002bcc:	e002      	b.n	8002bd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_ADC_Start+0x194>)
 8002bde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002be8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d12a      	bne.n	8002c4c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_ADC_Start+0x198>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d015      	beq.n	8002c2c <HAL_ADC_Start+0x11c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_ADC_Start+0x19c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_Start+0x106>
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_ADC_Start+0x194>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <HAL_ADC_Start+0x1a0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d136      	bne.n	8002c8e <HAL_ADC_Start+0x17e>
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_ADC_Start+0x194>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d130      	bne.n	8002c8e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d129      	bne.n	8002c8e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	e020      	b.n	8002c8e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_ADC_Start+0x198>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d11b      	bne.n	8002c8e <HAL_ADC_Start+0x17e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d114      	bne.n	8002c8e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	e00b      	b.n	8002c8e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0210 	orr.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	20000008 	.word	0x20000008
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	40012000 	.word	0x40012000
 8002cac:	40012100 	.word	0x40012100
 8002cb0:	40012200 	.word	0x40012200

08002cb4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_Stop+0x16>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e021      	b.n	8002d0e <HAL_ADC_Stop+0x5a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e113      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x244>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b09      	cmp	r3, #9
 8002d5e:	d925      	bls.n	8002dac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68d9      	ldr	r1, [r3, #12]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b1e      	subs	r3, #30
 8002d76:	2207      	movs	r2, #7
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	400a      	ands	r2, r1
 8002d84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68d9      	ldr	r1, [r3, #12]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	4603      	mov	r3, r0
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4403      	add	r3, r0
 8002d9e:	3b1e      	subs	r3, #30
 8002da0:	409a      	lsls	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	e022      	b.n	8002df2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6919      	ldr	r1, [r3, #16]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	400a      	ands	r2, r1
 8002dce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6919      	ldr	r1, [r3, #16]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4403      	add	r3, r0
 8002de8:	409a      	lsls	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d824      	bhi.n	8002e44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b05      	subs	r3, #5
 8002e0c:	221f      	movs	r2, #31
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	400a      	ands	r2, r1
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	3b05      	subs	r3, #5
 8002e36:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
 8002e42:	e04c      	b.n	8002ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	d824      	bhi.n	8002e96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b23      	subs	r3, #35	; 0x23
 8002e5e:	221f      	movs	r2, #31
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43da      	mvns	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b23      	subs	r3, #35	; 0x23
 8002e88:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
 8002e94:	e023      	b.n	8002ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b41      	subs	r3, #65	; 0x41
 8002ea8:	221f      	movs	r2, #31
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b41      	subs	r3, #65	; 0x41
 8002ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_ADC_ConfigChannel+0x250>)
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <HAL_ADC_ConfigChannel+0x254>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10f      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1d8>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b12      	cmp	r3, #18
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_ADC_ConfigChannel+0x254>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d12b      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x23a>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_ADC_ConfigChannel+0x258>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x1f4>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b11      	cmp	r3, #17
 8002f26:	d122      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_ADC_ConfigChannel+0x258>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d111      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_ADC_ConfigChannel+0x25c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <HAL_ADC_ConfigChannel+0x260>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	0c9a      	lsrs	r2, r3, #18
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40012300 	.word	0x40012300
 8002f88:	40012000 	.word	0x40012000
 8002f8c:	10000012 	.word	0x10000012
 8002f90:	20000008 	.word	0x20000008
 8002f94:	431bde83 	.word	0x431bde83

08002f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fa0:	4b79      	ldr	r3, [pc, #484]	; (8003188 <ADC_Init+0x1f0>)
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	4a58      	ldr	r2, [pc, #352]	; (800318c <ADC_Init+0x1f4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800303e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	e00f      	b.n	8003096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0202 	bic.w	r2, r2, #2
 80030a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7e1b      	ldrb	r3, [r3, #24]
 80030b0:	005a      	lsls	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	3b01      	subs	r3, #1
 80030f0:	035a      	lsls	r2, r3, #13
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e007      	b.n	800310c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	3b01      	subs	r3, #1
 8003128:	051a      	lsls	r2, r3, #20
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800314e:	025a      	lsls	r2, r3, #9
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	029a      	lsls	r2, r3, #10
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012300 	.word	0x40012300
 800318c:	0f000001 	.word	0x0f000001

08003190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c2:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	60d3      	str	r3, [r2, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <__NVIC_GetPriorityGrouping+0x18>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 0307 	and.w	r3, r3, #7
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0b      	blt.n	800321e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	; (800322c <__NVIC_EnableIRQ+0x38>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db0a      	blt.n	800325a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	490c      	ldr	r1, [pc, #48]	; (800327c <__NVIC_SetPriority+0x4c>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	440b      	add	r3, r1
 8003254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003258:	e00a      	b.n	8003270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <__NVIC_SetPriority+0x50>)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	440b      	add	r3, r1
 800326e:	761a      	strb	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f1c3 0307 	rsb	r3, r3, #7
 800329e:	2b04      	cmp	r3, #4
 80032a0:	bf28      	it	cs
 80032a2:	2304      	movcs	r3, #4
 80032a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d902      	bls.n	80032b4 <NVIC_EncodePriority+0x30>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3b03      	subs	r3, #3
 80032b2:	e000      	b.n	80032b6 <NVIC_EncodePriority+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	4313      	orrs	r3, r2
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032fc:	d301      	bcc.n	8003302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fe:	2301      	movs	r3, #1
 8003300:	e00f      	b.n	8003322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <SysTick_Config+0x40>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800330a:	210f      	movs	r1, #15
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	f7ff ff8e 	bl	8003230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <SysTick_Config+0x40>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <SysTick_Config+0x40>)
 800331c:	2207      	movs	r2, #7
 800331e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000e010 	.word	0xe000e010

08003330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff29 	bl	8003190 <__NVIC_SetPriorityGrouping>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003358:	f7ff ff3e 	bl	80031d8 <__NVIC_GetPriorityGrouping>
 800335c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f7ff ff8e 	bl	8003284 <NVIC_EncodePriority>
 8003368:	4602      	mov	r2, r0
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff5d 	bl	8003230 <__NVIC_SetPriority>
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff31 	bl	80031f4 <__NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffa2 	bl	80032ec <SysTick_Config>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033c0:	f7ff fb32 	bl	8002a28 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e099      	b.n	8003504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f0:	e00f      	b.n	8003412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033f2:	f7ff fb19 	bl	8002a28 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d908      	bls.n	8003412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2203      	movs	r2, #3
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e078      	b.n	8003504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e8      	bne.n	80033f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4b38      	ldr	r3, [pc, #224]	; (800350c <HAL_DMA_Init+0x158>)
 800342c:	4013      	ands	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800343e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b04      	cmp	r3, #4
 800346a:	d107      	bne.n	800347c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4313      	orrs	r3, r2
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0307 	bic.w	r3, r3, #7
 8003492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d117      	bne.n	80034d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9e9 	bl	8003890 <DMA_CheckFifoParam>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034d2:	2301      	movs	r3, #1
 80034d4:	e016      	b.n	8003504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9a0 	bl	8003824 <DMA_CalcBaseAndBitshift>
 80034e4:	4603      	mov	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	223f      	movs	r2, #63	; 0x3f
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	f010803f 	.word	0xf010803f

08003510 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800351c:	4b8e      	ldr	r3, [pc, #568]	; (8003758 <HAL_DMA_IRQHandler+0x248>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a8e      	ldr	r2, [pc, #568]	; (800375c <HAL_DMA_IRQHandler+0x24c>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0a9b      	lsrs	r3, r3, #10
 8003528:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	2208      	movs	r2, #8
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01a      	beq.n	800357c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	2208      	movs	r2, #8
 800356a:	409a      	lsls	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	2201      	movs	r2, #1
 80035a0:	409a      	lsls	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2204      	movs	r2, #4
 80035b8:	409a      	lsls	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2210      	movs	r2, #16
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d043      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03c      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2210      	movs	r2, #16
 800360c:	409a      	lsls	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d018      	beq.n	8003652 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d024      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e01f      	b.n	8003680 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
 8003650:	e016      	b.n	8003680 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0208 	bic.w	r2, r2, #8
 800366e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2220      	movs	r2, #32
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 808f 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8087 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	2220      	movs	r2, #32
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d136      	bne.n	8003728 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0216 	bic.w	r2, r2, #22
 80036c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_DMA_IRQHandler+0x1da>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0208 	bic.w	r2, r2, #8
 80036f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	223f      	movs	r2, #63	; 0x3f
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	2b00      	cmp	r3, #0
 800371c:	d07e      	beq.n	800381c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
        }
        return;
 8003726:	e079      	b.n	800381c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01d      	beq.n	8003772 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	2b00      	cmp	r3, #0
 800374a:	d031      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e02c      	b.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
 8003756:	bf00      	nop
 8003758:	20000008 	.word	0x20000008
 800375c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d023      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e01e      	b.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0210 	bic.w	r2, r2, #16
 800378e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d032      	beq.n	800381e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2205      	movs	r2, #5
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	3301      	adds	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d307      	bcc.n	80037f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f2      	bne.n	80037dc <HAL_DMA_IRQHandler+0x2cc>
 80037f6:	e000      	b.n	80037fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
 800381a:	e000      	b.n	800381e <HAL_DMA_IRQHandler+0x30e>
        return;
 800381c:	bf00      	nop
    }
  }
}
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	3b10      	subs	r3, #16
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <DMA_CalcBaseAndBitshift+0x64>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <DMA_CalcBaseAndBitshift+0x68>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d909      	bls.n	8003866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	1d1a      	adds	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	659a      	str	r2, [r3, #88]	; 0x58
 8003864:	e007      	b.n	8003876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	aaaaaaab 	.word	0xaaaaaaab
 800388c:	080076f0 	.word	0x080076f0

08003890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11f      	bne.n	80038ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d856      	bhi.n	800395e <DMA_CheckFifoParam+0xce>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <DMA_CheckFifoParam+0x28>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038db 	.word	0x080038db
 80038c0:	080038c9 	.word	0x080038c9
 80038c4:	0800395f 	.word	0x0800395f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d046      	beq.n	8003962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d8:	e043      	b.n	8003962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e2:	d140      	bne.n	8003966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e03d      	b.n	8003966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f2:	d121      	bne.n	8003938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d837      	bhi.n	800396a <DMA_CheckFifoParam+0xda>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <DMA_CheckFifoParam+0x70>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	08003917 	.word	0x08003917
 8003908:	08003911 	.word	0x08003911
 800390c:	08003929 	.word	0x08003929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e030      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d025      	beq.n	800396e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003926:	e022      	b.n	800396e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003930:	d11f      	bne.n	8003972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003936:	e01c      	b.n	8003972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d903      	bls.n	8003946 <DMA_CheckFifoParam+0xb6>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d003      	beq.n	800394c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003944:	e018      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
      break;
 800394a:	e015      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      break;
 800395c:	e00b      	b.n	8003976 <DMA_CheckFifoParam+0xe6>
      break;
 800395e:	bf00      	nop
 8003960:	e00a      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
 8003964:	e008      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 8003966:	bf00      	nop
 8003968:	e006      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;   
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 8003976:	bf00      	nop
    }
  } 
  
  return status; 
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e165      	b.n	8003c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f040 8154 	bne.w	8003c6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d005      	beq.n	80039da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d130      	bne.n	8003a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2203      	movs	r2, #3
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a10:	2201      	movs	r2, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 0201 	and.w	r2, r3, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d017      	beq.n	8003a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d123      	bne.n	8003acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	08da      	lsrs	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3208      	adds	r2, #8
 8003a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80ae 	beq.w	8003c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2a:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4f      	ldr	r2, [pc, #316]	; (8003c90 <HAL_GPIO_Init+0x308>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d025      	beq.n	8003ba2 <HAL_GPIO_Init+0x21a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4e      	ldr	r2, [pc, #312]	; (8003c94 <HAL_GPIO_Init+0x30c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <HAL_GPIO_Init+0x216>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4d      	ldr	r2, [pc, #308]	; (8003c98 <HAL_GPIO_Init+0x310>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_GPIO_Init+0x314>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x20e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_GPIO_Init+0x318>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x20a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4a      	ldr	r2, [pc, #296]	; (8003ca4 <HAL_GPIO_Init+0x31c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x206>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x202>
 8003b86:	2306      	movs	r3, #6
 8003b88:	e00c      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	e00a      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e008      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e004      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	f002 0203 	and.w	r2, r2, #3
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	4093      	lsls	r3, r2
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb4:	4935      	ldr	r1, [pc, #212]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	3302      	adds	r3, #2
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003be6:	4a31      	ldr	r2, [pc, #196]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bec:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c16:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	f67f ae96 	bls.w	80039a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	40020000 	.word	0x40020000
 8003c94:	40020400 	.word	0x40020400
 8003c98:	40020800 	.word	0x40020800
 8003c9c:	40020c00 	.word	0x40020c00
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40021400 	.word	0x40021400
 8003ca8:	40021800 	.word	0x40021800
 8003cac:	40013c00 	.word	0x40013c00

08003cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e001      	b.n	8003cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
 8003cec:	4613      	mov	r3, r2
 8003cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf0:	787b      	ldrb	r3, [r7, #1]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cfc:	e003      	b.n	8003d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	041a      	lsls	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	619a      	str	r2, [r3, #24]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e12b      	b.n	8003f7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe fc6e 	bl	800261c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	; 0x24
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d78:	f001 f8ce 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4a81      	ldr	r2, [pc, #516]	; (8003f88 <HAL_I2C_Init+0x274>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d807      	bhi.n	8003d98 <HAL_I2C_Init+0x84>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a80      	ldr	r2, [pc, #512]	; (8003f8c <HAL_I2C_Init+0x278>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf94      	ite	ls
 8003d90:	2301      	movls	r3, #1
 8003d92:	2300      	movhi	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e006      	b.n	8003da6 <HAL_I2C_Init+0x92>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a7d      	ldr	r2, [pc, #500]	; (8003f90 <HAL_I2C_Init+0x27c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bf94      	ite	ls
 8003da0:	2301      	movls	r3, #1
 8003da2:	2300      	movhi	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0e7      	b.n	8003f7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a78      	ldr	r2, [pc, #480]	; (8003f94 <HAL_I2C_Init+0x280>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0c9b      	lsrs	r3, r3, #18
 8003db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a6a      	ldr	r2, [pc, #424]	; (8003f88 <HAL_I2C_Init+0x274>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d802      	bhi.n	8003de8 <HAL_I2C_Init+0xd4>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3301      	adds	r3, #1
 8003de6:	e009      	b.n	8003dfc <HAL_I2C_Init+0xe8>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	4a69      	ldr	r2, [pc, #420]	; (8003f98 <HAL_I2C_Init+0x284>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	495c      	ldr	r1, [pc, #368]	; (8003f88 <HAL_I2C_Init+0x274>)
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	d819      	bhi.n	8003e50 <HAL_I2C_Init+0x13c>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1e59      	subs	r1, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e30:	400b      	ands	r3, r1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_I2C_Init+0x138>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1e59      	subs	r1, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e44:	3301      	adds	r3, #1
 8003e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4a:	e051      	b.n	8003ef0 <HAL_I2C_Init+0x1dc>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e04f      	b.n	8003ef0 <HAL_I2C_Init+0x1dc>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d111      	bne.n	8003e7c <HAL_I2C_Init+0x168>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e58      	subs	r0, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e012      	b.n	8003ea2 <HAL_I2C_Init+0x18e>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	0099      	lsls	r1, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Init+0x196>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e022      	b.n	8003ef0 <HAL_I2C_Init+0x1dc>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_I2C_Init+0x1bc>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1e58      	subs	r0, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	440b      	add	r3, r1
 8003ec0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ece:	e00f      	b.n	8003ef0 <HAL_I2C_Init+0x1dc>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e58      	subs	r0, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	0099      	lsls	r1, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	6809      	ldr	r1, [r1, #0]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6911      	ldr	r1, [r2, #16]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68d2      	ldr	r2, [r2, #12]
 8003f2a:	4311      	orrs	r1, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	000186a0 	.word	0x000186a0
 8003f8c:	001e847f 	.word	0x001e847f
 8003f90:	003d08ff 	.word	0x003d08ff
 8003f94:	431bde83 	.word	0x431bde83
 8003f98:	10624dd3 	.word	0x10624dd3

08003f9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	817b      	strh	r3, [r7, #10]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	813b      	strh	r3, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb6:	f7fe fd37 	bl	8002a28 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	f040 80d9 	bne.w	800417c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2319      	movs	r3, #25
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	496d      	ldr	r1, [pc, #436]	; (8004188 <HAL_I2C_Mem_Write+0x1ec>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fc7f 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0cc      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Mem_Write+0x56>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0c5      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d007      	beq.n	8004018 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2221      	movs	r2, #33	; 0x21
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a4d      	ldr	r2, [pc, #308]	; (800418c <HAL_I2C_Mem_Write+0x1f0>)
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800405a:	88f8      	ldrh	r0, [r7, #6]
 800405c:	893a      	ldrh	r2, [r7, #8]
 800405e:	8979      	ldrh	r1, [r7, #10]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4603      	mov	r3, r0
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fab6 	bl	80045dc <I2C_RequestMemoryWrite>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d052      	beq.n	800411c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e081      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fd00 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e06b      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d11b      	bne.n	800411c <HAL_I2C_Mem_Write+0x180>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d017      	beq.n	800411c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1aa      	bne.n	800407a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fcec 	bl	8004b06 <I2C_WaitOnBTFFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2b04      	cmp	r3, #4
 800413a:	d107      	bne.n	800414c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e016      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	00100002 	.word	0x00100002
 800418c:	ffff0000 	.word	0xffff0000

08004190 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041aa:	f7fe fc3d 	bl	8002a28 <HAL_GetTick>
 80041ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	f040 8208 	bne.w	80045ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2319      	movs	r3, #25
 80041c4:	2201      	movs	r2, #1
 80041c6:	497b      	ldr	r1, [pc, #492]	; (80043b4 <HAL_I2C_Mem_Read+0x224>)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fb85 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	e1fb      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x56>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e1f4      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d007      	beq.n	800420c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2222      	movs	r2, #34	; 0x22
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a5b      	ldr	r2, [pc, #364]	; (80043b8 <HAL_I2C_Mem_Read+0x228>)
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800424e:	88f8      	ldrh	r0, [r7, #6]
 8004250:	893a      	ldrh	r2, [r7, #8]
 8004252:	8979      	ldrh	r1, [r7, #10]
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fa52 	bl	8004708 <I2C_RequestMemoryRead>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1b0      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d113      	bne.n	800429e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e184      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d11b      	bne.n	80042de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e164      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d11b      	bne.n	800431e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	e144      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004334:	e138      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	2b03      	cmp	r3, #3
 800433c:	f200 80f1 	bhi.w	8004522 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b01      	cmp	r3, #1
 8004346:	d123      	bne.n	8004390 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fc1b 	bl	8004b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e139      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800438e:	e10b      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	d14e      	bne.n	8004436 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	2200      	movs	r2, #0
 80043a0:	4906      	ldr	r1, [pc, #24]	; (80043bc <HAL_I2C_Mem_Read+0x22c>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa98 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e10e      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
 80043b2:	bf00      	nop
 80043b4:	00100002 	.word	0x00100002
 80043b8:	ffff0000 	.word	0xffff0000
 80043bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004434:	e0b8      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2200      	movs	r2, #0
 800443e:	4966      	ldr	r1, [pc, #408]	; (80045d8 <HAL_I2C_Mem_Read+0x448>)
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa49 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0bf      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	2200      	movs	r2, #0
 800449a:	494f      	ldr	r1, [pc, #316]	; (80045d8 <HAL_I2C_Mem_Read+0x448>)
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fa1b 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e091      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004520:	e042      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fb2e 	bl	8004b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e04c      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d118      	bne.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f aec2 	bne.w	8004336 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3728      	adds	r7, #40	; 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	00010004 	.word	0x00010004

080045dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	4608      	mov	r0, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	461a      	mov	r2, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	817b      	strh	r3, [r7, #10]
 80045ee:	460b      	mov	r3, r1
 80045f0:	813b      	strh	r3, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004604:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2200      	movs	r2, #0
 800460e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f960 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00d      	beq.n	800463a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	d103      	bne.n	8004636 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e05f      	b.n	80046fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004648:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	492d      	ldr	r1, [pc, #180]	; (8004704 <I2C_RequestMemoryWrite+0x128>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f998 	bl	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e04c      	b.n	80046fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004678:	6a39      	ldr	r1, [r7, #32]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fa02 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b04      	cmp	r3, #4
 800468c:	d107      	bne.n	800469e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e02b      	b.n	80046fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	611a      	str	r2, [r3, #16]
 80046b2:	e021      	b.n	80046f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	6a39      	ldr	r1, [r7, #32]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f9dc 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d107      	bne.n	80046ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e005      	b.n	80046fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	00010002 	.word	0x00010002

08004708 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	461a      	mov	r2, r3
 8004716:	4603      	mov	r3, r0
 8004718:	817b      	strh	r3, [r7, #10]
 800471a:	460b      	mov	r3, r1
 800471c:	813b      	strh	r3, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004740:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2200      	movs	r2, #0
 800474a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f8c2 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004768:	d103      	bne.n	8004772 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0aa      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004784:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	4952      	ldr	r1, [pc, #328]	; (80048d4 <I2C_RequestMemoryRead+0x1cc>)
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f8fa 	bl	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e097      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b4:	6a39      	ldr	r1, [r7, #32]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f964 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d107      	bne.n	80047da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e076      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e021      	b.n	8004834 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047f0:	893b      	ldrh	r3, [r7, #8]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	6a39      	ldr	r1, [r7, #32]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f93e 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b04      	cmp	r3, #4
 8004814:	d107      	bne.n	8004826 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004824:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e050      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	6a39      	ldr	r1, [r7, #32]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f923 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b04      	cmp	r3, #4
 800484a:	d107      	bne.n	800485c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e035      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800486e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	2200      	movs	r2, #0
 8004878:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f82b 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004896:	d103      	bne.n	80048a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e013      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048a4:	897b      	ldrh	r3, [r7, #10]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	4906      	ldr	r1, [pc, #24]	; (80048d4 <I2C_RequestMemoryRead+0x1cc>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f863 	bl	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00010002 	.word	0x00010002

080048d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e8:	e025      	b.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d021      	beq.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fe f899 	bl	8002a28 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d116      	bne.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e023      	b.n	800497e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10d      	bne.n	800495c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	43da      	mvns	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4013      	ands	r3, r2
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	e00c      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	429a      	cmp	r2, r3
 800497a:	d0b6      	beq.n	80048ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004994:	e051      	b.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d123      	bne.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e046      	b.n	8004a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d021      	beq.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fe f817 	bl	8002a28 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d116      	bne.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e020      	b.n	8004a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10c      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e00b      	b.n	8004a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	43da      	mvns	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d18d      	bne.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a90:	e02d      	b.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f8ce 	bl	8004c34 <I2C_IsAcknowledgeFailed>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e02d      	b.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d021      	beq.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fd ffbd 	bl	8002a28 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d116      	bne.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e007      	b.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d1ca      	bne.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b12:	e02d      	b.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f88d 	bl	8004c34 <I2C_IsAcknowledgeFailed>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e02d      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d021      	beq.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2c:	f7fd ff7c 	bl	8002a28 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d116      	bne.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e007      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d1ca      	bne.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b94:	e042      	b.n	8004c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d119      	bne.n	8004bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0210 	mvn.w	r2, #16
 8004bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e029      	b.n	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fd ff26 	bl	8002a28 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d1b5      	bne.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4a:	d11b      	bne.n	8004c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0204 	orr.w	r2, r3, #4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6413      	str	r3, [r2, #64]	; 0x40
 8004cae:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_PWREx_EnableOverDrive+0x94>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cc0:	f7fd feb2 	bl	8002a28 <HAL_GetTick>
 8004cc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cc6:	e009      	b.n	8004cdc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cc8:	f7fd feae 	bl	8002a28 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd6:	d901      	bls.n	8004cdc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e01f      	b.n	8004d1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d1ee      	bne.n	8004cc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cf0:	f7fd fe9a 	bl	8002a28 <HAL_GetTick>
 8004cf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cf6:	e009      	b.n	8004d0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cf8:	f7fd fe96 	bl	8002a28 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d06:	d901      	bls.n	8004d0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e007      	b.n	8004d1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d18:	d1ee      	bne.n	8004cf8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	420e0040 	.word	0x420e0040
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	420e0044 	.word	0x420e0044

08004d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0cc      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b68      	ldr	r3, [pc, #416]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90c      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b65      	ldr	r3, [pc, #404]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b63      	ldr	r3, [pc, #396]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0b8      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d88:	4b59      	ldr	r3, [pc, #356]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a58      	ldr	r2, [pc, #352]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da0:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a52      	ldr	r2, [pc, #328]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dac:	4b50      	ldr	r3, [pc, #320]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	494d      	ldr	r1, [pc, #308]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d044      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e067      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4934      	ldr	r1, [pc, #208]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fd fe00 	bl	8002a28 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fd fdfc 	bl	8002a28 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e04f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d20c      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e032      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4916      	ldr	r1, [pc, #88]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eba:	f000 f841 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	490a      	ldr	r1, [pc, #40]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	5ccb      	ldrb	r3, [r1, r3]
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fd fd60 	bl	80029a0 <HAL_InitTick>

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023c00 	.word	0x40023c00
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	080076d8 	.word	0x080076d8
 8004ef8:	20000008 	.word	0x20000008
 8004efc:	2000000c 	.word	0x2000000c

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000008 	.word	0x20000008

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	080076e8 	.word	0x080076e8

08004f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f44:	b0ae      	sub	sp, #184	; 0xb8
 8004f46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f66:	4bcb      	ldr	r3, [pc, #812]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	f200 8206 	bhi.w	8005380 <HAL_RCC_GetSysClockFreq+0x440>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	08005381 	.word	0x08005381
 8004f84:	08005381 	.word	0x08005381
 8004f88:	08005381 	.word	0x08005381
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08005381 	.word	0x08005381
 8004f94:	08005381 	.word	0x08005381
 8004f98:	08005381 	.word	0x08005381
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08005381 	.word	0x08005381
 8004fa4:	08005381 	.word	0x08005381
 8004fa8:	08005381 	.word	0x08005381
 8004fac:	080051b1 	.word	0x080051b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb0:	4bb9      	ldr	r3, [pc, #740]	; (8005298 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004fb6:	e1e7      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fb8:	4bb8      	ldr	r3, [pc, #736]	; (800529c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fbe:	e1e3      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc0:	4bb4      	ldr	r3, [pc, #720]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fcc:	4bb1      	ldr	r3, [pc, #708]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d071      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd8:	4bae      	ldr	r3, [pc, #696]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	099b      	lsrs	r3, r3, #6
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fe4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	0159      	lsls	r1, r3, #5
 800500c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005010:	0150      	lsls	r0, r2, #5
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4621      	mov	r1, r4
 8005018:	1a51      	subs	r1, r2, r1
 800501a:	6439      	str	r1, [r7, #64]	; 0x40
 800501c:	4629      	mov	r1, r5
 800501e:	eb63 0301 	sbc.w	r3, r3, r1
 8005022:	647b      	str	r3, [r7, #68]	; 0x44
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005030:	4649      	mov	r1, r9
 8005032:	018b      	lsls	r3, r1, #6
 8005034:	4641      	mov	r1, r8
 8005036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800503a:	4641      	mov	r1, r8
 800503c:	018a      	lsls	r2, r1, #6
 800503e:	4641      	mov	r1, r8
 8005040:	1a51      	subs	r1, r2, r1
 8005042:	63b9      	str	r1, [r7, #56]	; 0x38
 8005044:	4649      	mov	r1, r9
 8005046:	eb63 0301 	sbc.w	r3, r3, r1
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005058:	4649      	mov	r1, r9
 800505a:	00cb      	lsls	r3, r1, #3
 800505c:	4641      	mov	r1, r8
 800505e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005062:	4641      	mov	r1, r8
 8005064:	00ca      	lsls	r2, r1, #3
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	4603      	mov	r3, r0
 800506c:	4622      	mov	r2, r4
 800506e:	189b      	adds	r3, r3, r2
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
 8005072:	462b      	mov	r3, r5
 8005074:	460a      	mov	r2, r1
 8005076:	eb42 0303 	adc.w	r3, r2, r3
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005088:	4629      	mov	r1, r5
 800508a:	024b      	lsls	r3, r1, #9
 800508c:	4621      	mov	r1, r4
 800508e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005092:	4621      	mov	r1, r4
 8005094:	024a      	lsls	r2, r1, #9
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80050ac:	f7fb fdb0 	bl	8000c10 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ba:	e067      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050bc:	4b75      	ldr	r3, [pc, #468]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80050cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050d6:	2300      	movs	r3, #0
 80050d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80050de:	4622      	mov	r2, r4
 80050e0:	462b      	mov	r3, r5
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f04f 0100 	mov.w	r1, #0
 80050ea:	0159      	lsls	r1, r3, #5
 80050ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f0:	0150      	lsls	r0, r2, #5
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4621      	mov	r1, r4
 80050f8:	1a51      	subs	r1, r2, r1
 80050fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80050fc:	4629      	mov	r1, r5
 80050fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005110:	4649      	mov	r1, r9
 8005112:	018b      	lsls	r3, r1, #6
 8005114:	4641      	mov	r1, r8
 8005116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511a:	4641      	mov	r1, r8
 800511c:	018a      	lsls	r2, r1, #6
 800511e:	4641      	mov	r1, r8
 8005120:	ebb2 0a01 	subs.w	sl, r2, r1
 8005124:	4649      	mov	r1, r9
 8005126:	eb63 0b01 	sbc.w	fp, r3, r1
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005136:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800513a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513e:	4692      	mov	sl, r2
 8005140:	469b      	mov	fp, r3
 8005142:	4623      	mov	r3, r4
 8005144:	eb1a 0303 	adds.w	r3, sl, r3
 8005148:	623b      	str	r3, [r7, #32]
 800514a:	462b      	mov	r3, r5
 800514c:	eb4b 0303 	adc.w	r3, fp, r3
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800515e:	4629      	mov	r1, r5
 8005160:	028b      	lsls	r3, r1, #10
 8005162:	4621      	mov	r1, r4
 8005164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005168:	4621      	mov	r1, r4
 800516a:	028a      	lsls	r2, r1, #10
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005174:	2200      	movs	r2, #0
 8005176:	673b      	str	r3, [r7, #112]	; 0x70
 8005178:	677a      	str	r2, [r7, #116]	; 0x74
 800517a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800517e:	f7fb fd47 	bl	8000c10 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4613      	mov	r3, r2
 8005188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800518c:	4b41      	ldr	r3, [pc, #260]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	3301      	adds	r3, #1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800519e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051ae:	e0eb      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4b38      	ldr	r3, [pc, #224]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051bc:	4b35      	ldr	r3, [pc, #212]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d06b      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c8:	4b32      	ldr	r3, [pc, #200]	; (8005294 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	099b      	lsrs	r3, r3, #6
 80051ce:	2200      	movs	r2, #0
 80051d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	663b      	str	r3, [r7, #96]	; 0x60
 80051dc:	2300      	movs	r3, #0
 80051de:	667b      	str	r3, [r7, #100]	; 0x64
 80051e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80051e4:	4622      	mov	r2, r4
 80051e6:	462b      	mov	r3, r5
 80051e8:	f04f 0000 	mov.w	r0, #0
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	0159      	lsls	r1, r3, #5
 80051f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f6:	0150      	lsls	r0, r2, #5
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4621      	mov	r1, r4
 80051fe:	1a51      	subs	r1, r2, r1
 8005200:	61b9      	str	r1, [r7, #24]
 8005202:	4629      	mov	r1, r5
 8005204:	eb63 0301 	sbc.w	r3, r3, r1
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005216:	4659      	mov	r1, fp
 8005218:	018b      	lsls	r3, r1, #6
 800521a:	4651      	mov	r1, sl
 800521c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005220:	4651      	mov	r1, sl
 8005222:	018a      	lsls	r2, r1, #6
 8005224:	4651      	mov	r1, sl
 8005226:	ebb2 0801 	subs.w	r8, r2, r1
 800522a:	4659      	mov	r1, fp
 800522c:	eb63 0901 	sbc.w	r9, r3, r1
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800523c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005240:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005244:	4690      	mov	r8, r2
 8005246:	4699      	mov	r9, r3
 8005248:	4623      	mov	r3, r4
 800524a:	eb18 0303 	adds.w	r3, r8, r3
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	462b      	mov	r3, r5
 8005252:	eb49 0303 	adc.w	r3, r9, r3
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005264:	4629      	mov	r1, r5
 8005266:	024b      	lsls	r3, r1, #9
 8005268:	4621      	mov	r1, r4
 800526a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800526e:	4621      	mov	r1, r4
 8005270:	024a      	lsls	r2, r1, #9
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800527a:	2200      	movs	r2, #0
 800527c:	65bb      	str	r3, [r7, #88]	; 0x58
 800527e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005280:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005284:	f7fb fcc4 	bl	8000c10 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005292:	e065      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0x420>
 8005294:	40023800 	.word	0x40023800
 8005298:	00f42400 	.word	0x00f42400
 800529c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a0:	4b3d      	ldr	r3, [pc, #244]	; (8005398 <HAL_RCC_GetSysClockFreq+0x458>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	099b      	lsrs	r3, r3, #6
 80052a6:	2200      	movs	r2, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	4611      	mov	r1, r2
 80052ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052b0:	653b      	str	r3, [r7, #80]	; 0x50
 80052b2:	2300      	movs	r3, #0
 80052b4:	657b      	str	r3, [r7, #84]	; 0x54
 80052b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	f04f 0000 	mov.w	r0, #0
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	0159      	lsls	r1, r3, #5
 80052c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052cc:	0150      	lsls	r0, r2, #5
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4641      	mov	r1, r8
 80052d4:	1a51      	subs	r1, r2, r1
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	4649      	mov	r1, r9
 80052da:	eb63 0301 	sbc.w	r3, r3, r1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80052ec:	4659      	mov	r1, fp
 80052ee:	018b      	lsls	r3, r1, #6
 80052f0:	4651      	mov	r1, sl
 80052f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052f6:	4651      	mov	r1, sl
 80052f8:	018a      	lsls	r2, r1, #6
 80052fa:	4651      	mov	r1, sl
 80052fc:	1a54      	subs	r4, r2, r1
 80052fe:	4659      	mov	r1, fp
 8005300:	eb63 0501 	sbc.w	r5, r3, r1
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	00eb      	lsls	r3, r5, #3
 800530e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005312:	00e2      	lsls	r2, r4, #3
 8005314:	4614      	mov	r4, r2
 8005316:	461d      	mov	r5, r3
 8005318:	4643      	mov	r3, r8
 800531a:	18e3      	adds	r3, r4, r3
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	464b      	mov	r3, r9
 8005320:	eb45 0303 	adc.w	r3, r5, r3
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005332:	4629      	mov	r1, r5
 8005334:	028b      	lsls	r3, r1, #10
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800533c:	4621      	mov	r1, r4
 800533e:	028a      	lsls	r2, r1, #10
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005348:	2200      	movs	r2, #0
 800534a:	64bb      	str	r3, [r7, #72]	; 0x48
 800534c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800534e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005352:	f7fb fc5d 	bl	8000c10 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4613      	mov	r3, r2
 800535c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <HAL_RCC_GetSysClockFreq+0x458>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	0f1b      	lsrs	r3, r3, #28
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800536e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800537e:	e003      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800538c:	4618      	mov	r0, r3
 800538e:	37b8      	adds	r7, #184	; 0xb8
 8005390:	46bd      	mov	sp, r7
 8005392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	00f42400 	.word	0x00f42400

080053a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e28d      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8083 	beq.w	80054c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053c0:	4b94      	ldr	r3, [pc, #592]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 030c 	and.w	r3, r3, #12
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d019      	beq.n	8005400 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053cc:	4b91      	ldr	r3, [pc, #580]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d106      	bne.n	80053e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053d8:	4b8e      	ldr	r3, [pc, #568]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e4:	d00c      	beq.n	8005400 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b8b      	ldr	r3, [pc, #556]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d112      	bne.n	8005418 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4b88      	ldr	r3, [pc, #544]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d10b      	bne.n	8005418 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	4b84      	ldr	r3, [pc, #528]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05b      	beq.n	80054c4 <HAL_RCC_OscConfig+0x124>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d157      	bne.n	80054c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e25a      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x90>
 8005422:	4b7c      	ldr	r3, [pc, #496]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7b      	ldr	r2, [pc, #492]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xcc>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0xb4>
 800543a:	4b76      	ldr	r3, [pc, #472]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a75      	ldr	r2, [pc, #468]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b73      	ldr	r3, [pc, #460]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a72      	ldr	r2, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xcc>
 8005454:	4b6f      	ldr	r3, [pc, #444]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6e      	ldr	r2, [pc, #440]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b6c      	ldr	r3, [pc, #432]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6b      	ldr	r2, [pc, #428]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fd fad8 	bl	8002a28 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7fd fad4 	bl	8002a28 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e21f      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b61      	ldr	r3, [pc, #388]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xdc>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fd fac4 	bl	8002a28 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fd fac0 	bl	8002a28 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e20b      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	4b57      	ldr	r3, [pc, #348]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x104>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d06f      	beq.n	80055b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054d2:	4b50      	ldr	r3, [pc, #320]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d017      	beq.n	800550e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054de:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d105      	bne.n	80054f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ea:	4b4a      	ldr	r3, [pc, #296]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f6:	4b47      	ldr	r3, [pc, #284]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d11c      	bne.n	800553c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005502:	4b44      	ldr	r3, [pc, #272]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d116      	bne.n	800553c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550e:	4b41      	ldr	r3, [pc, #260]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_RCC_OscConfig+0x186>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d001      	beq.n	8005526 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e1d3      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005526:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4937      	ldr	r1, [pc, #220]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553a:	e03a      	b.n	80055b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005544:	4b34      	ldr	r3, [pc, #208]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7fd fa6d 	bl	8002a28 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005552:	f7fd fa69 	bl	8002a28 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e1b4      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005564:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005570:	4b28      	ldr	r3, [pc, #160]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4925      	ldr	r1, [pc, #148]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]
 8005584:	e015      	b.n	80055b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fd fa4c 	bl	8002a28 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005594:	f7fd fa48 	bl	8002a28 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e193      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a6:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d036      	beq.n	800562c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055cc:	f7fd fa2c 	bl	8002a28 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d4:	f7fd fa28 	bl	8002a28 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e173      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80055e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x234>
 80055f2:	e01b      	b.n	800562c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x27c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fa:	f7fd fa15 	bl	8002a28 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005600:	e00e      	b.n	8005620 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005602:	f7fd fa11 	bl	8002a28 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d907      	bls.n	8005620 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e15c      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
 8005614:	40023800 	.word	0x40023800
 8005618:	42470000 	.word	0x42470000
 800561c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005620:	4b8a      	ldr	r3, [pc, #552]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ea      	bne.n	8005602 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8097 	beq.w	8005768 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563e:	4b83      	ldr	r3, [pc, #524]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	4b7f      	ldr	r3, [pc, #508]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	4a7e      	ldr	r2, [pc, #504]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005658:	6413      	str	r3, [r2, #64]	; 0x40
 800565a:	4b7c      	ldr	r3, [pc, #496]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566a:	4b79      	ldr	r3, [pc, #484]	; (8005850 <HAL_RCC_OscConfig+0x4b0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d118      	bne.n	80056a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005676:	4b76      	ldr	r3, [pc, #472]	; (8005850 <HAL_RCC_OscConfig+0x4b0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a75      	ldr	r2, [pc, #468]	; (8005850 <HAL_RCC_OscConfig+0x4b0>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005682:	f7fd f9d1 	bl	8002a28 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568a:	f7fd f9cd 	bl	8002a28 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e118      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	4b6c      	ldr	r3, [pc, #432]	; (8005850 <HAL_RCC_OscConfig+0x4b0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d106      	bne.n	80056be <HAL_RCC_OscConfig+0x31e>
 80056b0:	4b66      	ldr	r3, [pc, #408]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a65      	ldr	r2, [pc, #404]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
 80056bc:	e01c      	b.n	80056f8 <HAL_RCC_OscConfig+0x358>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x340>
 80056c6:	4b61      	ldr	r3, [pc, #388]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a60      	ldr	r2, [pc, #384]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056cc:	f043 0304 	orr.w	r3, r3, #4
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
 80056d2:	4b5e      	ldr	r3, [pc, #376]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	4a5d      	ldr	r2, [pc, #372]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6713      	str	r3, [r2, #112]	; 0x70
 80056de:	e00b      	b.n	80056f8 <HAL_RCC_OscConfig+0x358>
 80056e0:	4b5a      	ldr	r3, [pc, #360]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a59      	ldr	r2, [pc, #356]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	4b57      	ldr	r3, [pc, #348]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a56      	ldr	r2, [pc, #344]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80056f2:	f023 0304 	bic.w	r3, r3, #4
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fd f992 	bl	8002a28 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fd f98e 	bl	8002a28 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	; 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0d7      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571e:	4b4b      	ldr	r3, [pc, #300]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0ee      	beq.n	8005708 <HAL_RCC_OscConfig+0x368>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fd f97c 	bl	8002a28 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fd f978 	bl	8002a28 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0c1      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574a:	4b40      	ldr	r3, [pc, #256]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ee      	bne.n	8005734 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575c:	4b3b      	ldr	r3, [pc, #236]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	4a3a      	ldr	r2, [pc, #232]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80ad 	beq.w	80058cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005772:	4b36      	ldr	r3, [pc, #216]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	2b08      	cmp	r3, #8
 800577c:	d060      	beq.n	8005840 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d145      	bne.n	8005812 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b33      	ldr	r3, [pc, #204]	; (8005854 <HAL_RCC_OscConfig+0x4b4>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fd f94c 	bl	8002a28 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005794:	f7fd f948 	bl	8002a28 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e093      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	4b29      	ldr	r3, [pc, #164]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f0      	bne.n	8005794 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	019b      	lsls	r3, r3, #6
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	3b01      	subs	r3, #1
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	071b      	lsls	r3, r3, #28
 80057de:	491b      	ldr	r1, [pc, #108]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e4:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x4b4>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fd f91d 	bl	8002a28 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fd f919 	bl	8002a28 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e064      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x452>
 8005810:	e05c      	b.n	80058cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_RCC_OscConfig+0x4b4>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fd f906 	bl	8002a28 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fd f902 	bl	8002a28 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e04d      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_OscConfig+0x4ac>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x480>
 800583e:	e045      	b.n	80058cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e040      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
 800584c:	40023800 	.word	0x40023800
 8005850:	40007000 	.word	0x40007000
 8005854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005858:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <HAL_RCC_OscConfig+0x538>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d030      	beq.n	80058c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d129      	bne.n	80058c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d122      	bne.n	80058c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800588e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005890:	4293      	cmp	r3, r2
 8005892:	d119      	bne.n	80058c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	3b01      	subs	r3, #1
 80058a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d10f      	bne.n	80058c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800

080058dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e07b      	b.n	80059e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fe:	d009      	beq.n	8005914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	61da      	str	r2, [r3, #28]
 8005906:	e005      	b.n	8005914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc ff12 	bl	8002758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	ea42 0103 	orr.w	r1, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f003 0104 	and.w	r1, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	f003 0210 	and.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af02      	add	r7, sp, #8
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a0a:	d112      	bne.n	8005a32 <HAL_SPI_Receive+0x44>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10e      	bne.n	8005a32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2204      	movs	r2, #4
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f8f1 	bl	8005c10 <HAL_SPI_TransmitReceive>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	e0ea      	b.n	8005c08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_SPI_Receive+0x52>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e0e3      	b.n	8005c08 <HAL_SPI_Receive+0x21a>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a48:	f7fc ffee 	bl	8002a28 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a5e:	e0ca      	b.n	8005bf6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Receive+0x7e>
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a70:	e0c1      	b.n	8005bf6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2204      	movs	r2, #4
 8005a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	d10f      	bne.n	8005ada <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d007      	beq.n	8005af8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d162      	bne.n	8005bc6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b00:	e02e      	b.n	8005b60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d115      	bne.n	8005b3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f103 020c 	add.w	r2, r3, #12
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b3a:	e011      	b.n	8005b60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b3c:	f7fc ff74 	bl	8002a28 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d803      	bhi.n	8005b54 <HAL_SPI_Receive+0x166>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_Receive+0x16c>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b5e:	e04a      	b.n	8005bf6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1cb      	bne.n	8005b02 <HAL_SPI_Receive+0x114>
 8005b6a:	e031      	b.n	8005bd0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d113      	bne.n	8005ba2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	b292      	uxth	r2, r2
 8005b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba0:	e011      	b.n	8005bc6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba2:	f7fc ff41 	bl	8002a28 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d803      	bhi.n	8005bba <HAL_SPI_Receive+0x1cc>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d102      	bne.n	8005bc0 <HAL_SPI_Receive+0x1d2>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bc4:	e017      	b.n	8005bf6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1cd      	bne.n	8005b6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa45 	bl	8006064 <SPI_EndRxTransaction>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
 8005bf2:	e000      	b.n	8005bf6 <HAL_SPI_Receive+0x208>
  }

error :
 8005bf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x26>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e18a      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x33c>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c3e:	f7fc fef3 	bl	8002a28 <HAL_GetTick>
 8005c42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d00f      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x70>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d107      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x68>
 8005c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d003      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c7e:	e15b      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x82>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x82>
 8005c8c:	887b      	ldrh	r3, [r7, #2]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c98:	e14e      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d003      	beq.n	8005cae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2205      	movs	r2, #5
 8005caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	887a      	ldrh	r2, [r7, #2]
 8005cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	887a      	ldrh	r2, [r7, #2]
 8005cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	887a      	ldrh	r2, [r7, #2]
 8005cd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d007      	beq.n	8005d02 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0a:	d178      	bne.n	8005dfe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_SPI_TransmitReceive+0x10a>
 8005d14:	8b7b      	ldrh	r3, [r7, #26]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d166      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d3e:	e053      	b.n	8005de8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d11b      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x176>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d016      	beq.n	8005d86 <HAL_SPI_TransmitReceive+0x176>
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d113      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	881a      	ldrh	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	1c9a      	adds	r2, r3, #2
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d119      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x1b8>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d014      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	b292      	uxth	r2, r2
 8005daa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dc8:	f7fc fe2e 	bl	8002a28 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d807      	bhi.n	8005de8 <HAL_SPI_TransmitReceive+0x1d8>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d003      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005de6:	e0a7      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1a6      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x130>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1a1      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x130>
 8005dfc:	e07c      	b.n	8005ef8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x1fc>
 8005e06:	8b7b      	ldrh	r3, [r7, #26]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d16b      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e32:	e057      	b.n	8005ee4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d11c      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x26c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x26c>
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d114      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d119      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x2ae>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d014      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ebe:	f7fc fdb3 	bl	8002a28 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d803      	bhi.n	8005ed6 <HAL_SPI_TransmitReceive+0x2c6>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d102      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x2cc>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ee2:	e029      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1a2      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x224>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d19d      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f917 	bl	8006130 <SPI_EndRxTxTransaction>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d006      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f14:	e010      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	e000      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3730      	adds	r7, #48	; 0x30
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f64:	f7fc fd60 	bl	8002a28 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	4413      	add	r3, r2
 8005f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f74:	f7fc fd58 	bl	8002a28 <HAL_GetTick>
 8005f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	015b      	lsls	r3, r3, #5
 8005f80:	0d1b      	lsrs	r3, r3, #20
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f8a:	e054      	b.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d050      	beq.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f94:	f7fc fd48 	bl	8002a28 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d902      	bls.n	8005faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d13d      	bne.n	8006026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc2:	d111      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fcc:	d004      	beq.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd6:	d107      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff0:	d10f      	bne.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e017      	b.n	8006056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3b01      	subs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	429a      	cmp	r2, r3
 8006052:	d19b      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000008 	.word	0x20000008

08006064 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006078:	d111      	bne.n	800609e <SPI_EndRxTransaction+0x3a>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	d004      	beq.n	800608e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608c:	d107      	bne.n	800609e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a6:	d12a      	bne.n	80060fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b0:	d012      	beq.n	80060d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff49 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d02d      	beq.n	8006124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e026      	b.n	8006126 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	2101      	movs	r1, #1
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff36 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01a      	beq.n	8006124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e013      	b.n	8006126 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	2101      	movs	r1, #1
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ff23 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e000      	b.n	8006126 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <SPI_EndRxTxTransaction+0x7c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <SPI_EndRxTxTransaction+0x80>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0d5b      	lsrs	r3, r3, #21
 8006148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615a:	d112      	bne.n	8006182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fef4 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00f      	b.n	80061a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	3b01      	subs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d0f2      	beq.n	8006182 <SPI_EndRxTxTransaction+0x52>
 800619c:	e000      	b.n	80061a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800619e:	bf00      	nop
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000008 	.word	0x20000008
 80061b0:	165e9f81 	.word	0x165e9f81

080061b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e041      	b.n	800624a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc fb24 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 f95e 	bl	80064b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d001      	beq.n	800626c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e046      	b.n	80062fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_TIM_Base_Start+0xb4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d022      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d01d      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_TIM_Base_Start+0xb8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_TIM_Base_Start+0xbc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIM_Base_Start+0xc0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIM_Base_Start+0xc4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_TIM_Base_Start+0xc8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_TIM_Base_Start+0x70>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_Base_Start+0xcc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d111      	bne.n	80062e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d010      	beq.n	80062f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	e007      	b.n	80062f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIM_ConfigClockSource+0x1c>
 800633c:	2302      	movs	r3, #2
 800633e:	e0b4      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x186>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800635e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006378:	d03e      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0xd4>
 800637a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637e:	f200 8087 	bhi.w	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006386:	f000 8086 	beq.w	8006496 <HAL_TIM_ConfigClockSource+0x172>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d87f      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b70      	cmp	r3, #112	; 0x70
 8006392:	d01a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0xa6>
 8006394:	2b70      	cmp	r3, #112	; 0x70
 8006396:	d87b      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b60      	cmp	r3, #96	; 0x60
 800639a:	d050      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x11a>
 800639c:	2b60      	cmp	r3, #96	; 0x60
 800639e:	d877      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b50      	cmp	r3, #80	; 0x50
 80063a2:	d03c      	beq.n	800641e <HAL_TIM_ConfigClockSource+0xfa>
 80063a4:	2b50      	cmp	r3, #80	; 0x50
 80063a6:	d873      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d058      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x13a>
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d86f      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d064      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	2b30      	cmp	r3, #48	; 0x30
 80063b6:	d86b      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d060      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d867      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d05c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d05a      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063c8:	e062      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6899      	ldr	r1, [r3, #8]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f000 f985 	bl	80066e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	609a      	str	r2, [r3, #8]
      break;
 80063f6:	e04f      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6899      	ldr	r1, [r3, #8]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f000 f96e 	bl	80066e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800641a:	609a      	str	r2, [r3, #8]
      break;
 800641c:	e03c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 f8e2 	bl	80065f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2150      	movs	r1, #80	; 0x50
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f93b 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 800643c:	e02c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 f901 	bl	8006652 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2160      	movs	r1, #96	; 0x60
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f92b 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 800645c:	e01c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 f8c2 	bl	80065f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2140      	movs	r1, #64	; 0x40
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f91b 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 800647c:	e00c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f000 f912 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 800648e:	e003      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	e000      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a40      	ldr	r2, [pc, #256]	; (80065c8 <TIM_Base_SetConfig+0x114>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d00f      	beq.n	80064f4 <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a3d      	ldr	r2, [pc, #244]	; (80065cc <TIM_Base_SetConfig+0x118>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00b      	beq.n	80064f4 <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a3c      	ldr	r2, [pc, #240]	; (80065d0 <TIM_Base_SetConfig+0x11c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d007      	beq.n	80064f4 <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3b      	ldr	r2, [pc, #236]	; (80065d4 <TIM_Base_SetConfig+0x120>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3a      	ldr	r2, [pc, #232]	; (80065d8 <TIM_Base_SetConfig+0x124>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d108      	bne.n	8006506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <TIM_Base_SetConfig+0x114>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d02b      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006514:	d027      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2c      	ldr	r2, [pc, #176]	; (80065cc <TIM_Base_SetConfig+0x118>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d023      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <TIM_Base_SetConfig+0x11c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01f      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2a      	ldr	r2, [pc, #168]	; (80065d4 <TIM_Base_SetConfig+0x120>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01b      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a29      	ldr	r2, [pc, #164]	; (80065d8 <TIM_Base_SetConfig+0x124>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d017      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a28      	ldr	r2, [pc, #160]	; (80065dc <TIM_Base_SetConfig+0x128>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <TIM_Base_SetConfig+0x12c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <TIM_Base_SetConfig+0x130>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <TIM_Base_SetConfig+0x134>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a24      	ldr	r2, [pc, #144]	; (80065ec <TIM_Base_SetConfig+0x138>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <TIM_Base_SetConfig+0x13c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <TIM_Base_SetConfig+0x114>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0xf8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a0c      	ldr	r2, [pc, #48]	; (80065d8 <TIM_Base_SetConfig+0x124>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d103      	bne.n	80065b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	615a      	str	r2, [r3, #20]
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40010400 	.word	0x40010400
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800
 80065e8:	40001800 	.word	0x40001800
 80065ec:	40001c00 	.word	0x40001c00
 80065f0:	40002000 	.word	0x40002000

080065f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 030a 	bic.w	r3, r3, #10
 8006630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0210 	bic.w	r2, r3, #16
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800667c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800668e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f043 0307 	orr.w	r3, r3, #7
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800673c:	2302      	movs	r3, #2
 800673e:	e05a      	b.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a21      	ldr	r2, [pc, #132]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d022      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678c:	d01d      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d018      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d013      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00e      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d009      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d004      	beq.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d10c      	bne.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40010000 	.word	0x40010000
 8006808:	40000400 	.word	0x40000400
 800680c:	40000800 	.word	0x40000800
 8006810:	40000c00 	.word	0x40000c00
 8006814:	40010400 	.word	0x40010400
 8006818:	40014000 	.word	0x40014000
 800681c:	40001800 	.word	0x40001800

08006820 <__errno>:
 8006820:	4b01      	ldr	r3, [pc, #4]	; (8006828 <__errno+0x8>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000014 	.word	0x20000014

0800682c <__libc_init_array>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4d0d      	ldr	r5, [pc, #52]	; (8006864 <__libc_init_array+0x38>)
 8006830:	4c0d      	ldr	r4, [pc, #52]	; (8006868 <__libc_init_array+0x3c>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	2600      	movs	r6, #0
 8006838:	42a6      	cmp	r6, r4
 800683a:	d109      	bne.n	8006850 <__libc_init_array+0x24>
 800683c:	4d0b      	ldr	r5, [pc, #44]	; (800686c <__libc_init_array+0x40>)
 800683e:	4c0c      	ldr	r4, [pc, #48]	; (8006870 <__libc_init_array+0x44>)
 8006840:	f000 ff3c 	bl	80076bc <_init>
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	2600      	movs	r6, #0
 800684a:	42a6      	cmp	r6, r4
 800684c:	d105      	bne.n	800685a <__libc_init_array+0x2e>
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f855 3b04 	ldr.w	r3, [r5], #4
 8006854:	4798      	blx	r3
 8006856:	3601      	adds	r6, #1
 8006858:	e7ee      	b.n	8006838 <__libc_init_array+0xc>
 800685a:	f855 3b04 	ldr.w	r3, [r5], #4
 800685e:	4798      	blx	r3
 8006860:	3601      	adds	r6, #1
 8006862:	e7f2      	b.n	800684a <__libc_init_array+0x1e>
 8006864:	08007730 	.word	0x08007730
 8006868:	08007730 	.word	0x08007730
 800686c:	08007730 	.word	0x08007730
 8006870:	08007734 	.word	0x08007734

08006874 <memset>:
 8006874:	4402      	add	r2, r0
 8006876:	4603      	mov	r3, r0
 8006878:	4293      	cmp	r3, r2
 800687a:	d100      	bne.n	800687e <memset+0xa>
 800687c:	4770      	bx	lr
 800687e:	f803 1b01 	strb.w	r1, [r3], #1
 8006882:	e7f9      	b.n	8006878 <memset+0x4>

08006884 <pow>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	ed2d 8b02 	vpush	{d8}
 800688a:	eeb0 8a40 	vmov.f32	s16, s0
 800688e:	eef0 8a60 	vmov.f32	s17, s1
 8006892:	ec55 4b11 	vmov	r4, r5, d1
 8006896:	f000 f867 	bl	8006968 <__ieee754_pow>
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	ec57 6b10 	vmov	r6, r7, d0
 80068a6:	f7fa f905 	bl	8000ab4 <__aeabi_dcmpun>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d13b      	bne.n	8006926 <pow+0xa2>
 80068ae:	ec51 0b18 	vmov	r0, r1, d8
 80068b2:	2200      	movs	r2, #0
 80068b4:	2300      	movs	r3, #0
 80068b6:	f7fa f8cb 	bl	8000a50 <__aeabi_dcmpeq>
 80068ba:	b1b8      	cbz	r0, 80068ec <pow+0x68>
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	f7fa f8c4 	bl	8000a50 <__aeabi_dcmpeq>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d146      	bne.n	800695a <pow+0xd6>
 80068cc:	ec45 4b10 	vmov	d0, r4, r5
 80068d0:	f000 fe63 	bl	800759a <finite>
 80068d4:	b338      	cbz	r0, 8006926 <pow+0xa2>
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4620      	mov	r0, r4
 80068dc:	4629      	mov	r1, r5
 80068de:	f7fa f8c1 	bl	8000a64 <__aeabi_dcmplt>
 80068e2:	b300      	cbz	r0, 8006926 <pow+0xa2>
 80068e4:	f7ff ff9c 	bl	8006820 <__errno>
 80068e8:	2322      	movs	r3, #34	; 0x22
 80068ea:	e01b      	b.n	8006924 <pow+0xa0>
 80068ec:	ec47 6b10 	vmov	d0, r6, r7
 80068f0:	f000 fe53 	bl	800759a <finite>
 80068f4:	b9e0      	cbnz	r0, 8006930 <pow+0xac>
 80068f6:	eeb0 0a48 	vmov.f32	s0, s16
 80068fa:	eef0 0a68 	vmov.f32	s1, s17
 80068fe:	f000 fe4c 	bl	800759a <finite>
 8006902:	b1a8      	cbz	r0, 8006930 <pow+0xac>
 8006904:	ec45 4b10 	vmov	d0, r4, r5
 8006908:	f000 fe47 	bl	800759a <finite>
 800690c:	b180      	cbz	r0, 8006930 <pow+0xac>
 800690e:	4632      	mov	r2, r6
 8006910:	463b      	mov	r3, r7
 8006912:	4630      	mov	r0, r6
 8006914:	4639      	mov	r1, r7
 8006916:	f7fa f8cd 	bl	8000ab4 <__aeabi_dcmpun>
 800691a:	2800      	cmp	r0, #0
 800691c:	d0e2      	beq.n	80068e4 <pow+0x60>
 800691e:	f7ff ff7f 	bl	8006820 <__errno>
 8006922:	2321      	movs	r3, #33	; 0x21
 8006924:	6003      	str	r3, [r0, #0]
 8006926:	ecbd 8b02 	vpop	{d8}
 800692a:	ec47 6b10 	vmov	d0, r6, r7
 800692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	4630      	mov	r0, r6
 8006936:	4639      	mov	r1, r7
 8006938:	f7fa f88a 	bl	8000a50 <__aeabi_dcmpeq>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0f2      	beq.n	8006926 <pow+0xa2>
 8006940:	eeb0 0a48 	vmov.f32	s0, s16
 8006944:	eef0 0a68 	vmov.f32	s1, s17
 8006948:	f000 fe27 	bl	800759a <finite>
 800694c:	2800      	cmp	r0, #0
 800694e:	d0ea      	beq.n	8006926 <pow+0xa2>
 8006950:	ec45 4b10 	vmov	d0, r4, r5
 8006954:	f000 fe21 	bl	800759a <finite>
 8006958:	e7c3      	b.n	80068e2 <pow+0x5e>
 800695a:	4f01      	ldr	r7, [pc, #4]	; (8006960 <pow+0xdc>)
 800695c:	2600      	movs	r6, #0
 800695e:	e7e2      	b.n	8006926 <pow+0xa2>
 8006960:	3ff00000 	.word	0x3ff00000
 8006964:	00000000 	.word	0x00000000

08006968 <__ieee754_pow>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	ed2d 8b06 	vpush	{d8-d10}
 8006970:	b089      	sub	sp, #36	; 0x24
 8006972:	ed8d 1b00 	vstr	d1, [sp]
 8006976:	e9dd 2900 	ldrd	r2, r9, [sp]
 800697a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800697e:	ea58 0102 	orrs.w	r1, r8, r2
 8006982:	ec57 6b10 	vmov	r6, r7, d0
 8006986:	d115      	bne.n	80069b4 <__ieee754_pow+0x4c>
 8006988:	19b3      	adds	r3, r6, r6
 800698a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800698e:	4152      	adcs	r2, r2
 8006990:	4299      	cmp	r1, r3
 8006992:	4b89      	ldr	r3, [pc, #548]	; (8006bb8 <__ieee754_pow+0x250>)
 8006994:	4193      	sbcs	r3, r2
 8006996:	f080 84d2 	bcs.w	800733e <__ieee754_pow+0x9d6>
 800699a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fc37 	bl	8000214 <__adddf3>
 80069a6:	ec41 0b10 	vmov	d0, r0, r1
 80069aa:	b009      	add	sp, #36	; 0x24
 80069ac:	ecbd 8b06 	vpop	{d8-d10}
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	4b81      	ldr	r3, [pc, #516]	; (8006bbc <__ieee754_pow+0x254>)
 80069b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80069ba:	429c      	cmp	r4, r3
 80069bc:	ee10 aa10 	vmov	sl, s0
 80069c0:	463d      	mov	r5, r7
 80069c2:	dc06      	bgt.n	80069d2 <__ieee754_pow+0x6a>
 80069c4:	d101      	bne.n	80069ca <__ieee754_pow+0x62>
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	d1e7      	bne.n	800699a <__ieee754_pow+0x32>
 80069ca:	4598      	cmp	r8, r3
 80069cc:	dc01      	bgt.n	80069d2 <__ieee754_pow+0x6a>
 80069ce:	d10f      	bne.n	80069f0 <__ieee754_pow+0x88>
 80069d0:	b172      	cbz	r2, 80069f0 <__ieee754_pow+0x88>
 80069d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80069d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80069da:	ea55 050a 	orrs.w	r5, r5, sl
 80069de:	d1dc      	bne.n	800699a <__ieee754_pow+0x32>
 80069e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80069e4:	18db      	adds	r3, r3, r3
 80069e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80069ea:	4152      	adcs	r2, r2
 80069ec:	429d      	cmp	r5, r3
 80069ee:	e7d0      	b.n	8006992 <__ieee754_pow+0x2a>
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	da3b      	bge.n	8006a6c <__ieee754_pow+0x104>
 80069f4:	4b72      	ldr	r3, [pc, #456]	; (8006bc0 <__ieee754_pow+0x258>)
 80069f6:	4598      	cmp	r8, r3
 80069f8:	dc51      	bgt.n	8006a9e <__ieee754_pow+0x136>
 80069fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80069fe:	4598      	cmp	r8, r3
 8006a00:	f340 84ac 	ble.w	800735c <__ieee754_pow+0x9f4>
 8006a04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a0c:	2b14      	cmp	r3, #20
 8006a0e:	dd0f      	ble.n	8006a30 <__ieee754_pow+0xc8>
 8006a10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a14:	fa22 f103 	lsr.w	r1, r2, r3
 8006a18:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	f040 849d 	bne.w	800735c <__ieee754_pow+0x9f4>
 8006a22:	f001 0101 	and.w	r1, r1, #1
 8006a26:	f1c1 0302 	rsb	r3, r1, #2
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	b182      	cbz	r2, 8006a50 <__ieee754_pow+0xe8>
 8006a2e:	e05f      	b.n	8006af0 <__ieee754_pow+0x188>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d15b      	bne.n	8006aec <__ieee754_pow+0x184>
 8006a34:	f1c3 0314 	rsb	r3, r3, #20
 8006a38:	fa48 f103 	asr.w	r1, r8, r3
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	4543      	cmp	r3, r8
 8006a42:	f040 8488 	bne.w	8007356 <__ieee754_pow+0x9ee>
 8006a46:	f001 0101 	and.w	r1, r1, #1
 8006a4a:	f1c1 0302 	rsb	r3, r1, #2
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	4b5c      	ldr	r3, [pc, #368]	; (8006bc4 <__ieee754_pow+0x25c>)
 8006a52:	4598      	cmp	r8, r3
 8006a54:	d132      	bne.n	8006abc <__ieee754_pow+0x154>
 8006a56:	f1b9 0f00 	cmp.w	r9, #0
 8006a5a:	f280 8478 	bge.w	800734e <__ieee754_pow+0x9e6>
 8006a5e:	4959      	ldr	r1, [pc, #356]	; (8006bc4 <__ieee754_pow+0x25c>)
 8006a60:	4632      	mov	r2, r6
 8006a62:	463b      	mov	r3, r7
 8006a64:	2000      	movs	r0, #0
 8006a66:	f7f9 feb5 	bl	80007d4 <__aeabi_ddiv>
 8006a6a:	e79c      	b.n	80069a6 <__ieee754_pow+0x3e>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9304      	str	r3, [sp, #16]
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	d13d      	bne.n	8006af0 <__ieee754_pow+0x188>
 8006a74:	4b51      	ldr	r3, [pc, #324]	; (8006bbc <__ieee754_pow+0x254>)
 8006a76:	4598      	cmp	r8, r3
 8006a78:	d1ea      	bne.n	8006a50 <__ieee754_pow+0xe8>
 8006a7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a82:	ea53 030a 	orrs.w	r3, r3, sl
 8006a86:	f000 845a 	beq.w	800733e <__ieee754_pow+0x9d6>
 8006a8a:	4b4f      	ldr	r3, [pc, #316]	; (8006bc8 <__ieee754_pow+0x260>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	dd08      	ble.n	8006aa2 <__ieee754_pow+0x13a>
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	f2c0 8457 	blt.w	8007346 <__ieee754_pow+0x9de>
 8006a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a9c:	e783      	b.n	80069a6 <__ieee754_pow+0x3e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e7e5      	b.n	8006a6e <__ieee754_pow+0x106>
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	f04f 0000 	mov.w	r0, #0
 8006aaa:	f04f 0100 	mov.w	r1, #0
 8006aae:	f6bf af7a 	bge.w	80069a6 <__ieee754_pow+0x3e>
 8006ab2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006ab6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006aba:	e774      	b.n	80069a6 <__ieee754_pow+0x3e>
 8006abc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006ac0:	d106      	bne.n	8006ad0 <__ieee754_pow+0x168>
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7f9 fd59 	bl	8000580 <__aeabi_dmul>
 8006ace:	e76a      	b.n	80069a6 <__ieee754_pow+0x3e>
 8006ad0:	4b3e      	ldr	r3, [pc, #248]	; (8006bcc <__ieee754_pow+0x264>)
 8006ad2:	4599      	cmp	r9, r3
 8006ad4:	d10c      	bne.n	8006af0 <__ieee754_pow+0x188>
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	db0a      	blt.n	8006af0 <__ieee754_pow+0x188>
 8006ada:	ec47 6b10 	vmov	d0, r6, r7
 8006ade:	b009      	add	sp, #36	; 0x24
 8006ae0:	ecbd 8b06 	vpop	{d8-d10}
 8006ae4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	f000 bc6c 	b.w	80073c4 <__ieee754_sqrt>
 8006aec:	2300      	movs	r3, #0
 8006aee:	9304      	str	r3, [sp, #16]
 8006af0:	ec47 6b10 	vmov	d0, r6, r7
 8006af4:	f000 fd48 	bl	8007588 <fabs>
 8006af8:	ec51 0b10 	vmov	r0, r1, d0
 8006afc:	f1ba 0f00 	cmp.w	sl, #0
 8006b00:	d129      	bne.n	8006b56 <__ieee754_pow+0x1ee>
 8006b02:	b124      	cbz	r4, 8006b0e <__ieee754_pow+0x1a6>
 8006b04:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <__ieee754_pow+0x25c>)
 8006b06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d123      	bne.n	8006b56 <__ieee754_pow+0x1ee>
 8006b0e:	f1b9 0f00 	cmp.w	r9, #0
 8006b12:	da05      	bge.n	8006b20 <__ieee754_pow+0x1b8>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	2000      	movs	r0, #0
 8006b1a:	492a      	ldr	r1, [pc, #168]	; (8006bc4 <__ieee754_pow+0x25c>)
 8006b1c:	f7f9 fe5a 	bl	80007d4 <__aeabi_ddiv>
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	f6bf af40 	bge.w	80069a6 <__ieee754_pow+0x3e>
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b30:	4323      	orrs	r3, r4
 8006b32:	d108      	bne.n	8006b46 <__ieee754_pow+0x1de>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	f7f9 fb68 	bl	8000210 <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	e78f      	b.n	8006a66 <__ieee754_pow+0xfe>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f47f af2c 	bne.w	80069a6 <__ieee754_pow+0x3e>
 8006b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b52:	4619      	mov	r1, r3
 8006b54:	e727      	b.n	80069a6 <__ieee754_pow+0x3e>
 8006b56:	0feb      	lsrs	r3, r5, #31
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	9306      	str	r3, [sp, #24]
 8006b5c:	9a06      	ldr	r2, [sp, #24]
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	d102      	bne.n	8006b6a <__ieee754_pow+0x202>
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	e7e6      	b.n	8006b38 <__ieee754_pow+0x1d0>
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <__ieee754_pow+0x268>)
 8006b6c:	4598      	cmp	r8, r3
 8006b6e:	f340 80fb 	ble.w	8006d68 <__ieee754_pow+0x400>
 8006b72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b76:	4598      	cmp	r8, r3
 8006b78:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <__ieee754_pow+0x260>)
 8006b7a:	dd0c      	ble.n	8006b96 <__ieee754_pow+0x22e>
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	dc0f      	bgt.n	8006ba0 <__ieee754_pow+0x238>
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	da0f      	bge.n	8006ba6 <__ieee754_pow+0x23e>
 8006b86:	2000      	movs	r0, #0
 8006b88:	b009      	add	sp, #36	; 0x24
 8006b8a:	ecbd 8b06 	vpop	{d8-d10}
 8006b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b92:	f000 bcf0 	b.w	8007576 <__math_oflow>
 8006b96:	429c      	cmp	r4, r3
 8006b98:	dbf2      	blt.n	8006b80 <__ieee754_pow+0x218>
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <__ieee754_pow+0x25c>)
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	dd19      	ble.n	8006bd4 <__ieee754_pow+0x26c>
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	dcef      	bgt.n	8006b86 <__ieee754_pow+0x21e>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	b009      	add	sp, #36	; 0x24
 8006baa:	ecbd 8b06 	vpop	{d8-d10}
 8006bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb2:	f000 bcd7 	b.w	8007564 <__math_uflow>
 8006bb6:	bf00      	nop
 8006bb8:	fff00000 	.word	0xfff00000
 8006bbc:	7ff00000 	.word	0x7ff00000
 8006bc0:	433fffff 	.word	0x433fffff
 8006bc4:	3ff00000 	.word	0x3ff00000
 8006bc8:	3fefffff 	.word	0x3fefffff
 8006bcc:	3fe00000 	.word	0x3fe00000
 8006bd0:	41e00000 	.word	0x41e00000
 8006bd4:	4b60      	ldr	r3, [pc, #384]	; (8006d58 <__ieee754_pow+0x3f0>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f7f9 fb1a 	bl	8000210 <__aeabi_dsub>
 8006bdc:	a354      	add	r3, pc, #336	; (adr r3, 8006d30 <__ieee754_pow+0x3c8>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	f7f9 fccb 	bl	8000580 <__aeabi_dmul>
 8006bea:	a353      	add	r3, pc, #332	; (adr r3, 8006d38 <__ieee754_pow+0x3d0>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	460f      	mov	r7, r1
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 fcc2 	bl	8000580 <__aeabi_dmul>
 8006bfc:	4b57      	ldr	r3, [pc, #348]	; (8006d5c <__ieee754_pow+0x3f4>)
 8006bfe:	4682      	mov	sl, r0
 8006c00:	468b      	mov	fp, r1
 8006c02:	2200      	movs	r2, #0
 8006c04:	4620      	mov	r0, r4
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 fcba 	bl	8000580 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	a14b      	add	r1, pc, #300	; (adr r1, 8006d40 <__ieee754_pow+0x3d8>)
 8006c12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c16:	f7f9 fafb 	bl	8000210 <__aeabi_dsub>
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f7f9 fcaf 	bl	8000580 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	2000      	movs	r0, #0
 8006c28:	494d      	ldr	r1, [pc, #308]	; (8006d60 <__ieee754_pow+0x3f8>)
 8006c2a:	f7f9 faf1 	bl	8000210 <__aeabi_dsub>
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4680      	mov	r8, r0
 8006c32:	4689      	mov	r9, r1
 8006c34:	462b      	mov	r3, r5
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 fca1 	bl	8000580 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 fc9b 	bl	8000580 <__aeabi_dmul>
 8006c4a:	a33f      	add	r3, pc, #252	; (adr r3, 8006d48 <__ieee754_pow+0x3e0>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fc96 	bl	8000580 <__aeabi_dmul>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4650      	mov	r0, sl
 8006c5a:	4659      	mov	r1, fp
 8006c5c:	f7f9 fad8 	bl	8000210 <__aeabi_dsub>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4680      	mov	r8, r0
 8006c66:	4689      	mov	r9, r1
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 fad2 	bl	8000214 <__adddf3>
 8006c70:	2000      	movs	r0, #0
 8006c72:	4632      	mov	r2, r6
 8006c74:	463b      	mov	r3, r7
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	f7f9 fac9 	bl	8000210 <__aeabi_dsub>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fac3 	bl	8000210 <__aeabi_dsub>
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	9a06      	ldr	r2, [sp, #24]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	4313      	orrs	r3, r2
 8006c92:	4682      	mov	sl, r0
 8006c94:	468b      	mov	fp, r1
 8006c96:	f040 81e7 	bne.w	8007068 <__ieee754_pow+0x700>
 8006c9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006d50 <__ieee754_pow+0x3e8>
 8006c9e:	eeb0 8a47 	vmov.f32	s16, s14
 8006ca2:	eef0 8a67 	vmov.f32	s17, s15
 8006ca6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006caa:	2600      	movs	r6, #0
 8006cac:	4632      	mov	r2, r6
 8006cae:	463b      	mov	r3, r7
 8006cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cb4:	f7f9 faac 	bl	8000210 <__aeabi_dsub>
 8006cb8:	4622      	mov	r2, r4
 8006cba:	462b      	mov	r3, r5
 8006cbc:	f7f9 fc60 	bl	8000580 <__aeabi_dmul>
 8006cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	4650      	mov	r0, sl
 8006cca:	4659      	mov	r1, fp
 8006ccc:	f7f9 fc58 	bl	8000580 <__aeabi_dmul>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7f9 fa9c 	bl	8000214 <__adddf3>
 8006cdc:	4632      	mov	r2, r6
 8006cde:	463b      	mov	r3, r7
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f7f9 fc4a 	bl	8000580 <__aeabi_dmul>
 8006cec:	460b      	mov	r3, r1
 8006cee:	4604      	mov	r4, r0
 8006cf0:	460d      	mov	r5, r1
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	f7f9 fa8c 	bl	8000214 <__adddf3>
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <__ieee754_pow+0x3fc>)
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	ec45 4b19 	vmov	d9, r4, r5
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	468b      	mov	fp, r1
 8006d0a:	f340 82f1 	ble.w	80072f0 <__ieee754_pow+0x988>
 8006d0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d16:	4303      	orrs	r3, r0
 8006d18:	f000 81e4 	beq.w	80070e4 <__ieee754_pow+0x77c>
 8006d1c:	ec51 0b18 	vmov	r0, r1, d8
 8006d20:	2200      	movs	r2, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	f7f9 fe9e 	bl	8000a64 <__aeabi_dcmplt>
 8006d28:	3800      	subs	r0, #0
 8006d2a:	bf18      	it	ne
 8006d2c:	2001      	movne	r0, #1
 8006d2e:	e72b      	b.n	8006b88 <__ieee754_pow+0x220>
 8006d30:	60000000 	.word	0x60000000
 8006d34:	3ff71547 	.word	0x3ff71547
 8006d38:	f85ddf44 	.word	0xf85ddf44
 8006d3c:	3e54ae0b 	.word	0x3e54ae0b
 8006d40:	55555555 	.word	0x55555555
 8006d44:	3fd55555 	.word	0x3fd55555
 8006d48:	652b82fe 	.word	0x652b82fe
 8006d4c:	3ff71547 	.word	0x3ff71547
 8006d50:	00000000 	.word	0x00000000
 8006d54:	bff00000 	.word	0xbff00000
 8006d58:	3ff00000 	.word	0x3ff00000
 8006d5c:	3fd00000 	.word	0x3fd00000
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	408fffff 	.word	0x408fffff
 8006d68:	4bd5      	ldr	r3, [pc, #852]	; (80070c0 <__ieee754_pow+0x758>)
 8006d6a:	402b      	ands	r3, r5
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	b92b      	cbnz	r3, 8006d7c <__ieee754_pow+0x414>
 8006d70:	4bd4      	ldr	r3, [pc, #848]	; (80070c4 <__ieee754_pow+0x75c>)
 8006d72:	f7f9 fc05 	bl	8000580 <__aeabi_dmul>
 8006d76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	1523      	asrs	r3, r4, #20
 8006d7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d82:	4413      	add	r3, r2
 8006d84:	9305      	str	r3, [sp, #20]
 8006d86:	4bd0      	ldr	r3, [pc, #832]	; (80070c8 <__ieee754_pow+0x760>)
 8006d88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d90:	429c      	cmp	r4, r3
 8006d92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d96:	dd08      	ble.n	8006daa <__ieee754_pow+0x442>
 8006d98:	4bcc      	ldr	r3, [pc, #816]	; (80070cc <__ieee754_pow+0x764>)
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	f340 8162 	ble.w	8007064 <__ieee754_pow+0x6fc>
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	3301      	adds	r3, #1
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006daa:	2400      	movs	r4, #0
 8006dac:	00e3      	lsls	r3, r4, #3
 8006dae:	9307      	str	r3, [sp, #28]
 8006db0:	4bc7      	ldr	r3, [pc, #796]	; (80070d0 <__ieee754_pow+0x768>)
 8006db2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006db6:	ed93 7b00 	vldr	d7, [r3]
 8006dba:	4629      	mov	r1, r5
 8006dbc:	ec53 2b17 	vmov	r2, r3, d7
 8006dc0:	eeb0 9a47 	vmov.f32	s18, s14
 8006dc4:	eef0 9a67 	vmov.f32	s19, s15
 8006dc8:	4682      	mov	sl, r0
 8006dca:	f7f9 fa21 	bl	8000210 <__aeabi_dsub>
 8006dce:	4652      	mov	r2, sl
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	ec51 0b19 	vmov	r0, r1, d9
 8006dda:	f7f9 fa1b 	bl	8000214 <__adddf3>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	2000      	movs	r0, #0
 8006de4:	49bb      	ldr	r1, [pc, #748]	; (80070d4 <__ieee754_pow+0x76c>)
 8006de6:	f7f9 fcf5 	bl	80007d4 <__aeabi_ddiv>
 8006dea:	ec41 0b1a 	vmov	d10, r0, r1
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4630      	mov	r0, r6
 8006df4:	4639      	mov	r1, r7
 8006df6:	f7f9 fbc3 	bl	8000580 <__aeabi_dmul>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e00:	9302      	str	r3, [sp, #8]
 8006e02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e06:	46ab      	mov	fp, r5
 8006e08:	106d      	asrs	r5, r5, #1
 8006e0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e12:	ec41 0b18 	vmov	d8, r0, r1
 8006e16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	f7f9 fbac 	bl	8000580 <__aeabi_dmul>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 f9ee 	bl	8000210 <__aeabi_dsub>
 8006e34:	ec53 2b19 	vmov	r2, r3, d9
 8006e38:	4606      	mov	r6, r0
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 f9e6 	bl	8000210 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	f7f9 f9e0 	bl	8000210 <__aeabi_dsub>
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	f7f9 fb94 	bl	8000580 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 f9d6 	bl	8000210 <__aeabi_dsub>
 8006e64:	ec53 2b1a 	vmov	r2, r3, d10
 8006e68:	f7f9 fb8a 	bl	8000580 <__aeabi_dmul>
 8006e6c:	ec53 2b18 	vmov	r2, r3, d8
 8006e70:	ec41 0b19 	vmov	d9, r0, r1
 8006e74:	ec51 0b18 	vmov	r0, r1, d8
 8006e78:	f7f9 fb82 	bl	8000580 <__aeabi_dmul>
 8006e7c:	a37c      	add	r3, pc, #496	; (adr r3, 8007070 <__ieee754_pow+0x708>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	4604      	mov	r4, r0
 8006e84:	460d      	mov	r5, r1
 8006e86:	f7f9 fb7b 	bl	8000580 <__aeabi_dmul>
 8006e8a:	a37b      	add	r3, pc, #492	; (adr r3, 8007078 <__ieee754_pow+0x710>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 f9c0 	bl	8000214 <__adddf3>
 8006e94:	4622      	mov	r2, r4
 8006e96:	462b      	mov	r3, r5
 8006e98:	f7f9 fb72 	bl	8000580 <__aeabi_dmul>
 8006e9c:	a378      	add	r3, pc, #480	; (adr r3, 8007080 <__ieee754_pow+0x718>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7f9 f9b7 	bl	8000214 <__adddf3>
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	f7f9 fb69 	bl	8000580 <__aeabi_dmul>
 8006eae:	a376      	add	r3, pc, #472	; (adr r3, 8007088 <__ieee754_pow+0x720>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 f9ae 	bl	8000214 <__adddf3>
 8006eb8:	4622      	mov	r2, r4
 8006eba:	462b      	mov	r3, r5
 8006ebc:	f7f9 fb60 	bl	8000580 <__aeabi_dmul>
 8006ec0:	a373      	add	r3, pc, #460	; (adr r3, 8007090 <__ieee754_pow+0x728>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 f9a5 	bl	8000214 <__adddf3>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 fb57 	bl	8000580 <__aeabi_dmul>
 8006ed2:	a371      	add	r3, pc, #452	; (adr r3, 8007098 <__ieee754_pow+0x730>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 f99c 	bl	8000214 <__adddf3>
 8006edc:	4622      	mov	r2, r4
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 fb4a 	bl	8000580 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	f7f9 fb44 	bl	8000580 <__aeabi_dmul>
 8006ef8:	4642      	mov	r2, r8
 8006efa:	4604      	mov	r4, r0
 8006efc:	460d      	mov	r5, r1
 8006efe:	464b      	mov	r3, r9
 8006f00:	ec51 0b18 	vmov	r0, r1, d8
 8006f04:	f7f9 f986 	bl	8000214 <__adddf3>
 8006f08:	ec53 2b19 	vmov	r2, r3, d9
 8006f0c:	f7f9 fb38 	bl	8000580 <__aeabi_dmul>
 8006f10:	4622      	mov	r2, r4
 8006f12:	462b      	mov	r3, r5
 8006f14:	f7f9 f97e 	bl	8000214 <__adddf3>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4682      	mov	sl, r0
 8006f1c:	468b      	mov	fp, r1
 8006f1e:	464b      	mov	r3, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	4649      	mov	r1, r9
 8006f24:	f7f9 fb2c 	bl	8000580 <__aeabi_dmul>
 8006f28:	4b6b      	ldr	r3, [pc, #428]	; (80070d8 <__ieee754_pow+0x770>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	460f      	mov	r7, r1
 8006f30:	f7f9 f970 	bl	8000214 <__adddf3>
 8006f34:	4652      	mov	r2, sl
 8006f36:	465b      	mov	r3, fp
 8006f38:	f7f9 f96c 	bl	8000214 <__adddf3>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	460d      	mov	r5, r1
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4640      	mov	r0, r8
 8006f48:	4649      	mov	r1, r9
 8006f4a:	f7f9 fb19 	bl	8000580 <__aeabi_dmul>
 8006f4e:	4b62      	ldr	r3, [pc, #392]	; (80070d8 <__ieee754_pow+0x770>)
 8006f50:	4680      	mov	r8, r0
 8006f52:	4689      	mov	r9, r1
 8006f54:	2200      	movs	r2, #0
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	f7f9 f959 	bl	8000210 <__aeabi_dsub>
 8006f5e:	4632      	mov	r2, r6
 8006f60:	463b      	mov	r3, r7
 8006f62:	f7f9 f955 	bl	8000210 <__aeabi_dsub>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	f7f9 f94f 	bl	8000210 <__aeabi_dsub>
 8006f72:	ec53 2b18 	vmov	r2, r3, d8
 8006f76:	f7f9 fb03 	bl	8000580 <__aeabi_dmul>
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	460f      	mov	r7, r1
 8006f80:	462b      	mov	r3, r5
 8006f82:	ec51 0b19 	vmov	r0, r1, d9
 8006f86:	f7f9 fafb 	bl	8000580 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 f93f 	bl	8000214 <__adddf3>
 8006f96:	4606      	mov	r6, r0
 8006f98:	460f      	mov	r7, r1
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 f937 	bl	8000214 <__adddf3>
 8006fa6:	a33e      	add	r3, pc, #248	; (adr r3, 80070a0 <__ieee754_pow+0x738>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	2000      	movs	r0, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	f7f9 fae5 	bl	8000580 <__aeabi_dmul>
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	ec41 0b18 	vmov	d8, r0, r1
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f925 	bl	8000210 <__aeabi_dsub>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4630      	mov	r0, r6
 8006fcc:	4639      	mov	r1, r7
 8006fce:	f7f9 f91f 	bl	8000210 <__aeabi_dsub>
 8006fd2:	a335      	add	r3, pc, #212	; (adr r3, 80070a8 <__ieee754_pow+0x740>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 fad2 	bl	8000580 <__aeabi_dmul>
 8006fdc:	a334      	add	r3, pc, #208	; (adr r3, 80070b0 <__ieee754_pow+0x748>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7f9 fac9 	bl	8000580 <__aeabi_dmul>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 f90d 	bl	8000214 <__adddf3>
 8006ffa:	9a07      	ldr	r2, [sp, #28]
 8006ffc:	4b37      	ldr	r3, [pc, #220]	; (80070dc <__ieee754_pow+0x774>)
 8006ffe:	4413      	add	r3, r2
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 f906 	bl	8000214 <__adddf3>
 8007008:	4682      	mov	sl, r0
 800700a:	9805      	ldr	r0, [sp, #20]
 800700c:	468b      	mov	fp, r1
 800700e:	f7f9 fa4d 	bl	80004ac <__aeabi_i2d>
 8007012:	9a07      	ldr	r2, [sp, #28]
 8007014:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <__ieee754_pow+0x778>)
 8007016:	4413      	add	r3, r2
 8007018:	e9d3 8900 	ldrd	r8, r9, [r3]
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	4652      	mov	r2, sl
 8007022:	465b      	mov	r3, fp
 8007024:	ec51 0b18 	vmov	r0, r1, d8
 8007028:	f7f9 f8f4 	bl	8000214 <__adddf3>
 800702c:	4642      	mov	r2, r8
 800702e:	464b      	mov	r3, r9
 8007030:	f7f9 f8f0 	bl	8000214 <__adddf3>
 8007034:	4632      	mov	r2, r6
 8007036:	463b      	mov	r3, r7
 8007038:	f7f9 f8ec 	bl	8000214 <__adddf3>
 800703c:	2000      	movs	r0, #0
 800703e:	4632      	mov	r2, r6
 8007040:	463b      	mov	r3, r7
 8007042:	4604      	mov	r4, r0
 8007044:	460d      	mov	r5, r1
 8007046:	f7f9 f8e3 	bl	8000210 <__aeabi_dsub>
 800704a:	4642      	mov	r2, r8
 800704c:	464b      	mov	r3, r9
 800704e:	f7f9 f8df 	bl	8000210 <__aeabi_dsub>
 8007052:	ec53 2b18 	vmov	r2, r3, d8
 8007056:	f7f9 f8db 	bl	8000210 <__aeabi_dsub>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4650      	mov	r0, sl
 8007060:	4659      	mov	r1, fp
 8007062:	e610      	b.n	8006c86 <__ieee754_pow+0x31e>
 8007064:	2401      	movs	r4, #1
 8007066:	e6a1      	b.n	8006dac <__ieee754_pow+0x444>
 8007068:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80070b8 <__ieee754_pow+0x750>
 800706c:	e617      	b.n	8006c9e <__ieee754_pow+0x336>
 800706e:	bf00      	nop
 8007070:	4a454eef 	.word	0x4a454eef
 8007074:	3fca7e28 	.word	0x3fca7e28
 8007078:	93c9db65 	.word	0x93c9db65
 800707c:	3fcd864a 	.word	0x3fcd864a
 8007080:	a91d4101 	.word	0xa91d4101
 8007084:	3fd17460 	.word	0x3fd17460
 8007088:	518f264d 	.word	0x518f264d
 800708c:	3fd55555 	.word	0x3fd55555
 8007090:	db6fabff 	.word	0xdb6fabff
 8007094:	3fdb6db6 	.word	0x3fdb6db6
 8007098:	33333303 	.word	0x33333303
 800709c:	3fe33333 	.word	0x3fe33333
 80070a0:	e0000000 	.word	0xe0000000
 80070a4:	3feec709 	.word	0x3feec709
 80070a8:	dc3a03fd 	.word	0xdc3a03fd
 80070ac:	3feec709 	.word	0x3feec709
 80070b0:	145b01f5 	.word	0x145b01f5
 80070b4:	be3e2fe0 	.word	0xbe3e2fe0
 80070b8:	00000000 	.word	0x00000000
 80070bc:	3ff00000 	.word	0x3ff00000
 80070c0:	7ff00000 	.word	0x7ff00000
 80070c4:	43400000 	.word	0x43400000
 80070c8:	0003988e 	.word	0x0003988e
 80070cc:	000bb679 	.word	0x000bb679
 80070d0:	080076f8 	.word	0x080076f8
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	40080000 	.word	0x40080000
 80070dc:	08007718 	.word	0x08007718
 80070e0:	08007708 	.word	0x08007708
 80070e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80073bc <__ieee754_pow+0xa54>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 f891 	bl	8000214 <__adddf3>
 80070f2:	4622      	mov	r2, r4
 80070f4:	ec41 0b1a 	vmov	d10, r0, r1
 80070f8:	462b      	mov	r3, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 f887 	bl	8000210 <__aeabi_dsub>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	ec51 0b1a 	vmov	r0, r1, d10
 800710a:	f7f9 fcc9 	bl	8000aa0 <__aeabi_dcmpgt>
 800710e:	2800      	cmp	r0, #0
 8007110:	f47f ae04 	bne.w	8006d1c <__ieee754_pow+0x3b4>
 8007114:	4aa4      	ldr	r2, [pc, #656]	; (80073a8 <__ieee754_pow+0xa40>)
 8007116:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800711a:	4293      	cmp	r3, r2
 800711c:	f340 8108 	ble.w	8007330 <__ieee754_pow+0x9c8>
 8007120:	151b      	asrs	r3, r3, #20
 8007122:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007126:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800712a:	fa4a f303 	asr.w	r3, sl, r3
 800712e:	445b      	add	r3, fp
 8007130:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007134:	4e9d      	ldr	r6, [pc, #628]	; (80073ac <__ieee754_pow+0xa44>)
 8007136:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800713a:	4116      	asrs	r6, r2
 800713c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007140:	2000      	movs	r0, #0
 8007142:	ea23 0106 	bic.w	r1, r3, r6
 8007146:	f1c2 0214 	rsb	r2, r2, #20
 800714a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800714e:	fa4a fa02 	asr.w	sl, sl, r2
 8007152:	f1bb 0f00 	cmp.w	fp, #0
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	bfb8      	it	lt
 8007160:	f1ca 0a00 	rsblt	sl, sl, #0
 8007164:	f7f9 f854 	bl	8000210 <__aeabi_dsub>
 8007168:	ec41 0b19 	vmov	d9, r0, r1
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	ec51 0b19 	vmov	r0, r1, d9
 8007174:	f7f9 f84e 	bl	8000214 <__adddf3>
 8007178:	a37b      	add	r3, pc, #492	; (adr r3, 8007368 <__ieee754_pow+0xa00>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	2000      	movs	r0, #0
 8007180:	4604      	mov	r4, r0
 8007182:	460d      	mov	r5, r1
 8007184:	f7f9 f9fc 	bl	8000580 <__aeabi_dmul>
 8007188:	ec53 2b19 	vmov	r2, r3, d9
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	4620      	mov	r0, r4
 8007192:	4629      	mov	r1, r5
 8007194:	f7f9 f83c 	bl	8000210 <__aeabi_dsub>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 f836 	bl	8000210 <__aeabi_dsub>
 80071a4:	a372      	add	r3, pc, #456	; (adr r3, 8007370 <__ieee754_pow+0xa08>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f9e9 	bl	8000580 <__aeabi_dmul>
 80071ae:	a372      	add	r3, pc, #456	; (adr r3, 8007378 <__ieee754_pow+0xa10>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	4680      	mov	r8, r0
 80071b6:	4689      	mov	r9, r1
 80071b8:	4620      	mov	r0, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7f9 f9e0 	bl	8000580 <__aeabi_dmul>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4640      	mov	r0, r8
 80071c6:	4649      	mov	r1, r9
 80071c8:	f7f9 f824 	bl	8000214 <__adddf3>
 80071cc:	4604      	mov	r4, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 f81c 	bl	8000214 <__adddf3>
 80071dc:	4632      	mov	r2, r6
 80071de:	463b      	mov	r3, r7
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	f7f9 f814 	bl	8000210 <__aeabi_dsub>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 f80e 	bl	8000210 <__aeabi_dsub>
 80071f4:	4642      	mov	r2, r8
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	464b      	mov	r3, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7f9 f9be 	bl	8000580 <__aeabi_dmul>
 8007204:	a35e      	add	r3, pc, #376	; (adr r3, 8007380 <__ieee754_pow+0xa18>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
 800720e:	f7f9 f9b7 	bl	8000580 <__aeabi_dmul>
 8007212:	a35d      	add	r3, pc, #372	; (adr r3, 8007388 <__ieee754_pow+0xa20>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f8 fffa 	bl	8000210 <__aeabi_dsub>
 800721c:	4622      	mov	r2, r4
 800721e:	462b      	mov	r3, r5
 8007220:	f7f9 f9ae 	bl	8000580 <__aeabi_dmul>
 8007224:	a35a      	add	r3, pc, #360	; (adr r3, 8007390 <__ieee754_pow+0xa28>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f8 fff3 	bl	8000214 <__adddf3>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 f9a5 	bl	8000580 <__aeabi_dmul>
 8007236:	a358      	add	r3, pc, #352	; (adr r3, 8007398 <__ieee754_pow+0xa30>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f8 ffe8 	bl	8000210 <__aeabi_dsub>
 8007240:	4622      	mov	r2, r4
 8007242:	462b      	mov	r3, r5
 8007244:	f7f9 f99c 	bl	8000580 <__aeabi_dmul>
 8007248:	a355      	add	r3, pc, #340	; (adr r3, 80073a0 <__ieee754_pow+0xa38>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f8 ffe1 	bl	8000214 <__adddf3>
 8007252:	4622      	mov	r2, r4
 8007254:	462b      	mov	r3, r5
 8007256:	f7f9 f993 	bl	8000580 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4640      	mov	r0, r8
 8007260:	4649      	mov	r1, r9
 8007262:	f7f8 ffd5 	bl	8000210 <__aeabi_dsub>
 8007266:	4604      	mov	r4, r0
 8007268:	460d      	mov	r5, r1
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4640      	mov	r0, r8
 8007270:	4649      	mov	r1, r9
 8007272:	f7f9 f985 	bl	8000580 <__aeabi_dmul>
 8007276:	2200      	movs	r2, #0
 8007278:	ec41 0b19 	vmov	d9, r0, r1
 800727c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007280:	4620      	mov	r0, r4
 8007282:	4629      	mov	r1, r5
 8007284:	f7f8 ffc4 	bl	8000210 <__aeabi_dsub>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	ec51 0b19 	vmov	r0, r1, d9
 8007290:	f7f9 faa0 	bl	80007d4 <__aeabi_ddiv>
 8007294:	4632      	mov	r2, r6
 8007296:	4604      	mov	r4, r0
 8007298:	460d      	mov	r5, r1
 800729a:	463b      	mov	r3, r7
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f9 f96e 	bl	8000580 <__aeabi_dmul>
 80072a4:	4632      	mov	r2, r6
 80072a6:	463b      	mov	r3, r7
 80072a8:	f7f8 ffb4 	bl	8000214 <__adddf3>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4620      	mov	r0, r4
 80072b2:	4629      	mov	r1, r5
 80072b4:	f7f8 ffac 	bl	8000210 <__aeabi_dsub>
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	f7f8 ffa8 	bl	8000210 <__aeabi_dsub>
 80072c0:	460b      	mov	r3, r1
 80072c2:	4602      	mov	r2, r0
 80072c4:	493a      	ldr	r1, [pc, #232]	; (80073b0 <__ieee754_pow+0xa48>)
 80072c6:	2000      	movs	r0, #0
 80072c8:	f7f8 ffa2 	bl	8000210 <__aeabi_dsub>
 80072cc:	ec41 0b10 	vmov	d0, r0, r1
 80072d0:	ee10 3a90 	vmov	r3, s1
 80072d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80072d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072dc:	da2b      	bge.n	8007336 <__ieee754_pow+0x9ce>
 80072de:	4650      	mov	r0, sl
 80072e0:	f000 f966 	bl	80075b0 <scalbn>
 80072e4:	ec51 0b10 	vmov	r0, r1, d0
 80072e8:	ec53 2b18 	vmov	r2, r3, d8
 80072ec:	f7ff bbed 	b.w	8006aca <__ieee754_pow+0x162>
 80072f0:	4b30      	ldr	r3, [pc, #192]	; (80073b4 <__ieee754_pow+0xa4c>)
 80072f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80072f6:	429e      	cmp	r6, r3
 80072f8:	f77f af0c 	ble.w	8007114 <__ieee754_pow+0x7ac>
 80072fc:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <__ieee754_pow+0xa50>)
 80072fe:	440b      	add	r3, r1
 8007300:	4303      	orrs	r3, r0
 8007302:	d009      	beq.n	8007318 <__ieee754_pow+0x9b0>
 8007304:	ec51 0b18 	vmov	r0, r1, d8
 8007308:	2200      	movs	r2, #0
 800730a:	2300      	movs	r3, #0
 800730c:	f7f9 fbaa 	bl	8000a64 <__aeabi_dcmplt>
 8007310:	3800      	subs	r0, #0
 8007312:	bf18      	it	ne
 8007314:	2001      	movne	r0, #1
 8007316:	e447      	b.n	8006ba8 <__ieee754_pow+0x240>
 8007318:	4622      	mov	r2, r4
 800731a:	462b      	mov	r3, r5
 800731c:	f7f8 ff78 	bl	8000210 <__aeabi_dsub>
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	f7f9 fbb2 	bl	8000a8c <__aeabi_dcmpge>
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f aef3 	beq.w	8007114 <__ieee754_pow+0x7ac>
 800732e:	e7e9      	b.n	8007304 <__ieee754_pow+0x99c>
 8007330:	f04f 0a00 	mov.w	sl, #0
 8007334:	e71a      	b.n	800716c <__ieee754_pow+0x804>
 8007336:	ec51 0b10 	vmov	r0, r1, d0
 800733a:	4619      	mov	r1, r3
 800733c:	e7d4      	b.n	80072e8 <__ieee754_pow+0x980>
 800733e:	491c      	ldr	r1, [pc, #112]	; (80073b0 <__ieee754_pow+0xa48>)
 8007340:	2000      	movs	r0, #0
 8007342:	f7ff bb30 	b.w	80069a6 <__ieee754_pow+0x3e>
 8007346:	2000      	movs	r0, #0
 8007348:	2100      	movs	r1, #0
 800734a:	f7ff bb2c 	b.w	80069a6 <__ieee754_pow+0x3e>
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7ff bb28 	b.w	80069a6 <__ieee754_pow+0x3e>
 8007356:	9204      	str	r2, [sp, #16]
 8007358:	f7ff bb7a 	b.w	8006a50 <__ieee754_pow+0xe8>
 800735c:	2300      	movs	r3, #0
 800735e:	f7ff bb64 	b.w	8006a2a <__ieee754_pow+0xc2>
 8007362:	bf00      	nop
 8007364:	f3af 8000 	nop.w
 8007368:	00000000 	.word	0x00000000
 800736c:	3fe62e43 	.word	0x3fe62e43
 8007370:	fefa39ef 	.word	0xfefa39ef
 8007374:	3fe62e42 	.word	0x3fe62e42
 8007378:	0ca86c39 	.word	0x0ca86c39
 800737c:	be205c61 	.word	0xbe205c61
 8007380:	72bea4d0 	.word	0x72bea4d0
 8007384:	3e663769 	.word	0x3e663769
 8007388:	c5d26bf1 	.word	0xc5d26bf1
 800738c:	3ebbbd41 	.word	0x3ebbbd41
 8007390:	af25de2c 	.word	0xaf25de2c
 8007394:	3f11566a 	.word	0x3f11566a
 8007398:	16bebd93 	.word	0x16bebd93
 800739c:	3f66c16c 	.word	0x3f66c16c
 80073a0:	5555553e 	.word	0x5555553e
 80073a4:	3fc55555 	.word	0x3fc55555
 80073a8:	3fe00000 	.word	0x3fe00000
 80073ac:	000fffff 	.word	0x000fffff
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	4090cbff 	.word	0x4090cbff
 80073b8:	3f6f3400 	.word	0x3f6f3400
 80073bc:	652b82fe 	.word	0x652b82fe
 80073c0:	3c971547 	.word	0x3c971547

080073c4 <__ieee754_sqrt>:
 80073c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	ec55 4b10 	vmov	r4, r5, d0
 80073cc:	4e55      	ldr	r6, [pc, #340]	; (8007524 <__ieee754_sqrt+0x160>)
 80073ce:	43ae      	bics	r6, r5
 80073d0:	ee10 0a10 	vmov	r0, s0
 80073d4:	ee10 3a10 	vmov	r3, s0
 80073d8:	462a      	mov	r2, r5
 80073da:	4629      	mov	r1, r5
 80073dc:	d110      	bne.n	8007400 <__ieee754_sqrt+0x3c>
 80073de:	ee10 2a10 	vmov	r2, s0
 80073e2:	462b      	mov	r3, r5
 80073e4:	f7f9 f8cc 	bl	8000580 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f8 ff10 	bl	8000214 <__adddf3>
 80073f4:	4604      	mov	r4, r0
 80073f6:	460d      	mov	r5, r1
 80073f8:	ec45 4b10 	vmov	d0, r4, r5
 80073fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007400:	2d00      	cmp	r5, #0
 8007402:	dc10      	bgt.n	8007426 <__ieee754_sqrt+0x62>
 8007404:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007408:	4330      	orrs	r0, r6
 800740a:	d0f5      	beq.n	80073f8 <__ieee754_sqrt+0x34>
 800740c:	b15d      	cbz	r5, 8007426 <__ieee754_sqrt+0x62>
 800740e:	ee10 2a10 	vmov	r2, s0
 8007412:	462b      	mov	r3, r5
 8007414:	ee10 0a10 	vmov	r0, s0
 8007418:	f7f8 fefa 	bl	8000210 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	f7f9 f9d8 	bl	80007d4 <__aeabi_ddiv>
 8007424:	e7e6      	b.n	80073f4 <__ieee754_sqrt+0x30>
 8007426:	1512      	asrs	r2, r2, #20
 8007428:	d074      	beq.n	8007514 <__ieee754_sqrt+0x150>
 800742a:	07d4      	lsls	r4, r2, #31
 800742c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007430:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007434:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007438:	bf5e      	ittt	pl
 800743a:	0fda      	lsrpl	r2, r3, #31
 800743c:	005b      	lslpl	r3, r3, #1
 800743e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007442:	2400      	movs	r4, #0
 8007444:	0fda      	lsrs	r2, r3, #31
 8007446:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800744a:	107f      	asrs	r7, r7, #1
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	2516      	movs	r5, #22
 8007450:	4620      	mov	r0, r4
 8007452:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007456:	1886      	adds	r6, r0, r2
 8007458:	428e      	cmp	r6, r1
 800745a:	bfde      	ittt	le
 800745c:	1b89      	suble	r1, r1, r6
 800745e:	18b0      	addle	r0, r6, r2
 8007460:	18a4      	addle	r4, r4, r2
 8007462:	0049      	lsls	r1, r1, #1
 8007464:	3d01      	subs	r5, #1
 8007466:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800746a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800746e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007472:	d1f0      	bne.n	8007456 <__ieee754_sqrt+0x92>
 8007474:	462a      	mov	r2, r5
 8007476:	f04f 0e20 	mov.w	lr, #32
 800747a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800747e:	4281      	cmp	r1, r0
 8007480:	eb06 0c05 	add.w	ip, r6, r5
 8007484:	dc02      	bgt.n	800748c <__ieee754_sqrt+0xc8>
 8007486:	d113      	bne.n	80074b0 <__ieee754_sqrt+0xec>
 8007488:	459c      	cmp	ip, r3
 800748a:	d811      	bhi.n	80074b0 <__ieee754_sqrt+0xec>
 800748c:	f1bc 0f00 	cmp.w	ip, #0
 8007490:	eb0c 0506 	add.w	r5, ip, r6
 8007494:	da43      	bge.n	800751e <__ieee754_sqrt+0x15a>
 8007496:	2d00      	cmp	r5, #0
 8007498:	db41      	blt.n	800751e <__ieee754_sqrt+0x15a>
 800749a:	f100 0801 	add.w	r8, r0, #1
 800749e:	1a09      	subs	r1, r1, r0
 80074a0:	459c      	cmp	ip, r3
 80074a2:	bf88      	it	hi
 80074a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80074a8:	eba3 030c 	sub.w	r3, r3, ip
 80074ac:	4432      	add	r2, r6
 80074ae:	4640      	mov	r0, r8
 80074b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80074b4:	f1be 0e01 	subs.w	lr, lr, #1
 80074b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80074bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074c4:	d1db      	bne.n	800747e <__ieee754_sqrt+0xba>
 80074c6:	430b      	orrs	r3, r1
 80074c8:	d006      	beq.n	80074d8 <__ieee754_sqrt+0x114>
 80074ca:	1c50      	adds	r0, r2, #1
 80074cc:	bf13      	iteet	ne
 80074ce:	3201      	addne	r2, #1
 80074d0:	3401      	addeq	r4, #1
 80074d2:	4672      	moveq	r2, lr
 80074d4:	f022 0201 	bicne.w	r2, r2, #1
 80074d8:	1063      	asrs	r3, r4, #1
 80074da:	0852      	lsrs	r2, r2, #1
 80074dc:	07e1      	lsls	r1, r4, #31
 80074de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80074e6:	bf48      	it	mi
 80074e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80074ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80074f0:	4614      	mov	r4, r2
 80074f2:	e781      	b.n	80073f8 <__ieee754_sqrt+0x34>
 80074f4:	0ad9      	lsrs	r1, r3, #11
 80074f6:	3815      	subs	r0, #21
 80074f8:	055b      	lsls	r3, r3, #21
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d0fa      	beq.n	80074f4 <__ieee754_sqrt+0x130>
 80074fe:	02cd      	lsls	r5, r1, #11
 8007500:	d50a      	bpl.n	8007518 <__ieee754_sqrt+0x154>
 8007502:	f1c2 0420 	rsb	r4, r2, #32
 8007506:	fa23 f404 	lsr.w	r4, r3, r4
 800750a:	1e55      	subs	r5, r2, #1
 800750c:	4093      	lsls	r3, r2
 800750e:	4321      	orrs	r1, r4
 8007510:	1b42      	subs	r2, r0, r5
 8007512:	e78a      	b.n	800742a <__ieee754_sqrt+0x66>
 8007514:	4610      	mov	r0, r2
 8007516:	e7f0      	b.n	80074fa <__ieee754_sqrt+0x136>
 8007518:	0049      	lsls	r1, r1, #1
 800751a:	3201      	adds	r2, #1
 800751c:	e7ef      	b.n	80074fe <__ieee754_sqrt+0x13a>
 800751e:	4680      	mov	r8, r0
 8007520:	e7bd      	b.n	800749e <__ieee754_sqrt+0xda>
 8007522:	bf00      	nop
 8007524:	7ff00000 	.word	0x7ff00000

08007528 <with_errno>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4604      	mov	r4, r0
 800752c:	460d      	mov	r5, r1
 800752e:	4616      	mov	r6, r2
 8007530:	f7ff f976 	bl	8006820 <__errno>
 8007534:	4629      	mov	r1, r5
 8007536:	6006      	str	r6, [r0, #0]
 8007538:	4620      	mov	r0, r4
 800753a:	bd70      	pop	{r4, r5, r6, pc}

0800753c <xflow>:
 800753c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800753e:	4614      	mov	r4, r2
 8007540:	461d      	mov	r5, r3
 8007542:	b108      	cbz	r0, 8007548 <xflow+0xc>
 8007544:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007548:	e9cd 2300 	strd	r2, r3, [sp]
 800754c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f9 f814 	bl	8000580 <__aeabi_dmul>
 8007558:	2222      	movs	r2, #34	; 0x22
 800755a:	b003      	add	sp, #12
 800755c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007560:	f7ff bfe2 	b.w	8007528 <with_errno>

08007564 <__math_uflow>:
 8007564:	b508      	push	{r3, lr}
 8007566:	2200      	movs	r2, #0
 8007568:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800756c:	f7ff ffe6 	bl	800753c <xflow>
 8007570:	ec41 0b10 	vmov	d0, r0, r1
 8007574:	bd08      	pop	{r3, pc}

08007576 <__math_oflow>:
 8007576:	b508      	push	{r3, lr}
 8007578:	2200      	movs	r2, #0
 800757a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800757e:	f7ff ffdd 	bl	800753c <xflow>
 8007582:	ec41 0b10 	vmov	d0, r0, r1
 8007586:	bd08      	pop	{r3, pc}

08007588 <fabs>:
 8007588:	ec51 0b10 	vmov	r0, r1, d0
 800758c:	ee10 2a10 	vmov	r2, s0
 8007590:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007594:	ec43 2b10 	vmov	d0, r2, r3
 8007598:	4770      	bx	lr

0800759a <finite>:
 800759a:	b082      	sub	sp, #8
 800759c:	ed8d 0b00 	vstr	d0, [sp]
 80075a0:	9801      	ldr	r0, [sp, #4]
 80075a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80075a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80075aa:	0fc0      	lsrs	r0, r0, #31
 80075ac:	b002      	add	sp, #8
 80075ae:	4770      	bx	lr

080075b0 <scalbn>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	ec55 4b10 	vmov	r4, r5, d0
 80075b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80075ba:	4606      	mov	r6, r0
 80075bc:	462b      	mov	r3, r5
 80075be:	b99a      	cbnz	r2, 80075e8 <scalbn+0x38>
 80075c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075c4:	4323      	orrs	r3, r4
 80075c6:	d036      	beq.n	8007636 <scalbn+0x86>
 80075c8:	4b39      	ldr	r3, [pc, #228]	; (80076b0 <scalbn+0x100>)
 80075ca:	4629      	mov	r1, r5
 80075cc:	ee10 0a10 	vmov	r0, s0
 80075d0:	2200      	movs	r2, #0
 80075d2:	f7f8 ffd5 	bl	8000580 <__aeabi_dmul>
 80075d6:	4b37      	ldr	r3, [pc, #220]	; (80076b4 <scalbn+0x104>)
 80075d8:	429e      	cmp	r6, r3
 80075da:	4604      	mov	r4, r0
 80075dc:	460d      	mov	r5, r1
 80075de:	da10      	bge.n	8007602 <scalbn+0x52>
 80075e0:	a32b      	add	r3, pc, #172	; (adr r3, 8007690 <scalbn+0xe0>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	e03a      	b.n	800765e <scalbn+0xae>
 80075e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075ec:	428a      	cmp	r2, r1
 80075ee:	d10c      	bne.n	800760a <scalbn+0x5a>
 80075f0:	ee10 2a10 	vmov	r2, s0
 80075f4:	4620      	mov	r0, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	f7f8 fe0c 	bl	8000214 <__adddf3>
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	e019      	b.n	8007636 <scalbn+0x86>
 8007602:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007606:	460b      	mov	r3, r1
 8007608:	3a36      	subs	r2, #54	; 0x36
 800760a:	4432      	add	r2, r6
 800760c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007610:	428a      	cmp	r2, r1
 8007612:	dd08      	ble.n	8007626 <scalbn+0x76>
 8007614:	2d00      	cmp	r5, #0
 8007616:	a120      	add	r1, pc, #128	; (adr r1, 8007698 <scalbn+0xe8>)
 8007618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761c:	da1c      	bge.n	8007658 <scalbn+0xa8>
 800761e:	a120      	add	r1, pc, #128	; (adr r1, 80076a0 <scalbn+0xf0>)
 8007620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007624:	e018      	b.n	8007658 <scalbn+0xa8>
 8007626:	2a00      	cmp	r2, #0
 8007628:	dd08      	ble.n	800763c <scalbn+0x8c>
 800762a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800762e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007632:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007636:	ec45 4b10 	vmov	d0, r4, r5
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007640:	da19      	bge.n	8007676 <scalbn+0xc6>
 8007642:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007646:	429e      	cmp	r6, r3
 8007648:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800764c:	dd0a      	ble.n	8007664 <scalbn+0xb4>
 800764e:	a112      	add	r1, pc, #72	; (adr r1, 8007698 <scalbn+0xe8>)
 8007650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e2      	bne.n	800761e <scalbn+0x6e>
 8007658:	a30f      	add	r3, pc, #60	; (adr r3, 8007698 <scalbn+0xe8>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 ff8f 	bl	8000580 <__aeabi_dmul>
 8007662:	e7cb      	b.n	80075fc <scalbn+0x4c>
 8007664:	a10a      	add	r1, pc, #40	; (adr r1, 8007690 <scalbn+0xe0>)
 8007666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0b8      	beq.n	80075e0 <scalbn+0x30>
 800766e:	a10e      	add	r1, pc, #56	; (adr r1, 80076a8 <scalbn+0xf8>)
 8007670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007674:	e7b4      	b.n	80075e0 <scalbn+0x30>
 8007676:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800767a:	3236      	adds	r2, #54	; 0x36
 800767c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007680:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007684:	4620      	mov	r0, r4
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <scalbn+0x108>)
 8007688:	2200      	movs	r2, #0
 800768a:	e7e8      	b.n	800765e <scalbn+0xae>
 800768c:	f3af 8000 	nop.w
 8007690:	c2f8f359 	.word	0xc2f8f359
 8007694:	01a56e1f 	.word	0x01a56e1f
 8007698:	8800759c 	.word	0x8800759c
 800769c:	7e37e43c 	.word	0x7e37e43c
 80076a0:	8800759c 	.word	0x8800759c
 80076a4:	fe37e43c 	.word	0xfe37e43c
 80076a8:	c2f8f359 	.word	0xc2f8f359
 80076ac:	81a56e1f 	.word	0x81a56e1f
 80076b0:	43500000 	.word	0x43500000
 80076b4:	ffff3cb0 	.word	0xffff3cb0
 80076b8:	3c900000 	.word	0x3c900000

080076bc <_init>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr

080076c8 <_fini>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr
