
ISU DSM Integration 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  080115c0  080115c0  000215c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e98  08011e98  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08011e98  08011e98  00021e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ea0  08011ea0  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ea0  08011ea0  00021ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ea4  08011ea4  00021ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08011ea8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e0c  200000a0  08011f48  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20002eac  08011f48  00032eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e415  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004426  00000000  00000000  0004e4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00052910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00054278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d3c  00000000  00000000  00055a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ce9  00000000  00000000  0007d764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e622e  00000000  00000000  000a144d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018767b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc8  00000000  00000000  001876cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080115a4 	.word	0x080115a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	080115a4 	.word	0x080115a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000fd2:	23aa      	movs	r3, #170	; 0xaa
 8000fd4:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2316      	movs	r3, #22
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <read_calliberation_data+0x124>)
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	21ee      	movs	r1, #238	; 0xee
 8000fea:	4842      	ldr	r0, [pc, #264]	; (80010f4 <read_calliberation_data+0x128>)
 8000fec:	f005 feda 	bl	8006da4 <HAL_I2C_Mem_Read>
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <read_calliberation_data+0x124>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <read_calliberation_data+0x124>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <read_calliberation_data+0x12c>)
 8001004:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <read_calliberation_data+0x124>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <read_calliberation_data+0x124>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <read_calliberation_data+0x130>)
 800101a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <read_calliberation_data+0x124>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <read_calliberation_data+0x124>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <read_calliberation_data+0x134>)
 8001030:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <read_calliberation_data+0x124>)
 8001034:	799b      	ldrb	r3, [r3, #6]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <read_calliberation_data+0x124>)
 800103c:	79db      	ldrb	r3, [r3, #7]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <read_calliberation_data+0x138>)
 8001048:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <read_calliberation_data+0x124>)
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <read_calliberation_data+0x124>)
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <read_calliberation_data+0x13c>)
 8001060:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <read_calliberation_data+0x124>)
 8001064:	7a9b      	ldrb	r3, [r3, #10]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <read_calliberation_data+0x124>)
 800106c:	7adb      	ldrb	r3, [r3, #11]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <read_calliberation_data+0x140>)
 8001078:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <read_calliberation_data+0x124>)
 800107c:	7b1b      	ldrb	r3, [r3, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <read_calliberation_data+0x124>)
 8001084:	7b5b      	ldrb	r3, [r3, #13]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <read_calliberation_data+0x144>)
 800108e:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <read_calliberation_data+0x124>)
 8001092:	7b9b      	ldrb	r3, [r3, #14]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <read_calliberation_data+0x124>)
 800109a:	7bdb      	ldrb	r3, [r3, #15]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <read_calliberation_data+0x148>)
 80010a4:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <read_calliberation_data+0x124>)
 80010a8:	7c1b      	ldrb	r3, [r3, #16]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <read_calliberation_data+0x124>)
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <read_calliberation_data+0x14c>)
 80010ba:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <read_calliberation_data+0x124>)
 80010be:	7c9b      	ldrb	r3, [r3, #18]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <read_calliberation_data+0x124>)
 80010c6:	7cdb      	ldrb	r3, [r3, #19]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <read_calliberation_data+0x150>)
 80010d0:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <read_calliberation_data+0x124>)
 80010d4:	7d1b      	ldrb	r3, [r3, #20]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <read_calliberation_data+0x124>)
 80010dc:	7d5b      	ldrb	r3, [r3, #21]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <read_calliberation_data+0x154>)
 80010e6:	801a      	strh	r2, [r3, #0]

}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000104 	.word	0x20000104
 80010f4:	20000244 	.word	0x20000244
 80010f8:	200000bc 	.word	0x200000bc
 80010fc:	200000be 	.word	0x200000be
 8001100:	200000c0 	.word	0x200000c0
 8001104:	200000c2 	.word	0x200000c2
 8001108:	200000c4 	.word	0x200000c4
 800110c:	200000c6 	.word	0x200000c6
 8001110:	200000c8 	.word	0x200000c8
 8001114:	200000ca 	.word	0x200000ca
 8001118:	200000cc 	.word	0x200000cc
 800111c:	200000ce 	.word	0x200000ce
 8001120:	200000d0 	.word	0x200000d0

08001124 <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800112a:	232e      	movs	r3, #46	; 0x2e
 800112c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22f4      	movs	r2, #244	; 0xf4
 8001140:	21ee      	movs	r1, #238	; 0xee
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <Get_UTemp+0x60>)
 8001144:	f005 fd34 	bl	8006bb0 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001148:	2005      	movs	r0, #5
 800114a:	f004 f8cd 	bl	80052e8 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2302      	movs	r3, #2
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <Get_UTemp+0x64>)
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	22f6      	movs	r2, #246	; 0xf6
 8001160:	21ee      	movs	r1, #238	; 0xee
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <Get_UTemp+0x60>)
 8001164:	f005 fe1e 	bl	8006da4 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <Get_UTemp+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <Get_UTemp+0x64>)
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000244 	.word	0x20000244
 8001188:	20000120 	.word	0x20000120

0800118c <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001190:	f7ff ffc8 	bl	8001124 <Get_UTemp>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <BMP180_GetTemp+0x108>)
 800119a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <BMP180_GetTemp+0x108>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a3d      	ldr	r2, [pc, #244]	; (8001298 <BMP180_GetTemp+0x10c>)
 80011a2:	8812      	ldrh	r2, [r2, #0]
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9dc 	bl	8000564 <__aeabi_i2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	4b3a      	ldr	r3, [pc, #232]	; (800129c <BMP180_GetTemp+0x110>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9d5 	bl	8000564 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <BMP180_GetTemp+0x114>)
 80011c0:	f7ff fb64 	bl	800088c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7ff fa34 	bl	8000638 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcde 	bl	8000b98 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <BMP180_GetTemp+0x118>)
 80011e0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <BMP180_GetTemp+0x11c>)
 80011e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9bb 	bl	8000564 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <BMP180_GetTemp+0x120>)
 80011f4:	f7ff fa20 	bl	8000638 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <BMP180_GetTemp+0x124>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	461a      	mov	r2, r3
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <BMP180_GetTemp+0x118>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9a8 	bl	8000564 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff fb36 	bl	800088c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcb6 	bl	8000b98 <__aeabi_d2iz>
 800122c:	4603      	mov	r3, r0
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <BMP180_GetTemp+0x128>)
 8001230:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <BMP180_GetTemp+0x118>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <BMP180_GetTemp+0x128>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <BMP180_GetTemp+0x12c>)
 800123e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <BMP180_GetTemp+0x12c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3308      	adds	r3, #8
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f98c 	bl	8000564 <__aeabi_i2d>
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <BMP180_GetTemp+0x130>)
 8001252:	f7ff fb1b 	bl	800088c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc9b 	bl	8000b98 <__aeabi_d2iz>
 8001262:	4603      	mov	r3, r0
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <BMP180_GetTemp+0x134>)
 8001266:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <BMP180_GetTemp+0x134>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f979 	bl	8000564 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <BMP180_GetTemp+0x138>)
 8001278:	f7ff fb08 	bl	800088c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fcd0 	bl	8000c28 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	ee07 3a90 	vmov	s15, r3
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	200000d4 	.word	0x200000d4
 8001298:	200000c6 	.word	0x200000c6
 800129c:	200000c4 	.word	0x200000c4
 80012a0:	40e00000 	.word	0x40e00000
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	200000ce 	.word	0x200000ce
 80012ac:	40a00000 	.word	0x40a00000
 80012b0:	200000d0 	.word	0x200000d0
 80012b4:	200000e0 	.word	0x200000e0
 80012b8:	200000ec 	.word	0x200000ec
 80012bc:	40300000 	.word	0x40300000
 80012c0:	20000100 	.word	0x20000100
 80012c4:	40240000 	.word	0x40240000

080012c8 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3334      	adds	r3, #52	; 0x34
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	22f4      	movs	r2, #244	; 0xf4
 80012f2:	21ee      	movs	r1, #238	; 0xee
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <Get_UPress+0xb0>)
 80012f6:	f005 fc5b 	bl	8006bb0 <HAL_I2C_Mem_Write>

	switch (oss)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d81b      	bhi.n	8001338 <Get_UPress+0x70>
 8001300:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <Get_UPress+0x40>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	08001321 	.word	0x08001321
 8001310:	08001329 	.word	0x08001329
 8001314:	08001331 	.word	0x08001331
	{
		case (0):
			HAL_Delay (5);
 8001318:	2005      	movs	r0, #5
 800131a:	f003 ffe5 	bl	80052e8 <HAL_Delay>
			break;
 800131e:	e00b      	b.n	8001338 <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001320:	2008      	movs	r0, #8
 8001322:	f003 ffe1 	bl	80052e8 <HAL_Delay>
			break;
 8001326:	e007      	b.n	8001338 <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 8001328:	200e      	movs	r0, #14
 800132a:	f003 ffdd 	bl	80052e8 <HAL_Delay>
			break;
 800132e:	e003      	b.n	8001338 <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001330:	201a      	movs	r0, #26
 8001332:	f003 ffd9 	bl	80052e8 <HAL_Delay>
			break;
 8001336:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2303      	movs	r3, #3
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <Get_UPress+0xb4>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f6      	movs	r2, #246	; 0xf6
 800134a:	21ee      	movs	r1, #238	; 0xee
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <Get_UPress+0xb0>)
 800134e:	f005 fd29 	bl	8006da4 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <Get_UPress+0xb4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	041a      	lsls	r2, r3, #16
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Get_UPress+0xb4>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	4413      	add	r3, r2
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <Get_UPress+0xb4>)
 8001362:	7892      	ldrb	r2, [r2, #2]
 8001364:	441a      	add	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f1c3 0308 	rsb	r3, r3, #8
 800136c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000244 	.word	0x20000244
 800137c:	2000011c 	.word	0x2000011c

08001380 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff9d 	bl	80012c8 <Get_UPress>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4ba8      	ldr	r3, [pc, #672]	; (8001634 <BMP180_GetPress+0x2b4>)
 8001394:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <BMP180_GetPress+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4aa8      	ldr	r2, [pc, #672]	; (800163c <BMP180_GetPress+0x2bc>)
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8df 	bl	8000564 <__aeabi_i2d>
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <BMP180_GetPress+0x2c0>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8d8 	bl	8000564 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <BMP180_GetPress+0x2c4>)
 80013ba:	f7ff fa67 	bl	800088c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff f937 	bl	8000638 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbe1 	bl	8000b98 <__aeabi_d2iz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a9b      	ldr	r2, [pc, #620]	; (8001648 <BMP180_GetPress+0x2c8>)
 80013da:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013dc:	4b9b      	ldr	r3, [pc, #620]	; (800164c <BMP180_GetPress+0x2cc>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8be 	bl	8000564 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b98      	ldr	r3, [pc, #608]	; (8001650 <BMP180_GetPress+0x2d0>)
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4614      	mov	r4, r2
 80013f8:	461d      	mov	r5, r3
 80013fa:	4b96      	ldr	r3, [pc, #600]	; (8001654 <BMP180_GetPress+0x2d4>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	461a      	mov	r2, r3
 8001402:	4b91      	ldr	r3, [pc, #580]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8ab 	bl	8000564 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff fa39 	bl	800088c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbb9 	bl	8000b98 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	4a8b      	ldr	r2, [pc, #556]	; (8001658 <BMP180_GetPress+0x2d8>)
 800142a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800142c:	4b86      	ldr	r3, [pc, #536]	; (8001648 <BMP180_GetPress+0x2c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b89      	ldr	r3, [pc, #548]	; (8001658 <BMP180_GetPress+0x2d8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a89      	ldr	r2, [pc, #548]	; (800165c <BMP180_GetPress+0x2dc>)
 8001438:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <BMP180_GetPress+0x2dc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001444:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <BMP180_GetPress+0x2e4>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f889 	bl	8000564 <__aeabi_i2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a81      	ldr	r2, [pc, #516]	; (8001660 <BMP180_GetPress+0x2e0>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f87e 	bl	8000564 <__aeabi_i2d>
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <BMP180_GetPress+0x2e8>)
 800146e:	f7ff fa0d 	bl	800088c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f8dd 	bl	8000638 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b71      	ldr	r3, [pc, #452]	; (8001650 <BMP180_GetPress+0x2d0>)
 800148c:	f7ff f9fe 	bl	800088c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fb7e 	bl	8000b98 <__aeabi_d2iz>
 800149c:	4603      	mov	r3, r0
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <BMP180_GetPress+0x2c8>)
 80014a0:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <BMP180_GetPress+0x2ec>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <BMP180_GetPress+0x2e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f856 	bl	8000564 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b64      	ldr	r3, [pc, #400]	; (8001650 <BMP180_GetPress+0x2d0>)
 80014be:	f7ff f9e5 	bl	800088c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb65 	bl	8000b98 <__aeabi_d2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a61      	ldr	r2, [pc, #388]	; (8001658 <BMP180_GetPress+0x2d8>)
 80014d2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014d4:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <BMP180_GetPress+0x2c8>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <BMP180_GetPress+0x2d8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a64      	ldr	r2, [pc, #400]	; (8001670 <BMP180_GetPress+0x2f0>)
 80014e0:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <BMP180_GetPress+0x2f4>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	4b61      	ldr	r3, [pc, #388]	; (8001670 <BMP180_GetPress+0x2f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	441a      	add	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	3302      	adds	r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <BMP180_GetPress+0x17e>
 80014fc:	3303      	adds	r3, #3
 80014fe:	109b      	asrs	r3, r3, #2
 8001500:	461a      	mov	r2, r3
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <BMP180_GetPress+0x2f8>)
 8001504:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <BMP180_GetPress+0x2fc>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	461a      	mov	r2, r3
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f824 	bl	8000564 <__aeabi_i2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <BMP180_GetPress+0x300>)
 8001522:	f7ff f9b3 	bl	800088c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb33 	bl	8000b98 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	4a44      	ldr	r2, [pc, #272]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001536:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <BMP180_GetPress+0x304>)
 800153a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f810 	bl	8000564 <__aeabi_i2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <BMP180_GetPress+0x2e0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a44      	ldr	r2, [pc, #272]	; (8001660 <BMP180_GetPress+0x2e0>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f805 	bl	8000564 <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <BMP180_GetPress+0x2e8>)
 8001560:	f7ff f994 	bl	800088c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7ff f864 	bl	8000638 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b42      	ldr	r3, [pc, #264]	; (8001688 <BMP180_GetPress+0x308>)
 800157e:	f7ff f985 	bl	800088c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb05 	bl	8000b98 <__aeabi_d2iz>
 800158e:	4603      	mov	r3, r0
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <BMP180_GetPress+0x2d8>)
 8001592:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <BMP180_GetPress+0x2d8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4413      	add	r3, r2
 800159e:	3302      	adds	r3, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffdf 	bl	8000564 <__aeabi_i2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <BMP180_GetPress+0x30c>)
 80015ac:	f7ff f96e 	bl	800088c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff faee 	bl	8000b98 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <BMP180_GetPress+0x2f0>)
 80015c0:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <BMP180_GetPress+0x310>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <BMP180_GetPress+0x2f0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb5 	bl	8000544 <__aeabi_ui2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <BMP180_GetPress+0x2c4>)
 80015e0:	f7ff f954 	bl	800088c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fafc 	bl	8000be8 <__aeabi_d2uiz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <BMP180_GetPress+0x314>)
 80015f4:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <BMP180_GetPress+0x2b4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <BMP180_GetPress+0x2f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa41 f202 	asr.w	r2, r1, r2
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <BMP180_GetPress+0x318>)
 8001612:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <BMP180_GetPress+0x318>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db41      	blt.n	80016a0 <BMP180_GetPress+0x320>
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <BMP180_GetPress+0x318>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <BMP180_GetPress+0x314>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <BMP180_GetPress+0x31c>)
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e040      	b.n	80016b4 <BMP180_GetPress+0x334>
 8001632:	bf00      	nop
 8001634:	200000d8 	.word	0x200000d8
 8001638:	200000d4 	.word	0x200000d4
 800163c:	200000c6 	.word	0x200000c6
 8001640:	200000c4 	.word	0x200000c4
 8001644:	40e00000 	.word	0x40e00000
 8001648:	200000dc 	.word	0x200000dc
 800164c:	200000ce 	.word	0x200000ce
 8001650:	40a00000 	.word	0x40a00000
 8001654:	200000d0 	.word	0x200000d0
 8001658:	200000e0 	.word	0x200000e0
 800165c:	200000ec 	.word	0x200000ec
 8001660:	200000f4 	.word	0x200000f4
 8001664:	200000ca 	.word	0x200000ca
 8001668:	40b00000 	.word	0x40b00000
 800166c:	200000be 	.word	0x200000be
 8001670:	200000e4 	.word	0x200000e4
 8001674:	200000bc 	.word	0x200000bc
 8001678:	200000e8 	.word	0x200000e8
 800167c:	200000c0 	.word	0x200000c0
 8001680:	40c00000 	.word	0x40c00000
 8001684:	200000c8 	.word	0x200000c8
 8001688:	40f00000 	.word	0x40f00000
 800168c:	40100000 	.word	0x40100000
 8001690:	200000c2 	.word	0x200000c2
 8001694:	200000f0 	.word	0x200000f0
 8001698:	200000f8 	.word	0x200000f8
 800169c:	200000fc 	.word	0x200000fc
	else Press = (B7/B4)*2;
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <BMP180_GetPress+0x43c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <BMP180_GetPress+0x440>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <BMP180_GetPress+0x444>)
 80016b2:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <BMP180_GetPress+0x444>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_i2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <BMP180_GetPress+0x448>)
 80016c4:	f7ff f8e2 	bl	800088c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <BMP180_GetPress+0x444>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff45 	bl	8000564 <__aeabi_i2d>
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <BMP180_GetPress+0x448>)
 80016e0:	f7ff f8d4 	bl	800088c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe ffa4 	bl	8000638 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa4e 	bl	8000b98 <__aeabi_d2iz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a33      	ldr	r2, [pc, #204]	; (80017cc <BMP180_GetPress+0x44c>)
 8001700:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <BMP180_GetPress+0x44c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f640 32de 	movw	r2, #3038	; 0xbde
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff28 	bl	8000564 <__aeabi_i2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <BMP180_GetPress+0x450>)
 800171a:	f7ff f8b7 	bl	800088c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa37 	bl	8000b98 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <BMP180_GetPress+0x44c>)
 800172e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <BMP180_GetPress+0x444>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <BMP180_GetPress+0x454>)
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff12 	bl	8000564 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <BMP180_GetPress+0x450>)
 8001746:	f7ff f8a1 	bl	800088c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa21 	bl	8000b98 <__aeabi_d2iz>
 8001756:	4603      	mov	r3, r0
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <BMP180_GetPress+0x458>)
 800175a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <BMP180_GetPress+0x444>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feff 	bl	8000564 <__aeabi_i2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <BMP180_GetPress+0x44c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <BMP180_GetPress+0x458>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fef3 	bl	8000564 <__aeabi_i2d>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <BMP180_GetPress+0x45c>)
 8001784:	f7ff f882 	bl	800088c <__aeabi_ddiv>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fd9c 	bl	80002cc <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9fc 	bl	8000b98 <__aeabi_d2iz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <BMP180_GetPress+0x444>)
 80017a4:	6013      	str	r3, [r2, #0]
	return Press;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <BMP180_GetPress+0x444>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	200000f8 	.word	0x200000f8
 80017c0:	200000f0 	.word	0x200000f0
 80017c4:	200000fc 	.word	0x200000fc
 80017c8:	40700000 	.word	0x40700000
 80017cc:	200000dc 	.word	0x200000dc
 80017d0:	40f00000 	.word	0x40f00000
 80017d4:	ffffe343 	.word	0xffffe343
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	40300000 	.word	0x40300000

080017e0 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fdc9 	bl	8001380 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <BMP180_GetAlt+0x88>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800186c <BMP180_GetAlt+0x8c>
 80017fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001802:	ee16 0a90 	vmov	r0, s13
 8001806:	f7fe febf 	bl	8000588 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001858 <BMP180_GetAlt+0x78>
 8001812:	ec43 2b10 	vmov	d0, r2, r3
 8001816:	f00e ffab 	bl	8010770 <pow>
 800181a:	ec53 2b10 	vmov	r2, r3, d0
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	4913      	ldr	r1, [pc, #76]	; (8001870 <BMP180_GetAlt+0x90>)
 8001824:	f7fe fd50 	bl	80002c8 <__aeabi_dsub>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a30b      	add	r3, pc, #44	; (adr r3, 8001860 <BMP180_GetAlt+0x80>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9f1 	bl	8000c28 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	ee07 3a90 	vmov	s15, r3
}
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	cc745124 	.word	0xcc745124
 800185c:	3fc85b95 	.word	0x3fc85b95
 8001860:	00000000 	.word	0x00000000
 8001864:	40e5a540 	.word	0x40e5a540
 8001868:	200000fc 	.word	0x200000fc
 800186c:	47c5e680 	.word	0x47c5e680
 8001870:	3ff00000 	.word	0x3ff00000

08001874 <BMP180_Start>:

void BMP180_Start (void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001878:	f7ff fba8 	bl	8000fcc <read_calliberation_data>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <shiftIn>:
#include "HX710B.h"

enum HX_MODE { NONE, DIFF_10Hz, TEMP_40Hz, DIFF_40Hz};
const byte HX_MODE = DIFF_40Hz;

uint8_t shiftIn(GPIO_TypeDef* dataPort, uint16_t dataPin, GPIO_TypeDef* clockPort, uint16_t clockPin, uint8_t bitOrder) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	460b      	mov	r3, r1
 800188e:	817b      	strh	r3, [r7, #10]
 8001890:	4613      	mov	r3, r2
 8001892:	813b      	strh	r3, [r7, #8]
	uint8_t value = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	for (i = 0; i < 8; ++i) {
 8001898:	2300      	movs	r3, #0
 800189a:	75bb      	strb	r3, [r7, #22]
 800189c:	e035      	b.n	800190a <shiftIn+0x8a>
		HAL_GPIO_WritePin(clockPort,clockPin, 1);
 800189e:	893b      	ldrh	r3, [r7, #8]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f005 f825 	bl	80068f4 <HAL_GPIO_WritePin>
		if (bitOrder == LSBFIRST)
 80018aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d110      	bne.n	80018d4 <shiftIn+0x54>
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << i;
 80018b2:	897b      	ldrh	r3, [r7, #10]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f005 f804 	bl	80068c4 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	7dbb      	ldrb	r3, [r7, #22]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e011      	b.n	80018f8 <shiftIn+0x78>
		else
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << (7 - i);
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	4619      	mov	r1, r3
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f004 fff3 	bl	80068c4 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	7dbb      	ldrb	r3, [r7, #22]
 80018e4:	f1c3 0307 	rsb	r3, r3, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(clockPort, clockPin, 0);
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fff8 	bl	80068f4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; ++i) {
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	3301      	adds	r3, #1
 8001908:	75bb      	strb	r3, [r7, #22]
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d9c6      	bls.n	800189e <shiftIn+0x1e>
	}
	return value;
 8001910:	7dfb      	ldrb	r3, [r7, #23]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <readHX>:

unsigned long readHX() {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b087      	sub	sp, #28
 8001920:	af02      	add	r7, sp, #8

  // pulse clock line to start a reading
  for (char i = 0; i < HX_MODE; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e00e      	b.n	8001946 <readHX+0x2a>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 1);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192e:	4827      	ldr	r0, [pc, #156]	; (80019cc <readHX+0xb0>)
 8001930:	f004 ffe0 	bl	80068f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4824      	ldr	r0, [pc, #144]	; (80019cc <readHX+0xb0>)
 800193c:	f004 ffda 	bl	80068f4 <HAL_GPIO_WritePin>
  for (char i = 0; i < HX_MODE; i++) {
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3301      	adds	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	2203      	movs	r2, #3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4293      	cmp	r3, r2
 800194c:	d3ec      	bcc.n	8001928 <readHX+0xc>
  }

  // wait for the reading to finish
  while (HAL_GPIO_ReadPin(NCP_DAT_GPIO_Port,NCP_DAT_Pin)) {}
 800194e:	bf00      	nop
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <readHX+0xb0>)
 8001956:	f004 ffb5 	bl	80068c4 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f7      	bne.n	8001950 <readHX+0x34>

  // read the 24-bit pressure as 3 bytes using SPI
  byte data[3];
  for (byte j = 3; j--;) {
 8001960:	2303      	movs	r3, #3
 8001962:	73bb      	strb	r3, [r7, #14]
 8001964:	e011      	b.n	800198a <readHX+0x6e>
    data[j] = shiftIn(NCP_DAT_GPIO_Port, NCP_DAT_Pin, NCP_SCK_GPIO_Port, NCP_SCK_Pin, MSBFIRST);
 8001966:	7bbc      	ldrb	r4, [r7, #14]
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	4a16      	ldr	r2, [pc, #88]	; (80019cc <readHX+0xb0>)
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <readHX+0xb0>)
 8001978:	f7ff ff82 	bl	8001880 <shiftIn>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	f104 0310 	add.w	r3, r4, #16
 8001984:	443b      	add	r3, r7
 8001986:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for (byte j = 3; j--;) {
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	73ba      	strb	r2, [r7, #14]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e8      	bne.n	8001966 <readHX+0x4a>
  }

  data[2] ^= 0x80;  // see note
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800199a:	43db      	mvns	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	71bb      	strb	r3, [r7, #6]

  // shift the 3 bytes into a large integer
  long result=0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  result += (long)data[2] << 16;
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	4413      	add	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
  result += (long)data[1] << 8;
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  result += (long)data[0];
 80019b8:	793b      	ldrb	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]

  return result;
 80019c2:	68bb      	ldr	r3, [r7, #8]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40020000 	.word	0x40020000

080019d0 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	4834      	ldr	r0, [pc, #208]	; (8001ab4 <Max6675_Read_Temp+0xe4>)
 80019e2:	f004 ff87 	bl	80068f4 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80019e6:	2332      	movs	r3, #50	; 0x32
 80019e8:	2201      	movs	r2, #1
 80019ea:	4933      	ldr	r1, [pc, #204]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 80019ec:	4833      	ldr	r0, [pc, #204]	; (8001abc <Max6675_Read_Temp+0xec>)
 80019ee:	f006 ff58 	bl	80088a2 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80019f2:	2201      	movs	r2, #1
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <Max6675_Read_Temp+0xe4>)
 80019f8:	f004 ff7c 	bl	80068f4 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a08:	701a      	strb	r2, [r3, #0]
Error=0;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d02b      	beq.n	8001a70 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d120      	bne.n	8001a62 <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001a20:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <Max6675_Read_Temp+0xf8>)
 8001a22:	f007 fb71 	bl	8009108 <HAL_TIM_Base_Start>
		while(timer_val<1)
 8001a26:	e011      	b.n	8001a4c <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d103      	bne.n	8001a38 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
				break;
 8001a36:	e00d      	b.n	8001a54 <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <Max6675_Read_Temp+0xf8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <Max6675_Read_Temp+0xfc>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a4a:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0e9      	beq.n	8001a28 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e006      	b.n	8001a70 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d102      	bne.n	8001a70 <Max6675_Read_Temp+0xa0>
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	10db      	asrs	r3, r3, #3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8001a9c:	20fa      	movs	r0, #250	; 0xfa
 8001a9e:	f003 fc23 	bl	80052e8 <HAL_Delay>
return Temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	ee07 3a90 	vmov	s15, r3
}
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	20000124 	.word	0x20000124
 8001abc:	200002ec 	.word	0x200002ec
 8001ac0:	20000126 	.word	0x20000126
 8001ac4:	20000127 	.word	0x20000127
 8001ac8:	2000039c 	.word	0x2000039c
 8001acc:	d1b71759 	.word	0xd1b71759
 8001ad0:	20000548 	.word	0x20000548
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b08c      	sub	sp, #48	; 0x30
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <decodeGGA+0x17c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001aee:	e004      	b.n	8001afa <decodeGGA+0x22>
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <decodeGGA+0x17c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <decodeGGA+0x17c>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <decodeGGA+0x17c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b2c      	cmp	r3, #44	; 0x2c
 8001b08:	d1f2      	bne.n	8001af0 <decodeGGA+0x18>
	inx++;
 8001b0a:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <decodeGGA+0x17c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <decodeGGA+0x17c>)
 8001b12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001b14:	e004      	b.n	8001b20 <decodeGGA+0x48>
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <decodeGGA+0x17c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <decodeGGA+0x17c>)
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <decodeGGA+0x17c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b2e:	d1f2      	bne.n	8001b16 <decodeGGA+0x3e>
	inx++;
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <decodeGGA+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <decodeGGA+0x17c>)
 8001b38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001b3a:	e004      	b.n	8001b46 <decodeGGA+0x6e>
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <decodeGGA+0x17c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <decodeGGA+0x17c>)
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <decodeGGA+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b2c      	cmp	r3, #44	; 0x2c
 8001b54:	d1f2      	bne.n	8001b3c <decodeGGA+0x64>
	inx++;
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <decodeGGA+0x17c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <decodeGGA+0x17c>)
 8001b5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001b60:	e004      	b.n	8001b6c <decodeGGA+0x94>
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <decodeGGA+0x17c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <decodeGGA+0x17c>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <decodeGGA+0x17c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b2c      	cmp	r3, #44	; 0x2c
 8001b7a:	d1f2      	bne.n	8001b62 <decodeGGA+0x8a>
	inx++;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <decodeGGA+0x17c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <decodeGGA+0x17c>)
 8001b84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001b86:	e004      	b.n	8001b92 <decodeGGA+0xba>
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <decodeGGA+0x17c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <decodeGGA+0x17c>)
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <decodeGGA+0x17c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba0:	d1f2      	bne.n	8001b88 <decodeGGA+0xb0>
	inx++;
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <decodeGGA+0x17c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <decodeGGA+0x17c>)
 8001baa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001bac:	e004      	b.n	8001bb8 <decodeGGA+0xe0>
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <decodeGGA+0x17c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <decodeGGA+0x17c>)
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <decodeGGA+0x17c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001bc6:	d1f2      	bne.n	8001bae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <decodeGGA+0x17c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <decodeGGA+0x17c>)
 8001bd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <decodeGGA+0x17c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b31      	cmp	r3, #49	; 0x31
 8001be0:	d00f      	beq.n	8001c02 <decodeGGA+0x12a>
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <decodeGGA+0x17c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b32      	cmp	r3, #50	; 0x32
 8001bf0:	d007      	beq.n	8001c02 <decodeGGA+0x12a>
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <decodeGGA+0x17c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b36      	cmp	r3, #54	; 0x36
 8001c00:	d106      	bne.n	8001c10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <decodeGGA+0x17c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c0e:	e009      	b.n	8001c24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001c16:	2301      	movs	r3, #1
 8001c18:	e2fd      	b.n	8002216 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <decodeGGA+0x17c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <decodeGGA+0x17c>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <decodeGGA+0x17c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2c      	cmp	r3, #44	; 0x2c
 8001c32:	d1f2      	bne.n	8001c1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <decodeGGA+0x17c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <decodeGGA+0x17c>)
 8001c3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	220c      	movs	r2, #12
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00c f980 	bl	800df4c <memset>
	i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c50:	e016      	b.n	8001c80 <decodeGGA+0x1a8>
 8001c52:	bf00      	nop
 8001c54:	20000128 	.word	0x20000128
	{
		buffer[i] = GGAbuffer[inx];
 8001c58:	4bab      	ldr	r3, [pc, #684]	; (8001f08 <decodeGGA+0x430>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	7819      	ldrb	r1, [r3, #0]
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	4413      	add	r3, r2
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
		i++;
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	3301      	adds	r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001c76:	4ba4      	ldr	r3, [pc, #656]	; (8001f08 <decodeGGA+0x430>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4aa2      	ldr	r2, [pc, #648]	; (8001f08 <decodeGGA+0x430>)
 8001c7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <decodeGGA+0x430>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c8e:	d1e3      	bne.n	8001c58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00c f907 	bl	800dea8 <atoi>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <decodeGGA+0x434>)
 8001c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca2:	1312      	asrs	r2, r2, #12
 8001ca4:	17db      	asrs	r3, r3, #31
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	4b99      	ldr	r3, [pc, #612]	; (8001f10 <decodeGGA+0x438>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4999      	ldr	r1, [pc, #612]	; (8001f14 <decodeGGA+0x43c>)
 8001cae:	fb81 0103 	smull	r0, r1, r1, r3
 8001cb2:	1149      	asrs	r1, r1, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1acb      	subs	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a97      	ldr	r2, [pc, #604]	; (8001f18 <decodeGGA+0x440>)
 8001cbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00c f8f0 	bl	800dea8 <atoi>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <decodeGGA+0x43c>)
 8001ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd0:	1152      	asrs	r2, r2, #5
 8001cd2:	17db      	asrs	r3, r3, #31
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	4a8f      	ldr	r2, [pc, #572]	; (8001f14 <decodeGGA+0x43c>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1151      	asrs	r1, r2, #5
 8001cde:	17da      	asrs	r2, r3, #31
 8001ce0:	1a8a      	subs	r2, r1, r2
 8001ce2:	2164      	movs	r1, #100	; 0x64
 8001ce4:	fb01 f202 	mul.w	r2, r1, r2
 8001ce8:	1a9a      	subs	r2, r3, r2
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <decodeGGA+0x438>)
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <decodeGGA+0x43c>)
 8001cf0:	fb83 0301 	smull	r0, r3, r3, r1
 8001cf4:	1158      	asrs	r0, r3, #5
 8001cf6:	17cb      	asrs	r3, r1, #31
 8001cf8:	1ac3      	subs	r3, r0, r3
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	fb00 f303 	mul.w	r3, r0, r3
 8001d00:	1acb      	subs	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <decodeGGA+0x444>)
 8001d06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <decodeGGA+0x444>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b3b      	cmp	r3, #59	; 0x3b
 8001d0e:	dd09      	ble.n	8001d24 <decodeGGA+0x24c>
	{
		min = min-60;
 8001d10:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <decodeGGA+0x444>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3b3c      	subs	r3, #60	; 0x3c
 8001d16:	4a81      	ldr	r2, [pc, #516]	; (8001f1c <decodeGGA+0x444>)
 8001d18:	6013      	str	r3, [r2, #0]
		hr++;
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <decodeGGA+0x440>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a7d      	ldr	r2, [pc, #500]	; (8001f18 <decodeGGA+0x440>)
 8001d22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001d24:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <decodeGGA+0x440>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da09      	bge.n	8001d40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <decodeGGA+0x440>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3318      	adds	r3, #24
 8001d32:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <decodeGGA+0x440>)
 8001d34:	6013      	str	r3, [r2, #0]
		daychange--;
 8001d36:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <decodeGGA+0x448>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a78      	ldr	r2, [pc, #480]	; (8001f20 <decodeGGA+0x448>)
 8001d3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <decodeGGA+0x440>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b17      	cmp	r3, #23
 8001d46:	dd09      	ble.n	8001d5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <decodeGGA+0x440>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b18      	subs	r3, #24
 8001d4e:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <decodeGGA+0x440>)
 8001d50:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d52:	4b73      	ldr	r3, [pc, #460]	; (8001f20 <decodeGGA+0x448>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <decodeGGA+0x448>)
 8001d5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001d5c:	4b6e      	ldr	r3, [pc, #440]	; (8001f18 <decodeGGA+0x440>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <decodeGGA+0x444>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00c f899 	bl	800dea8 <atoi>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <decodeGGA+0x43c>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	1159      	asrs	r1, r3, #5
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	2164      	movs	r1, #100	; 0x64
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001d90:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <decodeGGA+0x430>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <decodeGGA+0x430>)
 8001d98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	220c      	movs	r2, #12
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00c f8d2 	bl	800df4c <memset>
	i=0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dac:	e013      	b.n	8001dd6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <decodeGGA+0x430>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	7819      	ldrb	r1, [r3, #0]
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
		i++;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	3301      	adds	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <decodeGGA+0x430>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <decodeGGA+0x430>)
 8001dd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <decodeGGA+0x430>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b2c      	cmp	r3, #44	; 0x2c
 8001de4:	d1e3      	bne.n	8001dae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa10 	bl	8000210 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d801      	bhi.n	8001dfa <decodeGGA+0x322>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e20d      	b.n	8002216 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00c f852 	bl	800dea8 <atoi>
 8001e04:	4603      	mov	r3, r0
 8001e06:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001e0c:	e002      	b.n	8001e14 <decodeGGA+0x33c>
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	3301      	adds	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e20:	d1f5      	bne.n	8001e0e <decodeGGA+0x336>
	j++;
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	3301      	adds	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe f9ef 	bl	8000210 <strlen>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	4413      	add	r3, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00c f830 	bl	800dea8 <atoi>
 8001e48:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb88 	bl	8000564 <__aeabi_i2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <decodeGGA+0x44c>)
 8001e5a:	f7fe fd17 	bl	800088c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f7fe fb7c 	bl	8000564 <__aeabi_i2d>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	460d      	mov	r5, r1
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	3302      	adds	r3, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb75 	bl	8000564 <__aeabi_i2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	ec43 2b11 	vmov	d1, r2, r3
 8001e82:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001f00 <decodeGGA+0x428>
 8001e86:	f00e fc73 	bl	8010770 <pow>
 8001e8a:	ec53 2b10 	vmov	r2, r3, d0
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f7fe fcfb 	bl	800088c <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	f7fe fa15 	bl	80002cc <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe febd 	bl	8000c28 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]
	inx++;  
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <decodeGGA+0x430>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <decodeGGA+0x430>)
 8001ec0:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <decodeGGA+0x430>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <decodeGGA+0x430>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <decodeGGA+0x430>)
 8001eda:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <decodeGGA+0x430>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <decodeGGA+0x430>)
 8001ee4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	220c      	movs	r2, #12
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00c f82c 	bl	800df4c <memset>
	i=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001ef8:	e02a      	b.n	8001f50 <decodeGGA+0x478>
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	40240000 	.word	0x40240000
 8001f08:	20000128 	.word	0x20000128
 8001f0c:	68db8bad 	.word	0x68db8bad
 8001f10:	20000000 	.word	0x20000000
 8001f14:	51eb851f 	.word	0x51eb851f
 8001f18:	2000012c 	.word	0x2000012c
 8001f1c:	20000130 	.word	0x20000130
 8001f20:	20000140 	.word	0x20000140
 8001f24:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <decodeGGA+0x680>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
		i++;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	3301      	adds	r3, #1
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f46:	4b84      	ldr	r3, [pc, #528]	; (8002158 <decodeGGA+0x680>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a82      	ldr	r2, [pc, #520]	; (8002158 <decodeGGA+0x680>)
 8001f4e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <decodeGGA+0x680>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f5e:	d1e3      	bne.n	8001f28 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00b ff9f 	bl	800dea8 <atoi>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001f72:	e002      	b.n	8001f7a <decodeGGA+0x4a2>
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	3301      	adds	r3, #1
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7a:	f107 020c 	add.w	r2, r7, #12
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b2e      	cmp	r3, #46	; 0x2e
 8001f86:	d1f5      	bne.n	8001f74 <decodeGGA+0x49c>
	j++;
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f93c 	bl	8000210 <strlen>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00b ff7d 	bl	800dea8 <atoi>
 8001fae:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001fb0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fad5 	bl	8000564 <__aeabi_i2d>
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <decodeGGA+0x684>)
 8001fc0:	f7fe fc64 	bl	800088c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4690      	mov	r8, r2
 8001fca:	4699      	mov	r9, r3
 8001fcc:	69f8      	ldr	r0, [r7, #28]
 8001fce:	f7fe fac9 	bl	8000564 <__aeabi_i2d>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fac2 	bl	8000564 <__aeabi_i2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	ec43 2b11 	vmov	d1, r2, r3
 8001fe8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002150 <decodeGGA+0x678>
 8001fec:	f00e fbc0 	bl	8010770 <pow>
 8001ff0:	ec53 2b10 	vmov	r2, r3, d0
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe fc48 	bl	800088c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe f962 	bl	80002cc <__adddf3>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fe0a 	bl	8000c28 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]
	inx++;
 800201e:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <decodeGGA+0x680>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <decodeGGA+0x680>)
 8002026:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <decodeGGA+0x680>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <decodeGGA+0x680>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <decodeGGA+0x680>)
 8002040:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <decodeGGA+0x680>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <decodeGGA+0x680>)
 800204a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <decodeGGA+0x680>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a41      	ldr	r2, [pc, #260]	; (8002158 <decodeGGA+0x680>)
 8002054:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002056:	4b40      	ldr	r3, [pc, #256]	; (8002158 <decodeGGA+0x680>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <decodeGGA+0x680>)
 800205e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	220c      	movs	r2, #12
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f00b ff6f 	bl	800df4c <memset>
	i=0;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8002072:	e013      	b.n	800209c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <decodeGGA+0x680>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	7819      	ldrb	r1, [r3, #0]
 8002080:	f107 020c 	add.w	r2, r7, #12
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	4413      	add	r3, r2
 8002088:	460a      	mov	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
		i++;
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	3301      	adds	r3, #1
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <decodeGGA+0x680>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <decodeGGA+0x680>)
 800209a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <decodeGGA+0x680>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2c      	cmp	r3, #44	; 0x2c
 80020aa:	d1e3      	bne.n	8002074 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00b fef9 	bl	800dea8 <atoi>
 80020b6:	4602      	mov	r2, r0
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <decodeGGA+0x680>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <decodeGGA+0x680>)
 80020c4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80020c6:	e004      	b.n	80020d2 <decodeGGA+0x5fa>
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <decodeGGA+0x680>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	4a22      	ldr	r2, [pc, #136]	; (8002158 <decodeGGA+0x680>)
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <decodeGGA+0x680>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b2c      	cmp	r3, #44	; 0x2c
 80020e0:	d1f2      	bne.n	80020c8 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <decodeGGA+0x680>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <decodeGGA+0x680>)
 80020ea:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	220c      	movs	r2, #12
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00b ff29 	bl	800df4c <memset>
	i=0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80020fe:	e013      	b.n	8002128 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <decodeGGA+0x680>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	7819      	ldrb	r1, [r3, #0]
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	4413      	add	r3, r2
 8002114:	460a      	mov	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
		i++;
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	3301      	adds	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <decodeGGA+0x680>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <decodeGGA+0x680>)
 8002126:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <decodeGGA+0x680>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b2c      	cmp	r3, #44	; 0x2c
 8002136:	d1e3      	bne.n	8002100 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f00b feb3 	bl	800dea8 <atoi>
 8002142:	4603      	mov	r3, r0
 8002144:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800214a:	e00c      	b.n	8002166 <decodeGGA+0x68e>
 800214c:	f3af 8000 	nop.w
 8002150:	00000000 	.word	0x00000000
 8002154:	40240000 	.word	0x40240000
 8002158:	20000128 	.word	0x20000128
 800215c:	40590000 	.word	0x40590000
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	3301      	adds	r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b2e      	cmp	r3, #46	; 0x2e
 8002172:	d1f5      	bne.n	8002160 <decodeGGA+0x688>
	j++;
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	3301      	adds	r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f846 	bl	8000210 <strlen>
 8002184:	4602      	mov	r2, r0
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	4413      	add	r3, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f00b fe87 	bl	800dea8 <atoi>
 800219a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800219c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9df 	bl	8000564 <__aeabi_i2d>
 80021a6:	4604      	mov	r4, r0
 80021a8:	460d      	mov	r5, r1
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f7fe f9da 	bl	8000564 <__aeabi_i2d>
 80021b0:	4680      	mov	r8, r0
 80021b2:	4689      	mov	r9, r1
 80021b4:	6a38      	ldr	r0, [r7, #32]
 80021b6:	f7fe f9d5 	bl	8000564 <__aeabi_i2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	ec43 2b11 	vmov	d1, r2, r3
 80021c2:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002220 <decodeGGA+0x748>
 80021c6:	f00e fad3 	bl	8010770 <pow>
 80021ca:	ec53 2b10 	vmov	r2, r3, d0
 80021ce:	4640      	mov	r0, r8
 80021d0:	4649      	mov	r1, r9
 80021d2:	f7fe fb5b 	bl	800088c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe f875 	bl	80002cc <__adddf3>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fd1d 	bl	8000c28 <__aeabi_d2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	621a      	str	r2, [r3, #32]

	inx++;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <decodeGGA+0x750>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <decodeGGA+0x750>)
 8002200:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <decodeGGA+0x750>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8002214:	2300      	movs	r3, #0

}
 8002216:	4618      	mov	r0, r3
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002220:	00000000 	.word	0x00000000
 8002224:	40240000 	.word	0x40240000
 8002228:	20000128 	.word	0x20000128
 800222c:	00000000 	.word	0x00000000

08002230 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002234:	b090      	sub	sp, #64	; 0x40
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <decodeRMC+0x260>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8002246:	e004      	b.n	8002252 <decodeRMC+0x22>
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <decodeRMC+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a90      	ldr	r2, [pc, #576]	; (8002490 <decodeRMC+0x260>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <decodeRMC+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b2c      	cmp	r3, #44	; 0x2c
 8002260:	d1f2      	bne.n	8002248 <decodeRMC+0x18>
	inx++;
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <decodeRMC+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	4a89      	ldr	r2, [pc, #548]	; (8002490 <decodeRMC+0x260>)
 800226a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 800226c:	e004      	b.n	8002278 <decodeRMC+0x48>
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <decodeRMC+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a86      	ldr	r2, [pc, #536]	; (8002490 <decodeRMC+0x260>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b85      	ldr	r3, [pc, #532]	; (8002490 <decodeRMC+0x260>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b2c      	cmp	r3, #44	; 0x2c
 8002286:	d1f2      	bne.n	800226e <decodeRMC+0x3e>
	inx++;
 8002288:	4b81      	ldr	r3, [pc, #516]	; (8002490 <decodeRMC+0x260>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a80      	ldr	r2, [pc, #512]	; (8002490 <decodeRMC+0x260>)
 8002290:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <decodeRMC+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b41      	cmp	r3, #65	; 0x41
 80022a0:	d10d      	bne.n	80022be <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <decodeRMC+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a78      	ldr	r2, [pc, #480]	; (8002490 <decodeRMC+0x260>)
 80022b0:	6013      	str	r3, [r2, #0]
	inx++;
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <decodeRMC+0x260>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a75      	ldr	r2, [pc, #468]	; (8002490 <decodeRMC+0x260>)
 80022ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022bc:	e009      	b.n	80022d2 <decodeRMC+0xa2>
		rmc->isValid =0;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
		return 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e1d8      	b.n	800267a <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022c8:	4b71      	ldr	r3, [pc, #452]	; (8002490 <decodeRMC+0x260>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <decodeRMC+0x260>)
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <decodeRMC+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b2c      	cmp	r3, #44	; 0x2c
 80022e0:	d1f2      	bne.n	80022c8 <decodeRMC+0x98>
	inx++;
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <decodeRMC+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	4a69      	ldr	r2, [pc, #420]	; (8002490 <decodeRMC+0x260>)
 80022ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80022ec:	e004      	b.n	80022f8 <decodeRMC+0xc8>
 80022ee:	4b68      	ldr	r3, [pc, #416]	; (8002490 <decodeRMC+0x260>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a66      	ldr	r2, [pc, #408]	; (8002490 <decodeRMC+0x260>)
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b65      	ldr	r3, [pc, #404]	; (8002490 <decodeRMC+0x260>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b2c      	cmp	r3, #44	; 0x2c
 8002306:	d1f2      	bne.n	80022ee <decodeRMC+0xbe>
	inx++;
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <decodeRMC+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a60      	ldr	r2, [pc, #384]	; (8002490 <decodeRMC+0x260>)
 8002310:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8002312:	e004      	b.n	800231e <decodeRMC+0xee>
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <decodeRMC+0x260>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <decodeRMC+0x260>)
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <decodeRMC+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b2c      	cmp	r3, #44	; 0x2c
 800232c:	d1f2      	bne.n	8002314 <decodeRMC+0xe4>
	inx++;
 800232e:	4b58      	ldr	r3, [pc, #352]	; (8002490 <decodeRMC+0x260>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <decodeRMC+0x260>)
 8002336:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002338:	e004      	b.n	8002344 <decodeRMC+0x114>
 800233a:	4b55      	ldr	r3, [pc, #340]	; (8002490 <decodeRMC+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <decodeRMC+0x260>)
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <decodeRMC+0x260>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b2c      	cmp	r3, #44	; 0x2c
 8002352:	d1f2      	bne.n	800233a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <decodeRMC+0x260>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <decodeRMC+0x260>)
 800235c:	6013      	str	r3, [r2, #0]
	i=0;
 800235e:	2300      	movs	r3, #0
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	220c      	movs	r2, #12
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f00b fdee 	bl	800df4c <memset>
	while (RMCbuffer[inx] != ',')
 8002370:	e013      	b.n	800239a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <decodeRMC+0x260>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	f107 0208 	add.w	r2, r7, #8
 8002382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002384:	4413      	add	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
		i++;
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238c:	3301      	adds	r3, #1
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <decodeRMC+0x260>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <decodeRMC+0x260>)
 8002398:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <decodeRMC+0x260>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b2c      	cmp	r3, #44	; 0x2c
 80023a8:	d1e3      	bne.n	8002372 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d056      	beq.n	8002462 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f00b fd75 	bl	800dea8 <atoi>
 80023be:	4603      	mov	r3, r0
 80023c0:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80023c6:	e002      	b.n	80023ce <decodeRMC+0x19e>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	3301      	adds	r3, #1
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ce:	f107 0208 	add.w	r2, r7, #8
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b2e      	cmp	r3, #46	; 0x2e
 80023da:	d1f5      	bne.n	80023c8 <decodeRMC+0x198>
		j++;
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	3301      	adds	r3, #1
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd ff12 	bl	8000210 <strlen>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	4413      	add	r3, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00b fd53 	bl	800dea8 <atoi>
 8002402:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8002404:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8ab 	bl	8000564 <__aeabi_i2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002414:	f7fe f8a6 	bl	8000564 <__aeabi_i2d>
 8002418:	4680      	mov	r8, r0
 800241a:	4689      	mov	r9, r1
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f7fe f8a1 	bl	8000564 <__aeabi_i2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ec43 2b11 	vmov	d1, r2, r3
 800242a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002488 <decodeRMC+0x258>
 800242e:	f00e f99f 	bl	8010770 <pow>
 8002432:	ec53 2b10 	vmov	r2, r3, d0
 8002436:	4640      	mov	r0, r8
 8002438:	4649      	mov	r1, r9
 800243a:	f7fe fa27 	bl	800088c <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff41 	bl	80002cc <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fbe9 	bl	8000c28 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e003      	b.n	800246a <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <decodeRMC+0x260>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <decodeRMC+0x260>)
 8002472:	6013      	str	r3, [r2, #0]
	i=0;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	220c      	movs	r2, #12
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f00b fd63 	bl	800df4c <memset>
	while (RMCbuffer[inx] != ',')
 8002486:	e019      	b.n	80024bc <decodeRMC+0x28c>
 8002488:	00000000 	.word	0x00000000
 800248c:	40240000 	.word	0x40240000
 8002490:	20000128 	.word	0x20000128
	{
		buffer[i] = RMCbuffer[inx];
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <decodeRMC+0x460>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	7819      	ldrb	r1, [r3, #0]
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a6:	4413      	add	r3, r2
 80024a8:	460a      	mov	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
		i++;
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	3301      	adds	r3, #1
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <decodeRMC+0x460>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	4a75      	ldr	r2, [pc, #468]	; (8002690 <decodeRMC+0x460>)
 80024ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024bc:	4b74      	ldr	r3, [pc, #464]	; (8002690 <decodeRMC+0x460>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b2c      	cmp	r3, #44	; 0x2c
 80024ca:	d1e3      	bne.n	8002494 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d056      	beq.n	8002584 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4618      	mov	r0, r3
 80024dc:	f00b fce4 	bl	800dea8 <atoi>
 80024e0:	4603      	mov	r3, r0
 80024e2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80024e8:	e002      	b.n	80024f0 <decodeRMC+0x2c0>
 80024ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ec:	3301      	adds	r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	f107 0208 	add.w	r2, r7, #8
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b2e      	cmp	r3, #46	; 0x2e
 80024fc:	d1f5      	bne.n	80024ea <decodeRMC+0x2ba>
		j++;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	3301      	adds	r3, #1
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe81 	bl	8000210 <strlen>
 800250e:	4602      	mov	r2, r0
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	4413      	add	r3, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f00b fcc2 	bl	800dea8 <atoi>
 8002524:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8002526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f81a 	bl	8000564 <__aeabi_i2d>
 8002530:	4604      	mov	r4, r0
 8002532:	460d      	mov	r5, r1
 8002534:	69b8      	ldr	r0, [r7, #24]
 8002536:	f7fe f815 	bl	8000564 <__aeabi_i2d>
 800253a:	4680      	mov	r8, r0
 800253c:	4689      	mov	r9, r1
 800253e:	69f8      	ldr	r0, [r7, #28]
 8002540:	f7fe f810 	bl	8000564 <__aeabi_i2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	ec43 2b11 	vmov	d1, r2, r3
 800254c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002688 <decodeRMC+0x458>
 8002550:	f00e f90e 	bl	8010770 <pow>
 8002554:	ec53 2b10 	vmov	r2, r3, d0
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fe f996 	bl	800088c <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb0 	bl	80002cc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb58 	bl	8000c28 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	e003      	b.n	800258c <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <decodeRMC+0x460>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <decodeRMC+0x460>)
 8002594:	6013      	str	r3, [r2, #0]
	i=0;
 8002596:	2300      	movs	r3, #0
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	220c      	movs	r2, #12
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f00b fcd2 	bl	800df4c <memset>
	while (RMCbuffer[inx] != ',')
 80025a8:	e013      	b.n	80025d2 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <decodeRMC+0x460>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	f107 0208 	add.w	r2, r7, #8
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	4413      	add	r3, r2
 80025be:	460a      	mov	r2, r1
 80025c0:	701a      	strb	r2, [r3, #0]
		i++;
 80025c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c4:	3301      	adds	r3, #1
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <decodeRMC+0x460>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a30      	ldr	r2, [pc, #192]	; (8002690 <decodeRMC+0x460>)
 80025d0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <decodeRMC+0x460>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b2c      	cmp	r3, #44	; 0x2c
 80025e0:	d1e3      	bne.n	80025aa <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00b fc5e 	bl	800dea8 <atoi>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <decodeRMC+0x464>)
 80025f0:	fb82 1203 	smull	r1, r2, r2, r3
 80025f4:	1312      	asrs	r2, r2, #12
 80025f6:	17db      	asrs	r3, r3, #31
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a27      	ldr	r2, [pc, #156]	; (8002698 <decodeRMC+0x468>)
 80025fc:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	4618      	mov	r0, r3
 8002604:	f00b fc50 	bl	800dea8 <atoi>
 8002608:	4603      	mov	r3, r0
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <decodeRMC+0x46c>)
 800260c:	fb82 1203 	smull	r1, r2, r2, r3
 8002610:	1152      	asrs	r2, r2, #5
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <decodeRMC+0x46c>)
 8002618:	fb83 1302 	smull	r1, r3, r3, r2
 800261c:	1159      	asrs	r1, r3, #5
 800261e:	17d3      	asrs	r3, r2, #31
 8002620:	1acb      	subs	r3, r1, r3
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <decodeRMC+0x470>)
 800262c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4618      	mov	r0, r3
 8002634:	f00b fc38 	bl	800dea8 <atoi>
 8002638:	4602      	mov	r2, r0
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <decodeRMC+0x46c>)
 800263c:	fb83 1302 	smull	r1, r3, r3, r2
 8002640:	1159      	asrs	r1, r3, #5
 8002642:	17d3      	asrs	r3, r2, #31
 8002644:	1acb      	subs	r3, r1, r3
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <decodeRMC+0x474>)
 8002650:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <decodeRMC+0x468>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <decodeRMC+0x478>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <decodeRMC+0x468>)
 800265e:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <decodeRMC+0x468>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <decodeRMC+0x470>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <decodeRMC+0x474>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	609a      	str	r2, [r3, #8]

	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3740      	adds	r7, #64	; 0x40
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	00000000 	.word	0x00000000
 800268c:	40240000 	.word	0x40240000
 8002690:	20000128 	.word	0x20000128
 8002694:	68db8bad 	.word	0x68db8bad
 8002698:	20000134 	.word	0x20000134
 800269c:	51eb851f 	.word	0x51eb851f
 80026a0:	20000138 	.word	0x20000138
 80026a4:	2000013c 	.word	0x2000013c
 80026a8:	20000140 	.word	0x20000140

080026ac <decToBcd>:
extern TIME_Handle time;
extern union Transmission trans1;

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <decToBcd+0x48>)
 80026b8:	fb82 1203 	smull	r1, r2, r2, r3
 80026bc:	1092      	asrs	r2, r2, #2
 80026be:	17db      	asrs	r3, r3, #31
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	b2d8      	uxtb	r0, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <decToBcd+0x48>)
 80026cc:	fb83 1302 	smull	r1, r3, r3, r2
 80026d0:	1099      	asrs	r1, r3, #2
 80026d2:	17d3      	asrs	r3, r2, #31
 80026d4:	1ac9      	subs	r1, r1, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	1ad1      	subs	r1, r2, r3
 80026e0:	b2cb      	uxtb	r3, r1
 80026e2:	4403      	add	r3, r0
 80026e4:	b2db      	uxtb	r3, r3
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	66666667 	.word	0x66666667

080026f8 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4413      	add	r3, r2
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <Set_Time>:

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af04      	add	r7, sp, #16
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	4603      	mov	r3, r0
 800273c:	71bb      	strb	r3, [r7, #6]
 800273e:	460b      	mov	r3, r1
 8002740:	717b      	strb	r3, [r7, #5]
 8002742:	4613      	mov	r3, r2
 8002744:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ffaf 	bl	80026ac <decToBcd>
 800274e:	4603      	mov	r3, r0
 8002750:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8002752:	79bb      	ldrb	r3, [r7, #6]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffa9 	bl	80026ac <decToBcd>
 800275a:	4603      	mov	r3, r0
 800275c:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 800275e:	797b      	ldrb	r3, [r7, #5]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ffa3 	bl	80026ac <decToBcd>
 8002766:	4603      	mov	r3, r0
 8002768:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 800276a:	793b      	ldrb	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff9d 	bl	80026ac <decToBcd>
 8002772:	4603      	mov	r3, r0
 8002774:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8002776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff96 	bl	80026ac <decToBcd>
 8002780:	4603      	mov	r3, r0
 8002782:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8002784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff8f 	bl	80026ac <decToBcd>
 800278e:	4603      	mov	r3, r0
 8002790:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8002792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff88 	bl	80026ac <decToBcd>
 800279c:	4603      	mov	r3, r0
 800279e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80027a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2307      	movs	r3, #7
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	2200      	movs	r2, #0
 80027b4:	21d0      	movs	r1, #208	; 0xd0
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <Set_Time+0x9c>)
 80027b8:	f004 f9fa 	bl	8006bb0 <HAL_I2C_Mem_Write>
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	20000298 	.word	0x20000298

080027c8 <Get_Time>:
void Get_Time (void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	2307      	movs	r3, #7
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	463b      	mov	r3, r7
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	2200      	movs	r2, #0
 80027e0:	21d0      	movs	r1, #208	; 0xd0
 80027e2:	481f      	ldr	r0, [pc, #124]	; (8002860 <Get_Time+0x98>)
 80027e4:	f004 fade 	bl	8006da4 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80027e8:	783b      	ldrb	r3, [r7, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff84 	bl	80026f8 <bcdToDec>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <Get_Time+0x9c>)
 80027f6:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff7c 	bl	80026f8 <bcdToDec>
 8002800:	4603      	mov	r3, r0
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <Get_Time+0x9c>)
 8002806:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8002808:	78bb      	ldrb	r3, [r7, #2]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff74 	bl	80026f8 <bcdToDec>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <Get_Time+0x9c>)
 8002816:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff6c 	bl	80026f8 <bcdToDec>
 8002820:	4603      	mov	r3, r0
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <Get_Time+0x9c>)
 8002826:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8002828:	793b      	ldrb	r3, [r7, #4]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff64 	bl	80026f8 <bcdToDec>
 8002830:	4603      	mov	r3, r0
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <Get_Time+0x9c>)
 8002836:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8002838:	797b      	ldrb	r3, [r7, #5]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff5c 	bl	80026f8 <bcdToDec>
 8002840:	4603      	mov	r3, r0
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <Get_Time+0x9c>)
 8002846:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff54 	bl	80026f8 <bcdToDec>
 8002850:	4603      	mov	r3, r0
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <Get_Time+0x9c>)
 8002856:	719a      	strb	r2, [r3, #6]

}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000298 	.word	0x20000298
 8002864:	20000678 	.word	0x20000678

08002868 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002872:	4804      	ldr	r0, [pc, #16]	; (8002884 <SELECT+0x1c>)
 8002874:	f004 f83e 	bl	80068f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002878:	2001      	movs	r0, #1
 800287a:	f002 fd35 	bl	80052e8 <HAL_Delay>
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40020400 	.word	0x40020400

08002888 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <DESELECT+0x1c>)
 8002894:	f004 f82e 	bl	80068f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002898:	2001      	movs	r0, #1
 800289a:	f002 fd25 	bl	80052e8 <HAL_Delay>
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40020400 	.word	0x40020400

080028a8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80028b2:	bf00      	nop
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SPI_TxByte+0x30>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d1f8      	bne.n	80028b4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80028c2:	1df9      	adds	r1, r7, #7
 80028c4:	2364      	movs	r3, #100	; 0x64
 80028c6:	2201      	movs	r2, #1
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <SPI_TxByte+0x30>)
 80028ca:	f005 feae 	bl	800862a <HAL_SPI_Transmit>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000344 	.word	0x20000344

080028dc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80028e8:	bf00      	nop
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <SPI_TxBuffer+0x30>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d1f8      	bne.n	80028ea <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	2364      	movs	r3, #100	; 0x64
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <SPI_TxBuffer+0x30>)
 8002900:	f005 fe93 	bl	800862a <HAL_SPI_Transmit>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000344 	.word	0x20000344

08002910 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002916:	23ff      	movs	r3, #255	; 0xff
 8002918:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800291a:	bf00      	nop
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <SPI_RxByte+0x34>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d1f8      	bne.n	800291c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800292a:	1dba      	adds	r2, r7, #6
 800292c:	1df9      	adds	r1, r7, #7
 800292e:	2364      	movs	r3, #100	; 0x64
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2301      	movs	r3, #1
 8002934:	4803      	ldr	r0, [pc, #12]	; (8002944 <SPI_RxByte+0x34>)
 8002936:	f006 f8c5 	bl	8008ac4 <HAL_SPI_TransmitReceive>

	return data;
 800293a:	79bb      	ldrb	r3, [r7, #6]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000344 	.word	0x20000344

08002948 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002950:	f7ff ffde 	bl	8002910 <SPI_RxByte>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	701a      	strb	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <SD_ReadyWait+0x30>)
 800296c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002970:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002972:	f7ff ffcd 	bl	8002910 <SPI_RxByte>
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2bff      	cmp	r3, #255	; 0xff
 800297e:	d004      	beq.n	800298a <SD_ReadyWait+0x26>
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SD_ReadyWait+0x30>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f3      	bne.n	8002972 <SD_ReadyWait+0xe>

	return res;
 800298a:	79fb      	ldrb	r3, [r7, #7]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200027f6 	.word	0x200027f6

08002998 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800299e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80029a2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80029a4:	f7ff ff70 	bl	8002888 <DESELECT>
	for(int i = 0; i < 10; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e005      	b.n	80029ba <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80029ae:	20ff      	movs	r0, #255	; 0xff
 80029b0:	f7ff ff7a 	bl	80028a8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	ddf6      	ble.n	80029ae <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80029c0:	f7ff ff52 	bl	8002868 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80029d8:	2395      	movs	r3, #149	; 0x95
 80029da:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80029dc:	463b      	mov	r3, r7
 80029de:	2106      	movs	r1, #6
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff7b 	bl	80028dc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80029e6:	e002      	b.n	80029ee <SD_PowerOn+0x56>
	{
		cnt--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80029ee:	f7ff ff8f 	bl	8002910 <SPI_RxByte>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d002      	beq.n	80029fe <SD_PowerOn+0x66>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f4      	bne.n	80029e8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80029fe:	f7ff ff43 	bl	8002888 <DESELECT>
	SPI_TxByte(0XFF);
 8002a02:	20ff      	movs	r0, #255	; 0xff
 8002a04:	f7ff ff50 	bl	80028a8 <SPI_TxByte>

	PowerFlag = 1;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <SD_PowerOn+0x80>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000145 	.word	0x20000145

08002a1c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <SD_PowerOff+0x14>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	20000145 	.word	0x20000145

08002a34 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <SD_CheckPower+0x14>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000145 	.word	0x20000145

08002a4c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <SD_RxDataBlock+0x5c>)
 8002a58:	22c8      	movs	r2, #200	; 0xc8
 8002a5a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002a5c:	f7ff ff58 	bl	8002910 <SPI_RxByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d104      	bne.n	8002a74 <SD_RxDataBlock+0x28>
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <SD_RxDataBlock+0x5c>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f3      	bne.n	8002a5c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2bfe      	cmp	r3, #254	; 0xfe
 8002a78:	d001      	beq.n	8002a7e <SD_RxDataBlock+0x32>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e00f      	b.n	8002a9e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <SPI_RxBytePtr>
	} while(len--);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	603a      	str	r2, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f4      	bne.n	8002a7e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002a94:	f7ff ff3c 	bl	8002910 <SPI_RxByte>
	SPI_RxByte();
 8002a98:	f7ff ff3a 	bl	8002910 <SPI_RxByte>

	return TRUE;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200027f4 	.word	0x200027f4

08002aac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002abc:	f7ff ff52 	bl	8002964 <SD_ReadyWait>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d001      	beq.n	8002aca <SD_TxDataBlock+0x1e>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e02f      	b.n	8002b2a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff feeb 	bl	80028a8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	2bfd      	cmp	r3, #253	; 0xfd
 8002ad6:	d020      	beq.n	8002b1a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fefd 	bl	80028dc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002ae2:	f7ff ff15 	bl	8002910 <SPI_RxByte>
		SPI_RxByte();
 8002ae6:	f7ff ff13 	bl	8002910 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002aea:	e00b      	b.n	8002b04 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002aec:	f7ff ff10 	bl	8002910 <SPI_RxByte>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d006      	beq.n	8002b0c <SD_TxDataBlock+0x60>
			i++;
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d9f0      	bls.n	8002aec <SD_TxDataBlock+0x40>
 8002b0a:	e000      	b.n	8002b0e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002b0c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002b0e:	bf00      	nop
 8002b10:	f7ff fefe 	bl	8002910 <SPI_RxByte>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0fa      	beq.n	8002b10 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d101      	bne.n	8002b28 <SD_TxDataBlock+0x7c>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <SD_TxDataBlock+0x7e>

	return FALSE;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	6039      	str	r1, [r7, #0]
 8002b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002b3e:	f7ff ff11 	bl	8002964 <SD_ReadyWait>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2bff      	cmp	r3, #255	; 0xff
 8002b46:	d001      	beq.n	8002b4c <SD_SendCmd+0x1a>
 8002b48:	23ff      	movs	r3, #255	; 0xff
 8002b4a:	e042      	b.n	8002bd2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff feaa 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	0e1b      	lsrs	r3, r3, #24
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fea4 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fe9e 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fe98 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fe93 	bl	80028a8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d102      	bne.n	8002b8e <SD_SendCmd+0x5c>
 8002b88:	2395      	movs	r3, #149	; 0x95
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e007      	b.n	8002b9e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b48      	cmp	r3, #72	; 0x48
 8002b92:	d102      	bne.n	8002b9a <SD_SendCmd+0x68>
 8002b94:	2387      	movs	r3, #135	; 0x87
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e001      	b.n	8002b9e <SD_SendCmd+0x6c>
	else crc = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe81 	bl	80028a8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b4c      	cmp	r3, #76	; 0x4c
 8002baa:	d101      	bne.n	8002bb0 <SD_SendCmd+0x7e>
 8002bac:	f7ff feb0 	bl	8002910 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002bb4:	f7ff feac 	bl	8002910 <SPI_RxByte>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002bbc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da05      	bge.n	8002bd0 <SD_SendCmd+0x9e>
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	73bb      	strb	r3, [r7, #14]
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f1      	bne.n	8002bb4 <SD_SendCmd+0x82>

	return res;
 8002bd0:	7b7b      	ldrb	r3, [r7, #13]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <SD_disk_initialize+0x14>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0d6      	b.n	8002d9e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002bf0:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <SD_disk_initialize+0x2a>
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e0cb      	b.n	8002d9e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8002c06:	f7ff fec7 	bl	8002998 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002c0a:	f7ff fe2d 	bl	8002868 <SELECT>

	/* check disk type */
	type = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002c12:	2100      	movs	r1, #0
 8002c14:	2040      	movs	r0, #64	; 0x40
 8002c16:	f7ff ff8c 	bl	8002b32 <SD_SendCmd>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 80a6 	bne.w	8002d6e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002c22:	4b62      	ldr	r3, [pc, #392]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c28:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002c2a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002c2e:	2048      	movs	r0, #72	; 0x48
 8002c30:	f7ff ff7f 	bl	8002b32 <SD_SendCmd>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d158      	bne.n	8002cec <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e00c      	b.n	8002c5a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002c40:	7bfc      	ldrb	r4, [r7, #15]
 8002c42:	f7ff fe65 	bl	8002910 <SPI_RxByte>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f104 0310 	add.w	r3, r4, #16
 8002c4e:	443b      	add	r3, r7
 8002c50:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3301      	adds	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d9ef      	bls.n	8002c40 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f040 8083 	bne.w	8002d6e <SD_disk_initialize+0x192>
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	2baa      	cmp	r3, #170	; 0xaa
 8002c6c:	d17f      	bne.n	8002d6e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2077      	movs	r0, #119	; 0x77
 8002c72:	f7ff ff5e 	bl	8002b32 <SD_SendCmd>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d807      	bhi.n	8002c8c <SD_disk_initialize+0xb0>
 8002c7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c80:	2069      	movs	r0, #105	; 0x69
 8002c82:	f7ff ff56 	bl	8002b32 <SD_SendCmd>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002c8c:	4b47      	ldr	r3, [pc, #284]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1eb      	bne.n	8002c6e <SD_disk_initialize+0x92>
 8002c96:	e000      	b.n	8002c9a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002c98:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002c9a:	4b44      	ldr	r3, [pc, #272]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d064      	beq.n	8002d6e <SD_disk_initialize+0x192>
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	207a      	movs	r0, #122	; 0x7a
 8002ca8:	f7ff ff43 	bl	8002b32 <SD_SendCmd>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d15d      	bne.n	8002d6e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e00c      	b.n	8002cd2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002cb8:	7bfc      	ldrb	r4, [r7, #15]
 8002cba:	f7ff fe29 	bl	8002910 <SPI_RxByte>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f104 0310 	add.w	r3, r4, #16
 8002cc6:	443b      	add	r3, r7
 8002cc8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d9ef      	bls.n	8002cb8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002cd8:	7a3b      	ldrb	r3, [r7, #8]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <SD_disk_initialize+0x10a>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	e000      	b.n	8002ce8 <SD_disk_initialize+0x10c>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	73bb      	strb	r3, [r7, #14]
 8002cea:	e040      	b.n	8002d6e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002cec:	2100      	movs	r1, #0
 8002cee:	2077      	movs	r0, #119	; 0x77
 8002cf0:	f7ff ff1f 	bl	8002b32 <SD_SendCmd>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d808      	bhi.n	8002d0c <SD_disk_initialize+0x130>
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2069      	movs	r0, #105	; 0x69
 8002cfe:	f7ff ff18 	bl	8002b32 <SD_SendCmd>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d801      	bhi.n	8002d0c <SD_disk_initialize+0x130>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e000      	b.n	8002d0e <SD_disk_initialize+0x132>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002d10:	7bbb      	ldrb	r3, [r7, #14]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d10e      	bne.n	8002d34 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002d16:	2100      	movs	r1, #0
 8002d18:	2077      	movs	r0, #119	; 0x77
 8002d1a:	f7ff ff0a 	bl	8002b32 <SD_SendCmd>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d80e      	bhi.n	8002d42 <SD_disk_initialize+0x166>
 8002d24:	2100      	movs	r1, #0
 8002d26:	2069      	movs	r0, #105	; 0x69
 8002d28:	f7ff ff03 	bl	8002b32 <SD_SendCmd>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <SD_disk_initialize+0x166>
 8002d32:	e00d      	b.n	8002d50 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002d34:	2100      	movs	r1, #0
 8002d36:	2041      	movs	r0, #65	; 0x41
 8002d38:	f7ff fefb 	bl	8002b32 <SD_SendCmd>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e1      	bne.n	8002d10 <SD_disk_initialize+0x134>
 8002d4c:	e000      	b.n	8002d50 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002d4e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002d50:	4b16      	ldr	r3, [pc, #88]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <SD_disk_initialize+0x18e>
 8002d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d5e:	2050      	movs	r0, #80	; 0x50
 8002d60:	f7ff fee7 	bl	8002b32 <SD_SendCmd>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <SD_disk_initialize+0x192>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <SD_disk_initialize+0x1d4>)
 8002d70:	7bbb      	ldrb	r3, [r7, #14]
 8002d72:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002d74:	f7ff fd88 	bl	8002888 <DESELECT>
	SPI_RxByte();
 8002d78:	f7ff fdca 	bl	8002910 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e001      	b.n	8002d98 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002d94:	f7ff fe42 	bl	8002a1c <SD_PowerOff>
	}

	return Stat;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000004 	.word	0x20000004
 8002dac:	200027f4 	.word	0x200027f4
 8002db0:	20000144 	.word	0x20000144

08002db4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_status+0x14>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e002      	b.n	8002dce <SD_disk_status+0x1a>
	return Stat;
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SD_disk_status+0x28>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000004 	.word	0x20000004

08002de0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <SD_disk_read+0x1c>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <SD_disk_read+0x20>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e051      	b.n	8002ea4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <SD_disk_read+0xcc>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <SD_disk_read+0x32>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e048      	b.n	8002ea4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <SD_disk_read+0xd0>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <SD_disk_read+0x44>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	025b      	lsls	r3, r3, #9
 8002e22:	607b      	str	r3, [r7, #4]

	SELECT();
 8002e24:	f7ff fd20 	bl	8002868 <SELECT>

	if (count == 1)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d111      	bne.n	8002e52 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	2051      	movs	r0, #81	; 0x51
 8002e32:	f7ff fe7e 	bl	8002b32 <SD_SendCmd>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d129      	bne.n	8002e90 <SD_disk_read+0xb0>
 8002e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e40:	68b8      	ldr	r0, [r7, #8]
 8002e42:	f7ff fe03 	bl	8002a4c <SD_RxDataBlock>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <SD_disk_read+0xb0>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	e01e      	b.n	8002e90 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	2052      	movs	r0, #82	; 0x52
 8002e56:	f7ff fe6c 	bl	8002b32 <SD_SendCmd>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d117      	bne.n	8002e90 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e64:	68b8      	ldr	r0, [r7, #8]
 8002e66:	f7ff fdf1 	bl	8002a4c <SD_RxDataBlock>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <SD_disk_read+0xa6>
				buff += 512;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e76:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ed      	bne.n	8002e60 <SD_disk_read+0x80>
 8002e84:	e000      	b.n	8002e88 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002e86:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002e88:	2100      	movs	r1, #0
 8002e8a:	204c      	movs	r0, #76	; 0x4c
 8002e8c:	f7ff fe51 	bl	8002b32 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002e90:	f7ff fcfa 	bl	8002888 <DESELECT>
	SPI_RxByte();
 8002e94:	f7ff fd3c 	bl	8002910 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	20000144 	.word	0x20000144

08002eb4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <SD_disk_write+0x1c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <SD_disk_write+0x20>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	e06b      	b.n	8002fac <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <SD_disk_write+0x100>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <SD_disk_write+0x32>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e062      	b.n	8002fac <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <SD_disk_write+0x100>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <SD_disk_write+0x44>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e059      	b.n	8002fac <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <SD_disk_write+0x104>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <SD_disk_write+0x56>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	025b      	lsls	r3, r3, #9
 8002f08:	607b      	str	r3, [r7, #4]

	SELECT();
 8002f0a:	f7ff fcad 	bl	8002868 <SELECT>

	if (count == 1)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d110      	bne.n	8002f36 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	2058      	movs	r0, #88	; 0x58
 8002f18:	f7ff fe0b 	bl	8002b32 <SD_SendCmd>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d13a      	bne.n	8002f98 <SD_disk_write+0xe4>
 8002f22:	21fe      	movs	r1, #254	; 0xfe
 8002f24:	68b8      	ldr	r0, [r7, #8]
 8002f26:	f7ff fdc1 	bl	8002aac <SD_TxDataBlock>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d033      	beq.n	8002f98 <SD_disk_write+0xe4>
			count = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	e030      	b.n	8002f98 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <SD_disk_write+0x104>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002f42:	2100      	movs	r1, #0
 8002f44:	2077      	movs	r0, #119	; 0x77
 8002f46:	f7ff fdf4 	bl	8002b32 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	2057      	movs	r0, #87	; 0x57
 8002f4e:	f7ff fdf0 	bl	8002b32 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	2059      	movs	r0, #89	; 0x59
 8002f56:	f7ff fdec 	bl	8002b32 <SD_SendCmd>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11b      	bne.n	8002f98 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002f60:	21fc      	movs	r1, #252	; 0xfc
 8002f62:	68b8      	ldr	r0, [r7, #8]
 8002f64:	f7ff fda2 	bl	8002aac <SD_TxDataBlock>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <SD_disk_write+0xd0>
				buff += 512;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f74:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ee      	bne.n	8002f60 <SD_disk_write+0xac>
 8002f82:	e000      	b.n	8002f86 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002f84:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002f86:	21fd      	movs	r1, #253	; 0xfd
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff fd8f 	bl	8002aac <SD_TxDataBlock>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <SD_disk_write+0xe4>
			{
				count = 1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002f98:	f7ff fc76 	bl	8002888 <DESELECT>
	SPI_RxByte();
 8002f9c:	f7ff fcb8 	bl	8002910 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000144 	.word	0x20000144

08002fbc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b08b      	sub	sp, #44	; 0x2c
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	603a      	str	r2, [r7, #0]
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <SD_disk_ioctl+0x1e>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e115      	b.n	8003206 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002fe0:	79bb      	ldrb	r3, [r7, #6]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d124      	bne.n	8003030 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d012      	beq.n	8003014 <SD_disk_ioctl+0x58>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	dc1a      	bgt.n	8003028 <SD_disk_ioctl+0x6c>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <SD_disk_ioctl+0x40>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d006      	beq.n	8003008 <SD_disk_ioctl+0x4c>
 8002ffa:	e015      	b.n	8003028 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002ffc:	f7ff fd0e 	bl	8002a1c <SD_PowerOff>
			res = RES_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003006:	e0fc      	b.n	8003202 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003008:	f7ff fcc6 	bl	8002998 <SD_PowerOn>
			res = RES_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003012:	e0f6      	b.n	8003202 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	1c5c      	adds	r4, r3, #1
 8003018:	f7ff fd0c 	bl	8002a34 <SD_CheckPower>
 800301c:	4603      	mov	r3, r0
 800301e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003026:	e0ec      	b.n	8003202 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800302e:	e0e8      	b.n	8003202 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <SD_disk_ioctl+0x254>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SD_disk_ioctl+0x86>
 800303e:	2303      	movs	r3, #3
 8003040:	e0e1      	b.n	8003206 <SD_disk_ioctl+0x24a>

		SELECT();
 8003042:	f7ff fc11 	bl	8002868 <SELECT>

		switch (ctrl)
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	2b0d      	cmp	r3, #13
 800304a:	f200 80cb 	bhi.w	80031e4 <SD_disk_ioctl+0x228>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <SD_disk_ioctl+0x98>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	0800314f 	.word	0x0800314f
 8003058:	0800308d 	.word	0x0800308d
 800305c:	0800313f 	.word	0x0800313f
 8003060:	080031e5 	.word	0x080031e5
 8003064:	080031e5 	.word	0x080031e5
 8003068:	080031e5 	.word	0x080031e5
 800306c:	080031e5 	.word	0x080031e5
 8003070:	080031e5 	.word	0x080031e5
 8003074:	080031e5 	.word	0x080031e5
 8003078:	080031e5 	.word	0x080031e5
 800307c:	080031e5 	.word	0x080031e5
 8003080:	08003161 	.word	0x08003161
 8003084:	08003185 	.word	0x08003185
 8003088:	080031a9 	.word	0x080031a9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800308c:	2100      	movs	r1, #0
 800308e:	2049      	movs	r0, #73	; 0x49
 8003090:	f7ff fd4f 	bl	8002b32 <SD_SendCmd>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80a8 	bne.w	80031ec <SD_disk_ioctl+0x230>
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2110      	movs	r1, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fcd2 	bl	8002a4c <SD_RxDataBlock>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 809e 	beq.w	80031ec <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80030b0:	7b3b      	ldrb	r3, [r7, #12]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10e      	bne.n	80030d8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80030ba:	7d7b      	ldrb	r3, [r7, #21]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	7d3b      	ldrb	r3, [r7, #20]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80030ce:	8bfb      	ldrh	r3, [r7, #30]
 80030d0:	029a      	lsls	r2, r3, #10
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e02e      	b.n	8003136 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80030d8:	7c7b      	ldrb	r3, [r7, #17]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	09db      	lsrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	7d7b      	ldrb	r3, [r7, #21]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0306 	and.w	r3, r3, #6
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3302      	adds	r3, #2
 80030fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003100:	7d3b      	ldrb	r3, [r7, #20]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	b2db      	uxtb	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	b29b      	uxth	r3, r3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	b29b      	uxth	r3, r3
 8003110:	4413      	add	r3, r2
 8003112:	b29a      	uxth	r2, r3
 8003114:	7cbb      	ldrb	r3, [r7, #18]
 8003116:	029b      	lsls	r3, r3, #10
 8003118:	b29b      	uxth	r3, r3
 800311a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800311e:	b29b      	uxth	r3, r3
 8003120:	4413      	add	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003128:	8bfa      	ldrh	r2, [r7, #30]
 800312a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312e:	3b09      	subs	r3, #9
 8003130:	409a      	lsls	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800313c:	e056      	b.n	80031ec <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003144:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800314c:	e055      	b.n	80031fa <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800314e:	f7ff fc09 	bl	8002964 <SD_ReadyWait>
 8003152:	4603      	mov	r3, r0
 8003154:	2bff      	cmp	r3, #255	; 0xff
 8003156:	d14b      	bne.n	80031f0 <SD_disk_ioctl+0x234>
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800315e:	e047      	b.n	80031f0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003160:	2100      	movs	r1, #0
 8003162:	2049      	movs	r0, #73	; 0x49
 8003164:	f7ff fce5 	bl	8002b32 <SD_SendCmd>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d142      	bne.n	80031f4 <SD_disk_ioctl+0x238>
 800316e:	2110      	movs	r1, #16
 8003170:	6a38      	ldr	r0, [r7, #32]
 8003172:	f7ff fc6b 	bl	8002a4c <SD_RxDataBlock>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03b      	beq.n	80031f4 <SD_disk_ioctl+0x238>
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003182:	e037      	b.n	80031f4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003184:	2100      	movs	r1, #0
 8003186:	204a      	movs	r0, #74	; 0x4a
 8003188:	f7ff fcd3 	bl	8002b32 <SD_SendCmd>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d132      	bne.n	80031f8 <SD_disk_ioctl+0x23c>
 8003192:	2110      	movs	r1, #16
 8003194:	6a38      	ldr	r0, [r7, #32]
 8003196:	f7ff fc59 	bl	8002a4c <SD_RxDataBlock>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02b      	beq.n	80031f8 <SD_disk_ioctl+0x23c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80031a6:	e027      	b.n	80031f8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80031a8:	2100      	movs	r1, #0
 80031aa:	207a      	movs	r0, #122	; 0x7a
 80031ac:	f7ff fcc1 	bl	8002b32 <SD_SendCmd>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031bc:	e00b      	b.n	80031d6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80031be:	6a3c      	ldr	r4, [r7, #32]
 80031c0:	1c63      	adds	r3, r4, #1
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	f7ff fba4 	bl	8002910 <SPI_RxByte>
 80031c8:	4603      	mov	r3, r0
 80031ca:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80031cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031d0:	3301      	adds	r3, #1
 80031d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d9ef      	bls.n	80031be <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80031e4:	2304      	movs	r3, #4
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031ea:	e006      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031ec:	bf00      	nop
 80031ee:	e004      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031f0:	bf00      	nop
 80031f2:	e002      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031f8:	bf00      	nop
		}

		DESELECT();
 80031fa:	f7ff fb45 	bl	8002888 <DESELECT>
		SPI_RxByte();
 80031fe:	f7ff fb87 	bl	8002910 <SPI_RxByte>
	}

	return res;
 8003202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003206:	4618      	mov	r0, r3
 8003208:	372c      	adds	r7, #44	; 0x2c
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000004 	.word	0x20000004

08003214 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800321c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003220:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800322c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003230:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003234:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800323c:	e000      	b.n	8003240 <ITM_SendChar+0x2c>
    {
      __NOP();
 800323e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f9      	beq.n	800323e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800324a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003254:	687b      	ldr	r3, [r7, #4]
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <bufsize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int bufsize (char *buf)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
	int i=0;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 800326e:	e002      	b.n	8003276 <bufsize+0x14>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f6      	bne.n	8003270 <bufsize+0xe>
	return i;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <current_sensor5.1>:

  if(settime==1)
      Set_Time(timein.seconds, timein.minutes, timein.hour , timein.dayofweek, timein.dayofmonth, timein.month, timein.year);

  void current_sensor5()
  {
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <current_sensor5.1+0xa8>)
 800329c:	885a      	ldrh	r2, [r3, #2]
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <current_sensor5.1+0xac>)
 80032a0:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <current_sensor5.1+0xac>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ae:	ee17 0a90 	vmov	r0, s15
 80032b2:	f7fd f969 	bl	8000588 <__aeabi_f2d>
 80032b6:	a31c      	add	r3, pc, #112	; (adr r3, 8003328 <current_sensor5.1+0x98>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fd f9bc 	bl	8000638 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	a319      	add	r3, pc, #100	; (adr r3, 8003330 <current_sensor5.1+0xa0>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd fadd 	bl	800088c <__aeabi_ddiv>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4614      	mov	r4, r2
 80032d8:	461d      	mov	r5, r3
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <current_sensor5.1+0xb0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f952 	bl	8000588 <__aeabi_f2d>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4620      	mov	r0, r4
 80032ea:	4629      	mov	r1, r5
 80032ec:	f7fd f9a4 	bl	8000638 <__aeabi_dmul>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f7fd fc96 	bl	8000c28 <__aeabi_d2f>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <current_sensor5.1+0xb4>)
 8003300:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.CPM_Current =(1 - rawVoltage5)/sensitivity5;
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <current_sensor5.1+0xb4>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800330c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <current_sensor5.1+0xb8>)
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <current_sensor5.1+0xbc>)
 800331c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  }
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bdb0      	pop	{r4, r5, r7, pc}
 8003328:	66666666 	.word	0x66666666
 800332c:	400a6666 	.word	0x400a6666
 8003330:	00000000 	.word	0x00000000
 8003334:	40affe00 	.word	0x40affe00
 8003338:	2000054c 	.word	0x2000054c
 800333c:	2000055c 	.word	0x2000055c
 8003340:	2000000c 	.word	0x2000000c
 8003344:	20000560 	.word	0x20000560
 8003348:	20000008 	.word	0x20000008
 800334c:	20000690 	.word	0x20000690

08003350 <main>:
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	b087      	sub	sp, #28
 8003354:	af04      	add	r7, sp, #16
int main(void)
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	603b      	str	r3, [r7, #0]
	timein.seconds = 0;
 800335c:	4bac      	ldr	r3, [pc, #688]	; (8003610 <main+0x2c0>)
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 8003362:	f001 ff4f 	bl	8005204 <HAL_Init>
  SystemClock_Config();
 8003366:	f000 faa1 	bl	80038ac <SystemClock_Config>
  MX_GPIO_Init();
 800336a:	f000 fd93 	bl	8003e94 <MX_GPIO_Init>
  MX_DMA_Init();
 800336e:	f000 fd53 	bl	8003e18 <MX_DMA_Init>
  MX_ADC1_Init();
 8003372:	f000 fb0d 	bl	8003990 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003376:	f000 fc11 	bl	8003b9c <MX_SPI1_Init>
  MX_TIM1_Init();
 800337a:	f000 fc7d 	bl	8003c78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800337e:	f000 fd21 	bl	8003dc4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003382:	f000 fb81 	bl	8003a88 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003386:	f000 fbad 	bl	8003ae4 <MX_I2C2_Init>
  MX_UART4_Init();
 800338a:	f000 fcc7 	bl	8003d1c <MX_UART4_Init>
  MX_I2C3_Init();
 800338e:	f000 fbd7 	bl	8003b40 <MX_I2C3_Init>
  MX_SPI2_Init();
 8003392:	f000 fc3b 	bl	8003c0c <MX_SPI2_Init>
  MX_FATFS_Init();
 8003396:	f007 fba9 	bl	800aaec <MX_FATFS_Init>
  MX_UART5_Init();
 800339a:	f000 fce9 	bl	8003d70 <MX_UART5_Init>
  HAL_UART_Receive_DMA(&huart5,rx_data, sizeof(rx_data));
 800339e:	2202      	movs	r2, #2
 80033a0:	499c      	ldr	r1, [pc, #624]	; (8003614 <main+0x2c4>)
 80033a2:	489d      	ldr	r0, [pc, #628]	; (8003618 <main+0x2c8>)
 80033a4:	f006 fa75 	bl	8009892 <HAL_UART_Receive_DMA>
  HAL_ADC_Init(&hadc1);
 80033a8:	489c      	ldr	r0, [pc, #624]	; (800361c <main+0x2cc>)
 80033aa:	f001 ffc1 	bl	8005330 <HAL_ADC_Init>
  MPU6050_Init();
 80033ae:	f000 fe4b 	bl	8004048 <MPU6050_Init>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 4);
 80033b2:	2204      	movs	r2, #4
 80033b4:	499a      	ldr	r1, [pc, #616]	; (8003620 <main+0x2d0>)
 80033b6:	4899      	ldr	r0, [pc, #612]	; (800361c <main+0x2cc>)
 80033b8:	f001 fffe 	bl	80053b8 <HAL_ADC_Start_DMA>
  BMP180_Start();
 80033bc:	f7fe fa5a 	bl	8001874 <BMP180_Start>
  Ringbuf_init();
 80033c0:	f001 fce0 	bl	8004d84 <Ringbuf_init>
  HAL_Delay(500);
 80033c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033c8:	f001 ff8e 	bl	80052e8 <HAL_Delay>
  if(settime==1)
 80033cc:	4b95      	ldr	r3, [pc, #596]	; (8003624 <main+0x2d4>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d11b      	bne.n	800340c <main+0xbc>
      Set_Time(timein.seconds, timein.minutes, timein.hour , timein.dayofweek, timein.dayofmonth, timein.month, timein.year);
 80033d4:	4b8e      	ldr	r3, [pc, #568]	; (8003610 <main+0x2c0>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	4b8d      	ldr	r3, [pc, #564]	; (8003610 <main+0x2c0>)
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	461c      	mov	r4, r3
 80033e0:	4b8b      	ldr	r3, [pc, #556]	; (8003610 <main+0x2c0>)
 80033e2:	789b      	ldrb	r3, [r3, #2]
 80033e4:	461d      	mov	r5, r3
 80033e6:	4b8a      	ldr	r3, [pc, #552]	; (8003610 <main+0x2c0>)
 80033e8:	78db      	ldrb	r3, [r3, #3]
 80033ea:	461e      	mov	r6, r3
 80033ec:	4b88      	ldr	r3, [pc, #544]	; (8003610 <main+0x2c0>)
 80033ee:	791b      	ldrb	r3, [r3, #4]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b87      	ldr	r3, [pc, #540]	; (8003610 <main+0x2c0>)
 80033f4:	795b      	ldrb	r3, [r3, #5]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4b85      	ldr	r3, [pc, #532]	; (8003610 <main+0x2c0>)
 80033fa:	799b      	ldrb	r3, [r3, #6]
 80033fc:	9302      	str	r3, [sp, #8]
 80033fe:	9101      	str	r1, [sp, #4]
 8003400:	9200      	str	r2, [sp, #0]
 8003402:	4633      	mov	r3, r6
 8003404:	462a      	mov	r2, r5
 8003406:	4621      	mov	r1, r4
 8003408:	f7ff f98e 	bl	8002728 <Set_Time>
  	  Temperature2 = BMP180_GetTemp();
  	  Pressure = BMP180_GetPress(0);
  	  trans1.tlm1.Altitude = BMP180_GetAlt(0);
  }

  strcpy(buffer,"Hello Duta'h\n");
 800340c:	4a86      	ldr	r2, [pc, #536]	; (8003628 <main+0x2d8>)
 800340e:	4b87      	ldr	r3, [pc, #540]	; (800362c <main+0x2dc>)
 8003410:	4614      	mov	r4, r2
 8003412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003414:	c407      	stmia	r4!, {r0, r1, r2}
 8003416:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx_data[0]=='T')
 8003418:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <main+0x2c4>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b54      	cmp	r3, #84	; 0x54
 800341e:	d10f      	bne.n	8003440 <main+0xf0>
	  {
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8003420:	2201      	movs	r2, #1
 8003422:	2140      	movs	r1, #64	; 0x40
 8003424:	4882      	ldr	r0, [pc, #520]	; (8003630 <main+0x2e0>)
 8003426:	f003 fa65 	bl	80068f4 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800342a:	2201      	movs	r2, #1
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	4880      	ldr	r0, [pc, #512]	; (8003630 <main+0x2e0>)
 8003430:	f003 fa60 	bl	80068f4 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8003434:	2201      	movs	r2, #1
 8003436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800343a:	487d      	ldr	r0, [pc, #500]	; (8003630 <main+0x2e0>)
 800343c:	f003 fa5a 	bl	80068f4 <HAL_GPIO_WritePin>
	  }
   HAL_Delay(5);
 8003440:	2005      	movs	r0, #5
 8003442:	f001 ff51 	bl	80052e8 <HAL_Delay>
	  if(Wait_for("GGA")==1)
 8003446:	487b      	ldr	r0, [pc, #492]	; (8003634 <main+0x2e4>)
 8003448:	f001 fdcc 	bl	8004fe4 <Wait_for>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <main+0x112>
	  {
		  Copy_upto("*", GGA);
 8003452:	4979      	ldr	r1, [pc, #484]	; (8003638 <main+0x2e8>)
 8003454:	4879      	ldr	r0, [pc, #484]	; (800363c <main+0x2ec>)
 8003456:	f001 fd45 	bl	8004ee4 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 800345a:	4979      	ldr	r1, [pc, #484]	; (8003640 <main+0x2f0>)
 800345c:	4876      	ldr	r0, [pc, #472]	; (8003638 <main+0x2e8>)
 800345e:	f7fe fb3b 	bl	8001ad8 <decodeGGA>
	  }
	  if (Wait_for("RMC")==1)
 8003462:	4878      	ldr	r0, [pc, #480]	; (8003644 <main+0x2f4>)
 8003464:	f001 fdbe 	bl	8004fe4 <Wait_for>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <main+0x12e>
	  {
		  Copy_upto("*",RMC);
 800346e:	4976      	ldr	r1, [pc, #472]	; (8003648 <main+0x2f8>)
 8003470:	4872      	ldr	r0, [pc, #456]	; (800363c <main+0x2ec>)
 8003472:	f001 fd37 	bl	8004ee4 <Copy_upto>
		  decodeRMC(RMC, &gpsData.rmcstruct);
 8003476:	4975      	ldr	r1, [pc, #468]	; (800364c <main+0x2fc>)
 8003478:	4873      	ldr	r0, [pc, #460]	; (8003648 <main+0x2f8>)
 800347a:	f7fe fed9 	bl	8002230 <decodeRMC>
	  }
	  
	  trans1.tlm1.M_Temp=Max6675_Read_Temp();
 800347e:	f7fe faa7 	bl	80019d0 <Max6675_Read_Temp>
 8003482:	eef0 7a40 	vmov.f32	s15, s0
 8003486:	4b72      	ldr	r3, [pc, #456]	; (8003650 <main+0x300>)
 8003488:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  barometer_sensor();
 800348c:	463b      	mov	r3, r7
 800348e:	469c      	mov	ip, r3
 8003490:	f000 f9e6 	bl	8003860 <barometer_sensor.0>
	  trans1.tlm1.NC_Press =readHX();
 8003494:	f7fe fa42 	bl	800191c <readHX>
 8003498:	ee07 0a90 	vmov	s15, r0
 800349c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a0:	4b6b      	ldr	r3, [pc, #428]	; (8003650 <main+0x300>)
 80034a2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	  current_sensor5();
 80034a6:	463b      	mov	r3, r7
 80034a8:	469c      	mov	ip, r3
 80034aa:	f7ff fef1 	bl	8003290 <current_sensor5.1>
	  current_sensor20();
 80034ae:	463b      	mov	r3, r7
 80034b0:	469c      	mov	ip, r3
 80034b2:	f000 f975 	bl	80037a0 <current_sensor20.2>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 80034b6:	4a67      	ldr	r2, [pc, #412]	; (8003654 <main+0x304>)
 80034b8:	4967      	ldr	r1, [pc, #412]	; (8003658 <main+0x308>)
 80034ba:	4868      	ldr	r0, [pc, #416]	; (800365c <main+0x30c>)
 80034bc:	f000 fe2c 	bl	8004118 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 80034c0:	4a67      	ldr	r2, [pc, #412]	; (8003660 <main+0x310>)
 80034c2:	4968      	ldr	r1, [pc, #416]	; (8003664 <main+0x314>)
 80034c4:	4868      	ldr	r0, [pc, #416]	; (8003668 <main+0x318>)
 80034c6:	f000 feab 	bl	8004220 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);
	  trans1.tlm1.Ax=Ax;
 80034ca:	4b64      	ldr	r3, [pc, #400]	; (800365c <main+0x30c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a60      	ldr	r2, [pc, #384]	; (8003650 <main+0x300>)
 80034d0:	6053      	str	r3, [r2, #4]
	  trans1.tlm1.Ay=Ay;
 80034d2:	4b61      	ldr	r3, [pc, #388]	; (8003658 <main+0x308>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <main+0x300>)
 80034d8:	6093      	str	r3, [r2, #8]
	  trans1.tlm1.Az=Az;
 80034da:	4b5e      	ldr	r3, [pc, #376]	; (8003654 <main+0x304>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5c      	ldr	r2, [pc, #368]	; (8003650 <main+0x300>)
 80034e0:	60d3      	str	r3, [r2, #12]
	  trans1.tlm1.Gx=Gx;
 80034e2:	4b61      	ldr	r3, [pc, #388]	; (8003668 <main+0x318>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5a      	ldr	r2, [pc, #360]	; (8003650 <main+0x300>)
 80034e8:	6113      	str	r3, [r2, #16]
	  trans1.tlm1.Gy=Gy;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <main+0x314>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a58      	ldr	r2, [pc, #352]	; (8003650 <main+0x300>)
 80034f0:	6153      	str	r3, [r2, #20]
	  trans1.tlm1.Gz=Gz;
 80034f2:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <main+0x310>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a56      	ldr	r2, [pc, #344]	; (8003650 <main+0x300>)
 80034f8:	6193      	str	r3, [r2, #24]


	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, 1);
 80034fa:	2201      	movs	r2, #1
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	485b      	ldr	r0, [pc, #364]	; (800366c <main+0x31c>)
 8003500:	f003 f9f8 	bl	80068f4 <HAL_GPIO_WritePin>
	  trans1.tlm1.CPM_Voltage = dmaOut[0]*(5.0/4096.0);
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <main+0x2d0>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd f82b 	bl	8000564 <__aeabi_i2d>
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	4b57      	ldr	r3, [pc, #348]	; (8003670 <main+0x320>)
 8003514:	f7fd f890 	bl	8000638 <__aeabi_dmul>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	f7fd fb82 	bl	8000c28 <__aeabi_d2f>
 8003524:	4603      	mov	r3, r0
 8003526:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <main+0x300>)
 8003528:	61d3      	str	r3, [r2, #28]
	  HAL_GPIO_WritePin(HV_En_GPIO_Port, HV_En_Pin, 1);
 800352a:	2201      	movs	r2, #1
 800352c:	2120      	movs	r1, #32
 800352e:	4851      	ldr	r0, [pc, #324]	; (8003674 <main+0x324>)
 8003530:	f003 f9e0 	bl	80068f4 <HAL_GPIO_WritePin>
	  trans1.tlm1.H_Voltage=dmaOut[3]*(9.36/4096);
 8003534:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <main+0x2d0>)
 8003536:	88db      	ldrh	r3, [r3, #6]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f813 	bl	8000564 <__aeabi_i2d>
 800353e:	a332      	add	r3, pc, #200	; (adr r3, 8003608 <main+0x2b8>)
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f7fd f878 	bl	8000638 <__aeabi_dmul>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fb6a 	bl	8000c28 <__aeabi_d2f>
 8003554:	4603      	mov	r3, r0
 8003556:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <main+0x300>)
 8003558:	6213      	str	r3, [r2, #32]

	  HAL_Delay(100);
 800355a:	2064      	movs	r0, #100	; 0x64
 800355c:	f001 fec4 	bl	80052e8 <HAL_Delay>
	  Get_Time();
 8003560:	f7ff f932 	bl	80027c8 <Get_Time>
		trans1.tlm1.seconds=time.seconds;
 8003564:	4b44      	ldr	r3, [pc, #272]	; (8003678 <main+0x328>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	4b37      	ldr	r3, [pc, #220]	; (8003650 <main+0x300>)
 8003572:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		trans1.tlm1.minutes=time.minutes;
 8003576:	4b40      	ldr	r3, [pc, #256]	; (8003678 <main+0x328>)
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <main+0x300>)
 8003584:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		trans1.tlm1.hour=time.hour;
 8003588:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <main+0x328>)
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003594:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <main+0x300>)
 8003596:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		trans1.tlm1.dayofmonth=time.dayofmonth;
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <main+0x328>)
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <main+0x300>)
 80035a8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		trans1.tlm1.month=time.month;
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <main+0x328>)
 80035ae:	795b      	ldrb	r3, [r3, #5]
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <main+0x300>)
 80035ba:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		trans1.tlm1.year=time.year;
 80035be:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <main+0x328>)
 80035c0:	799b      	ldrb	r3, [r3, #6]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ca:	4b21      	ldr	r3, [pc, #132]	; (8003650 <main+0x300>)
 80035cc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


		fresult = f_mount(&fs, "/", 1);
 80035d0:	2201      	movs	r2, #1
 80035d2:	492a      	ldr	r1, [pc, #168]	; (800367c <main+0x32c>)
 80035d4:	482a      	ldr	r0, [pc, #168]	; (8003680 <main+0x330>)
 80035d6:	f009 fcd3 	bl	800cf80 <f_mount>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <main+0x334>)
 80035e0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 80035e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035e6:	f001 fe7f 	bl	80052e8 <HAL_Delay>
		fresult = f_open(&fil, "testfile.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80035ea:	2213      	movs	r2, #19
 80035ec:	4926      	ldr	r1, [pc, #152]	; (8003688 <main+0x338>)
 80035ee:	4827      	ldr	r0, [pc, #156]	; (800368c <main+0x33c>)
 80035f0:	f009 fd0c 	bl	800d00c <f_open>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <main+0x334>)
 80035fa:	701a      	strb	r2, [r3, #0]
		//	  memset(TxBuff,"\0",150);

	  for(int i=0; i<23; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	e0a0      	b.n	8003744 <main+0x3f4>
 8003602:	bf00      	nop
 8003604:	f3af 8000 	nop.w
 8003608:	eb851eb8 	.word	0xeb851eb8
 800360c:	3f62b851 	.word	0x3f62b851
 8003610:	20000680 	.word	0x20000680
 8003614:	2000052c 	.word	0x2000052c
 8003618:	20000428 	.word	0x20000428
 800361c:	20000148 	.word	0x20000148
 8003620:	2000054c 	.word	0x2000054c
 8003624:	20000687 	.word	0x20000687
 8003628:	20002760 	.word	0x20002760
 800362c:	080115c0 	.word	0x080115c0
 8003630:	40020800 	.word	0x40020800
 8003634:	080115d0 	.word	0x080115d0
 8003638:	2000056c 	.word	0x2000056c
 800363c:	080115d4 	.word	0x080115d4
 8003640:	20000634 	.word	0x20000634
 8003644:	080115d8 	.word	0x080115d8
 8003648:	200005d0 	.word	0x200005d0
 800364c:	20000660 	.word	0x20000660
 8003650:	20000690 	.word	0x20000690
 8003654:	20000538 	.word	0x20000538
 8003658:	20000534 	.word	0x20000534
 800365c:	20000530 	.word	0x20000530
 8003660:	20000544 	.word	0x20000544
 8003664:	20000540 	.word	0x20000540
 8003668:	2000053c 	.word	0x2000053c
 800366c:	40020000 	.word	0x40020000
 8003670:	3f540000 	.word	0x3f540000
 8003674:	40020400 	.word	0x40020400
 8003678:	20000678 	.word	0x20000678
 800367c:	080115dc 	.word	0x080115dc
 8003680:	200006f0 	.word	0x200006f0
 8003684:	20002758 	.word	0x20002758
 8003688:	080115e0 	.word	0x080115e0
 800368c:	20001728 	.word	0x20001728
	  {

		  memset(tempbuff,'\0',6);
 8003690:	2206      	movs	r2, #6
 8003692:	2100      	movs	r1, #0
 8003694:	4838      	ldr	r0, [pc, #224]	; (8003778 <main+0x428>)
 8003696:	f00a fc59 	bl	800df4c <memset>
		  gcvt(trans1.dataframe[i],4,tempbuff);
 800369a:	4a38      	ldr	r2, [pc, #224]	; (800377c <main+0x42c>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff6f 	bl	8000588 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4932      	ldr	r1, [pc, #200]	; (8003778 <main+0x428>)
 80036b0:	2004      	movs	r0, #4
 80036b2:	ec43 2b10 	vmov	d0, r2, r3
 80036b6:	f00a fbfb 	bl	800deb0 <gcvt>
		  //strcat(TxBuff,tempbuff);
		  strcat(tempbuff,",");
 80036ba:	482f      	ldr	r0, [pc, #188]	; (8003778 <main+0x428>)
 80036bc:	f7fc fda8 	bl	8000210 <strlen>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <main+0x428>)
 80036c6:	4413      	add	r3, r2
 80036c8:	492d      	ldr	r1, [pc, #180]	; (8003780 <main+0x430>)
 80036ca:	461a      	mov	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	8013      	strh	r3, [r2, #0]
		  HAL_UART_Transmit(&huart4, tempbuff, strlen(tempbuff), 100);
 80036d2:	4829      	ldr	r0, [pc, #164]	; (8003778 <main+0x428>)
 80036d4:	f7fc fd9c 	bl	8000210 <strlen>
 80036d8:	4603      	mov	r3, r0
 80036da:	b29a      	uxth	r2, r3
 80036dc:	2364      	movs	r3, #100	; 0x64
 80036de:	4926      	ldr	r1, [pc, #152]	; (8003778 <main+0x428>)
 80036e0:	4828      	ldr	r0, [pc, #160]	; (8003784 <main+0x434>)
 80036e2:	f006 f844 	bl	800976e <HAL_UART_Transmit>
		  if(i==22) strcat(tempbuff, "\n");
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b16      	cmp	r3, #22
 80036ea:	d10b      	bne.n	8003704 <main+0x3b4>
 80036ec:	4822      	ldr	r0, [pc, #136]	; (8003778 <main+0x428>)
 80036ee:	f7fc fd8f 	bl	8000210 <strlen>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <main+0x428>)
 80036f8:	4413      	add	r3, r2
 80036fa:	4923      	ldr	r1, [pc, #140]	; (8003788 <main+0x438>)
 80036fc:	461a      	mov	r2, r3
 80036fe:	460b      	mov	r3, r1
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	8013      	strh	r3, [r2, #0]


		  f_lseek(&fil,writepos);
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <main+0x43c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	4821      	ldr	r0, [pc, #132]	; (8003790 <main+0x440>)
 800370c:	f00a f886 	bl	800d81c <f_lseek>
		  fresult = f_write(&fil, tempbuff, bufsize(tempbuff), &bw);
 8003710:	4819      	ldr	r0, [pc, #100]	; (8003778 <main+0x428>)
 8003712:	f7ff fda6 	bl	8003262 <bufsize>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <main+0x444>)
 800371c:	4916      	ldr	r1, [pc, #88]	; (8003778 <main+0x428>)
 800371e:	481c      	ldr	r0, [pc, #112]	; (8003790 <main+0x440>)
 8003720:	f009 fe40 	bl	800d3a4 <f_write>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <main+0x448>)
 800372a:	701a      	strb	r2, [r3, #0]
		  writepos+=bufsize(tempbuff);
 800372c:	4812      	ldr	r0, [pc, #72]	; (8003778 <main+0x428>)
 800372e:	f7ff fd98 	bl	8003262 <bufsize>
 8003732:	4602      	mov	r2, r0
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <main+0x43c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4413      	add	r3, r2
 800373a:	4a14      	ldr	r2, [pc, #80]	; (800378c <main+0x43c>)
 800373c:	6013      	str	r3, [r2, #0]
	  for(int i=0; i<23; i++)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3301      	adds	r3, #1
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b16      	cmp	r3, #22
 8003748:	dda2      	ble.n	8003690 <main+0x340>

	  }

	  f_close(&fil);
 800374a:	4811      	ldr	r0, [pc, #68]	; (8003790 <main+0x440>)
 800374c:	f00a f83c 	bl	800d7c8 <f_close>
	  fresult = f_mount(NULL, "/", 1);
 8003750:	2201      	movs	r2, #1
 8003752:	4912      	ldr	r1, [pc, #72]	; (800379c <main+0x44c>)
 8003754:	2000      	movs	r0, #0
 8003756:	f009 fc13 	bl	800cf80 <f_mount>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <main+0x448>)
 8003760:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart4, "\n", 1, 100);
 8003762:	2364      	movs	r3, #100	; 0x64
 8003764:	2201      	movs	r2, #1
 8003766:	4908      	ldr	r1, [pc, #32]	; (8003788 <main+0x438>)
 8003768:	4806      	ldr	r0, [pc, #24]	; (8003784 <main+0x434>)
 800376a:	f006 f800 	bl	800976e <HAL_UART_Transmit>
	  fresult = f_open(&fil, "testfile.txt", FA_READ);
	  f_read (&fil, rxbuffer, f_size(&fil), &br);
	  f_close(&fil);
	  fresult = f_mount(NULL, "/", 1);*/

	  HAL_Delay(100);
 800376e:	2064      	movs	r0, #100	; 0x64
 8003770:	f001 fdba 	bl	80052e8 <HAL_Delay>
  {
 8003774:	e650      	b.n	8003418 <main+0xc8>
 8003776:	bf00      	nop
 8003778:	20000688 	.word	0x20000688
 800377c:	20000690 	.word	0x20000690
 8003780:	080115f0 	.word	0x080115f0
 8003784:	200003e4 	.word	0x200003e4
 8003788:	080115f4 	.word	0x080115f4
 800378c:	200027e0 	.word	0x200027e0
 8003790:	20001728 	.word	0x20001728
 8003794:	2000275c 	.word	0x2000275c
 8003798:	20002758 	.word	0x20002758
 800379c:	080115dc 	.word	0x080115dc

080037a0 <current_sensor20.2>:
  {
 80037a0:	b5b0      	push	{r4, r5, r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <current_sensor20.2+0xa8>)
 80037ac:	889a      	ldrh	r2, [r3, #4]
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <current_sensor20.2+0xac>)
 80037b0:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <current_sensor20.2+0xac>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037be:	ee17 0a90 	vmov	r0, s15
 80037c2:	f7fc fee1 	bl	8000588 <__aeabi_f2d>
 80037c6:	a31c      	add	r3, pc, #112	; (adr r3, 8003838 <current_sensor20.2+0x98>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f7fc ff34 	bl	8000638 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	a319      	add	r3, pc, #100	; (adr r3, 8003840 <current_sensor20.2+0xa0>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fd f855 	bl	800088c <__aeabi_ddiv>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4614      	mov	r4, r2
 80037e8:	461d      	mov	r5, r3
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <current_sensor20.2+0xb0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc feca 	bl	8000588 <__aeabi_f2d>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4620      	mov	r0, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7fc ff1c 	bl	8000638 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	f7fd fa0e 	bl	8000c28 <__aeabi_d2f>
 800380c:	4603      	mov	r3, r0
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <current_sensor20.2+0xb4>)
 8003810:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.H_Current =(1 - rawVoltage20)/sensitivity20;
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <current_sensor20.2+0xb4>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800381c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <current_sensor20.2+0xb8>)
 8003822:	ed93 7a00 	vldr	s14, [r3]
 8003826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <current_sensor20.2+0xbc>)
 800382c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  }
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bdb0      	pop	{r4, r5, r7, pc}
 8003838:	66666666 	.word	0x66666666
 800383c:	400a6666 	.word	0x400a6666
 8003840:	00000000 	.word	0x00000000
 8003844:	40affe00 	.word	0x40affe00
 8003848:	2000054c 	.word	0x2000054c
 800384c:	20000564 	.word	0x20000564
 8003850:	20000014 	.word	0x20000014
 8003854:	20000568 	.word	0x20000568
 8003858:	20000010 	.word	0x20000010
 800385c:	20000690 	.word	0x20000690

08003860 <barometer_sensor.0>:
  {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 800386a:	f7fd fc8f 	bl	800118c <BMP180_GetTemp>
 800386e:	eef0 7a40 	vmov.f32	s15, s0
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <barometer_sensor.0+0x40>)
 8003874:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 8003878:	2000      	movs	r0, #0
 800387a:	f7fd fd81 	bl	8001380 <BMP180_GetPress>
 800387e:	eef0 7a40 	vmov.f32	s15, s0
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <barometer_sensor.0+0x44>)
 8003884:	edc3 7a00 	vstr	s15, [r3]
  	  trans1.tlm1.Altitude = BMP180_GetAlt(0);
 8003888:	2000      	movs	r0, #0
 800388a:	f7fd ffa9 	bl	80017e0 <BMP180_GetAlt>
 800388e:	eef0 7a40 	vmov.f32	s15, s0
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <barometer_sensor.0+0x48>)
 8003894:	edc3 7a00 	vstr	s15, [r3]
  }
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000554 	.word	0x20000554
 80038a4:	20000558 	.word	0x20000558
 80038a8:	20000690 	.word	0x20000690

080038ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b094      	sub	sp, #80	; 0x50
 80038b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038b2:	f107 031c 	add.w	r3, r7, #28
 80038b6:	2234      	movs	r2, #52	; 0x34
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f00a fb46 	bl	800df4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038c0:	f107 0308 	add.w	r3, r7, #8
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <SystemClock_Config+0xdc>)
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	4a2b      	ldr	r2, [pc, #172]	; (8003988 <SystemClock_Config+0xdc>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6413      	str	r3, [r2, #64]	; 0x40
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <SystemClock_Config+0xdc>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ec:	2300      	movs	r3, #0
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <SystemClock_Config+0xe0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <SystemClock_Config+0xe0>)
 80038f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <SystemClock_Config+0xe0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003908:	2302      	movs	r3, #2
 800390a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800390c:	2301      	movs	r3, #1
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003910:	2310      	movs	r3, #16
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003914:	2302      	movs	r3, #2
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003918:	2300      	movs	r3, #0
 800391a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800391c:	2308      	movs	r3, #8
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003920:	23b4      	movs	r3, #180	; 0xb4
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003924:	2302      	movs	r3, #2
 8003926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003928:	2302      	movs	r3, #2
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800392c:	2302      	movs	r3, #2
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003930:	f107 031c 	add.w	r3, r7, #28
 8003934:	4618      	mov	r0, r3
 8003936:	f004 fb51 	bl	8007fdc <HAL_RCC_OscConfig>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003940:	f000 fb7c 	bl	800403c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003944:	f003 ffb0 	bl	80078a8 <HAL_PWREx_EnableOverDrive>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800394e:	f000 fb75 	bl	800403c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003952:	230f      	movs	r3, #15
 8003954:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003956:	2302      	movs	r3, #2
 8003958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800395e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003968:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	2105      	movs	r1, #5
 8003970:	4618      	mov	r0, r3
 8003972:	f003 ffe9 	bl	8007948 <HAL_RCC_ClockConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800397c:	f000 fb5e 	bl	800403c <Error_Handler>
  }
}
 8003980:	bf00      	nop
 8003982:	3750      	adds	r7, #80	; 0x50
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000

08003990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003996:	463b      	mov	r3, r7
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039a4:	4a36      	ldr	r2, [pc, #216]	; (8003a80 <MX_ADC1_Init+0xf0>)
 80039a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80039a8:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039bc:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039be:	2201      	movs	r2, #1
 80039c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039d2:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <MX_ADC1_Init+0xf4>)
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039de:	2204      	movs	r2, #4
 80039e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039f0:	4822      	ldr	r0, [pc, #136]	; (8003a7c <MX_ADC1_Init+0xec>)
 80039f2:	f001 fc9d 	bl	8005330 <HAL_ADC_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80039fc:	f000 fb1e 	bl	800403c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a04:	2301      	movs	r3, #1
 8003a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	4619      	mov	r1, r3
 8003a10:	481a      	ldr	r0, [pc, #104]	; (8003a7c <MX_ADC1_Init+0xec>)
 8003a12:	f001 fdff 	bl	8005614 <HAL_ADC_ConfigChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a1c:	f000 fb0e 	bl	800403c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a24:	2302      	movs	r3, #2
 8003a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a28:	463b      	mov	r3, r7
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4813      	ldr	r0, [pc, #76]	; (8003a7c <MX_ADC1_Init+0xec>)
 8003a2e:	f001 fdf1 	bl	8005614 <HAL_ADC_ConfigChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003a38:	f000 fb00 	bl	800403c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003a40:	2303      	movs	r3, #3
 8003a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a44:	463b      	mov	r3, r7
 8003a46:	4619      	mov	r1, r3
 8003a48:	480c      	ldr	r0, [pc, #48]	; (8003a7c <MX_ADC1_Init+0xec>)
 8003a4a:	f001 fde3 	bl	8005614 <HAL_ADC_ConfigChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003a54:	f000 faf2 	bl	800403c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a60:	463b      	mov	r3, r7
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_ADC1_Init+0xec>)
 8003a66:	f001 fdd5 	bl	8005614 <HAL_ADC_ConfigChannel>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003a70:	f000 fae4 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000148 	.word	0x20000148
 8003a80:	40012000 	.word	0x40012000
 8003a84:	0f000001 	.word	0x0f000001

08003a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <MX_I2C1_Init+0x54>)
 8003a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <MX_I2C1_Init+0x58>)
 8003a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ac4:	4804      	ldr	r0, [pc, #16]	; (8003ad8 <MX_I2C1_Init+0x50>)
 8003ac6:	f002 ff2f 	bl	8006928 <HAL_I2C_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ad0:	f000 fab4 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200001f0 	.word	0x200001f0
 8003adc:	40005400 	.word	0x40005400
 8003ae0:	000186a0 	.word	0x000186a0

08003ae4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <MX_I2C2_Init+0x54>)
 8003aec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <MX_I2C2_Init+0x58>)
 8003af2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <MX_I2C2_Init+0x50>)
 8003b22:	f002 ff01 	bl	8006928 <HAL_I2C_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b2c:	f000 fa86 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000244 	.word	0x20000244
 8003b38:	40005800 	.word	0x40005800
 8003b3c:	000186a0 	.word	0x000186a0

08003b40 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <MX_I2C3_Init+0x54>)
 8003b48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <MX_I2C3_Init+0x58>)
 8003b4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b7e:	f002 fed3 	bl	8006928 <HAL_I2C_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b88:	f000 fa58 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000298 	.word	0x20000298
 8003b94:	40005c00 	.word	0x40005c00
 8003b98:	000186a0 	.word	0x000186a0

08003b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ba0:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003ba2:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <MX_SPI1_Init+0x6c>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ba6:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bea:	220a      	movs	r2, #10
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003bf0:	f004 fc92 	bl	8008518 <HAL_SPI_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003bfa:	f000 fa1f 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200002ec 	.word	0x200002ec
 8003c08:	40013000 	.word	0x40013000

08003c0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <MX_SPI2_Init+0x68>)
 8003c14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c40:	2238      	movs	r2, #56	; 0x38
 8003c42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c58:	220a      	movs	r2, #10
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c5c:	4804      	ldr	r0, [pc, #16]	; (8003c70 <MX_SPI2_Init+0x64>)
 8003c5e:	f004 fc5b 	bl	8008518 <HAL_SPI_Init>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c68:	f000 f9e8 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000344 	.word	0x20000344
 8003c74:	40003800 	.word	0x40003800

08003c78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	609a      	str	r2, [r3, #8]
 8003c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c94:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <MX_TIM1_Init+0xa0>)
 8003c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003c9c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8003ca0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cbc:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cc2:	4814      	ldr	r0, [pc, #80]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003cc4:	f005 f9d0 	bl	8009068 <HAL_TIM_Base_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003cce:	f000 f9b5 	bl	800403c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003ce0:	f005 fa7a 	bl	80091d8 <HAL_TIM_ConfigClockSource>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003cea:	f000 f9a7 	bl	800403c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cf6:	463b      	mov	r3, r7
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4806      	ldr	r0, [pc, #24]	; (8003d14 <MX_TIM1_Init+0x9c>)
 8003cfc:	f005 fc6e 	bl	80095dc <HAL_TIMEx_MasterConfigSynchronization>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003d06:	f000 f999 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2000039c 	.word	0x2000039c
 8003d18:	40010000 	.word	0x40010000

08003d1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d22:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <MX_UART4_Init+0x50>)
 8003d24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d42:	220c      	movs	r2, #12
 8003d44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d52:	4805      	ldr	r0, [pc, #20]	; (8003d68 <MX_UART4_Init+0x4c>)
 8003d54:	f005 fcbe 	bl	80096d4 <HAL_UART_Init>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003d5e:	f000 f96d 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200003e4 	.word	0x200003e4
 8003d6c:	40004c00 	.word	0x40004c00

08003d70 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <MX_UART5_Init+0x50>)
 8003d78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003da6:	4805      	ldr	r0, [pc, #20]	; (8003dbc <MX_UART5_Init+0x4c>)
 8003da8:	f005 fc94 	bl	80096d4 <HAL_UART_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003db2:	f000 f943 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000428 	.word	0x20000428
 8003dc0:	40005000 	.word	0x40005000

08003dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <MX_USART1_UART_Init+0x50>)
 8003dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003dd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003dea:	220c      	movs	r2, #12
 8003dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dfa:	4805      	ldr	r0, [pc, #20]	; (8003e10 <MX_USART1_UART_Init+0x4c>)
 8003dfc:	f005 fc6a 	bl	80096d4 <HAL_UART_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e06:	f000 f919 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	200027fc 	.word	0x200027fc
 8003e14:	40011000 	.word	0x40011000

08003e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <MX_DMA_Init+0x78>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <MX_DMA_Init+0x78>)
 8003e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <MX_DMA_Init+0x78>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <MX_DMA_Init+0x78>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <MX_DMA_Init+0x78>)
 8003e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <MX_DMA_Init+0x78>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	200b      	movs	r0, #11
 8003e5c:	f001 ff65 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003e60:	200b      	movs	r0, #11
 8003e62:	f001 ff7e 	bl	8005d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	202f      	movs	r0, #47	; 0x2f
 8003e6c:	f001 ff5d 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003e70:	202f      	movs	r0, #47	; 0x2f
 8003e72:	f001 ff76 	bl	8005d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003e76:	2200      	movs	r2, #0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2038      	movs	r0, #56	; 0x38
 8003e7c:	f001 ff55 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e80:	2038      	movs	r0, #56	; 0x38
 8003e82:	f001 ff6e 	bl	8005d62 <HAL_NVIC_EnableIRQ>

}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	4a49      	ldr	r2, [pc, #292]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a42      	ldr	r2, [pc, #264]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	4b3c      	ldr	r3, [pc, #240]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003f08:	f043 0302 	orr.w	r3, r3, #2
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4b35      	ldr	r3, [pc, #212]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <MX_GPIO_Init+0x160>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin|NCP_SCK_Pin, GPIO_PIN_RESET);
 8003f36:	2200      	movs	r2, #0
 8003f38:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003f3c:	482e      	ldr	r0, [pc, #184]	; (8003ff8 <MX_GPIO_Init+0x164>)
 8003f3e:	f002 fcd9 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|HV_En_Pin, GPIO_PIN_RESET);
 8003f42:	2200      	movs	r2, #0
 8003f44:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003f48:	482c      	ldr	r0, [pc, #176]	; (8003ffc <MX_GPIO_Init+0x168>)
 8003f4a:	f002 fcd3 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_Pin|Drougue_Parachute_Pin|Main_Parachute_Pin, GPIO_PIN_RESET);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003f54:	482a      	ldr	r0, [pc, #168]	; (8004000 <MX_GPIO_Init+0x16c>)
 8003f56:	f002 fccd 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f62:	2302      	movs	r3, #2
 8003f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4821      	ldr	r0, [pc, #132]	; (8003ff8 <MX_GPIO_Init+0x164>)
 8003f72:	f002 fb13 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : MT_CS_Pin NCP_SCK_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin|NCP_SCK_Pin;
 8003f76:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8003f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f84:	2300      	movs	r3, #0
 8003f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	481a      	ldr	r0, [pc, #104]	; (8003ff8 <MX_GPIO_Init+0x164>)
 8003f90:	f002 fb04 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin HV_En_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|HV_En_Pin;
 8003f94:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8003f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4619      	mov	r1, r3
 8003fac:	4813      	ldr	r0, [pc, #76]	; (8003ffc <MX_GPIO_Init+0x168>)
 8003fae:	f002 faf5 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_Pin Drougue_Parachute_Pin Main_Parachute_Pin */
  GPIO_InitStruct.Pin = Motor_Pin|Drougue_Parachute_Pin|Main_Parachute_Pin;
 8003fb2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480d      	ldr	r0, [pc, #52]	; (8004000 <MX_GPIO_Init+0x16c>)
 8003fcc:	f002 fae6 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pin : NCP_DAT_Pin */
  GPIO_InitStruct.Pin = NCP_DAT_Pin;
 8003fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NCP_DAT_GPIO_Port, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4804      	ldr	r0, [pc, #16]	; (8003ff8 <MX_GPIO_Init+0x164>)
 8003fe6:	f002 fad9 	bl	800659c <HAL_GPIO_Init>

}
 8003fea:	bf00      	nop
 8003fec:	3728      	adds	r7, #40	; 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	40020400 	.word	0x40020400
 8004000:	40020800 	.word	0x40020800

08004004 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e009      	b.n	800402a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	60ba      	str	r2, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff f8f8 	bl	8003214 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3301      	adds	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	dbf1      	blt.n	8004016 <_write+0x12>
	}
	return len;
 8004032:	687b      	ldr	r3, [r7, #4]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004040:	b672      	cpsid	i
}
 8004042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004044:	e7fe      	b.n	8004044 <Error_Handler+0x8>
	...

08004048 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800404e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	2301      	movs	r3, #1
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <MPU6050_Init+0xc0>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2301      	movs	r3, #1
 800405e:	2275      	movs	r2, #117	; 0x75
 8004060:	21d0      	movs	r1, #208	; 0xd0
 8004062:	482a      	ldr	r0, [pc, #168]	; (800410c <MPU6050_Init+0xc4>)
 8004064:	f002 fe9e 	bl	8006da4 <HAL_I2C_Mem_Read>
 8004068:	4603      	mov	r3, r0
 800406a:	b29a      	uxth	r2, r3
 800406c:	4b28      	ldr	r3, [pc, #160]	; (8004110 <MPU6050_Init+0xc8>)
 800406e:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <MPU6050_Init+0xc0>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b68      	cmp	r3, #104	; 0x68
 8004076:	d140      	bne.n	80040fa <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <MPU6050_Init+0xcc>)
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800407e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004082:	9302      	str	r3, [sp, #8]
 8004084:	2301      	movs	r3, #1
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <MPU6050_Init+0xcc>)
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2301      	movs	r3, #1
 800408e:	226b      	movs	r2, #107	; 0x6b
 8004090:	21d0      	movs	r1, #208	; 0xd0
 8004092:	481e      	ldr	r0, [pc, #120]	; (800410c <MPU6050_Init+0xc4>)
 8004094:	f002 fd8c 	bl	8006bb0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <MPU6050_Init+0xcc>)
 800409a:	2207      	movs	r2, #7
 800409c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800409e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	2301      	movs	r3, #1
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <MPU6050_Init+0xcc>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2301      	movs	r3, #1
 80040ae:	2219      	movs	r2, #25
 80040b0:	21d0      	movs	r1, #208	; 0xd0
 80040b2:	4816      	ldr	r0, [pc, #88]	; (800410c <MPU6050_Init+0xc4>)
 80040b4:	f002 fd7c 	bl	8006bb0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <MPU6050_Init+0xcc>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80040be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	2301      	movs	r3, #1
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <MPU6050_Init+0xcc>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2301      	movs	r3, #1
 80040ce:	221c      	movs	r2, #28
 80040d0:	21d0      	movs	r1, #208	; 0xd0
 80040d2:	480e      	ldr	r0, [pc, #56]	; (800410c <MPU6050_Init+0xc4>)
 80040d4:	f002 fd6c 	bl	8006bb0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <MPU6050_Init+0xcc>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80040de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e2:	9302      	str	r3, [sp, #8]
 80040e4:	2301      	movs	r3, #1
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <MPU6050_Init+0xcc>)
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	221b      	movs	r2, #27
 80040f0:	21d0      	movs	r1, #208	; 0xd0
 80040f2:	4806      	ldr	r0, [pc, #24]	; (800410c <MPU6050_Init+0xc4>)
 80040f4:	f002 fd5c 	bl	8006bb0 <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 80040f8:	e002      	b.n	8004100 <MPU6050_Init+0xb8>
	else check=-1;
 80040fa:	4b03      	ldr	r3, [pc, #12]	; (8004108 <MPU6050_Init+0xc0>)
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	701a      	strb	r2, [r3, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200027f0 	.word	0x200027f0
 800410c:	200001f0 	.word	0x200001f0
 8004110:	20000018 	.word	0x20000018
 8004114:	200027f1 	.word	0x200027f1

08004118 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af04      	add	r7, sp, #16
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8004124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004128:	9302      	str	r3, [sp, #8]
 800412a:	2306      	movs	r3, #6
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	f107 0310 	add.w	r3, r7, #16
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	223b      	movs	r2, #59	; 0x3b
 8004138:	21d0      	movs	r1, #208	; 0xd0
 800413a:	4832      	ldr	r0, [pc, #200]	; (8004204 <MPU6050_Read_Accel+0xec>)
 800413c:	f002 fe32 	bl	8006da4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8004140:	7c3b      	ldrb	r3, [r7, #16]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	b21a      	sxth	r2, r3
 8004146:	7c7b      	ldrb	r3, [r7, #17]
 8004148:	b21b      	sxth	r3, r3
 800414a:	4313      	orrs	r3, r2
 800414c:	b21a      	sxth	r2, r3
 800414e:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <MPU6050_Read_Accel+0xf0>)
 8004150:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8004152:	7cbb      	ldrb	r3, [r7, #18]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	b21a      	sxth	r2, r3
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	b21b      	sxth	r3, r3
 800415c:	4313      	orrs	r3, r2
 800415e:	b21a      	sxth	r2, r3
 8004160:	4b2a      	ldr	r3, [pc, #168]	; (800420c <MPU6050_Read_Accel+0xf4>)
 8004162:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8004164:	7d3b      	ldrb	r3, [r7, #20]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	b21a      	sxth	r2, r3
 800416a:	7d7b      	ldrb	r3, [r7, #21]
 800416c:	b21b      	sxth	r3, r3
 800416e:	4313      	orrs	r3, r2
 8004170:	b21a      	sxth	r2, r3
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <MPU6050_Read_Accel+0xf8>)
 8004174:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 8004176:	7c7b      	ldrb	r3, [r7, #17]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	b29a      	uxth	r2, r3
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <MPU6050_Read_Accel+0xfc>)
 8004182:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <MPU6050_Read_Accel+0xf0>)
 8004186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc f9ea 	bl	8000564 <__aeabi_i2d>
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <MPU6050_Read_Accel+0x100>)
 8004196:	f7fc fb79 	bl	800088c <__aeabi_ddiv>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	f7fc fd41 	bl	8000c28 <__aeabi_d2f>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <MPU6050_Read_Accel+0xf4>)
 80041ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc f9d6 	bl	8000564 <__aeabi_i2d>
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <MPU6050_Read_Accel+0x100>)
 80041be:	f7fc fb65 	bl	800088c <__aeabi_ddiv>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7fc fd2d 	bl	8000c28 <__aeabi_d2f>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <MPU6050_Read_Accel+0xf8>)
 80041d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc f9c2 	bl	8000564 <__aeabi_i2d>
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <MPU6050_Read_Accel+0x100>)
 80041e6:	f7fc fb51 	bl	800088c <__aeabi_ddiv>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	f7fc fd19 	bl	8000c28 <__aeabi_d2f>
 80041f6:	4602      	mov	r2, r0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	601a      	str	r2, [r3, #0]

}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200001f0 	.word	0x200001f0
 8004208:	200027e4 	.word	0x200027e4
 800420c:	200027e6 	.word	0x200027e6
 8004210:	200027e8 	.word	0x200027e8
 8004214:	20000018 	.word	0x20000018
 8004218:	40d00000 	.word	0x40d00000
 800421c:	00000000 	.word	0x00000000

08004220 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af04      	add	r7, sp, #16
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800422c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	2306      	movs	r3, #6
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2301      	movs	r3, #1
 800423e:	2243      	movs	r2, #67	; 0x43
 8004240:	21d0      	movs	r1, #208	; 0xd0
 8004242:	4831      	ldr	r0, [pc, #196]	; (8004308 <MPU6050_Read_Gyro+0xe8>)
 8004244:	f002 fdae 	bl	8006da4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8004248:	7c3b      	ldrb	r3, [r7, #16]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	b21a      	sxth	r2, r3
 800424e:	7c7b      	ldrb	r3, [r7, #17]
 8004250:	b21b      	sxth	r3, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	b21a      	sxth	r2, r3
 8004256:	4b2d      	ldr	r3, [pc, #180]	; (800430c <MPU6050_Read_Gyro+0xec>)
 8004258:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800425a:	7cbb      	ldrb	r3, [r7, #18]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	b21a      	sxth	r2, r3
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	b21b      	sxth	r3, r3
 8004264:	4313      	orrs	r3, r2
 8004266:	b21a      	sxth	r2, r3
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <MPU6050_Read_Gyro+0xf0>)
 800426a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800426c:	7d3b      	ldrb	r3, [r7, #20]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	b21a      	sxth	r2, r3
 8004272:	7d7b      	ldrb	r3, [r7, #21]
 8004274:	b21b      	sxth	r3, r3
 8004276:	4313      	orrs	r3, r2
 8004278:	b21a      	sxth	r2, r3
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <MPU6050_Read_Gyro+0xf4>)
 800427c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <MPU6050_Read_Gyro+0xec>)
 8004280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc f96d 	bl	8000564 <__aeabi_i2d>
 800428a:	a31d      	add	r3, pc, #116	; (adr r3, 8004300 <MPU6050_Read_Gyro+0xe0>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc fafc 	bl	800088c <__aeabi_ddiv>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	f7fc fcc4 	bl	8000c28 <__aeabi_d2f>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <MPU6050_Read_Gyro+0xf0>)
 80042a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc f959 	bl	8000564 <__aeabi_i2d>
 80042b2:	a313      	add	r3, pc, #76	; (adr r3, 8004300 <MPU6050_Read_Gyro+0xe0>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc fae8 	bl	800088c <__aeabi_ddiv>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	f7fc fcb0 	bl	8000c28 <__aeabi_d2f>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <MPU6050_Read_Gyro+0xf4>)
 80042d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fc f945 	bl	8000564 <__aeabi_i2d>
 80042da:	a309      	add	r3, pc, #36	; (adr r3, 8004300 <MPU6050_Read_Gyro+0xe0>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fc fad4 	bl	800088c <__aeabi_ddiv>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	f7fc fc9c 	bl	8000c28 <__aeabi_d2f>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	00000000 	.word	0x00000000
 8004304:	40606000 	.word	0x40606000
 8004308:	200001f0 	.word	0x200001f0
 800430c:	200027ea 	.word	0x200027ea
 8004310:	200027ec 	.word	0x200027ec
 8004314:	200027ee 	.word	0x200027ee

08004318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_MspInit+0x58>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <HAL_MspInit+0x58>)
 8004328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800432c:	6453      	str	r3, [r2, #68]	; 0x44
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_MspInit+0x58>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_MspInit+0x58>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <HAL_MspInit+0x58>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_MspInit+0x58>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	2005      	movs	r0, #5
 800435c:	f001 fce5 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004360:	2005      	movs	r0, #5
 8004362:	f001 fcfe 	bl	8005d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <HAL_ADC_MspInit+0x110>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d171      	bne.n	800447a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_ADC_MspInit+0x114>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6453      	str	r3, [r2, #68]	; 0x44
 80043a6:	4b38      	ldr	r3, [pc, #224]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a33      	ldr	r2, [pc, #204]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	6313      	str	r3, [r2, #48]	; 0x30
 80043de:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_ADC_MspInit+0x114>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80043ea:	2313      	movs	r3, #19
 80043ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043ee:	2303      	movs	r3, #3
 80043f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	4619      	mov	r1, r3
 80043fc:	4823      	ldr	r0, [pc, #140]	; (800448c <HAL_ADC_MspInit+0x118>)
 80043fe:	f002 f8cd 	bl	800659c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004402:	2301      	movs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004406:	2303      	movs	r3, #3
 8004408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	4619      	mov	r1, r3
 8004414:	481e      	ldr	r0, [pc, #120]	; (8004490 <HAL_ADC_MspInit+0x11c>)
 8004416:	f002 f8c1 	bl	800659c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <HAL_ADC_MspInit+0x120>)
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <HAL_ADC_MspInit+0x124>)
 800441e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_ADC_MspInit+0x120>)
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_ADC_MspInit+0x120>)
 800443c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_ADC_MspInit+0x120>)
 800444c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004450:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004454:	2200      	movs	r2, #0
 8004456:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_ADC_MspInit+0x120>)
 800445a:	2200      	movs	r2, #0
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800445e:	480d      	ldr	r0, [pc, #52]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004460:	f001 fc9a 	bl	8005d98 <HAL_DMA_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800446a:	f7ff fde7 	bl	800403c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <HAL_ADC_MspInit+0x120>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40012000 	.word	0x40012000
 8004488:	40023800 	.word	0x40023800
 800448c:	40020000 	.word	0x40020000
 8004490:	40020400 	.word	0x40020400
 8004494:	20000190 	.word	0x20000190
 8004498:	40026410 	.word	0x40026410

0800449c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08e      	sub	sp, #56	; 0x38
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5b      	ldr	r2, [pc, #364]	; (8004628 <HAL_I2C_MspInit+0x18c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d12c      	bne.n	8004518 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	4b5a      	ldr	r3, [pc, #360]	; (800462c <HAL_I2C_MspInit+0x190>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	4a59      	ldr	r2, [pc, #356]	; (800462c <HAL_I2C_MspInit+0x190>)
 80044c8:	f043 0302 	orr.w	r3, r3, #2
 80044cc:	6313      	str	r3, [r2, #48]	; 0x30
 80044ce:	4b57      	ldr	r3, [pc, #348]	; (800462c <HAL_I2C_MspInit+0x190>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044da:	23c0      	movs	r3, #192	; 0xc0
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044de:	2312      	movs	r3, #18
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e6:	2303      	movs	r3, #3
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044ea:	2304      	movs	r3, #4
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	4619      	mov	r1, r3
 80044f4:	484e      	ldr	r0, [pc, #312]	; (8004630 <HAL_I2C_MspInit+0x194>)
 80044f6:	f002 f851 	bl	800659c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a4a      	ldr	r2, [pc, #296]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b48      	ldr	r3, [pc, #288]	; (800462c <HAL_I2C_MspInit+0x190>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004516:	e083      	b.n	8004620 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a45      	ldr	r2, [pc, #276]	; (8004634 <HAL_I2C_MspInit+0x198>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d12d      	bne.n	800457e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a40      	ldr	r2, [pc, #256]	; (800462c <HAL_I2C_MspInit+0x190>)
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b3e      	ldr	r3, [pc, #248]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800453e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004544:	2312      	movs	r3, #18
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004550:	2304      	movs	r3, #4
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004558:	4619      	mov	r1, r3
 800455a:	4835      	ldr	r0, [pc, #212]	; (8004630 <HAL_I2C_MspInit+0x194>)
 800455c:	f002 f81e 	bl	800659c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	4b31      	ldr	r3, [pc, #196]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	4a30      	ldr	r2, [pc, #192]	; (800462c <HAL_I2C_MspInit+0x190>)
 800456a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800456e:	6413      	str	r3, [r2, #64]	; 0x40
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	697b      	ldr	r3, [r7, #20]
}
 800457c:	e050      	b.n	8004620 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2d      	ldr	r2, [pc, #180]	; (8004638 <HAL_I2C_MspInit+0x19c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d14b      	bne.n	8004620 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_I2C_MspInit+0x190>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6313      	str	r3, [r2, #48]	; 0x30
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_I2C_MspInit+0x190>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_I2C_MspInit+0x190>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <HAL_I2C_MspInit+0x190>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6313      	str	r3, [r2, #48]	; 0x30
 80045b4:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_I2C_MspInit+0x190>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045c6:	2312      	movs	r3, #18
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ce:	2303      	movs	r3, #3
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80045d2:	2304      	movs	r3, #4
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045da:	4619      	mov	r1, r3
 80045dc:	4817      	ldr	r0, [pc, #92]	; (800463c <HAL_I2C_MspInit+0x1a0>)
 80045de:	f001 ffdd 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80045e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e8:	2312      	movs	r3, #18
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f0:	2303      	movs	r3, #3
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80045f4:	2304      	movs	r3, #4
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045fc:	4619      	mov	r1, r3
 80045fe:	4810      	ldr	r0, [pc, #64]	; (8004640 <HAL_I2C_MspInit+0x1a4>)
 8004600:	f001 ffcc 	bl	800659c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_I2C_MspInit+0x190>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_I2C_MspInit+0x190>)
 800460e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004612:	6413      	str	r3, [r2, #64]	; 0x40
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_I2C_MspInit+0x190>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
}
 8004620:	bf00      	nop
 8004622:	3738      	adds	r7, #56	; 0x38
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40005400 	.word	0x40005400
 800462c:	40023800 	.word	0x40023800
 8004630:	40020400 	.word	0x40020400
 8004634:	40005800 	.word	0x40005800
 8004638:	40005c00 	.word	0x40005c00
 800463c:	40020800 	.word	0x40020800
 8004640:	40020000 	.word	0x40020000

08004644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	; 0x38
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <HAL_SPI_MspInit+0x180>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d14a      	bne.n	80046fc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	4b57      	ldr	r3, [pc, #348]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	4a56      	ldr	r2, [pc, #344]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004674:	6453      	str	r3, [r2, #68]	; 0x44
 8004676:	4b54      	ldr	r3, [pc, #336]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a4f      	ldr	r2, [pc, #316]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a48      	ldr	r2, [pc, #288]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046ba:	2320      	movs	r3, #32
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c6:	2303      	movs	r3, #3
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046ca:	2305      	movs	r3, #5
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d2:	4619      	mov	r1, r3
 80046d4:	483d      	ldr	r0, [pc, #244]	; (80047cc <HAL_SPI_MspInit+0x188>)
 80046d6:	f001 ff61 	bl	800659c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046da:	2310      	movs	r3, #16
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e6:	2303      	movs	r3, #3
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046ea:	2305      	movs	r3, #5
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f2:	4619      	mov	r1, r3
 80046f4:	4836      	ldr	r0, [pc, #216]	; (80047d0 <HAL_SPI_MspInit+0x18c>)
 80046f6:	f001 ff51 	bl	800659c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046fa:	e05f      	b.n	80047bc <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <HAL_SPI_MspInit+0x190>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d15a      	bne.n	80047bc <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6313      	str	r3, [r2, #48]	; 0x30
 8004732:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	6313      	str	r3, [r2, #48]	; 0x30
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_SPI_MspInit+0x184>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800475a:	2302      	movs	r3, #2
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	2302      	movs	r3, #2
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	2303      	movs	r3, #3
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800476a:	2307      	movs	r3, #7
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004772:	4619      	mov	r1, r3
 8004774:	4818      	ldr	r0, [pc, #96]	; (80047d8 <HAL_SPI_MspInit+0x194>)
 8004776:	f001 ff11 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800477a:	2304      	movs	r3, #4
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004786:	2303      	movs	r3, #3
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800478a:	2305      	movs	r3, #5
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004792:	4619      	mov	r1, r3
 8004794:	4810      	ldr	r0, [pc, #64]	; (80047d8 <HAL_SPI_MspInit+0x194>)
 8004796:	f001 ff01 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800479a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a0:	2302      	movs	r3, #2
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a8:	2303      	movs	r3, #3
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80047ac:	2305      	movs	r3, #5
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b4:	4619      	mov	r1, r3
 80047b6:	4806      	ldr	r0, [pc, #24]	; (80047d0 <HAL_SPI_MspInit+0x18c>)
 80047b8:	f001 fef0 	bl	800659c <HAL_GPIO_Init>
}
 80047bc:	bf00      	nop
 80047be:	3738      	adds	r7, #56	; 0x38
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40013000 	.word	0x40013000
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40020000 	.word	0x40020000
 80047d0:	40020400 	.word	0x40020400
 80047d4:	40003800 	.word	0x40003800
 80047d8:	40020800 	.word	0x40020800

080047dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <HAL_TIM_Base_MspInit+0x3c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10d      	bne.n	800480a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_TIM_Base_MspInit+0x40>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <HAL_TIM_Base_MspInit+0x40>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b07      	ldr	r3, [pc, #28]	; (800481c <HAL_TIM_Base_MspInit+0x40>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40023800 	.word	0x40023800

08004820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08e      	sub	sp, #56	; 0x38
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a93      	ldr	r2, [pc, #588]	; (8004a8c <HAL_UART_MspInit+0x26c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d12d      	bne.n	800489e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
 8004846:	4b92      	ldr	r3, [pc, #584]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a91      	ldr	r2, [pc, #580]	; (8004a90 <HAL_UART_MspInit+0x270>)
 800484c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485a:	623b      	str	r3, [r7, #32]
 800485c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	4b8b      	ldr	r3, [pc, #556]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a8a      	ldr	r2, [pc, #552]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800487a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004888:	2303      	movs	r3, #3
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800488c:	2308      	movs	r3, #8
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004894:	4619      	mov	r1, r3
 8004896:	487f      	ldr	r0, [pc, #508]	; (8004a94 <HAL_UART_MspInit+0x274>)
 8004898:	f001 fe80 	bl	800659c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800489c:	e0f1      	b.n	8004a82 <HAL_UART_MspInit+0x262>
  else if(huart->Instance==UART5)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a7d      	ldr	r2, [pc, #500]	; (8004a98 <HAL_UART_MspInit+0x278>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	f040 80b2 	bne.w	8004a0e <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_UART5_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b75      	ldr	r3, [pc, #468]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	4b71      	ldr	r3, [pc, #452]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	4a70      	ldr	r2, [pc, #448]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6313      	str	r3, [r2, #48]	; 0x30
 80048d6:	4b6e      	ldr	r3, [pc, #440]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a69      	ldr	r2, [pc, #420]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048ec:	f043 0308 	orr.w	r3, r3, #8
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <HAL_UART_MspInit+0x270>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80048fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004904:	2302      	movs	r3, #2
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490c:	2303      	movs	r3, #3
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004910:	2308      	movs	r3, #8
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004918:	4619      	mov	r1, r3
 800491a:	485e      	ldr	r0, [pc, #376]	; (8004a94 <HAL_UART_MspInit+0x274>)
 800491c:	f001 fe3e 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004920:	2304      	movs	r3, #4
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492c:	2303      	movs	r3, #3
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004930:	2308      	movs	r3, #8
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004938:	4619      	mov	r1, r3
 800493a:	4858      	ldr	r0, [pc, #352]	; (8004a9c <HAL_UART_MspInit+0x27c>)
 800493c:	f001 fe2e 	bl	800659c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004940:	4b57      	ldr	r3, [pc, #348]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004942:	4a58      	ldr	r2, [pc, #352]	; (8004aa4 <HAL_UART_MspInit+0x284>)
 8004944:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004946:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004948:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800494c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800494e:	4b54      	ldr	r3, [pc, #336]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004954:	4b52      	ldr	r3, [pc, #328]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800495a:	4b51      	ldr	r3, [pc, #324]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 800495c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004960:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004962:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004964:	2200      	movs	r2, #0
 8004966:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004968:	4b4d      	ldr	r3, [pc, #308]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 800496a:	2200      	movs	r2, #0
 800496c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800496e:	4b4c      	ldr	r3, [pc, #304]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004974:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004976:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004978:	2200      	movs	r2, #0
 800497a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800497c:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 800497e:	2200      	movs	r2, #0
 8004980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004982:	4847      	ldr	r0, [pc, #284]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004984:	f001 fa08 	bl	8005d98 <HAL_DMA_Init>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_UART_MspInit+0x172>
      Error_Handler();
 800498e:	f7ff fb55 	bl	800403c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a42      	ldr	r2, [pc, #264]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
 8004998:	4a41      	ldr	r2, [pc, #260]	; (8004aa0 <HAL_UART_MspInit+0x280>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049a0:	4a42      	ldr	r2, [pc, #264]	; (8004aac <HAL_UART_MspInit+0x28c>)
 80049a2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80049a4:	4b40      	ldr	r3, [pc, #256]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049aa:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049ac:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049b2:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049b8:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049be:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049c0:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 80049cc:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d2:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049dc:	2200      	movs	r2, #0
 80049de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80049e0:	4831      	ldr	r0, [pc, #196]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049e2:	f001 f9d9 	bl	8005d98 <HAL_DMA_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 80049ec:	f7ff fb26 	bl	800403c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049f4:	635a      	str	r2, [r3, #52]	; 0x34
 80049f6:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <HAL_UART_MspInit+0x288>)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	2035      	movs	r0, #53	; 0x35
 8004a02:	f001 f992 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004a06:	2035      	movs	r0, #53	; 0x35
 8004a08:	f001 f9ab 	bl	8005d62 <HAL_NVIC_EnableIRQ>
}
 8004a0c:	e039      	b.n	8004a82 <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <HAL_UART_MspInit+0x290>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d134      	bne.n	8004a82 <HAL_UART_MspInit+0x262>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004a22:	f043 0310 	orr.w	r3, r3, #16
 8004a26:	6453      	str	r3, [r2, #68]	; 0x44
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	6313      	str	r3, [r2, #48]	; 0x30
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_UART_MspInit+0x270>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a56:	2302      	movs	r3, #2
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a62:	2307      	movs	r3, #7
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4811      	ldr	r0, [pc, #68]	; (8004ab4 <HAL_UART_MspInit+0x294>)
 8004a6e:	f001 fd95 	bl	800659c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	2025      	movs	r0, #37	; 0x25
 8004a78:	f001 f957 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a7c:	2025      	movs	r0, #37	; 0x25
 8004a7e:	f001 f970 	bl	8005d62 <HAL_NVIC_EnableIRQ>
}
 8004a82:	bf00      	nop
 8004a84:	3738      	adds	r7, #56	; 0x38
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40004c00 	.word	0x40004c00
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40020800 	.word	0x40020800
 8004a98:	40005000 	.word	0x40005000
 8004a9c:	40020c00 	.word	0x40020c00
 8004aa0:	2000046c 	.word	0x2000046c
 8004aa4:	40026010 	.word	0x40026010
 8004aa8:	200004cc 	.word	0x200004cc
 8004aac:	400260b8 	.word	0x400260b8
 8004ab0:	40011000 	.word	0x40011000
 8004ab4:	40020000 	.word	0x40020000

08004ab8 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <SDTimer_Handler+0x40>)
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d006      	beq.n	8004ad4 <SDTimer_Handler+0x1c>
    Timer1--;
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <SDTimer_Handler+0x40>)
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <SDTimer_Handler+0x40>)
 8004ad2:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <SDTimer_Handler+0x44>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <SDTimer_Handler+0x34>
    Timer2--;
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <SDTimer_Handler+0x44>)
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <SDTimer_Handler+0x44>)
 8004aea:	801a      	strh	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	200027f4 	.word	0x200027f4
 8004afc:	200027f6 	.word	0x200027f6

08004b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b04:	e7fe      	b.n	8004b04 <NMI_Handler+0x4>

08004b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b06:	b480      	push	{r7}
 8004b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b0a:	e7fe      	b.n	8004b0a <HardFault_Handler+0x4>

08004b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b10:	e7fe      	b.n	8004b10 <MemManage_Handler+0x4>

08004b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b16:	e7fe      	b.n	8004b16 <BusFault_Handler+0x4>

08004b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b1c:	e7fe      	b.n	8004b1c <UsageFault_Handler+0x4>

08004b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <SysTick_Handler+0x44>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	3301      	adds	r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <SysTick_Handler+0x44>)
 8004b58:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <SysTick_Handler+0x44>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	d904      	bls.n	8004b6e <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <SysTick_Handler+0x44>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8004b6a:	f7ff ffa5 	bl	8004ab8 <SDTimer_Handler>
		  }

if(timeout >0) timeout--;
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <SysTick_Handler+0x48>)
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <SysTick_Handler+0x3a>
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <SysTick_Handler+0x48>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <SysTick_Handler+0x48>)
 8004b80:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b82:	f000 fb91 	bl	80052a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200027f2 	.word	0x200027f2
 8004b90:	20002840 	.word	0x20002840

08004b94 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004ba8:	4802      	ldr	r0, [pc, #8]	; (8004bb4 <DMA1_Stream0_IRQHandler+0x10>)
 8004baa:	f001 fa8d 	bl	80060c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	2000046c 	.word	0x2000046c

08004bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8004bbc:	4803      	ldr	r0, [pc, #12]	; (8004bcc <USART1_IRQHandler+0x14>)
 8004bbe:	f000 fa99 	bl	80050f4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bc2:	4802      	ldr	r0, [pc, #8]	; (8004bcc <USART1_IRQHandler+0x14>)
 8004bc4:	f004 fe96 	bl	80098f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200027fc 	.word	0x200027fc

08004bd0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004bd4:	4802      	ldr	r0, [pc, #8]	; (8004be0 <DMA1_Stream7_IRQHandler+0x10>)
 8004bd6:	f001 fa77 	bl	80060c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200004cc 	.word	0x200004cc

08004be4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004be8:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <UART5_IRQHandler+0x10>)
 8004bea:	f004 fe83 	bl	80098f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000428 	.word	0x20000428

08004bf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bfc:	4802      	ldr	r0, [pc, #8]	; (8004c08 <DMA2_Stream0_IRQHandler+0x10>)
 8004bfe:	f001 fa63 	bl	80060c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000190 	.word	0x20000190

08004c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
	return 1;
 8004c10:	2301      	movs	r3, #1
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <_kill>:

int _kill(int pid, int sig)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c26:	f009 f967 	bl	800def8 <__errno>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2216      	movs	r2, #22
 8004c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <_exit>:

void _exit (int status)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c44:	f04f 31ff 	mov.w	r1, #4294967295
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ffe7 	bl	8004c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c4e:	e7fe      	b.n	8004c4e <_exit+0x12>

08004c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e00a      	b.n	8004c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c62:	f3af 8000 	nop.w
 8004c66:	4601      	mov	r1, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	60ba      	str	r2, [r7, #8]
 8004c6e:	b2ca      	uxtb	r2, r1
 8004c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3301      	adds	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	dbf0      	blt.n	8004c62 <_read+0x12>
	}

return len;
 8004c80:	687b      	ldr	r3, [r7, #4]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
	return -1;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_isatty>:

int _isatty(int file)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <_sbrk+0x5c>)
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <_sbrk+0x60>)
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <_sbrk+0x64>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <_sbrk+0x64>)
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <_sbrk+0x68>)
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <_sbrk+0x64>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d207      	bcs.n	8004d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d24:	f009 f8e8 	bl	800def8 <__errno>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	220c      	movs	r2, #12
 8004d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e009      	b.n	8004d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <_sbrk+0x64>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <_sbrk+0x64>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <_sbrk+0x64>)
 8004d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20020000 	.word	0x20020000
 8004d54:	00000800 	.word	0x00000800
 8004d58:	200027f8 	.word	0x200027f8
 8004d5c:	20002eb0 	.word	0x20002eb0

08004d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <SystemInit+0x20>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <SystemInit+0x20>)
 8004d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <Ringbuf_init+0x3c>)
 8004d8a:	4a0e      	ldr	r2, [pc, #56]	; (8004dc4 <Ringbuf_init+0x40>)
 8004d8c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <Ringbuf_init+0x44>)
 8004d90:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <Ringbuf_init+0x48>)
 8004d92:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <Ringbuf_init+0x4c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <Ringbuf_init+0x4c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <Ringbuf_init+0x4c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <Ringbuf_init+0x4c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0220 	orr.w	r2, r2, #32
 8004db2:	60da      	str	r2, [r3, #12]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20002c54 	.word	0x20002c54
 8004dc4:	20002844 	.word	0x20002844
 8004dc8:	20002c58 	.word	0x20002c58
 8004dcc:	20002a4c 	.word	0x20002a4c
 8004dd0:	200027fc 	.word	0x200027fc

08004dd4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	6039      	str	r1, [r7, #0]
 8004dde:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dec:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d009      	beq.n	8004e0e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	79f9      	ldrb	r1, [r7, #7]
 8004e04:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <Uart_read+0x54>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <Uart_read+0x54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d102      	bne.n	8004e3c <Uart_read+0x20>
  {
    return -1;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	e013      	b.n	8004e64 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <Uart_read+0x54>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <Uart_read+0x54>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e48:	5cd3      	ldrb	r3, [r2, r3]
 8004e4a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <Uart_read+0x54>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <Uart_read+0x54>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8004e62:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20002c54 	.word	0x20002c54

08004e74 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <IsDataAvailable+0x30>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <IsDataAvailable+0x30>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20002c54 	.word	0x20002c54

08004ea8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <Uart_peek+0x38>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <Uart_peek+0x38>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d102      	bne.n	8004ec6 <Uart_peek+0x1e>
  {
    return -1;
 8004ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec4:	e006      	b.n	8004ed4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <Uart_peek+0x38>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <Uart_peek+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004ed2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20002c54 	.word	0x20002c54

08004ee4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fb f98c 	bl	8000210 <strlen>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8004f00:	e01e      	b.n	8004f40 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8004f02:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <Copy_upto+0xf8>)
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	4b35      	ldr	r3, [pc, #212]	; (8004fdc <Copy_upto+0xf8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6838      	ldr	r0, [r7, #0]
 8004f12:	4403      	add	r3, r0
 8004f14:	5c8a      	ldrb	r2, [r1, r2]
 8004f16:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004f18:	4b30      	ldr	r3, [pc, #192]	; (8004fdc <Copy_upto+0xf8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <Copy_upto+0xf8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3301      	adds	r3, #1
 8004f32:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8004f34:	bf00      	nop
 8004f36:	f7ff ff9d 	bl	8004e74 <IsDataAvailable>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0fa      	beq.n	8004f36 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8004f40:	f7ff ffb2 	bl	8004ea8 <Uart_peek>
 8004f44:	4601      	mov	r1, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	d1d7      	bne.n	8004f02 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8004f52:	e027      	b.n	8004fa4 <Copy_upto+0xc0>
	{
		so_far++;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	3301      	adds	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8004f5a:	f7ff ff5f 	bl	8004e1c <Uart_read>
 8004f5e:	4601      	mov	r1, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	613a      	str	r2, [r7, #16]
 8004f66:	461a      	mov	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	b2ca      	uxtb	r2, r1
 8004f6e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d101      	bne.n	8004f7c <Copy_upto+0x98>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e02a      	b.n	8004fd2 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <Copy_upto+0xfc>)
 8004f7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f82:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8004f84:	bf00      	nop
 8004f86:	f7ff ff75 	bl	8004e74 <IsDataAvailable>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <Copy_upto+0xb4>
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <Copy_upto+0xfc>)
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f6      	bne.n	8004f86 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8004f98:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <Copy_upto+0xfc>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <Copy_upto+0xc0>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e016      	b.n	8004fd2 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8004fa4:	f7ff ff80 	bl	8004ea8 <Uart_peek>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4413      	add	r3, r2
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	4299      	cmp	r1, r3
 8004fb4:	d0ce      	beq.n	8004f54 <Copy_upto+0x70>
	}

	if (so_far != len)
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d002      	beq.n	8004fc4 <Copy_upto+0xe0>
	{
		so_far = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
		goto again;
 8004fc2:	e79d      	b.n	8004f00 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d101      	bne.n	8004fd0 <Copy_upto+0xec>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <Copy_upto+0xee>
	else return 0;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20002c54 	.word	0x20002c54
 8004fe0:	20002840 	.word	0x20002840

08004fe4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fb f90d 	bl	8000210 <strlen>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8004ffa:	4b3c      	ldr	r3, [pc, #240]	; (80050ec <Wait_for+0x108>)
 8004ffc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005000:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8005002:	bf00      	nop
 8005004:	f7ff ff36 	bl	8004e74 <IsDataAvailable>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <Wait_for+0x32>
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <Wait_for+0x108>)
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f6      	bne.n	8005004 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8005016:	4b35      	ldr	r3, [pc, #212]	; (80050ec <Wait_for+0x108>)
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d119      	bne.n	8005052 <Wait_for+0x6e>
 800501e:	2300      	movs	r3, #0
 8005020:	e060      	b.n	80050e4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8005022:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <Wait_for+0x10c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800502a:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <Wait_for+0x10c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005032:	429a      	cmp	r2, r3
 8005034:	d00b      	beq.n	800504e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <Wait_for+0x10c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <Wait_for+0x10c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005048:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800504c:	e001      	b.n	8005052 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800504e:	2300      	movs	r3, #0
 8005050:	e048      	b.n	80050e4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8005052:	f7ff ff29 	bl	8004ea8 <Uart_peek>
 8005056:	4601      	mov	r1, r0
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4299      	cmp	r1, r3
 8005062:	d1de      	bne.n	8005022 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8005064:	e027      	b.n	80050b6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <Wait_for+0x10c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <Wait_for+0x10c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800507e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d101      	bne.n	800508e <Wait_for+0xaa>
 800508a:	2301      	movs	r3, #1
 800508c:	e02a      	b.n	80050e4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <Wait_for+0x108>)
 8005090:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005094:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8005096:	bf00      	nop
 8005098:	f7ff feec 	bl	8004e74 <IsDataAvailable>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <Wait_for+0xc6>
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <Wait_for+0x108>)
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f6      	bne.n	8005098 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <Wait_for+0x108>)
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <Wait_for+0xd2>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e016      	b.n	80050e4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80050b6:	f7ff fef7 	bl	8004ea8 <Uart_peek>
 80050ba:	4601      	mov	r1, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	4299      	cmp	r1, r3
 80050c6:	d0ce      	beq.n	8005066 <Wait_for+0x82>
	}

	if (so_far != len)
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d002      	beq.n	80050d6 <Wait_for+0xf2>
	{
		so_far = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
		goto again;
 80050d4:	e791      	b.n	8004ffa <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d101      	bne.n	80050e2 <Wait_for+0xfe>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <Wait_for+0x100>
	else return 0;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20002840 	.word	0x20002840
 80050f0:	20002c54 	.word	0x20002c54

080050f4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d013      	beq.n	800513e <Uart_isr+0x4a>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00e      	beq.n	800513e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800512e:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <Uart_isr+0xb4>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fe4c 	bl	8004dd4 <store_char>
        return;
 800513c:	e031      	b.n	80051a2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d02c      	beq.n	80051a2 <Uart_isr+0xae>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d027      	beq.n	80051a2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <Uart_isr+0xb8>)
 8005154:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005158:	4b14      	ldr	r3, [pc, #80]	; (80051ac <Uart_isr+0xb8>)
 800515a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800515e:	429a      	cmp	r2, r3
 8005160:	d108      	bne.n	8005174 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005170:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8005172:	e015      	b.n	80051a0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <Uart_isr+0xb8>)
 8005176:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800517a:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <Uart_isr+0xb8>)
 800517c:	5cd3      	ldrb	r3, [r2, r3]
 800517e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <Uart_isr+0xb8>)
 8005182:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	4a07      	ldr	r2, [pc, #28]	; (80051ac <Uart_isr+0xb8>)
 800518e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	7bba      	ldrb	r2, [r7, #14]
 800519e:	605a      	str	r2, [r3, #4]
    	return;
 80051a0:	bf00      	nop
    }
}
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20002c54 	.word	0x20002c54
 80051ac:	20002a4c 	.word	0x20002a4c

080051b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051b4:	480d      	ldr	r0, [pc, #52]	; (80051ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051b6:	490e      	ldr	r1, [pc, #56]	; (80051f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051b8:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051bc:	e002      	b.n	80051c4 <LoopCopyDataInit>

080051be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051c2:	3304      	adds	r3, #4

080051c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051c8:	d3f9      	bcc.n	80051be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051ca:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80051cc:	4c0b      	ldr	r4, [pc, #44]	; (80051fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80051ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051d0:	e001      	b.n	80051d6 <LoopFillZerobss>

080051d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051d4:	3204      	adds	r2, #4

080051d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051d8:	d3fb      	bcc.n	80051d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051da:	f7ff fdc1 	bl	8004d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051de:	f008 fe91 	bl	800df04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051e2:	f7fe f8b5 	bl	8003350 <main>
  bx  lr    
 80051e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80051e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051f0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80051f4:	08011ea8 	.word	0x08011ea8
  ldr r2, =_sbss
 80051f8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80051fc:	20002eac 	.word	0x20002eac

08005200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005200:	e7fe      	b.n	8005200 <ADC_IRQHandler>
	...

08005204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <HAL_Init+0x40>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <HAL_Init+0x40>)
 800520e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_Init+0x40>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <HAL_Init+0x40>)
 800521a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800521e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_Init+0x40>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a07      	ldr	r2, [pc, #28]	; (8005244 <HAL_Init+0x40>)
 8005226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800522c:	2003      	movs	r0, #3
 800522e:	f000 fd71 	bl	8005d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005232:	200f      	movs	r0, #15
 8005234:	f000 f808 	bl	8005248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005238:	f7ff f86e 	bl	8004318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40023c00 	.word	0x40023c00

08005248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <HAL_InitTick+0x54>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HAL_InitTick+0x58>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800525e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fd89 	bl	8005d7e <HAL_SYSTICK_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e00e      	b.n	8005294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b0f      	cmp	r3, #15
 800527a:	d80a      	bhi.n	8005292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800527c:	2200      	movs	r2, #0
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	f000 fd51 	bl	8005d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005288:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <HAL_InitTick+0x5c>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e000      	b.n	8005294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	2000001c 	.word	0x2000001c
 80052a0:	20000024 	.word	0x20000024
 80052a4:	20000020 	.word	0x20000020

080052a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_IncTick+0x20>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_IncTick+0x24>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	4a04      	ldr	r2, [pc, #16]	; (80052cc <HAL_IncTick+0x24>)
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000024 	.word	0x20000024
 80052cc:	20002c5c 	.word	0x20002c5c

080052d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return uwTick;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_GetTick+0x14>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20002c5c 	.word	0x20002c5c

080052e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f0:	f7ff ffee 	bl	80052d0 <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d005      	beq.n	800530e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <HAL_Delay+0x44>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800530e:	bf00      	nop
 8005310:	f7ff ffde 	bl	80052d0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	429a      	cmp	r2, r3
 800531e:	d8f7      	bhi.n	8005310 <HAL_Delay+0x28>
  {
  }
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000024 	.word	0x20000024

08005330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e033      	b.n	80053ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff f810 	bl	8004374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	2b00      	cmp	r3, #0
 800536c:	d118      	bne.n	80053a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005376:	f023 0302 	bic.w	r3, r3, #2
 800537a:	f043 0202 	orr.w	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa78 	bl	8005878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	f043 0201 	orr.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
 800539e:	e001      	b.n	80053a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_Start_DMA+0x1e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0e9      	b.n	80055aa <HAL_ADC_Start_DMA+0x1f2>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d018      	beq.n	800541e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053fc:	4b6d      	ldr	r3, [pc, #436]	; (80055b4 <HAL_ADC_Start_DMA+0x1fc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6d      	ldr	r2, [pc, #436]	; (80055b8 <HAL_ADC_Start_DMA+0x200>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0c9a      	lsrs	r2, r3, #18
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005410:	e002      	b.n	8005418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3b01      	subs	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f9      	bne.n	8005412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542c:	d107      	bne.n	800543e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800543c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 80a1 	bne.w	8005590 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548c:	d106      	bne.n	800549c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	f023 0206 	bic.w	r2, r3, #6
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
 800549a:	e002      	b.n	80054a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054aa:	4b44      	ldr	r3, [pc, #272]	; (80055bc <HAL_ADC_Start_DMA+0x204>)
 80054ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	4a43      	ldr	r2, [pc, #268]	; (80055c0 <HAL_ADC_Start_DMA+0x208>)
 80054b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	4a42      	ldr	r2, [pc, #264]	; (80055c4 <HAL_ADC_Start_DMA+0x20c>)
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	4a41      	ldr	r2, [pc, #260]	; (80055c8 <HAL_ADC_Start_DMA+0x210>)
 80054c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80054ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80054de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	334c      	adds	r3, #76	; 0x4c
 80054fa:	4619      	mov	r1, r3
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f000 fcf8 	bl	8005ef4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d12a      	bne.n	8005566 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <HAL_ADC_Start_DMA+0x214>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d015      	beq.n	8005546 <HAL_ADC_Start_DMA+0x18e>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <HAL_ADC_Start_DMA+0x218>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d105      	bne.n	8005530 <HAL_ADC_Start_DMA+0x178>
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_ADC_Start_DMA+0x204>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <HAL_ADC_Start_DMA+0x21c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d136      	bne.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_ADC_Start_DMA+0x204>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d130      	bne.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d129      	bne.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	e020      	b.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <HAL_ADC_Start_DMA+0x214>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d11b      	bne.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d114      	bne.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	e00b      	b.n	80055a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0210 	orr.w	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	f043 0201 	orr.w	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	2000001c 	.word	0x2000001c
 80055b8:	431bde83 	.word	0x431bde83
 80055bc:	40012300 	.word	0x40012300
 80055c0:	08005a71 	.word	0x08005a71
 80055c4:	08005b2b 	.word	0x08005b2b
 80055c8:	08005b47 	.word	0x08005b47
 80055cc:	40012000 	.word	0x40012000
 80055d0:	40012100 	.word	0x40012100
 80055d4:	40012200 	.word	0x40012200

080055d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x1c>
 800562c:	2302      	movs	r3, #2
 800562e:	e113      	b.n	8005858 <HAL_ADC_ConfigChannel+0x244>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b09      	cmp	r3, #9
 800563e:	d925      	bls.n	800568c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68d9      	ldr	r1, [r3, #12]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	3b1e      	subs	r3, #30
 8005656:	2207      	movs	r2, #7
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43da      	mvns	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	400a      	ands	r2, r1
 8005664:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68d9      	ldr	r1, [r3, #12]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	4618      	mov	r0, r3
 8005678:	4603      	mov	r3, r0
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4403      	add	r3, r0
 800567e:	3b1e      	subs	r3, #30
 8005680:	409a      	lsls	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e022      	b.n	80056d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6919      	ldr	r1, [r3, #16]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	4613      	mov	r3, r2
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	4413      	add	r3, r2
 80056a0:	2207      	movs	r2, #7
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43da      	mvns	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	400a      	ands	r2, r1
 80056ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6919      	ldr	r1, [r3, #16]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	4618      	mov	r0, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4403      	add	r3, r0
 80056c8:	409a      	lsls	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d824      	bhi.n	8005724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	3b05      	subs	r3, #5
 80056ec:	221f      	movs	r2, #31
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43da      	mvns	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	400a      	ands	r2, r1
 80056fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	4618      	mov	r0, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	3b05      	subs	r3, #5
 8005716:	fa00 f203 	lsl.w	r2, r0, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	635a      	str	r2, [r3, #52]	; 0x34
 8005722:	e04c      	b.n	80057be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b0c      	cmp	r3, #12
 800572a:	d824      	bhi.n	8005776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	3b23      	subs	r3, #35	; 0x23
 800573e:	221f      	movs	r2, #31
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43da      	mvns	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	400a      	ands	r2, r1
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	4618      	mov	r0, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	3b23      	subs	r3, #35	; 0x23
 8005768:	fa00 f203 	lsl.w	r2, r0, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
 8005774:	e023      	b.n	80057be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	3b41      	subs	r3, #65	; 0x41
 8005788:	221f      	movs	r2, #31
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43da      	mvns	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	400a      	ands	r2, r1
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4618      	mov	r0, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	3b41      	subs	r3, #65	; 0x41
 80057b2:	fa00 f203 	lsl.w	r2, r0, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <HAL_ADC_ConfigChannel+0x250>)
 80057c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a28      	ldr	r2, [pc, #160]	; (8005868 <HAL_ADC_ConfigChannel+0x254>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10f      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x1d8>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b12      	cmp	r3, #18
 80057d2:	d10b      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <HAL_ADC_ConfigChannel+0x254>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d12b      	bne.n	800584e <HAL_ADC_ConfigChannel+0x23a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <HAL_ADC_ConfigChannel+0x258>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <HAL_ADC_ConfigChannel+0x1f4>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b11      	cmp	r3, #17
 8005806:	d122      	bne.n	800584e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a11      	ldr	r2, [pc, #68]	; (800586c <HAL_ADC_ConfigChannel+0x258>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d111      	bne.n	800584e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <HAL_ADC_ConfigChannel+0x25c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a11      	ldr	r2, [pc, #68]	; (8005874 <HAL_ADC_ConfigChannel+0x260>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	0c9a      	lsrs	r2, r3, #18
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005840:	e002      	b.n	8005848 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3b01      	subs	r3, #1
 8005846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f9      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012300 	.word	0x40012300
 8005868:	40012000 	.word	0x40012000
 800586c:	10000012 	.word	0x10000012
 8005870:	2000001c 	.word	0x2000001c
 8005874:	431bde83 	.word	0x431bde83

08005878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005880:	4b79      	ldr	r3, [pc, #484]	; (8005a68 <ADC_Init+0x1f0>)
 8005882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	431a      	orrs	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <ADC_Init+0x1f4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d022      	beq.n	8005956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800591e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6899      	ldr	r1, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	e00f      	b.n	8005976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0202 	bic.w	r2, r2, #2
 8005984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6899      	ldr	r1, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7e1b      	ldrb	r3, [r3, #24]
 8005990:	005a      	lsls	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	3b01      	subs	r3, #1
 80059d0:	035a      	lsls	r2, r3, #13
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e007      	b.n	80059ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	051a      	lsls	r2, r3, #20
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6899      	ldr	r1, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a2e:	025a      	lsls	r2, r3, #9
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	029a      	lsls	r2, r3, #10
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40012300 	.word	0x40012300
 8005a6c:	0f000001 	.word	0x0f000001

08005a70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d13c      	bne.n	8005b04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d12b      	bne.n	8005afc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d127      	bne.n	8005afc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d006      	beq.n	8005ac8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d119      	bne.n	8005afc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0220 	bic.w	r2, r2, #32
 8005ad6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f043 0201 	orr.w	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fd6b 	bl	80055d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b02:	e00e      	b.n	8005b22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff fd75 	bl	8005600 <HAL_ADC_ErrorCallback>
}
 8005b16:	e004      	b.n	8005b22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fd57 	bl	80055ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2240      	movs	r2, #64	; 0x40
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f043 0204 	orr.w	r2, r3, #4
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff fd4a 	bl	8005600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b90:	4013      	ands	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ba6:	4a04      	ldr	r2, [pc, #16]	; (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	60d3      	str	r3, [r2, #12]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 0307 	and.w	r3, r3, #7
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db0b      	blt.n	8005c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	f003 021f 	and.w	r2, r3, #31
 8005bf0:	4907      	ldr	r1, [pc, #28]	; (8005c10 <__NVIC_EnableIRQ+0x38>)
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e100 	.word	0xe000e100

08005c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db0a      	blt.n	8005c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	490c      	ldr	r1, [pc, #48]	; (8005c60 <__NVIC_SetPriority+0x4c>)
 8005c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c32:	0112      	lsls	r2, r2, #4
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	440b      	add	r3, r1
 8005c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c3c:	e00a      	b.n	8005c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4908      	ldr	r1, [pc, #32]	; (8005c64 <__NVIC_SetPriority+0x50>)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	0112      	lsls	r2, r2, #4
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	440b      	add	r3, r1
 8005c52:	761a      	strb	r2, [r3, #24]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000e100 	.word	0xe000e100
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	; 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f1c3 0307 	rsb	r3, r3, #7
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	bf28      	it	cs
 8005c86:	2304      	movcs	r3, #4
 8005c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	d902      	bls.n	8005c98 <NVIC_EncodePriority+0x30>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3b03      	subs	r3, #3
 8005c96:	e000      	b.n	8005c9a <NVIC_EncodePriority+0x32>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	401a      	ands	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	43d9      	mvns	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc0:	4313      	orrs	r3, r2
         );
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3724      	adds	r7, #36	; 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ce0:	d301      	bcc.n	8005ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00f      	b.n	8005d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ce6:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <SysTick_Config+0x40>)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cee:	210f      	movs	r1, #15
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	f7ff ff8e 	bl	8005c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <SysTick_Config+0x40>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <SysTick_Config+0x40>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010

08005d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff29 	bl	8005b74 <__NVIC_SetPriorityGrouping>
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	4603      	mov	r3, r0
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d3c:	f7ff ff3e 	bl	8005bbc <__NVIC_GetPriorityGrouping>
 8005d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f7ff ff8e 	bl	8005c68 <NVIC_EncodePriority>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d52:	4611      	mov	r1, r2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff ff5d 	bl	8005c14 <__NVIC_SetPriority>
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	4603      	mov	r3, r0
 8005d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff31 	bl	8005bd8 <__NVIC_EnableIRQ>
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ffa2 	bl	8005cd0 <SysTick_Config>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005da4:	f7ff fa94 	bl	80052d0 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e099      	b.n	8005ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dd4:	e00f      	b.n	8005df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dd6:	f7ff fa7b 	bl	80052d0 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b05      	cmp	r3, #5
 8005de2:	d908      	bls.n	8005df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2203      	movs	r2, #3
 8005dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e078      	b.n	8005ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e8      	bne.n	8005dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4b38      	ldr	r3, [pc, #224]	; (8005ef0 <HAL_DMA_Init+0x158>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d107      	bne.n	8005e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d117      	bne.n	8005eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb01 	bl	80064a4 <DMA_CheckFifoParam>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2240      	movs	r2, #64	; 0x40
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e016      	b.n	8005ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fab8 	bl	8006438 <DMA_CalcBaseAndBitshift>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	223f      	movs	r2, #63	; 0x3f
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	f010803f 	.word	0xf010803f

08005ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_DMA_Start_IT+0x26>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e040      	b.n	8005f9c <HAL_DMA_Start_IT+0xa8>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d12f      	bne.n	8005f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fa4a 	bl	80063dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	223f      	movs	r2, #63	; 0x3f
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0216 	orr.w	r2, r2, #22
 8005f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0208 	orr.w	r2, r2, #8
 8005f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e005      	b.n	8005f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f96:	2302      	movs	r3, #2
 8005f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005fb2:	f7ff f98d 	bl	80052d0 <HAL_GetTick>
 8005fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d008      	beq.n	8005fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e052      	b.n	800607c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0216 	bic.w	r2, r2, #22
 8005fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695a      	ldr	r2, [r3, #20]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <HAL_DMA_Abort+0x62>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0208 	bic.w	r2, r2, #8
 8006014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006026:	e013      	b.n	8006050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006028:	f7ff f952 	bl	80052d0 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b05      	cmp	r3, #5
 8006034:	d90c      	bls.n	8006050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2203      	movs	r2, #3
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e015      	b.n	800607c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e4      	bne.n	8006028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	223f      	movs	r2, #63	; 0x3f
 8006064:	409a      	lsls	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d004      	beq.n	80060a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2280      	movs	r2, #128	; 0x80
 800609c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e00c      	b.n	80060bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2205      	movs	r2, #5
 80060a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060d4:	4b8e      	ldr	r3, [pc, #568]	; (8006310 <HAL_DMA_IRQHandler+0x248>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a8e      	ldr	r2, [pc, #568]	; (8006314 <HAL_DMA_IRQHandler+0x24c>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	0a9b      	lsrs	r3, r3, #10
 80060e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	2208      	movs	r2, #8
 80060f4:	409a      	lsls	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01a      	beq.n	8006134 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d013      	beq.n	8006134 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	2208      	movs	r2, #8
 8006122:	409a      	lsls	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	f043 0201 	orr.w	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	2201      	movs	r2, #1
 800613a:	409a      	lsls	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d012      	beq.n	800616a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006156:	2201      	movs	r2, #1
 8006158:	409a      	lsls	r2, r3
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f043 0202 	orr.w	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616e:	2204      	movs	r2, #4
 8006170:	409a      	lsls	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d012      	beq.n	80061a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	2204      	movs	r2, #4
 800618e:	409a      	lsls	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	f043 0204 	orr.w	r2, r3, #4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a4:	2210      	movs	r2, #16
 80061a6:	409a      	lsls	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d043      	beq.n	8006238 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d03c      	beq.n	8006238 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	2210      	movs	r2, #16
 80061c4:	409a      	lsls	r2, r3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d018      	beq.n	800620a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d108      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d024      	beq.n	8006238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
 80061f6:	e01f      	b.n	8006238 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
 8006208:	e016      	b.n	8006238 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0208 	bic.w	r2, r2, #8
 8006226:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623c:	2220      	movs	r2, #32
 800623e:	409a      	lsls	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 808f 	beq.w	8006368 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8087 	beq.w	8006368 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625e:	2220      	movs	r2, #32
 8006260:	409a      	lsls	r2, r3
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b05      	cmp	r3, #5
 8006270:	d136      	bne.n	80062e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0216 	bic.w	r2, r2, #22
 8006280:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006290:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_DMA_IRQHandler+0x1da>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0208 	bic.w	r2, r2, #8
 80062b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b6:	223f      	movs	r2, #63	; 0x3f
 80062b8:	409a      	lsls	r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d07e      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
        }
        return;
 80062de:	e079      	b.n	80063d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01d      	beq.n	800632a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	2b00      	cmp	r3, #0
 8006302:	d031      	beq.n	8006368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
 800630c:	e02c      	b.n	8006368 <HAL_DMA_IRQHandler+0x2a0>
 800630e:	bf00      	nop
 8006310:	2000001c 	.word	0x2000001c
 8006314:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d023      	beq.n	8006368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	e01e      	b.n	8006368 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10f      	bne.n	8006358 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0210 	bic.w	r2, r2, #16
 8006346:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2b00      	cmp	r3, #0
 800636e:	d032      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d022      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2205      	movs	r2, #5
 8006380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3301      	adds	r3, #1
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	429a      	cmp	r2, r3
 800639e:	d307      	bcc.n	80063b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f2      	bne.n	8006394 <HAL_DMA_IRQHandler+0x2cc>
 80063ae:	e000      	b.n	80063b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80063b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	4798      	blx	r3
 80063d2:	e000      	b.n	80063d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80063d4:	bf00      	nop
    }
  }
}
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d108      	bne.n	800641c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800641a:	e007      	b.n	800642c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	3b10      	subs	r3, #16
 8006448:	4a14      	ldr	r2, [pc, #80]	; (800649c <DMA_CalcBaseAndBitshift+0x64>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006452:	4a13      	ldr	r2, [pc, #76]	; (80064a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d909      	bls.n	800647a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	659a      	str	r2, [r3, #88]	; 0x58
 8006478:	e007      	b.n	800648a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	aaaaaaab 	.word	0xaaaaaaab
 80064a0:	08011658 	.word	0x08011658

080064a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d11f      	bne.n	80064fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d856      	bhi.n	8006572 <DMA_CheckFifoParam+0xce>
 80064c4:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <DMA_CheckFifoParam+0x28>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064ef 	.word	0x080064ef
 80064d4:	080064dd 	.word	0x080064dd
 80064d8:	08006573 	.word	0x08006573
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d046      	beq.n	8006576 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ec:	e043      	b.n	8006576 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064f6:	d140      	bne.n	800657a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064fc:	e03d      	b.n	800657a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006506:	d121      	bne.n	800654c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d837      	bhi.n	800657e <DMA_CheckFifoParam+0xda>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <DMA_CheckFifoParam+0x70>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006525 	.word	0x08006525
 8006518:	0800652b 	.word	0x0800652b
 800651c:	08006525 	.word	0x08006525
 8006520:	0800653d 	.word	0x0800653d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
      break;
 8006528:	e030      	b.n	800658c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d025      	beq.n	8006582 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800653a:	e022      	b.n	8006582 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006544:	d11f      	bne.n	8006586 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800654a:	e01c      	b.n	8006586 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d903      	bls.n	800655a <DMA_CheckFifoParam+0xb6>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b03      	cmp	r3, #3
 8006556:	d003      	beq.n	8006560 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006558:	e018      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]
      break;
 800655e:	e015      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00e      	beq.n	800658a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
      break;
 8006570:	e00b      	b.n	800658a <DMA_CheckFifoParam+0xe6>
      break;
 8006572:	bf00      	nop
 8006574:	e00a      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      break;
 8006576:	bf00      	nop
 8006578:	e008      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      break;
 800657a:	bf00      	nop
 800657c:	e006      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      break;
 800657e:	bf00      	nop
 8006580:	e004      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      break;   
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <DMA_CheckFifoParam+0xe8>
      break;
 800658a:	bf00      	nop
    }
  } 
  
  return status; 
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop

0800659c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800659c:	b480      	push	{r7}
 800659e:	b089      	sub	sp, #36	; 0x24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	e165      	b.n	8006884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065b8:	2201      	movs	r2, #1
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4013      	ands	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	f040 8154 	bne.w	800687e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d005      	beq.n	80065ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d130      	bne.n	8006650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2203      	movs	r2, #3
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006624:	2201      	movs	r2, #1
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	43db      	mvns	r3, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4013      	ands	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 0201 	and.w	r2, r3, #1
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b03      	cmp	r3, #3
 800665a:	d017      	beq.n	800668c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	2203      	movs	r2, #3
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d123      	bne.n	80066e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	08da      	lsrs	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3208      	adds	r2, #8
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	08da      	lsrs	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3208      	adds	r2, #8
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2203      	movs	r2, #3
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0203 	and.w	r2, r3, #3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4313      	orrs	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80ae 	beq.w	800687e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4b5d      	ldr	r3, [pc, #372]	; (800689c <HAL_GPIO_Init+0x300>)
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	4a5c      	ldr	r2, [pc, #368]	; (800689c <HAL_GPIO_Init+0x300>)
 800672c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006730:	6453      	str	r3, [r2, #68]	; 0x44
 8006732:	4b5a      	ldr	r3, [pc, #360]	; (800689c <HAL_GPIO_Init+0x300>)
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800673e:	4a58      	ldr	r2, [pc, #352]	; (80068a0 <HAL_GPIO_Init+0x304>)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3302      	adds	r3, #2
 8006746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	220f      	movs	r2, #15
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43db      	mvns	r3, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4013      	ands	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a4f      	ldr	r2, [pc, #316]	; (80068a4 <HAL_GPIO_Init+0x308>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d025      	beq.n	80067b6 <HAL_GPIO_Init+0x21a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a4e      	ldr	r2, [pc, #312]	; (80068a8 <HAL_GPIO_Init+0x30c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01f      	beq.n	80067b2 <HAL_GPIO_Init+0x216>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a4d      	ldr	r2, [pc, #308]	; (80068ac <HAL_GPIO_Init+0x310>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d019      	beq.n	80067ae <HAL_GPIO_Init+0x212>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a4c      	ldr	r2, [pc, #304]	; (80068b0 <HAL_GPIO_Init+0x314>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_GPIO_Init+0x20e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a4b      	ldr	r2, [pc, #300]	; (80068b4 <HAL_GPIO_Init+0x318>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00d      	beq.n	80067a6 <HAL_GPIO_Init+0x20a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a4a      	ldr	r2, [pc, #296]	; (80068b8 <HAL_GPIO_Init+0x31c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <HAL_GPIO_Init+0x206>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a49      	ldr	r2, [pc, #292]	; (80068bc <HAL_GPIO_Init+0x320>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d101      	bne.n	800679e <HAL_GPIO_Init+0x202>
 800679a:	2306      	movs	r3, #6
 800679c:	e00c      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 800679e:	2307      	movs	r3, #7
 80067a0:	e00a      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 80067a2:	2305      	movs	r3, #5
 80067a4:	e008      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 80067a6:	2304      	movs	r3, #4
 80067a8:	e006      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 80067aa:	2303      	movs	r3, #3
 80067ac:	e004      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e002      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <HAL_GPIO_Init+0x21c>
 80067b6:	2300      	movs	r3, #0
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	f002 0203 	and.w	r2, r2, #3
 80067be:	0092      	lsls	r2, r2, #2
 80067c0:	4093      	lsls	r3, r2
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067c8:	4935      	ldr	r1, [pc, #212]	; (80068a0 <HAL_GPIO_Init+0x304>)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	3302      	adds	r3, #2
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067d6:	4b3a      	ldr	r3, [pc, #232]	; (80068c0 <HAL_GPIO_Init+0x324>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	43db      	mvns	r3, r3
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	4013      	ands	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067fa:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <HAL_GPIO_Init+0x324>)
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006800:	4b2f      	ldr	r3, [pc, #188]	; (80068c0 <HAL_GPIO_Init+0x324>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	43db      	mvns	r3, r3
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4013      	ands	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006824:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <HAL_GPIO_Init+0x324>)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <HAL_GPIO_Init+0x324>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	43db      	mvns	r3, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	4013      	ands	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800684e:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_GPIO_Init+0x324>)
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006854:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <HAL_GPIO_Init+0x324>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	43db      	mvns	r3, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4013      	ands	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006878:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <HAL_GPIO_Init+0x324>)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3301      	adds	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	f67f ae96 	bls.w	80065b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	3724      	adds	r7, #36	; 0x24
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40023800 	.word	0x40023800
 80068a0:	40013800 	.word	0x40013800
 80068a4:	40020000 	.word	0x40020000
 80068a8:	40020400 	.word	0x40020400
 80068ac:	40020800 	.word	0x40020800
 80068b0:	40020c00 	.word	0x40020c00
 80068b4:	40021000 	.word	0x40021000
 80068b8:	40021400 	.word	0x40021400
 80068bc:	40021800 	.word	0x40021800
 80068c0:	40013c00 	.word	0x40013c00

080068c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e001      	b.n	80068e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
 8006900:	4613      	mov	r3, r2
 8006902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006904:	787b      	ldrb	r3, [r7, #1]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006910:	e003      	b.n	800691a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006912:	887b      	ldrh	r3, [r7, #2]
 8006914:	041a      	lsls	r2, r3, #16
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	619a      	str	r2, [r3, #24]
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e12b      	b.n	8006b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fd fda4 	bl	800449c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2224      	movs	r2, #36	; 0x24
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800697a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800698a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800698c:	f001 f8ce 	bl	8007b2c <HAL_RCC_GetPCLK1Freq>
 8006990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4a81      	ldr	r2, [pc, #516]	; (8006b9c <HAL_I2C_Init+0x274>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d807      	bhi.n	80069ac <HAL_I2C_Init+0x84>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a80      	ldr	r2, [pc, #512]	; (8006ba0 <HAL_I2C_Init+0x278>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	bf94      	ite	ls
 80069a4:	2301      	movls	r3, #1
 80069a6:	2300      	movhi	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	e006      	b.n	80069ba <HAL_I2C_Init+0x92>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a7d      	ldr	r2, [pc, #500]	; (8006ba4 <HAL_I2C_Init+0x27c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	bf94      	ite	ls
 80069b4:	2301      	movls	r3, #1
 80069b6:	2300      	movhi	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0e7      	b.n	8006b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a78      	ldr	r2, [pc, #480]	; (8006ba8 <HAL_I2C_Init+0x280>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	0c9b      	lsrs	r3, r3, #18
 80069cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a6a      	ldr	r2, [pc, #424]	; (8006b9c <HAL_I2C_Init+0x274>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d802      	bhi.n	80069fc <HAL_I2C_Init+0xd4>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	3301      	adds	r3, #1
 80069fa:	e009      	b.n	8006a10 <HAL_I2C_Init+0xe8>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	4a69      	ldr	r2, [pc, #420]	; (8006bac <HAL_I2C_Init+0x284>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	099b      	lsrs	r3, r3, #6
 8006a0e:	3301      	adds	r3, #1
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	495c      	ldr	r1, [pc, #368]	; (8006b9c <HAL_I2C_Init+0x274>)
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	d819      	bhi.n	8006a64 <HAL_I2C_Init+0x13c>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1e59      	subs	r1, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a3e:	1c59      	adds	r1, r3, #1
 8006a40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a44:	400b      	ands	r3, r1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <HAL_I2C_Init+0x138>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1e59      	subs	r1, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a58:	3301      	adds	r3, #1
 8006a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5e:	e051      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006a60:	2304      	movs	r3, #4
 8006a62:	e04f      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d111      	bne.n	8006a90 <HAL_I2C_Init+0x168>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	1e58      	subs	r0, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6859      	ldr	r1, [r3, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	440b      	add	r3, r1
 8006a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a7e:	3301      	adds	r3, #1
 8006a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e012      	b.n	8006ab6 <HAL_I2C_Init+0x18e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1e58      	subs	r0, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	0099      	lsls	r1, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_Init+0x196>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_I2C_Init+0x1bc>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1e58      	subs	r0, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6859      	ldr	r1, [r3, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	440b      	add	r3, r1
 8006ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	e00f      	b.n	8006b04 <HAL_I2C_Init+0x1dc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1e58      	subs	r0, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	0099      	lsls	r1, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006afa:	3301      	adds	r3, #1
 8006afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	6809      	ldr	r1, [r1, #0]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69da      	ldr	r2, [r3, #28]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6911      	ldr	r1, [r2, #16]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68d2      	ldr	r2, [r2, #12]
 8006b3e:	4311      	orrs	r1, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	000186a0 	.word	0x000186a0
 8006ba0:	001e847f 	.word	0x001e847f
 8006ba4:	003d08ff 	.word	0x003d08ff
 8006ba8:	431bde83 	.word	0x431bde83
 8006bac:	10624dd3 	.word	0x10624dd3

08006bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	817b      	strh	r3, [r7, #10]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	813b      	strh	r3, [r7, #8]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bca:	f7fe fb81 	bl	80052d0 <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	f040 80d9 	bne.w	8006d90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	2319      	movs	r3, #25
 8006be4:	2201      	movs	r2, #1
 8006be6:	496d      	ldr	r1, [pc, #436]	; (8006d9c <HAL_I2C_Mem_Write+0x1ec>)
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fc7f 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e0cc      	b.n	8006d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_I2C_Mem_Write+0x56>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e0c5      	b.n	8006d92 <HAL_I2C_Mem_Write+0x1e2>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d007      	beq.n	8006c2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2221      	movs	r2, #33	; 0x21
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2240      	movs	r2, #64	; 0x40
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4a4d      	ldr	r2, [pc, #308]	; (8006da0 <HAL_I2C_Mem_Write+0x1f0>)
 8006c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c6e:	88f8      	ldrh	r0, [r7, #6]
 8006c70:	893a      	ldrh	r2, [r7, #8]
 8006c72:	8979      	ldrh	r1, [r7, #10]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 fab6 	bl	80071f0 <I2C_RequestMemoryWrite>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d052      	beq.n	8006d30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e081      	b.n	8006d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fd00 	bl	8007698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00d      	beq.n	8006cba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d107      	bne.n	8006cb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e06b      	b.n	8006d92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d11b      	bne.n	8006d30 <HAL_I2C_Mem_Write+0x180>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d017      	beq.n	8006d30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1aa      	bne.n	8006c8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fcec 	bl	800771a <I2C_WaitOnBTFFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d107      	bne.n	8006d60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e016      	b.n	8006d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e000      	b.n	8006d92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	00100002 	.word	0x00100002
 8006da0:	ffff0000 	.word	0xffff0000

08006da4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	817b      	strh	r3, [r7, #10]
 8006db6:	460b      	mov	r3, r1
 8006db8:	813b      	strh	r3, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dbe:	f7fe fa87 	bl	80052d0 <HAL_GetTick>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	f040 8208 	bne.w	80071e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2319      	movs	r3, #25
 8006dd8:	2201      	movs	r2, #1
 8006dda:	497b      	ldr	r1, [pc, #492]	; (8006fc8 <HAL_I2C_Mem_Read+0x224>)
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fb85 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006de8:	2302      	movs	r3, #2
 8006dea:	e1fb      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_I2C_Mem_Read+0x56>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e1f4      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d007      	beq.n	8006e20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2222      	movs	r2, #34	; 0x22
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2240      	movs	r2, #64	; 0x40
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a5b      	ldr	r2, [pc, #364]	; (8006fcc <HAL_I2C_Mem_Read+0x228>)
 8006e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e62:	88f8      	ldrh	r0, [r7, #6]
 8006e64:	893a      	ldrh	r2, [r7, #8]
 8006e66:	8979      	ldrh	r1, [r7, #10]
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	4603      	mov	r3, r0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fa52 	bl	800731c <I2C_RequestMemoryRead>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e1b0      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d113      	bne.n	8006eb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e184      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d11b      	bne.n	8006ef2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	61fb      	str	r3, [r7, #28]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e164      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d11b      	bne.n	8006f32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	e144      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f48:	e138      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	f200 80f1 	bhi.w	8007136 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d123      	bne.n	8006fa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fc1b 	bl	800779c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e139      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fa2:	e10b      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d14e      	bne.n	800704a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4906      	ldr	r1, [pc, #24]	; (8006fd0 <HAL_I2C_Mem_Read+0x22c>)
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fa98 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d008      	beq.n	8006fd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e10e      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
 8006fc6:	bf00      	nop
 8006fc8:	00100002 	.word	0x00100002
 8006fcc:	ffff0000 	.word	0xffff0000
 8006fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007048:	e0b8      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	2200      	movs	r2, #0
 8007052:	4966      	ldr	r1, [pc, #408]	; (80071ec <HAL_I2C_Mem_Read+0x448>)
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fa49 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0bf      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2200      	movs	r2, #0
 80070ae:	494f      	ldr	r1, [pc, #316]	; (80071ec <HAL_I2C_Mem_Read+0x448>)
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fa1b 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e091      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007134:	e042      	b.n	80071bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 fb2e 	bl	800779c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e04c      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b04      	cmp	r3, #4
 8007188:	d118      	bne.n	80071bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f47f aec2 	bne.w	8006f4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3728      	adds	r7, #40	; 0x28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	00010004 	.word	0x00010004

080071f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	461a      	mov	r2, r3
 80071fe:	4603      	mov	r3, r0
 8007200:	817b      	strh	r3, [r7, #10]
 8007202:	460b      	mov	r3, r1
 8007204:	813b      	strh	r3, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	2200      	movs	r2, #0
 8007222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f960 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007240:	d103      	bne.n	800724a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e05f      	b.n	800730e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800724e:	897b      	ldrh	r3, [r7, #10]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800725c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	492d      	ldr	r1, [pc, #180]	; (8007318 <I2C_RequestMemoryWrite+0x128>)
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f998 	bl	800759a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e04c      	b.n	800730e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728c:	6a39      	ldr	r1, [r7, #32]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fa02 	bl	8007698 <I2C_WaitOnTXEFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d107      	bne.n	80072b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e02b      	b.n	800730e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d105      	bne.n	80072c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072bc:	893b      	ldrh	r3, [r7, #8]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	611a      	str	r2, [r3, #16]
 80072c6:	e021      	b.n	800730c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072c8:	893b      	ldrh	r3, [r7, #8]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	6a39      	ldr	r1, [r7, #32]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f9dc 	bl	8007698 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d107      	bne.n	80072fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e005      	b.n	800730e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007302:	893b      	ldrh	r3, [r7, #8]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	00010002 	.word	0x00010002

0800731c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4603      	mov	r3, r0
 800732c:	817b      	strh	r3, [r7, #10]
 800732e:	460b      	mov	r3, r1
 8007330:	813b      	strh	r3, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007344:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2200      	movs	r2, #0
 800735e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f8c2 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00d      	beq.n	800738a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737c:	d103      	bne.n	8007386 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e0aa      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800738a:	897b      	ldrh	r3, [r7, #10]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	6a3a      	ldr	r2, [r7, #32]
 800739e:	4952      	ldr	r1, [pc, #328]	; (80074e8 <I2C_RequestMemoryRead+0x1cc>)
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f8fa 	bl	800759a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e097      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	6a39      	ldr	r1, [r7, #32]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f964 	bl	8007698 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d107      	bne.n	80073ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e076      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d105      	bne.n	8007404 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	611a      	str	r2, [r3, #16]
 8007402:	e021      	b.n	8007448 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
 800740a:	b2da      	uxtb	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007414:	6a39      	ldr	r1, [r7, #32]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f93e 	bl	8007698 <I2C_WaitOnTXEFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00d      	beq.n	800743e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	2b04      	cmp	r3, #4
 8007428:	d107      	bne.n	800743a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e050      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800743e:	893b      	ldrh	r3, [r7, #8]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	6a39      	ldr	r1, [r7, #32]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f923 	bl	8007698 <I2C_WaitOnTXEFlagUntilTimeout>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00d      	beq.n	8007474 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	2b04      	cmp	r3, #4
 800745e:	d107      	bne.n	8007470 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800746e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e035      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007482:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2200      	movs	r2, #0
 800748c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f82b 	bl	80074ec <I2C_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00d      	beq.n	80074b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074aa:	d103      	bne.n	80074b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e013      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074b8:	897b      	ldrh	r3, [r7, #10]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	6a3a      	ldr	r2, [r7, #32]
 80074cc:	4906      	ldr	r1, [pc, #24]	; (80074e8 <I2C_RequestMemoryRead+0x1cc>)
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f863 	bl	800759a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	00010002 	.word	0x00010002

080074ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074fc:	e025      	b.n	800754a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d021      	beq.n	800754a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7fd fee3 	bl	80052d0 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d116      	bne.n	800754a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f043 0220 	orr.w	r2, r3, #32
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e023      	b.n	8007592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	d10d      	bne.n	8007570 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	43da      	mvns	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4013      	ands	r3, r2
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf0c      	ite	eq
 8007566:	2301      	moveq	r3, #1
 8007568:	2300      	movne	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	e00c      	b.n	800758a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	43da      	mvns	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4013      	ands	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	bf0c      	ite	eq
 8007582:	2301      	moveq	r3, #1
 8007584:	2300      	movne	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	429a      	cmp	r2, r3
 800758e:	d0b6      	beq.n	80074fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075a8:	e051      	b.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b8:	d123      	bne.n	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f043 0204 	orr.w	r2, r3, #4
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e046      	b.n	8007690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d021      	beq.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760a:	f7fd fe61 	bl	80052d0 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d116      	bne.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f043 0220 	orr.w	r2, r3, #32
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e020      	b.n	8007690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10c      	bne.n	8007672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	43da      	mvns	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e00b      	b.n	800768a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	43da      	mvns	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4013      	ands	r3, r2
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d18d      	bne.n	80075aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076a4:	e02d      	b.n	8007702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f8ce 	bl	8007848 <I2C_IsAcknowledgeFailed>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e02d      	b.n	8007712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d021      	beq.n	8007702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076be:	f7fd fe07 	bl	80052d0 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d302      	bcc.n	80076d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d116      	bne.n	8007702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0220 	orr.w	r2, r3, #32
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e007      	b.n	8007712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d1ca      	bne.n	80076a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007726:	e02d      	b.n	8007784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f88d 	bl	8007848 <I2C_IsAcknowledgeFailed>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e02d      	b.n	8007794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d021      	beq.n	8007784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007740:	f7fd fdc6 	bl	80052d0 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d302      	bcc.n	8007756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d116      	bne.n	8007784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	f043 0220 	orr.w	r2, r3, #32
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e007      	b.n	8007794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b04      	cmp	r3, #4
 8007790:	d1ca      	bne.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077a8:	e042      	b.n	8007830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b10      	cmp	r3, #16
 80077b6:	d119      	bne.n	80077ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0210 	mvn.w	r2, #16
 80077c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e029      	b.n	8007840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ec:	f7fd fd70 	bl	80052d0 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d302      	bcc.n	8007802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d116      	bne.n	8007830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f043 0220 	orr.w	r2, r3, #32
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e007      	b.n	8007840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b40      	cmp	r3, #64	; 0x40
 800783c:	d1b5      	bne.n	80077aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800785a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785e:	d11b      	bne.n	8007898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	f043 0204 	orr.w	r2, r3, #4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
	...

080078a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80078b2:	2300      	movs	r3, #0
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	4b20      	ldr	r3, [pc, #128]	; (8007938 <HAL_PWREx_EnableOverDrive+0x90>)
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	4a1f      	ldr	r2, [pc, #124]	; (8007938 <HAL_PWREx_EnableOverDrive+0x90>)
 80078bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c0:	6413      	str	r3, [r2, #64]	; 0x40
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <HAL_PWREx_EnableOverDrive+0x90>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078ce:	4b1b      	ldr	r3, [pc, #108]	; (800793c <HAL_PWREx_EnableOverDrive+0x94>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078d4:	f7fd fcfc 	bl	80052d0 <HAL_GetTick>
 80078d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078da:	e009      	b.n	80078f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078dc:	f7fd fcf8 	bl	80052d0 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078ea:	d901      	bls.n	80078f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e01f      	b.n	8007930 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078f0:	4b13      	ldr	r3, [pc, #76]	; (8007940 <HAL_PWREx_EnableOverDrive+0x98>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fc:	d1ee      	bne.n	80078dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078fe:	4b11      	ldr	r3, [pc, #68]	; (8007944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007904:	f7fd fce4 	bl	80052d0 <HAL_GetTick>
 8007908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800790a:	e009      	b.n	8007920 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800790c:	f7fd fce0 	bl	80052d0 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800791a:	d901      	bls.n	8007920 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e007      	b.n	8007930 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <HAL_PWREx_EnableOverDrive+0x98>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800792c:	d1ee      	bne.n	800790c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40023800 	.word	0x40023800
 800793c:	420e0040 	.word	0x420e0040
 8007940:	40007000 	.word	0x40007000
 8007944:	420e0044 	.word	0x420e0044

08007948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0cc      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800795c:	4b68      	ldr	r3, [pc, #416]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d90c      	bls.n	8007984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796a:	4b65      	ldr	r3, [pc, #404]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007972:	4b63      	ldr	r3, [pc, #396]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d001      	beq.n	8007984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0b8      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800799c:	4b59      	ldr	r3, [pc, #356]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4a58      	ldr	r2, [pc, #352]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079b4:	4b53      	ldr	r3, [pc, #332]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4a52      	ldr	r2, [pc, #328]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c0:	4b50      	ldr	r3, [pc, #320]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	494d      	ldr	r1, [pc, #308]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d044      	beq.n	8007a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d107      	bne.n	80079f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	4b47      	ldr	r3, [pc, #284]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d119      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e07f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d003      	beq.n	8007a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d107      	bne.n	8007a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a06:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e06f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a16:	4b3b      	ldr	r3, [pc, #236]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e067      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f023 0203 	bic.w	r2, r3, #3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	4934      	ldr	r1, [pc, #208]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a38:	f7fd fc4a 	bl	80052d0 <HAL_GetTick>
 8007a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a3e:	e00a      	b.n	8007a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a40:	f7fd fc46 	bl	80052d0 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e04f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a56:	4b2b      	ldr	r3, [pc, #172]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 020c 	and.w	r2, r3, #12
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d1eb      	bne.n	8007a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a68:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d20c      	bcs.n	8007a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a76:	4b22      	ldr	r3, [pc, #136]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7e:	4b20      	ldr	r3, [pc, #128]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d001      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e032      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4916      	ldr	r1, [pc, #88]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	490e      	ldr	r1, [pc, #56]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ace:	f000 f855 	bl	8007b7c <HAL_RCC_GetSysClockFreq>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	490a      	ldr	r1, [pc, #40]	; (8007b08 <HAL_RCC_ClockConfig+0x1c0>)
 8007ae0:	5ccb      	ldrb	r3, [r1, r3]
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <HAL_RCC_ClockConfig+0x1c8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd fbaa 	bl	8005248 <HAL_InitTick>

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40023c00 	.word	0x40023c00
 8007b04:	40023800 	.word	0x40023800
 8007b08:	08011640 	.word	0x08011640
 8007b0c:	2000001c 	.word	0x2000001c
 8007b10:	20000020 	.word	0x20000020

08007b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b18:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	2000001c 	.word	0x2000001c

08007b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b30:	f7ff fff0 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 8007b34:	4602      	mov	r2, r0
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	0a9b      	lsrs	r3, r3, #10
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	4903      	ldr	r1, [pc, #12]	; (8007b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b42:	5ccb      	ldrb	r3, [r1, r3]
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	08011650 	.word	0x08011650

08007b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b58:	f7ff ffdc 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	0b5b      	lsrs	r3, r3, #13
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	4903      	ldr	r1, [pc, #12]	; (8007b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b6a:	5ccb      	ldrb	r3, [r1, r3]
 8007b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	40023800 	.word	0x40023800
 8007b78:	08011650 	.word	0x08011650

08007b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b80:	b0ae      	sub	sp, #184	; 0xb8
 8007b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ba2:	4bcb      	ldr	r3, [pc, #812]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	f200 8206 	bhi.w	8007fbc <HAL_RCC_GetSysClockFreq+0x440>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bed 	.word	0x08007bed
 8007bbc:	08007fbd 	.word	0x08007fbd
 8007bc0:	08007fbd 	.word	0x08007fbd
 8007bc4:	08007fbd 	.word	0x08007fbd
 8007bc8:	08007bf5 	.word	0x08007bf5
 8007bcc:	08007fbd 	.word	0x08007fbd
 8007bd0:	08007fbd 	.word	0x08007fbd
 8007bd4:	08007fbd 	.word	0x08007fbd
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007fbd 	.word	0x08007fbd
 8007be0:	08007fbd 	.word	0x08007fbd
 8007be4:	08007fbd 	.word	0x08007fbd
 8007be8:	08007ded 	.word	0x08007ded
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bec:	4bb9      	ldr	r3, [pc, #740]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007bf2:	e1e7      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bf4:	4bb8      	ldr	r3, [pc, #736]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007bfa:	e1e3      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bfc:	4bb4      	ldr	r3, [pc, #720]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c08:	4bb1      	ldr	r3, [pc, #708]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d071      	beq.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c14:	4bae      	ldr	r3, [pc, #696]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	099b      	lsrs	r3, r3, #6
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f04f 0000 	mov.w	r0, #0
 8007c42:	f04f 0100 	mov.w	r1, #0
 8007c46:	0159      	lsls	r1, r3, #5
 8007c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c4c:	0150      	lsls	r0, r2, #5
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4621      	mov	r1, r4
 8007c54:	1a51      	subs	r1, r2, r1
 8007c56:	6439      	str	r1, [r7, #64]	; 0x40
 8007c58:	4629      	mov	r1, r5
 8007c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	f04f 0300 	mov.w	r3, #0
 8007c68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	018b      	lsls	r3, r1, #6
 8007c70:	4641      	mov	r1, r8
 8007c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c76:	4641      	mov	r1, r8
 8007c78:	018a      	lsls	r2, r1, #6
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	1a51      	subs	r1, r2, r1
 8007c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c80:	4649      	mov	r1, r9
 8007c82:	eb63 0301 	sbc.w	r3, r3, r1
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007c94:	4649      	mov	r1, r9
 8007c96:	00cb      	lsls	r3, r1, #3
 8007c98:	4641      	mov	r1, r8
 8007c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	00ca      	lsls	r2, r1, #3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4622      	mov	r2, r4
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30
 8007cae:	462b      	mov	r3, r5
 8007cb0:	460a      	mov	r2, r1
 8007cb2:	eb42 0303 	adc.w	r3, r2, r3
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	024b      	lsls	r3, r1, #9
 8007cc8:	4621      	mov	r1, r4
 8007cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cce:	4621      	mov	r1, r4
 8007cd0:	024a      	lsls	r2, r1, #9
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ce4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007ce8:	f7f8 ffee 	bl	8000cc8 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf6:	e067      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf8:	4b75      	ldr	r3, [pc, #468]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	099b      	lsrs	r3, r3, #6
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d12:	2300      	movs	r3, #0
 8007d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	f04f 0000 	mov.w	r0, #0
 8007d22:	f04f 0100 	mov.w	r1, #0
 8007d26:	0159      	lsls	r1, r3, #5
 8007d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d2c:	0150      	lsls	r0, r2, #5
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4621      	mov	r1, r4
 8007d34:	1a51      	subs	r1, r2, r1
 8007d36:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d38:	4629      	mov	r1, r5
 8007d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	018b      	lsls	r3, r1, #6
 8007d50:	4641      	mov	r1, r8
 8007d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d56:	4641      	mov	r1, r8
 8007d58:	018a      	lsls	r2, r1, #6
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d60:	4649      	mov	r1, r9
 8007d62:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d7a:	4692      	mov	sl, r2
 8007d7c:	469b      	mov	fp, r3
 8007d7e:	4623      	mov	r3, r4
 8007d80:	eb1a 0303 	adds.w	r3, sl, r3
 8007d84:	623b      	str	r3, [r7, #32]
 8007d86:	462b      	mov	r3, r5
 8007d88:	eb4b 0303 	adc.w	r3, fp, r3
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	028b      	lsls	r3, r1, #10
 8007d9e:	4621      	mov	r1, r4
 8007da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007da4:	4621      	mov	r1, r4
 8007da6:	028a      	lsls	r2, r1, #10
 8007da8:	4610      	mov	r0, r2
 8007daa:	4619      	mov	r1, r3
 8007dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007db0:	2200      	movs	r2, #0
 8007db2:	673b      	str	r3, [r7, #112]	; 0x70
 8007db4:	677a      	str	r2, [r7, #116]	; 0x74
 8007db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007dba:	f7f8 ff85 	bl	8000cc8 <__aeabi_uldivmod>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dc8:	4b41      	ldr	r3, [pc, #260]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	0c1b      	lsrs	r3, r3, #16
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007dea:	e0eb      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dec:	4b38      	ldr	r3, [pc, #224]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007df8:	4b35      	ldr	r3, [pc, #212]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d06b      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e04:	4b32      	ldr	r3, [pc, #200]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	099b      	lsrs	r3, r3, #6
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e16:	663b      	str	r3, [r7, #96]	; 0x60
 8007e18:	2300      	movs	r3, #0
 8007e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8007e1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007e20:	4622      	mov	r2, r4
 8007e22:	462b      	mov	r3, r5
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f04f 0100 	mov.w	r1, #0
 8007e2c:	0159      	lsls	r1, r3, #5
 8007e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e32:	0150      	lsls	r0, r2, #5
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4621      	mov	r1, r4
 8007e3a:	1a51      	subs	r1, r2, r1
 8007e3c:	61b9      	str	r1, [r7, #24]
 8007e3e:	4629      	mov	r1, r5
 8007e40:	eb63 0301 	sbc.w	r3, r3, r1
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007e52:	4659      	mov	r1, fp
 8007e54:	018b      	lsls	r3, r1, #6
 8007e56:	4651      	mov	r1, sl
 8007e58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e5c:	4651      	mov	r1, sl
 8007e5e:	018a      	lsls	r2, r1, #6
 8007e60:	4651      	mov	r1, sl
 8007e62:	ebb2 0801 	subs.w	r8, r2, r1
 8007e66:	4659      	mov	r1, fp
 8007e68:	eb63 0901 	sbc.w	r9, r3, r1
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e80:	4690      	mov	r8, r2
 8007e82:	4699      	mov	r9, r3
 8007e84:	4623      	mov	r3, r4
 8007e86:	eb18 0303 	adds.w	r3, r8, r3
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	eb49 0303 	adc.w	r3, r9, r3
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	024b      	lsls	r3, r1, #9
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007eaa:	4621      	mov	r1, r4
 8007eac:	024a      	lsls	r2, r1, #9
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007ebc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ec0:	f7f8 ff02 	bl	8000cc8 <__aeabi_uldivmod>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4613      	mov	r3, r2
 8007eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ece:	e065      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x420>
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	00f42400 	.word	0x00f42400
 8007ed8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007edc:	4b3d      	ldr	r3, [pc, #244]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	099b      	lsrs	r3, r3, #6
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007eec:	653b      	str	r3, [r7, #80]	; 0x50
 8007eee:	2300      	movs	r3, #0
 8007ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ef2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007ef6:	4642      	mov	r2, r8
 8007ef8:	464b      	mov	r3, r9
 8007efa:	f04f 0000 	mov.w	r0, #0
 8007efe:	f04f 0100 	mov.w	r1, #0
 8007f02:	0159      	lsls	r1, r3, #5
 8007f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f08:	0150      	lsls	r0, r2, #5
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4641      	mov	r1, r8
 8007f10:	1a51      	subs	r1, r2, r1
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	4649      	mov	r1, r9
 8007f16:	eb63 0301 	sbc.w	r3, r3, r1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007f28:	4659      	mov	r1, fp
 8007f2a:	018b      	lsls	r3, r1, #6
 8007f2c:	4651      	mov	r1, sl
 8007f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f32:	4651      	mov	r1, sl
 8007f34:	018a      	lsls	r2, r1, #6
 8007f36:	4651      	mov	r1, sl
 8007f38:	1a54      	subs	r4, r2, r1
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	eb63 0501 	sbc.w	r5, r3, r1
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	00eb      	lsls	r3, r5, #3
 8007f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f4e:	00e2      	lsls	r2, r4, #3
 8007f50:	4614      	mov	r4, r2
 8007f52:	461d      	mov	r5, r3
 8007f54:	4643      	mov	r3, r8
 8007f56:	18e3      	adds	r3, r4, r3
 8007f58:	603b      	str	r3, [r7, #0]
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	eb45 0303 	adc.w	r3, r5, r3
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f6e:	4629      	mov	r1, r5
 8007f70:	028b      	lsls	r3, r1, #10
 8007f72:	4621      	mov	r1, r4
 8007f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f78:	4621      	mov	r1, r4
 8007f7a:	028a      	lsls	r2, r1, #10
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f84:	2200      	movs	r2, #0
 8007f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007f8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f8e:	f7f8 fe9b 	bl	8000cc8 <__aeabi_uldivmod>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4613      	mov	r3, r2
 8007f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	0f1b      	lsrs	r3, r3, #28
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007fba:	e003      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	37b8      	adds	r7, #184	; 0xb8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	00f42400 	.word	0x00f42400

08007fdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e28d      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8083 	beq.w	8008102 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007ffc:	4b94      	ldr	r3, [pc, #592]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 030c 	and.w	r3, r3, #12
 8008004:	2b04      	cmp	r3, #4
 8008006:	d019      	beq.n	800803c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008008:	4b91      	ldr	r3, [pc, #580]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008010:	2b08      	cmp	r3, #8
 8008012:	d106      	bne.n	8008022 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008014:	4b8e      	ldr	r3, [pc, #568]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008020:	d00c      	beq.n	800803c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008022:	4b8b      	ldr	r3, [pc, #556]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800802a:	2b0c      	cmp	r3, #12
 800802c:	d112      	bne.n	8008054 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800802e:	4b88      	ldr	r3, [pc, #544]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800803a:	d10b      	bne.n	8008054 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800803c:	4b84      	ldr	r3, [pc, #528]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d05b      	beq.n	8008100 <HAL_RCC_OscConfig+0x124>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d157      	bne.n	8008100 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e25a      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805c:	d106      	bne.n	800806c <HAL_RCC_OscConfig+0x90>
 800805e:	4b7c      	ldr	r3, [pc, #496]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a7b      	ldr	r2, [pc, #492]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	e01d      	b.n	80080a8 <HAL_RCC_OscConfig+0xcc>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008074:	d10c      	bne.n	8008090 <HAL_RCC_OscConfig+0xb4>
 8008076:	4b76      	ldr	r3, [pc, #472]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a75      	ldr	r2, [pc, #468]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 800807c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	4b73      	ldr	r3, [pc, #460]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a72      	ldr	r2, [pc, #456]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	e00b      	b.n	80080a8 <HAL_RCC_OscConfig+0xcc>
 8008090:	4b6f      	ldr	r3, [pc, #444]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a6e      	ldr	r2, [pc, #440]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	4b6c      	ldr	r3, [pc, #432]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a6b      	ldr	r2, [pc, #428]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80080a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d013      	beq.n	80080d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fd f90e 	bl	80052d0 <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080b8:	f7fd f90a 	bl	80052d0 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b64      	cmp	r3, #100	; 0x64
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e21f      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ca:	4b61      	ldr	r3, [pc, #388]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0f0      	beq.n	80080b8 <HAL_RCC_OscConfig+0xdc>
 80080d6:	e014      	b.n	8008102 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d8:	f7fd f8fa 	bl	80052d0 <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080de:	e008      	b.n	80080f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080e0:	f7fd f8f6 	bl	80052d0 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b64      	cmp	r3, #100	; 0x64
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e20b      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080f2:	4b57      	ldr	r3, [pc, #348]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f0      	bne.n	80080e0 <HAL_RCC_OscConfig+0x104>
 80080fe:	e000      	b.n	8008102 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d06f      	beq.n	80081ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800810e:	4b50      	ldr	r3, [pc, #320]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 030c 	and.w	r3, r3, #12
 8008116:	2b00      	cmp	r3, #0
 8008118:	d017      	beq.n	800814a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800811a:	4b4d      	ldr	r3, [pc, #308]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008122:	2b08      	cmp	r3, #8
 8008124:	d105      	bne.n	8008132 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008126:	4b4a      	ldr	r3, [pc, #296]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00b      	beq.n	800814a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008132:	4b47      	ldr	r3, [pc, #284]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800813a:	2b0c      	cmp	r3, #12
 800813c:	d11c      	bne.n	8008178 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800813e:	4b44      	ldr	r3, [pc, #272]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d116      	bne.n	8008178 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800814a:	4b41      	ldr	r3, [pc, #260]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <HAL_RCC_OscConfig+0x186>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d001      	beq.n	8008162 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e1d3      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008162:	4b3b      	ldr	r3, [pc, #236]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4937      	ldr	r1, [pc, #220]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008172:	4313      	orrs	r3, r2
 8008174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008176:	e03a      	b.n	80081ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d020      	beq.n	80081c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008180:	4b34      	ldr	r3, [pc, #208]	; (8008254 <HAL_RCC_OscConfig+0x278>)
 8008182:	2201      	movs	r2, #1
 8008184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008186:	f7fd f8a3 	bl	80052d0 <HAL_GetTick>
 800818a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800818c:	e008      	b.n	80081a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800818e:	f7fd f89f 	bl	80052d0 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e1b4      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081a0:	4b2b      	ldr	r3, [pc, #172]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0f0      	beq.n	800818e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ac:	4b28      	ldr	r3, [pc, #160]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	4925      	ldr	r1, [pc, #148]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	600b      	str	r3, [r1, #0]
 80081c0:	e015      	b.n	80081ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081c2:	4b24      	ldr	r3, [pc, #144]	; (8008254 <HAL_RCC_OscConfig+0x278>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7fd f882 	bl	80052d0 <HAL_GetTick>
 80081cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081d0:	f7fd f87e 	bl	80052d0 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e193      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081e2:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d036      	beq.n	8008268 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <HAL_RCC_OscConfig+0x27c>)
 8008204:	2201      	movs	r2, #1
 8008206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008208:	f7fd f862 	bl	80052d0 <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008210:	f7fd f85e 	bl	80052d0 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e173      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008222:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <HAL_RCC_OscConfig+0x274>)
 8008224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0f0      	beq.n	8008210 <HAL_RCC_OscConfig+0x234>
 800822e:	e01b      	b.n	8008268 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <HAL_RCC_OscConfig+0x27c>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008236:	f7fd f84b 	bl	80052d0 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800823c:	e00e      	b.n	800825c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800823e:	f7fd f847 	bl	80052d0 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d907      	bls.n	800825c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e15c      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
 8008250:	40023800 	.word	0x40023800
 8008254:	42470000 	.word	0x42470000
 8008258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800825c:	4b8a      	ldr	r3, [pc, #552]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800825e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ea      	bne.n	800823e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8097 	beq.w	80083a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800827a:	4b83      	ldr	r3, [pc, #524]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10f      	bne.n	80082a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008286:	2300      	movs	r3, #0
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	4b7f      	ldr	r3, [pc, #508]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	4a7e      	ldr	r2, [pc, #504]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008294:	6413      	str	r3, [r2, #64]	; 0x40
 8008296:	4b7c      	ldr	r3, [pc, #496]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800829e:	60bb      	str	r3, [r7, #8]
 80082a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082a2:	2301      	movs	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a6:	4b79      	ldr	r3, [pc, #484]	; (800848c <HAL_RCC_OscConfig+0x4b0>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d118      	bne.n	80082e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082b2:	4b76      	ldr	r3, [pc, #472]	; (800848c <HAL_RCC_OscConfig+0x4b0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a75      	ldr	r2, [pc, #468]	; (800848c <HAL_RCC_OscConfig+0x4b0>)
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082be:	f7fd f807 	bl	80052d0 <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c6:	f7fd f803 	bl	80052d0 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e118      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082d8:	4b6c      	ldr	r3, [pc, #432]	; (800848c <HAL_RCC_OscConfig+0x4b0>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0f0      	beq.n	80082c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d106      	bne.n	80082fa <HAL_RCC_OscConfig+0x31e>
 80082ec:	4b66      	ldr	r3, [pc, #408]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 80082ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f0:	4a65      	ldr	r2, [pc, #404]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 80082f2:	f043 0301 	orr.w	r3, r3, #1
 80082f6:	6713      	str	r3, [r2, #112]	; 0x70
 80082f8:	e01c      	b.n	8008334 <HAL_RCC_OscConfig+0x358>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d10c      	bne.n	800831c <HAL_RCC_OscConfig+0x340>
 8008302:	4b61      	ldr	r3, [pc, #388]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008306:	4a60      	ldr	r2, [pc, #384]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008308:	f043 0304 	orr.w	r3, r3, #4
 800830c:	6713      	str	r3, [r2, #112]	; 0x70
 800830e:	4b5e      	ldr	r3, [pc, #376]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	4a5d      	ldr	r2, [pc, #372]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	6713      	str	r3, [r2, #112]	; 0x70
 800831a:	e00b      	b.n	8008334 <HAL_RCC_OscConfig+0x358>
 800831c:	4b5a      	ldr	r3, [pc, #360]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800831e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008320:	4a59      	ldr	r2, [pc, #356]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	6713      	str	r3, [r2, #112]	; 0x70
 8008328:	4b57      	ldr	r3, [pc, #348]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	4a56      	ldr	r2, [pc, #344]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800832e:	f023 0304 	bic.w	r3, r3, #4
 8008332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d015      	beq.n	8008368 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833c:	f7fc ffc8 	bl	80052d0 <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008342:	e00a      	b.n	800835a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008344:	f7fc ffc4 	bl	80052d0 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008352:	4293      	cmp	r3, r2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e0d7      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800835a:	4b4b      	ldr	r3, [pc, #300]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0ee      	beq.n	8008344 <HAL_RCC_OscConfig+0x368>
 8008366:	e014      	b.n	8008392 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008368:	f7fc ffb2 	bl	80052d0 <HAL_GetTick>
 800836c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800836e:	e00a      	b.n	8008386 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008370:	f7fc ffae 	bl	80052d0 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	f241 3288 	movw	r2, #5000	; 0x1388
 800837e:	4293      	cmp	r3, r2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e0c1      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008386:	4b40      	ldr	r3, [pc, #256]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1ee      	bne.n	8008370 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d105      	bne.n	80083a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008398:	4b3b      	ldr	r3, [pc, #236]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	4a3a      	ldr	r2, [pc, #232]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800839e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80ad 	beq.w	8008508 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083ae:	4b36      	ldr	r3, [pc, #216]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 030c 	and.w	r3, r3, #12
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d060      	beq.n	800847c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d145      	bne.n	800844e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083c2:	4b33      	ldr	r3, [pc, #204]	; (8008490 <HAL_RCC_OscConfig+0x4b4>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fc ff82 	bl	80052d0 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083d0:	f7fc ff7e 	bl	80052d0 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e093      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083e2:	4b29      	ldr	r3, [pc, #164]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f0      	bne.n	80083d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	019b      	lsls	r3, r3, #6
 80083fe:	431a      	orrs	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	3b01      	subs	r3, #1
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	061b      	lsls	r3, r3, #24
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	071b      	lsls	r3, r3, #28
 800841a:	491b      	ldr	r1, [pc, #108]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 800841c:	4313      	orrs	r3, r2
 800841e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008420:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <HAL_RCC_OscConfig+0x4b4>)
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008426:	f7fc ff53 	bl	80052d0 <HAL_GetTick>
 800842a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800842c:	e008      	b.n	8008440 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800842e:	f7fc ff4f 	bl	80052d0 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d901      	bls.n	8008440 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e064      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0f0      	beq.n	800842e <HAL_RCC_OscConfig+0x452>
 800844c:	e05c      	b.n	8008508 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800844e:	4b10      	ldr	r3, [pc, #64]	; (8008490 <HAL_RCC_OscConfig+0x4b4>)
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fc ff3c 	bl	80052d0 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800845c:	f7fc ff38 	bl	80052d0 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e04d      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800846e:	4b06      	ldr	r3, [pc, #24]	; (8008488 <HAL_RCC_OscConfig+0x4ac>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f0      	bne.n	800845c <HAL_RCC_OscConfig+0x480>
 800847a:	e045      	b.n	8008508 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d107      	bne.n	8008494 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e040      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
 8008488:	40023800 	.word	0x40023800
 800848c:	40007000 	.word	0x40007000
 8008490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008494:	4b1f      	ldr	r3, [pc, #124]	; (8008514 <HAL_RCC_OscConfig+0x538>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d030      	beq.n	8008504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d129      	bne.n	8008504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d122      	bne.n	8008504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084c4:	4013      	ands	r3, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d119      	bne.n	8008504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	3b01      	subs	r3, #1
 80084de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d10f      	bne.n	8008504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d107      	bne.n	8008504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008500:	429a      	cmp	r2, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40023800 	.word	0x40023800

08008518 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e07b      	b.n	8008622 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d108      	bne.n	8008544 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800853a:	d009      	beq.n	8008550 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	61da      	str	r2, [r3, #28]
 8008542:	e005      	b.n	8008550 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7fc f86a 	bl	8004644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008586:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a2:	431a      	orrs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	431a      	orrs	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085c0:	431a      	orrs	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d4:	ea42 0103 	orr.w	r1, r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	f003 0104 	and.w	r1, r3, #4
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	f003 0210 	and.w	r2, r3, #16
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008610:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b088      	sub	sp, #32
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_SPI_Transmit+0x22>
 8008648:	2302      	movs	r3, #2
 800864a:	e126      	b.n	800889a <HAL_SPI_Transmit+0x270>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008654:	f7fc fe3c 	bl	80052d0 <HAL_GetTick>
 8008658:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b01      	cmp	r3, #1
 8008668:	d002      	beq.n	8008670 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800866a:	2302      	movs	r3, #2
 800866c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800866e:	e10b      	b.n	8008888 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_SPI_Transmit+0x52>
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008680:	e102      	b.n	8008888 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2203      	movs	r2, #3
 8008686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c8:	d10f      	bne.n	80086ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d007      	beq.n	8008708 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008710:	d14b      	bne.n	80087aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_SPI_Transmit+0xf6>
 800871a:	8afb      	ldrh	r3, [r7, #22]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d13e      	bne.n	800879e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	881a      	ldrh	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	1c9a      	adds	r2, r3, #2
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008744:	e02b      	b.n	800879e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b02      	cmp	r3, #2
 8008752:	d112      	bne.n	800877a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	881a      	ldrh	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	1c9a      	adds	r2, r3, #2
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876e:	b29b      	uxth	r3, r3
 8008770:	3b01      	subs	r3, #1
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	86da      	strh	r2, [r3, #54]	; 0x36
 8008778:	e011      	b.n	800879e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800877a:	f7fc fda9 	bl	80052d0 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d803      	bhi.n	8008792 <HAL_SPI_Transmit+0x168>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008790:	d102      	bne.n	8008798 <HAL_SPI_Transmit+0x16e>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800879c:	e074      	b.n	8008888 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1ce      	bne.n	8008746 <HAL_SPI_Transmit+0x11c>
 80087a8:	e04c      	b.n	8008844 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <HAL_SPI_Transmit+0x18e>
 80087b2:	8afb      	ldrh	r3, [r7, #22]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d140      	bne.n	800883a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	7812      	ldrb	r2, [r2, #0]
 80087c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29a      	uxth	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80087de:	e02c      	b.n	800883a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d113      	bne.n	8008816 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	330c      	adds	r3, #12
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	86da      	strh	r2, [r3, #54]	; 0x36
 8008814:	e011      	b.n	800883a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008816:	f7fc fd5b 	bl	80052d0 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d803      	bhi.n	800882e <HAL_SPI_Transmit+0x204>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d102      	bne.n	8008834 <HAL_SPI_Transmit+0x20a>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008838:	e026      	b.n	8008888 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1cd      	bne.n	80087e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fbcb 	bl	8008fe4 <SPI_EndRxTxTransaction>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2220      	movs	r2, #32
 8008858:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008862:	2300      	movs	r3, #0
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	613b      	str	r3, [r7, #16]
 8008876:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e000      	b.n	8008888 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008898:	7ffb      	ldrb	r3, [r7, #31]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b088      	sub	sp, #32
 80088a6:	af02      	add	r7, sp, #8
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	603b      	str	r3, [r7, #0]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088be:	d112      	bne.n	80088e6 <HAL_SPI_Receive+0x44>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10e      	bne.n	80088e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2204      	movs	r2, #4
 80088cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80088d0:	88fa      	ldrh	r2, [r7, #6]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f8f1 	bl	8008ac4 <HAL_SPI_TransmitReceive>
 80088e2:	4603      	mov	r3, r0
 80088e4:	e0ea      	b.n	8008abc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_SPI_Receive+0x52>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e0e3      	b.n	8008abc <HAL_SPI_Receive+0x21a>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088fc:	f7fc fce8 	bl	80052d0 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b01      	cmp	r3, #1
 800890c:	d002      	beq.n	8008914 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800890e:	2302      	movs	r3, #2
 8008910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008912:	e0ca      	b.n	8008aaa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <HAL_SPI_Receive+0x7e>
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008924:	e0c1      	b.n	8008aaa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2204      	movs	r2, #4
 800892a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	88fa      	ldrh	r2, [r7, #6]
 800893e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800896c:	d10f      	bne.n	800898e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800898c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b40      	cmp	r3, #64	; 0x40
 800899a:	d007      	beq.n	80089ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d162      	bne.n	8008a7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80089b4:	e02e      	b.n	8008a14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d115      	bne.n	80089f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f103 020c 	add.w	r2, r3, #12
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	7812      	ldrb	r2, [r2, #0]
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089ee:	e011      	b.n	8008a14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f0:	f7fc fc6e 	bl	80052d0 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d803      	bhi.n	8008a08 <HAL_SPI_Receive+0x166>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d102      	bne.n	8008a0e <HAL_SPI_Receive+0x16c>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a12:	e04a      	b.n	8008aaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1cb      	bne.n	80089b6 <HAL_SPI_Receive+0x114>
 8008a1e:	e031      	b.n	8008a84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d113      	bne.n	8008a56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	b292      	uxth	r2, r2
 8008a3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	1c9a      	adds	r2, r3, #2
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a54:	e011      	b.n	8008a7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a56:	f7fc fc3b 	bl	80052d0 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d803      	bhi.n	8008a6e <HAL_SPI_Receive+0x1cc>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d102      	bne.n	8008a74 <HAL_SPI_Receive+0x1d2>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a78:	e017      	b.n	8008aaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1cd      	bne.n	8008a20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fa45 	bl	8008f18 <SPI_EndRxTransaction>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
 8008aa6:	e000      	b.n	8008aaa <HAL_SPI_Receive+0x208>
  }

error :
 8008aa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08c      	sub	sp, #48	; 0x30
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_SPI_TransmitReceive+0x26>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e18a      	b.n	8008e00 <HAL_SPI_TransmitReceive+0x33c>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008af2:	f7fc fbed 	bl	80052d0 <HAL_GetTick>
 8008af6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b08:	887b      	ldrh	r3, [r7, #2]
 8008b0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d00f      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x70>
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b1a:	d107      	bne.n	8008b2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <HAL_SPI_TransmitReceive+0x68>
 8008b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d003      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b32:	e15b      	b.n	8008dec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <HAL_SPI_TransmitReceive+0x82>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <HAL_SPI_TransmitReceive+0x82>
 8008b40:	887b      	ldrh	r3, [r7, #2]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d103      	bne.n	8008b4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b4c:	e14e      	b.n	8008dec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d003      	beq.n	8008b62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2205      	movs	r2, #5
 8008b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	887a      	ldrh	r2, [r7, #2]
 8008b72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	887a      	ldrh	r2, [r7, #2]
 8008b78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	887a      	ldrh	r2, [r7, #2]
 8008b84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	887a      	ldrh	r2, [r7, #2]
 8008b8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d007      	beq.n	8008bb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bbe:	d178      	bne.n	8008cb2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_SPI_TransmitReceive+0x10a>
 8008bc8:	8b7b      	ldrh	r3, [r7, #26]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d166      	bne.n	8008c9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	881a      	ldrh	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	1c9a      	adds	r2, r3, #2
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bf2:	e053      	b.n	8008c9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d11b      	bne.n	8008c3a <HAL_SPI_TransmitReceive+0x176>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d016      	beq.n	8008c3a <HAL_SPI_TransmitReceive+0x176>
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d113      	bne.n	8008c3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	881a      	ldrh	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	1c9a      	adds	r2, r3, #2
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d119      	bne.n	8008c7c <HAL_SPI_TransmitReceive+0x1b8>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d014      	beq.n	8008c7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	1c9a      	adds	r2, r3, #2
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c7c:	f7fc fb28 	bl	80052d0 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d807      	bhi.n	8008c9c <HAL_SPI_TransmitReceive+0x1d8>
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d003      	beq.n	8008c9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c9a:	e0a7      	b.n	8008dec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1a6      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x130>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1a1      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x130>
 8008cb0:	e07c      	b.n	8008dac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <HAL_SPI_TransmitReceive+0x1fc>
 8008cba:	8b7b      	ldrh	r3, [r7, #26]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d16b      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	7812      	ldrb	r2, [r2, #0]
 8008ccc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ce6:	e057      	b.n	8008d98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d11c      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x26c>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d017      	beq.n	8008d30 <HAL_SPI_TransmitReceive+0x26c>
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d114      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d119      	bne.n	8008d72 <HAL_SPI_TransmitReceive+0x2ae>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d014      	beq.n	8008d72 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	b2d2      	uxtb	r2, r2
 8008d54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	3b01      	subs	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d72:	f7fc faad 	bl	80052d0 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d803      	bhi.n	8008d8a <HAL_SPI_TransmitReceive+0x2c6>
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d88:	d102      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x2cc>
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d96:	e029      	b.n	8008dec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1a2      	bne.n	8008ce8 <HAL_SPI_TransmitReceive+0x224>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d19d      	bne.n	8008ce8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f917 	bl	8008fe4 <SPI_EndRxTxTransaction>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d006      	beq.n	8008dca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008dc8:	e010      	b.n	8008dec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	e000      	b.n	8008dec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008dea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3730      	adds	r7, #48	; 0x30
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e18:	f7fc fa5a 	bl	80052d0 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e28:	f7fc fa52 	bl	80052d0 <HAL_GetTick>
 8008e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	015b      	lsls	r3, r3, #5
 8008e34:	0d1b      	lsrs	r3, r3, #20
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	fb02 f303 	mul.w	r3, r2, r3
 8008e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e3e:	e054      	b.n	8008eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d050      	beq.n	8008eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e48:	f7fc fa42 	bl	80052d0 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d902      	bls.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d13d      	bne.n	8008eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e76:	d111      	bne.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e80:	d004      	beq.n	8008e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8a:	d107      	bne.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea4:	d10f      	bne.n	8008ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e017      	b.n	8008f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	bf0c      	ite	eq
 8008efa:	2301      	moveq	r3, #1
 8008efc:	2300      	movne	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d19b      	bne.n	8008e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000001c 	.word	0x2000001c

08008f18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f2c:	d111      	bne.n	8008f52 <SPI_EndRxTransaction+0x3a>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f36:	d004      	beq.n	8008f42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f40:	d107      	bne.n	8008f52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f5a:	d12a      	bne.n	8008fb2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f64:	d012      	beq.n	8008f8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2180      	movs	r1, #128	; 0x80
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff ff49 	bl	8008e08 <SPI_WaitFlagStateUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d02d      	beq.n	8008fd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f80:	f043 0220 	orr.w	r2, r3, #32
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e026      	b.n	8008fda <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2200      	movs	r2, #0
 8008f94:	2101      	movs	r1, #1
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff ff36 	bl	8008e08 <SPI_WaitFlagStateUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01a      	beq.n	8008fd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	f043 0220 	orr.w	r2, r3, #32
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e013      	b.n	8008fda <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2101      	movs	r1, #1
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ff23 	bl	8008e08 <SPI_WaitFlagStateUntilTimeout>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fcc:	f043 0220 	orr.w	r2, r3, #32
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e000      	b.n	8008fda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <SPI_EndRxTxTransaction+0x7c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a1b      	ldr	r2, [pc, #108]	; (8009064 <SPI_EndRxTxTransaction+0x80>)
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffa:	0d5b      	lsrs	r3, r3, #21
 8008ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800900e:	d112      	bne.n	8009036 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	2180      	movs	r1, #128	; 0x80
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff fef4 	bl	8008e08 <SPI_WaitFlagStateUntilTimeout>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d016      	beq.n	8009054 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902a:	f043 0220 	orr.w	r2, r3, #32
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e00f      	b.n	8009056 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	3b01      	subs	r3, #1
 8009040:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904c:	2b80      	cmp	r3, #128	; 0x80
 800904e:	d0f2      	beq.n	8009036 <SPI_EndRxTxTransaction+0x52>
 8009050:	e000      	b.n	8009054 <SPI_EndRxTxTransaction+0x70>
        break;
 8009052:	bf00      	nop
  }

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000001c 	.word	0x2000001c
 8009064:	165e9f81 	.word	0x165e9f81

08009068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e041      	b.n	80090fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fb fba4 	bl	80047dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f000 f95e 	bl	8009368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b01      	cmp	r3, #1
 800911a:	d001      	beq.n	8009120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e046      	b.n	80091ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a23      	ldr	r2, [pc, #140]	; (80091bc <HAL_TIM_Base_Start+0xb4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d022      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913a:	d01d      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <HAL_TIM_Base_Start+0xb8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d018      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a1e      	ldr	r2, [pc, #120]	; (80091c4 <HAL_TIM_Base_Start+0xbc>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d013      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <HAL_TIM_Base_Start+0xc0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00e      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <HAL_TIM_Base_Start+0xc4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d009      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a19      	ldr	r2, [pc, #100]	; (80091d0 <HAL_TIM_Base_Start+0xc8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d004      	beq.n	8009178 <HAL_TIM_Base_Start+0x70>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <HAL_TIM_Base_Start+0xcc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d111      	bne.n	800919c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b06      	cmp	r3, #6
 8009188:	d010      	beq.n	80091ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0201 	orr.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800919a:	e007      	b.n	80091ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	40000c00 	.word	0x40000c00
 80091cc:	40010400 	.word	0x40010400
 80091d0:	40014000 	.word	0x40014000
 80091d4:	40001800 	.word	0x40001800

080091d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIM_ConfigClockSource+0x1c>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e0b4      	b.n	800935e <HAL_TIM_ConfigClockSource+0x186>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800921a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800922c:	d03e      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0xd4>
 800922e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009232:	f200 8087 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 8009236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923a:	f000 8086 	beq.w	800934a <HAL_TIM_ConfigClockSource+0x172>
 800923e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009242:	d87f      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 8009244:	2b70      	cmp	r3, #112	; 0x70
 8009246:	d01a      	beq.n	800927e <HAL_TIM_ConfigClockSource+0xa6>
 8009248:	2b70      	cmp	r3, #112	; 0x70
 800924a:	d87b      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 800924c:	2b60      	cmp	r3, #96	; 0x60
 800924e:	d050      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x11a>
 8009250:	2b60      	cmp	r3, #96	; 0x60
 8009252:	d877      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 8009254:	2b50      	cmp	r3, #80	; 0x50
 8009256:	d03c      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0xfa>
 8009258:	2b50      	cmp	r3, #80	; 0x50
 800925a:	d873      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d058      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x13a>
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d86f      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 8009264:	2b30      	cmp	r3, #48	; 0x30
 8009266:	d064      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x15a>
 8009268:	2b30      	cmp	r3, #48	; 0x30
 800926a:	d86b      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 800926c:	2b20      	cmp	r3, #32
 800926e:	d060      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x15a>
 8009270:	2b20      	cmp	r3, #32
 8009272:	d867      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d05c      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x15a>
 8009278:	2b10      	cmp	r3, #16
 800927a:	d05a      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x15a>
 800927c:	e062      	b.n	8009344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6899      	ldr	r1, [r3, #8]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f000 f985 	bl	800959c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	609a      	str	r2, [r3, #8]
      break;
 80092aa:	e04f      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6899      	ldr	r1, [r3, #8]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f000 f96e 	bl	800959c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689a      	ldr	r2, [r3, #8]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ce:	609a      	str	r2, [r3, #8]
      break;
 80092d0:	e03c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6859      	ldr	r1, [r3, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	461a      	mov	r2, r3
 80092e0:	f000 f8e2 	bl	80094a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2150      	movs	r1, #80	; 0x50
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f93b 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 80092f0:	e02c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6859      	ldr	r1, [r3, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	461a      	mov	r2, r3
 8009300:	f000 f901 	bl	8009506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2160      	movs	r1, #96	; 0x60
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f92b 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8009310:	e01c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6859      	ldr	r1, [r3, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	461a      	mov	r2, r3
 8009320:	f000 f8c2 	bl	80094a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2140      	movs	r1, #64	; 0x40
 800932a:	4618      	mov	r0, r3
 800932c:	f000 f91b 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8009330:	e00c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f000 f912 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8009342:	e003      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
      break;
 8009348:	e000      	b.n	800934c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800934a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a40      	ldr	r2, [pc, #256]	; (800947c <TIM_Base_SetConfig+0x114>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d013      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009386:	d00f      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a3d      	ldr	r2, [pc, #244]	; (8009480 <TIM_Base_SetConfig+0x118>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00b      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a3c      	ldr	r2, [pc, #240]	; (8009484 <TIM_Base_SetConfig+0x11c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d007      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a3b      	ldr	r2, [pc, #236]	; (8009488 <TIM_Base_SetConfig+0x120>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d003      	beq.n	80093a8 <TIM_Base_SetConfig+0x40>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a3a      	ldr	r2, [pc, #232]	; (800948c <TIM_Base_SetConfig+0x124>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d108      	bne.n	80093ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2f      	ldr	r2, [pc, #188]	; (800947c <TIM_Base_SetConfig+0x114>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d02b      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c8:	d027      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a2c      	ldr	r2, [pc, #176]	; (8009480 <TIM_Base_SetConfig+0x118>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d023      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <TIM_Base_SetConfig+0x11c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d01f      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a2a      	ldr	r2, [pc, #168]	; (8009488 <TIM_Base_SetConfig+0x120>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d01b      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a29      	ldr	r2, [pc, #164]	; (800948c <TIM_Base_SetConfig+0x124>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d017      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a28      	ldr	r2, [pc, #160]	; (8009490 <TIM_Base_SetConfig+0x128>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d013      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a27      	ldr	r2, [pc, #156]	; (8009494 <TIM_Base_SetConfig+0x12c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00f      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a26      	ldr	r2, [pc, #152]	; (8009498 <TIM_Base_SetConfig+0x130>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00b      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a25      	ldr	r2, [pc, #148]	; (800949c <TIM_Base_SetConfig+0x134>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a24      	ldr	r2, [pc, #144]	; (80094a0 <TIM_Base_SetConfig+0x138>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_Base_SetConfig+0xb2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a23      	ldr	r2, [pc, #140]	; (80094a4 <TIM_Base_SetConfig+0x13c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d108      	bne.n	800942c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a0a      	ldr	r2, [pc, #40]	; (800947c <TIM_Base_SetConfig+0x114>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d003      	beq.n	8009460 <TIM_Base_SetConfig+0xf8>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a0c      	ldr	r2, [pc, #48]	; (800948c <TIM_Base_SetConfig+0x124>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d103      	bne.n	8009468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	615a      	str	r2, [r3, #20]
}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	40010000 	.word	0x40010000
 8009480:	40000400 	.word	0x40000400
 8009484:	40000800 	.word	0x40000800
 8009488:	40000c00 	.word	0x40000c00
 800948c:	40010400 	.word	0x40010400
 8009490:	40014000 	.word	0x40014000
 8009494:	40014400 	.word	0x40014400
 8009498:	40014800 	.word	0x40014800
 800949c:	40001800 	.word	0x40001800
 80094a0:	40001c00 	.word	0x40001c00
 80094a4:	40002000 	.word	0x40002000

080094a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	f023 0201 	bic.w	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f023 030a 	bic.w	r3, r3, #10
 80094e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009506:	b480      	push	{r7}
 8009508:	b087      	sub	sp, #28
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f023 0210 	bic.w	r2, r3, #16
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	031b      	lsls	r3, r3, #12
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	4313      	orrs	r3, r2
 800953a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	621a      	str	r2, [r3, #32]
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	f043 0307 	orr.w	r3, r3, #7
 8009588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	609a      	str	r2, [r3, #8]
}
 8009590:	bf00      	nop
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	021a      	lsls	r2, r3, #8
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	431a      	orrs	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e05a      	b.n	80096aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d022      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009640:	d01d      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1d      	ldr	r2, [pc, #116]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d018      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1b      	ldr	r2, [pc, #108]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d013      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00e      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a18      	ldr	r2, [pc, #96]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d009      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a17      	ldr	r2, [pc, #92]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d004      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d10c      	bne.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	4313      	orrs	r3, r2
 800968e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40010400 	.word	0x40010400
 80096cc:	40014000 	.word	0x40014000
 80096d0:	40001800 	.word	0x40001800

080096d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e03f      	b.n	8009766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fb f890 	bl	8004820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	; 0x24
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 ff73 	bl	800a604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691a      	ldr	r2, [r3, #16]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800972c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800973c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800974c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b08a      	sub	sp, #40	; 0x28
 8009772:	af02      	add	r7, sp, #8
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	603b      	str	r3, [r7, #0]
 800977a:	4613      	mov	r3, r2
 800977c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b20      	cmp	r3, #32
 800978c:	d17c      	bne.n	8009888 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_UART_Transmit+0x2c>
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e075      	b.n	800988a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d101      	bne.n	80097ac <HAL_UART_Transmit+0x3e>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e06e      	b.n	800988a <HAL_UART_Transmit+0x11c>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2221      	movs	r2, #33	; 0x21
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097c2:	f7fb fd85 	bl	80052d0 <HAL_GetTick>
 80097c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	88fa      	ldrh	r2, [r7, #6]
 80097cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097dc:	d108      	bne.n	80097f0 <HAL_UART_Transmit+0x82>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	e003      	b.n	80097f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009800:	e02a      	b.n	8009858 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2200      	movs	r2, #0
 800980a:	2180      	movs	r1, #128	; 0x80
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fc2b 	bl	800a068 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e036      	b.n	800988a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	3302      	adds	r3, #2
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e007      	b.n	800984a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	3301      	adds	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1cf      	bne.n	8009802 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2200      	movs	r2, #0
 800986a:	2140      	movs	r1, #64	; 0x40
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 fbfb 	bl	800a068 <UART_WaitOnFlagUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e006      	b.n	800988a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	e000      	b.n	800988a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009888:	2302      	movs	r3, #2
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	4613      	mov	r3, r2
 800989e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d11d      	bne.n	80098e8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_UART_Receive_DMA+0x26>
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e016      	b.n	80098ea <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d101      	bne.n	80098ca <HAL_UART_Receive_DMA+0x38>
 80098c6:	2302      	movs	r3, #2
 80098c8:	e00f      	b.n	80098ea <HAL_UART_Receive_DMA+0x58>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	461a      	mov	r2, r3
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fc30 	bl	800a144 <UART_Start_Receive_DMA>
 80098e4:	4603      	mov	r3, r0
 80098e6:	e000      	b.n	80098ea <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b0ba      	sub	sp, #232	; 0xe8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800991a:	2300      	movs	r3, #0
 800991c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009920:	2300      	movs	r3, #0
 8009922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992a:	f003 030f 	and.w	r3, r3, #15
 800992e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10f      	bne.n	800995a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800993a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b00      	cmp	r3, #0
 8009944:	d009      	beq.n	800995a <HAL_UART_IRQHandler+0x66>
 8009946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fd9b 	bl	800a48e <UART_Receive_IT>
      return;
 8009958:	e256      	b.n	8009e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800995a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 80de 	beq.w	8009b20 <HAL_UART_IRQHandler+0x22c>
 8009964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	d106      	bne.n	800997e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 80d1 	beq.w	8009b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <HAL_UART_IRQHandler+0xae>
 800998a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f043 0201 	orr.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a6:	f003 0304 	and.w	r3, r3, #4
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <HAL_UART_IRQHandler+0xd2>
 80099ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	f043 0202 	orr.w	r2, r3, #2
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00b      	beq.n	80099ea <HAL_UART_IRQHandler+0xf6>
 80099d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	f043 0204 	orr.w	r2, r3, #4
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d011      	beq.n	8009a1a <HAL_UART_IRQHandler+0x126>
 80099f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	f043 0208 	orr.w	r2, r3, #8
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 81ed 	beq.w	8009dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d008      	beq.n	8009a42 <HAL_UART_IRQHandler+0x14e>
 8009a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fd26 	bl	800a48e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	bf0c      	ite	eq
 8009a50:	2301      	moveq	r3, #1
 8009a52:	2300      	movne	r3, #0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <HAL_UART_IRQHandler+0x17a>
 8009a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d04f      	beq.n	8009b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fc2e 	bl	800a2d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d141      	bne.n	8009b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3314      	adds	r3, #20
 8009a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3314      	adds	r3, #20
 8009aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1d9      	bne.n	8009a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d013      	beq.n	8009afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ada:	4a7d      	ldr	r2, [pc, #500]	; (8009cd0 <HAL_UART_IRQHandler+0x3dc>)
 8009adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fc face 	bl	8006084 <HAL_DMA_Abort_IT>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d016      	beq.n	8009b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afc:	e00e      	b.n	8009b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f9a4 	bl	8009e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b04:	e00a      	b.n	8009b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f9a0 	bl	8009e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0c:	e006      	b.n	8009b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f99c 	bl	8009e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b1a:	e170      	b.n	8009dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1c:	bf00      	nop
    return;
 8009b1e:	e16e      	b.n	8009dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	f040 814a 	bne.w	8009dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2e:	f003 0310 	and.w	r3, r3, #16
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 8143 	beq.w	8009dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b3c:	f003 0310 	and.w	r3, r3, #16
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 813c 	beq.w	8009dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	60bb      	str	r3, [r7, #8]
 8009b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	f040 80b4 	bne.w	8009cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8140 	beq.w	8009e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	f080 8139 	bcs.w	8009e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba2:	f000 8088 	beq.w	8009cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	330c      	adds	r3, #12
 8009bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	330c      	adds	r3, #12
 8009bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1d9      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3314      	adds	r3, #20
 8009bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c04:	f023 0301 	bic.w	r3, r3, #1
 8009c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3314      	adds	r3, #20
 8009c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e1      	bne.n	8009bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3314      	adds	r3, #20
 8009c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3314      	adds	r3, #20
 8009c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e3      	bne.n	8009c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	330c      	adds	r3, #12
 8009c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c86:	f023 0310 	bic.w	r3, r3, #16
 8009c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	330c      	adds	r3, #12
 8009c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e3      	bne.n	8009c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fc f977 	bl	8005fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f8ca 	bl	8009e60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ccc:	e099      	b.n	8009e02 <HAL_UART_IRQHandler+0x50e>
 8009cce:	bf00      	nop
 8009cd0:	0800a397 	.word	0x0800a397
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 808b 	beq.w	8009e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8086 	beq.w	8009e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	330c      	adds	r3, #12
 8009d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	330c      	adds	r3, #12
 8009d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8009d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e3      	bne.n	8009cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3314      	adds	r3, #20
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	623b      	str	r3, [r7, #32]
   return(result);
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3314      	adds	r3, #20
 8009d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d56:	633a      	str	r2, [r7, #48]	; 0x30
 8009d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e3      	bne.n	8009d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0310 	bic.w	r3, r3, #16
 8009d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009d9c:	61fa      	str	r2, [r7, #28]
 8009d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	69b9      	ldr	r1, [r7, #24]
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	617b      	str	r3, [r7, #20]
   return(result);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e3      	bne.n	8009d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f852 	bl	8009e60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dbc:	e023      	b.n	8009e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <HAL_UART_IRQHandler+0x4ea>
 8009dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 faf1 	bl	800a3be <UART_Transmit_IT>
    return;
 8009ddc:	e014      	b.n	8009e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00e      	beq.n	8009e08 <HAL_UART_IRQHandler+0x514>
 8009dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d008      	beq.n	8009e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fb31 	bl	800a45e <UART_EndTransmit_IT>
    return;
 8009dfc:	e004      	b.n	8009e08 <HAL_UART_IRQHandler+0x514>
    return;
 8009dfe:	bf00      	nop
 8009e00:	e002      	b.n	8009e08 <HAL_UART_IRQHandler+0x514>
      return;
 8009e02:	bf00      	nop
 8009e04:	e000      	b.n	8009e08 <HAL_UART_IRQHandler+0x514>
      return;
 8009e06:	bf00      	nop
  }
}
 8009e08:	37e8      	adds	r7, #232	; 0xe8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop

08009e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b09c      	sub	sp, #112	; 0x70
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e84:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d172      	bne.n	8009f7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e96:	2200      	movs	r2, #0
 8009e98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	330c      	adds	r3, #12
 8009ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	330c      	adds	r3, #12
 8009eb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009eba:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ebc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e5      	bne.n	8009e9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3314      	adds	r3, #20
 8009ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee0:	f023 0301 	bic.w	r3, r3, #1
 8009ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3314      	adds	r3, #20
 8009eec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009eee:	647a      	str	r2, [r7, #68]	; 0x44
 8009ef0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e5      	bne.n	8009ece <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3314      	adds	r3, #20
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	623b      	str	r3, [r7, #32]
   return(result);
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f18:	663b      	str	r3, [r7, #96]	; 0x60
 8009f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3314      	adds	r3, #20
 8009f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f22:	633a      	str	r2, [r7, #48]	; 0x30
 8009f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e5      	bne.n	8009f02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f38:	2220      	movs	r2, #32
 8009f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d119      	bne.n	8009f7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	330c      	adds	r3, #12
 8009f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f023 0310 	bic.w	r3, r3, #16
 8009f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	330c      	adds	r3, #12
 8009f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f66:	61fa      	str	r2, [r7, #28]
 8009f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	69b9      	ldr	r1, [r7, #24]
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	617b      	str	r3, [r7, #20]
   return(result);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e5      	bne.n	8009f46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d106      	bne.n	8009f90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f86:	4619      	mov	r1, r3
 8009f88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f8a:	f7ff ff69 	bl	8009e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f8e:	e002      	b.n	8009f96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009f90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f92:	f7ff ff47 	bl	8009e24 <HAL_UART_RxCpltCallback>
}
 8009f96:	bf00      	nop
 8009f98:	3770      	adds	r7, #112	; 0x70
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d108      	bne.n	8009fc6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f7ff ff4e 	bl	8009e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fc4:	e002      	b.n	8009fcc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7ff ff36 	bl	8009e38 <HAL_UART_RxHalfCpltCallback>
}
 8009fcc:	bf00      	nop
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff0:	2b80      	cmp	r3, #128	; 0x80
 8009ff2:	bf0c      	ite	eq
 8009ff4:	2301      	moveq	r3, #1
 8009ff6:	2300      	movne	r3, #0
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b21      	cmp	r3, #33	; 0x21
 800a006:	d108      	bne.n	800a01a <UART_DMAError+0x46>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2200      	movs	r2, #0
 800a012:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a014:	68b8      	ldr	r0, [r7, #8]
 800a016:	f000 f933 	bl	800a280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a024:	2b40      	cmp	r3, #64	; 0x40
 800a026:	bf0c      	ite	eq
 800a028:	2301      	moveq	r3, #1
 800a02a:	2300      	movne	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b22      	cmp	r3, #34	; 0x22
 800a03a:	d108      	bne.n	800a04e <UART_DMAError+0x7a>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a048:	68b8      	ldr	r0, [r7, #8]
 800a04a:	f000 f941 	bl	800a2d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	f043 0210 	orr.w	r2, r3, #16
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a05a:	68b8      	ldr	r0, [r7, #8]
 800a05c:	f7ff fef6 	bl	8009e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b090      	sub	sp, #64	; 0x40
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a078:	e050      	b.n	800a11c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a080:	d04c      	beq.n	800a11c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a084:	2b00      	cmp	r3, #0
 800a086:	d007      	beq.n	800a098 <UART_WaitOnFlagUntilTimeout+0x30>
 800a088:	f7fb f922 	bl	80052d0 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a094:	429a      	cmp	r2, r3
 800a096:	d241      	bcs.n	800a11c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	330c      	adds	r3, #12
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0b8:	637a      	str	r2, [r7, #52]	; 0x34
 800a0ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e5      	bne.n	800a098 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3314      	adds	r3, #20
 800a0d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	613b      	str	r3, [r7, #16]
   return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f023 0301 	bic.w	r3, r3, #1
 800a0e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3314      	adds	r3, #20
 800a0ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ec:	623a      	str	r2, [r7, #32]
 800a0ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	6a3a      	ldr	r2, [r7, #32]
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e5      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2220      	movs	r2, #32
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e00f      	b.n	800a13c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	4013      	ands	r3, r2
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	429a      	cmp	r2, r3
 800a12a:	bf0c      	ite	eq
 800a12c:	2301      	moveq	r3, #1
 800a12e:	2300      	movne	r3, #0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	461a      	mov	r2, r3
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	429a      	cmp	r2, r3
 800a138:	d09f      	beq.n	800a07a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3740      	adds	r7, #64	; 0x40
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b098      	sub	sp, #96	; 0x60
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	88fa      	ldrh	r2, [r7, #6]
 800a15c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2222      	movs	r2, #34	; 0x22
 800a168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	4a40      	ldr	r2, [pc, #256]	; (800a274 <UART_Start_Receive_DMA+0x130>)
 800a172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	4a3f      	ldr	r2, [pc, #252]	; (800a278 <UART_Start_Receive_DMA+0x134>)
 800a17a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	4a3e      	ldr	r2, [pc, #248]	; (800a27c <UART_Start_Receive_DMA+0x138>)
 800a182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a188:	2200      	movs	r2, #0
 800a18a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a18c:	f107 0308 	add.w	r3, r7, #8
 800a190:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	f7fb fea6 	bl	8005ef4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d019      	beq.n	800a202 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	330c      	adds	r3, #12
 800a1d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	330c      	adds	r3, #12
 800a1ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a1f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a1f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e5      	bne.n	800a1ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3314      	adds	r3, #20
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	f043 0301 	orr.w	r3, r3, #1
 800a218:	657b      	str	r3, [r7, #84]	; 0x54
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3314      	adds	r3, #20
 800a220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a222:	63ba      	str	r2, [r7, #56]	; 0x38
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e5      	bne.n	800a202 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3314      	adds	r3, #20
 800a23c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	617b      	str	r3, [r7, #20]
   return(result);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24c:	653b      	str	r3, [r7, #80]	; 0x50
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3314      	adds	r3, #20
 800a254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a256:	627a      	str	r2, [r7, #36]	; 0x24
 800a258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	6a39      	ldr	r1, [r7, #32]
 800a25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	61fb      	str	r3, [r7, #28]
   return(result);
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3760      	adds	r7, #96	; 0x60
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	08009e79 	.word	0x08009e79
 800a278:	08009f9f 	.word	0x08009f9f
 800a27c:	08009fd5 	.word	0x08009fd5

0800a280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b089      	sub	sp, #36	; 0x24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	330c      	adds	r3, #12
 800a28e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	60bb      	str	r3, [r7, #8]
   return(result);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	330c      	adds	r3, #12
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	61ba      	str	r2, [r7, #24]
 800a2aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6979      	ldr	r1, [r7, #20]
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e5      	bne.n	800a288 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a2c4:	bf00      	nop
 800a2c6:	3724      	adds	r7, #36	; 0x24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b095      	sub	sp, #84	; 0x54
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2f8:	643a      	str	r2, [r7, #64]	; 0x40
 800a2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3314      	adds	r3, #20
 800a312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	f023 0301 	bic.w	r3, r3, #1
 800a322:	64bb      	str	r3, [r7, #72]	; 0x48
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3314      	adds	r3, #20
 800a32a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a32c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a32e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e5      	bne.n	800a30c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a344:	2b01      	cmp	r3, #1
 800a346:	d119      	bne.n	800a37c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	330c      	adds	r3, #12
 800a34e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	e853 3f00 	ldrex	r3, [r3]
 800a356:	60bb      	str	r3, [r7, #8]
   return(result);
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	f023 0310 	bic.w	r3, r3, #16
 800a35e:	647b      	str	r3, [r7, #68]	; 0x44
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	330c      	adds	r3, #12
 800a366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a368:	61ba      	str	r2, [r7, #24]
 800a36a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36c:	6979      	ldr	r1, [r7, #20]
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	e841 2300 	strex	r3, r2, [r1]
 800a374:	613b      	str	r3, [r7, #16]
   return(result);
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e5      	bne.n	800a348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2220      	movs	r2, #32
 800a380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a38a:	bf00      	nop
 800a38c:	3754      	adds	r7, #84	; 0x54
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff fd4b 	bl	8009e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b6:	bf00      	nop
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b085      	sub	sp, #20
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b21      	cmp	r3, #33	; 0x21
 800a3d0:	d13e      	bne.n	800a450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3da:	d114      	bne.n	800a406 <UART_Transmit_IT+0x48>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d110      	bne.n	800a406 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	1c9a      	adds	r2, r3, #2
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	621a      	str	r2, [r3, #32]
 800a404:	e008      	b.n	800a418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	1c59      	adds	r1, r3, #1
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	6211      	str	r1, [r2, #32]
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	b29b      	uxth	r3, r3
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	4619      	mov	r1, r3
 800a426:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10f      	bne.n	800a44c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a43a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68da      	ldr	r2, [r3, #12]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a44a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	e000      	b.n	800a452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a450:	2302      	movs	r3, #2
  }
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68da      	ldr	r2, [r3, #12]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a474:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2220      	movs	r2, #32
 800a47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff fcc6 	bl	8009e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b08c      	sub	sp, #48	; 0x30
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b22      	cmp	r3, #34	; 0x22
 800a4a0:	f040 80ab 	bne.w	800a5fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ac:	d117      	bne.n	800a4de <UART_Receive_IT+0x50>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d113      	bne.n	800a4de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	1c9a      	adds	r2, r3, #2
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	629a      	str	r2, [r3, #40]	; 0x28
 800a4dc:	e026      	b.n	800a52c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f0:	d007      	beq.n	800a502 <UART_Receive_IT+0x74>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <UART_Receive_IT+0x82>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	e008      	b.n	800a522 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a530:	b29b      	uxth	r3, r3
 800a532:	3b01      	subs	r3, #1
 800a534:	b29b      	uxth	r3, r3
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	4619      	mov	r1, r3
 800a53a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d15a      	bne.n	800a5f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 0220 	bic.w	r2, r2, #32
 800a54e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a55e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695a      	ldr	r2, [r3, #20]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f022 0201 	bic.w	r2, r2, #1
 800a56e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2220      	movs	r2, #32
 800a574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d135      	bne.n	800a5ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	330c      	adds	r3, #12
 800a58c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	613b      	str	r3, [r7, #16]
   return(result);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f023 0310 	bic.w	r3, r3, #16
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a6:	623a      	str	r2, [r7, #32]
 800a5a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	69f9      	ldr	r1, [r7, #28]
 800a5ac:	6a3a      	ldr	r2, [r7, #32]
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e5      	bne.n	800a586 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	d10a      	bne.n	800a5de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff fc3b 	bl	8009e60 <HAL_UARTEx_RxEventCallback>
 800a5ea:	e002      	b.n	800a5f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fc19 	bl	8009e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e002      	b.n	800a5fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e000      	b.n	800a5fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a5fa:	2302      	movs	r3, #2
  }
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3730      	adds	r7, #48	; 0x30
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a608:	b0c0      	sub	sp, #256	; 0x100
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a620:	68d9      	ldr	r1, [r3, #12]
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	ea40 0301 	orr.w	r3, r0, r1
 800a62c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a632:	689a      	ldr	r2, [r3, #8]
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	431a      	orrs	r2, r3
 800a644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a65c:	f021 010c 	bic.w	r1, r1, #12
 800a660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a66a:	430b      	orrs	r3, r1
 800a66c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a67e:	6999      	ldr	r1, [r3, #24]
 800a680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	ea40 0301 	orr.w	r3, r0, r1
 800a68a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4b8f      	ldr	r3, [pc, #572]	; (800a8d0 <UART_SetConfig+0x2cc>)
 800a694:	429a      	cmp	r2, r3
 800a696:	d005      	beq.n	800a6a4 <UART_SetConfig+0xa0>
 800a698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b8d      	ldr	r3, [pc, #564]	; (800a8d4 <UART_SetConfig+0x2d0>)
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d104      	bne.n	800a6ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a6a4:	f7fd fa56 	bl	8007b54 <HAL_RCC_GetPCLK2Freq>
 800a6a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a6ac:	e003      	b.n	800a6b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6ae:	f7fd fa3d 	bl	8007b2c <HAL_RCC_GetPCLK1Freq>
 800a6b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6c0:	f040 810c 	bne.w	800a8dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a6d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	462b      	mov	r3, r5
 800a6da:	1891      	adds	r1, r2, r2
 800a6dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800a6de:	415b      	adcs	r3, r3
 800a6e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	eb12 0801 	adds.w	r8, r2, r1
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	eb43 0901 	adc.w	r9, r3, r1
 800a6f2:	f04f 0200 	mov.w	r2, #0
 800a6f6:	f04f 0300 	mov.w	r3, #0
 800a6fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a706:	4690      	mov	r8, r2
 800a708:	4699      	mov	r9, r3
 800a70a:	4623      	mov	r3, r4
 800a70c:	eb18 0303 	adds.w	r3, r8, r3
 800a710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a714:	462b      	mov	r3, r5
 800a716:	eb49 0303 	adc.w	r3, r9, r3
 800a71a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a72a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a72e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a732:	460b      	mov	r3, r1
 800a734:	18db      	adds	r3, r3, r3
 800a736:	653b      	str	r3, [r7, #80]	; 0x50
 800a738:	4613      	mov	r3, r2
 800a73a:	eb42 0303 	adc.w	r3, r2, r3
 800a73e:	657b      	str	r3, [r7, #84]	; 0x54
 800a740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a748:	f7f6 fabe 	bl	8000cc8 <__aeabi_uldivmod>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4b61      	ldr	r3, [pc, #388]	; (800a8d8 <UART_SetConfig+0x2d4>)
 800a752:	fba3 2302 	umull	r2, r3, r3, r2
 800a756:	095b      	lsrs	r3, r3, #5
 800a758:	011c      	lsls	r4, r3, #4
 800a75a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a76c:	4642      	mov	r2, r8
 800a76e:	464b      	mov	r3, r9
 800a770:	1891      	adds	r1, r2, r2
 800a772:	64b9      	str	r1, [r7, #72]	; 0x48
 800a774:	415b      	adcs	r3, r3
 800a776:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a77c:	4641      	mov	r1, r8
 800a77e:	eb12 0a01 	adds.w	sl, r2, r1
 800a782:	4649      	mov	r1, r9
 800a784:	eb43 0b01 	adc.w	fp, r3, r1
 800a788:	f04f 0200 	mov.w	r2, #0
 800a78c:	f04f 0300 	mov.w	r3, #0
 800a790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a79c:	4692      	mov	sl, r2
 800a79e:	469b      	mov	fp, r3
 800a7a0:	4643      	mov	r3, r8
 800a7a2:	eb1a 0303 	adds.w	r3, sl, r3
 800a7a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	eb4b 0303 	adc.w	r3, fp, r3
 800a7b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a7c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	18db      	adds	r3, r3, r3
 800a7cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	eb42 0303 	adc.w	r3, r2, r3
 800a7d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a7d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a7da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a7de:	f7f6 fa73 	bl	8000cc8 <__aeabi_uldivmod>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	4b3b      	ldr	r3, [pc, #236]	; (800a8d8 <UART_SetConfig+0x2d4>)
 800a7ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a7ee:	095b      	lsrs	r3, r3, #5
 800a7f0:	2264      	movs	r2, #100	; 0x64
 800a7f2:	fb02 f303 	mul.w	r3, r2, r3
 800a7f6:	1acb      	subs	r3, r1, r3
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a7fe:	4b36      	ldr	r3, [pc, #216]	; (800a8d8 <UART_SetConfig+0x2d4>)
 800a800:	fba3 2302 	umull	r2, r3, r3, r2
 800a804:	095b      	lsrs	r3, r3, #5
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a80c:	441c      	add	r4, r3
 800a80e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a812:	2200      	movs	r2, #0
 800a814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a81c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a820:	4642      	mov	r2, r8
 800a822:	464b      	mov	r3, r9
 800a824:	1891      	adds	r1, r2, r2
 800a826:	63b9      	str	r1, [r7, #56]	; 0x38
 800a828:	415b      	adcs	r3, r3
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a82c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a830:	4641      	mov	r1, r8
 800a832:	1851      	adds	r1, r2, r1
 800a834:	6339      	str	r1, [r7, #48]	; 0x30
 800a836:	4649      	mov	r1, r9
 800a838:	414b      	adcs	r3, r1
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a848:	4659      	mov	r1, fp
 800a84a:	00cb      	lsls	r3, r1, #3
 800a84c:	4651      	mov	r1, sl
 800a84e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a852:	4651      	mov	r1, sl
 800a854:	00ca      	lsls	r2, r1, #3
 800a856:	4610      	mov	r0, r2
 800a858:	4619      	mov	r1, r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	4642      	mov	r2, r8
 800a85e:	189b      	adds	r3, r3, r2
 800a860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a864:	464b      	mov	r3, r9
 800a866:	460a      	mov	r2, r1
 800a868:	eb42 0303 	adc.w	r3, r2, r3
 800a86c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a87c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a884:	460b      	mov	r3, r1
 800a886:	18db      	adds	r3, r3, r3
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
 800a88a:	4613      	mov	r3, r2
 800a88c:	eb42 0303 	adc.w	r3, r2, r3
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a89a:	f7f6 fa15 	bl	8000cc8 <__aeabi_uldivmod>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <UART_SetConfig+0x2d4>)
 800a8a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8a8:	095b      	lsrs	r3, r3, #5
 800a8aa:	2164      	movs	r1, #100	; 0x64
 800a8ac:	fb01 f303 	mul.w	r3, r1, r3
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	3332      	adds	r3, #50	; 0x32
 800a8b6:	4a08      	ldr	r2, [pc, #32]	; (800a8d8 <UART_SetConfig+0x2d4>)
 800a8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8bc:	095b      	lsrs	r3, r3, #5
 800a8be:	f003 0207 	and.w	r2, r3, #7
 800a8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4422      	add	r2, r4
 800a8ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8cc:	e105      	b.n	800aada <UART_SetConfig+0x4d6>
 800a8ce:	bf00      	nop
 800a8d0:	40011000 	.word	0x40011000
 800a8d4:	40011400 	.word	0x40011400
 800a8d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a8ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	1891      	adds	r1, r2, r2
 800a8f4:	6239      	str	r1, [r7, #32]
 800a8f6:	415b      	adcs	r3, r3
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8fe:	4641      	mov	r1, r8
 800a900:	1854      	adds	r4, r2, r1
 800a902:	4649      	mov	r1, r9
 800a904:	eb43 0501 	adc.w	r5, r3, r1
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	00eb      	lsls	r3, r5, #3
 800a912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a916:	00e2      	lsls	r2, r4, #3
 800a918:	4614      	mov	r4, r2
 800a91a:	461d      	mov	r5, r3
 800a91c:	4643      	mov	r3, r8
 800a91e:	18e3      	adds	r3, r4, r3
 800a920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a924:	464b      	mov	r3, r9
 800a926:	eb45 0303 	adc.w	r3, r5, r3
 800a92a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a92e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a93a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a93e:	f04f 0200 	mov.w	r2, #0
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a94a:	4629      	mov	r1, r5
 800a94c:	008b      	lsls	r3, r1, #2
 800a94e:	4621      	mov	r1, r4
 800a950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a954:	4621      	mov	r1, r4
 800a956:	008a      	lsls	r2, r1, #2
 800a958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a95c:	f7f6 f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4b60      	ldr	r3, [pc, #384]	; (800aae8 <UART_SetConfig+0x4e4>)
 800a966:	fba3 2302 	umull	r2, r3, r3, r2
 800a96a:	095b      	lsrs	r3, r3, #5
 800a96c:	011c      	lsls	r4, r3, #4
 800a96e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a972:	2200      	movs	r2, #0
 800a974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a97c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a980:	4642      	mov	r2, r8
 800a982:	464b      	mov	r3, r9
 800a984:	1891      	adds	r1, r2, r2
 800a986:	61b9      	str	r1, [r7, #24]
 800a988:	415b      	adcs	r3, r3
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a990:	4641      	mov	r1, r8
 800a992:	1851      	adds	r1, r2, r1
 800a994:	6139      	str	r1, [r7, #16]
 800a996:	4649      	mov	r1, r9
 800a998:	414b      	adcs	r3, r1
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	f04f 0200 	mov.w	r2, #0
 800a9a0:	f04f 0300 	mov.w	r3, #0
 800a9a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a9a8:	4659      	mov	r1, fp
 800a9aa:	00cb      	lsls	r3, r1, #3
 800a9ac:	4651      	mov	r1, sl
 800a9ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9b2:	4651      	mov	r1, sl
 800a9b4:	00ca      	lsls	r2, r1, #3
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	4642      	mov	r2, r8
 800a9be:	189b      	adds	r3, r3, r2
 800a9c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9c4:	464b      	mov	r3, r9
 800a9c6:	460a      	mov	r2, r1
 800a9c8:	eb42 0303 	adc.w	r3, r2, r3
 800a9cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	f04f 0300 	mov.w	r3, #0
 800a9e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	008b      	lsls	r3, r1, #2
 800a9ec:	4641      	mov	r1, r8
 800a9ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9f2:	4641      	mov	r1, r8
 800a9f4:	008a      	lsls	r2, r1, #2
 800a9f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a9fa:	f7f6 f965 	bl	8000cc8 <__aeabi_uldivmod>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4b39      	ldr	r3, [pc, #228]	; (800aae8 <UART_SetConfig+0x4e4>)
 800aa04:	fba3 1302 	umull	r1, r3, r3, r2
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	2164      	movs	r1, #100	; 0x64
 800aa0c:	fb01 f303 	mul.w	r3, r1, r3
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	3332      	adds	r3, #50	; 0x32
 800aa16:	4a34      	ldr	r2, [pc, #208]	; (800aae8 <UART_SetConfig+0x4e4>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	095b      	lsrs	r3, r3, #5
 800aa1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa22:	441c      	add	r4, r3
 800aa24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa28:	2200      	movs	r2, #0
 800aa2a:	673b      	str	r3, [r7, #112]	; 0x70
 800aa2c:	677a      	str	r2, [r7, #116]	; 0x74
 800aa2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aa32:	4642      	mov	r2, r8
 800aa34:	464b      	mov	r3, r9
 800aa36:	1891      	adds	r1, r2, r2
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	415b      	adcs	r3, r3
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa42:	4641      	mov	r1, r8
 800aa44:	1851      	adds	r1, r2, r1
 800aa46:	6039      	str	r1, [r7, #0]
 800aa48:	4649      	mov	r1, r9
 800aa4a:	414b      	adcs	r3, r1
 800aa4c:	607b      	str	r3, [r7, #4]
 800aa4e:	f04f 0200 	mov.w	r2, #0
 800aa52:	f04f 0300 	mov.w	r3, #0
 800aa56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa5a:	4659      	mov	r1, fp
 800aa5c:	00cb      	lsls	r3, r1, #3
 800aa5e:	4651      	mov	r1, sl
 800aa60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa64:	4651      	mov	r1, sl
 800aa66:	00ca      	lsls	r2, r1, #3
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	4642      	mov	r2, r8
 800aa70:	189b      	adds	r3, r3, r2
 800aa72:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa74:	464b      	mov	r3, r9
 800aa76:	460a      	mov	r2, r1
 800aa78:	eb42 0303 	adc.w	r3, r2, r3
 800aa7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	663b      	str	r3, [r7, #96]	; 0x60
 800aa88:	667a      	str	r2, [r7, #100]	; 0x64
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	f04f 0300 	mov.w	r3, #0
 800aa92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa96:	4649      	mov	r1, r9
 800aa98:	008b      	lsls	r3, r1, #2
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	008a      	lsls	r2, r1, #2
 800aaa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aaa8:	f7f6 f90e 	bl	8000cc8 <__aeabi_uldivmod>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <UART_SetConfig+0x4e4>)
 800aab2:	fba3 1302 	umull	r1, r3, r3, r2
 800aab6:	095b      	lsrs	r3, r3, #5
 800aab8:	2164      	movs	r1, #100	; 0x64
 800aaba:	fb01 f303 	mul.w	r3, r1, r3
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	011b      	lsls	r3, r3, #4
 800aac2:	3332      	adds	r3, #50	; 0x32
 800aac4:	4a08      	ldr	r2, [pc, #32]	; (800aae8 <UART_SetConfig+0x4e4>)
 800aac6:	fba2 2303 	umull	r2, r3, r2, r3
 800aaca:	095b      	lsrs	r3, r3, #5
 800aacc:	f003 020f 	and.w	r2, r3, #15
 800aad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4422      	add	r2, r4
 800aad8:	609a      	str	r2, [r3, #8]
}
 800aada:	bf00      	nop
 800aadc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aae0:	46bd      	mov	sp, r7
 800aae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aae6:	bf00      	nop
 800aae8:	51eb851f 	.word	0x51eb851f

0800aaec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aaf0:	4904      	ldr	r1, [pc, #16]	; (800ab04 <MX_FATFS_Init+0x18>)
 800aaf2:	4805      	ldr	r0, [pc, #20]	; (800ab08 <MX_FATFS_Init+0x1c>)
 800aaf4:	f003 f902 	bl	800dcfc <FATFS_LinkDriver>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461a      	mov	r2, r3
 800aafc:	4b03      	ldr	r3, [pc, #12]	; (800ab0c <MX_FATFS_Init+0x20>)
 800aafe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab00:	bf00      	nop
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20002c64 	.word	0x20002c64
 800ab08:	20000028 	.word	0x20000028
 800ab0c:	20002c60 	.word	0x20002c60

0800ab10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab10:	b480      	push	{r7}
 800ab12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7f8 f855 	bl	8002bdc <SD_disk_initialize>
 800ab32:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7f8 f933 	bl	8002db4 <SD_disk_status>
 800ab4e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	607a      	str	r2, [r7, #4]
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800ab68:	7bf8      	ldrb	r0, [r7, #15]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	f7f8 f936 	bl	8002de0 <SD_disk_read>
 800ab74:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800ab8e:	7bf8      	ldrb	r0, [r7, #15]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	f7f8 f98d 	bl	8002eb4 <SD_disk_write>
 800ab9a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	603a      	str	r2, [r7, #0]
 800abae:	71fb      	strb	r3, [r7, #7]
 800abb0:	460b      	mov	r3, r1
 800abb2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800abb4:	79b9      	ldrb	r1, [r7, #6]
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f8 f9fe 	bl	8002fbc <SD_disk_ioctl>
 800abc0:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	4a08      	ldr	r2, [pc, #32]	; (800abfc <disk_status+0x30>)
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	79fa      	ldrb	r2, [r7, #7]
 800abe4:	4905      	ldr	r1, [pc, #20]	; (800abfc <disk_status+0x30>)
 800abe6:	440a      	add	r2, r1
 800abe8:	7a12      	ldrb	r2, [r2, #8]
 800abea:	4610      	mov	r0, r2
 800abec:	4798      	blx	r3
 800abee:	4603      	mov	r3, r0
 800abf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20002e90 	.word	0x20002e90

0800ac00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	4a0d      	ldr	r2, [pc, #52]	; (800ac48 <disk_initialize+0x48>)
 800ac12:	5cd3      	ldrb	r3, [r2, r3]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d111      	bne.n	800ac3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ac18:	79fb      	ldrb	r3, [r7, #7]
 800ac1a:	4a0b      	ldr	r2, [pc, #44]	; (800ac48 <disk_initialize+0x48>)
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <disk_initialize+0x48>)
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	79fa      	ldrb	r2, [r7, #7]
 800ac2e:	4906      	ldr	r1, [pc, #24]	; (800ac48 <disk_initialize+0x48>)
 800ac30:	440a      	add	r2, r1
 800ac32:	7a12      	ldrb	r2, [r2, #8]
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20002e90 	.word	0x20002e90

0800ac4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ac4c:	b590      	push	{r4, r7, lr}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
 800ac5e:	4a0a      	ldr	r2, [pc, #40]	; (800ac88 <disk_read+0x3c>)
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	689c      	ldr	r4, [r3, #8]
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	4a07      	ldr	r2, [pc, #28]	; (800ac88 <disk_read+0x3c>)
 800ac6c:	4413      	add	r3, r2
 800ac6e:	7a18      	ldrb	r0, [r3, #8]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	68b9      	ldr	r1, [r7, #8]
 800ac76:	47a0      	blx	r4
 800ac78:	4603      	mov	r3, r0
 800ac7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	371c      	adds	r7, #28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd90      	pop	{r4, r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20002e90 	.word	0x20002e90

0800ac8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b087      	sub	sp, #28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	4a0a      	ldr	r2, [pc, #40]	; (800acc8 <disk_write+0x3c>)
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	68dc      	ldr	r4, [r3, #12]
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	4a07      	ldr	r2, [pc, #28]	; (800acc8 <disk_write+0x3c>)
 800acac:	4413      	add	r3, r2
 800acae:	7a18      	ldrb	r0, [r3, #8]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68b9      	ldr	r1, [r7, #8]
 800acb6:	47a0      	blx	r4
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]
  return res;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	371c      	adds	r7, #28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd90      	pop	{r4, r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20002e90 	.word	0x20002e90

0800accc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	603a      	str	r2, [r7, #0]
 800acd6:	71fb      	strb	r3, [r7, #7]
 800acd8:	460b      	mov	r3, r1
 800acda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	4a09      	ldr	r2, [pc, #36]	; (800ad04 <disk_ioctl+0x38>)
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	79fa      	ldrb	r2, [r7, #7]
 800acea:	4906      	ldr	r1, [pc, #24]	; (800ad04 <disk_ioctl+0x38>)
 800acec:	440a      	add	r2, r1
 800acee:	7a10      	ldrb	r0, [r2, #8]
 800acf0:	79b9      	ldrb	r1, [r7, #6]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
  return res;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20002e90 	.word	0x20002e90

0800ad08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3301      	adds	r3, #1
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ad18:	89fb      	ldrh	r3, [r7, #14]
 800ad1a:	021b      	lsls	r3, r3, #8
 800ad1c:	b21a      	sxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b21b      	sxth	r3, r3
 800ad24:	4313      	orrs	r3, r2
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ad2a:	89fb      	ldrh	r3, [r7, #14]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3303      	adds	r3, #3
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	3202      	adds	r2, #2
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	3201      	adds	r2, #1
 800ad5e:	7812      	ldrb	r2, [r2, #0]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7812      	ldrb	r2, [r2, #0]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ad70:	68fb      	ldr	r3, [r7, #12]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	887a      	ldrh	r2, [r7, #2]
 800ad92:	b2d2      	uxtb	r2, r2
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	887b      	ldrh	r3, [r7, #2]
 800ad98:	0a1b      	lsrs	r3, r3, #8
 800ad9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	607a      	str	r2, [r7, #4]
 800ada2:	887a      	ldrh	r2, [r7, #2]
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	701a      	strb	r2, [r3, #0]
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	b2d2      	uxtb	r2, r2
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	0a1b      	lsrs	r3, r3, #8
 800ade0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	b2d2      	uxtb	r2, r2
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	0a1b      	lsrs	r3, r3, #8
 800adf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	b2d2      	uxtb	r2, r2
 800adfe:	701a      	strb	r2, [r3, #0]
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00d      	beq.n	800ae42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	1c53      	adds	r3, r2, #1
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	1c59      	adds	r1, r3, #1
 800ae30:	6179      	str	r1, [r7, #20]
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f1      	bne.n	800ae26 <mem_cpy+0x1a>
	}
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ae4e:	b480      	push	{r7}
 800ae50:	b087      	sub	sp, #28
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	617a      	str	r2, [r7, #20]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	607b      	str	r3, [r7, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1f3      	bne.n	800ae5e <mem_set+0x10>
}
 800ae76:	bf00      	nop
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ae84:	b480      	push	{r7}
 800ae86:	b089      	sub	sp, #36	; 0x24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	61fb      	str	r3, [r7, #28]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	61fa      	str	r2, [r7, #28]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	61ba      	str	r2, [r7, #24]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	1acb      	subs	r3, r1, r3
 800aeb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	607b      	str	r3, [r7, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <mem_cmp+0x40>
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0eb      	beq.n	800ae9c <mem_cmp+0x18>

	return r;
 800aec4:	697b      	ldr	r3, [r7, #20]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3724      	adds	r7, #36	; 0x24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aedc:	e002      	b.n	800aee4 <chk_chr+0x12>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3301      	adds	r3, #1
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <chk_chr+0x26>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	461a      	mov	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d1f2      	bne.n	800aede <chk_chr+0xc>
	return *str;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	781b      	ldrb	r3, [r3, #0]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e029      	b.n	800af70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800af1c:	4a27      	ldr	r2, [pc, #156]	; (800afbc <chk_lock+0xb4>)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	4413      	add	r3, r2
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d01d      	beq.n	800af66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af2a:	4a24      	ldr	r2, [pc, #144]	; (800afbc <chk_lock+0xb4>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d116      	bne.n	800af6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800af3c:	4a1f      	ldr	r2, [pc, #124]	; (800afbc <chk_lock+0xb4>)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	3304      	adds	r3, #4
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d10c      	bne.n	800af6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af50:	4a1a      	ldr	r2, [pc, #104]	; (800afbc <chk_lock+0xb4>)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	4413      	add	r3, r2
 800af58:	3308      	adds	r3, #8
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800af60:	429a      	cmp	r2, r3
 800af62:	d102      	bne.n	800af6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af64:	e007      	b.n	800af76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800af66:	2301      	movs	r3, #1
 800af68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d9d2      	bls.n	800af1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d109      	bne.n	800af90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d102      	bne.n	800af88 <chk_lock+0x80>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b02      	cmp	r3, #2
 800af86:	d101      	bne.n	800af8c <chk_lock+0x84>
 800af88:	2300      	movs	r3, #0
 800af8a:	e010      	b.n	800afae <chk_lock+0xa6>
 800af8c:	2312      	movs	r3, #18
 800af8e:	e00e      	b.n	800afae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d108      	bne.n	800afa8 <chk_lock+0xa0>
 800af96:	4a09      	ldr	r2, [pc, #36]	; (800afbc <chk_lock+0xb4>)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	4413      	add	r3, r2
 800af9e:	330c      	adds	r3, #12
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa6:	d101      	bne.n	800afac <chk_lock+0xa4>
 800afa8:	2310      	movs	r3, #16
 800afaa:	e000      	b.n	800afae <chk_lock+0xa6>
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20002c70 	.word	0x20002c70

0800afc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	e002      	b.n	800afd2 <enq_lock+0x12>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3301      	adds	r3, #1
 800afd0:	607b      	str	r3, [r7, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d806      	bhi.n	800afe6 <enq_lock+0x26>
 800afd8:	4a09      	ldr	r2, [pc, #36]	; (800b000 <enq_lock+0x40>)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	4413      	add	r3, r2
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1f2      	bne.n	800afcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	bf14      	ite	ne
 800afec:	2301      	movne	r3, #1
 800afee:	2300      	moveq	r3, #0
 800aff0:	b2db      	uxtb	r3, r3
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	20002c70 	.word	0x20002c70

0800b004 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	e01f      	b.n	800b054 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b014:	4a41      	ldr	r2, [pc, #260]	; (800b11c <inc_lock+0x118>)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	4413      	add	r3, r2
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d113      	bne.n	800b04e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b026:	4a3d      	ldr	r2, [pc, #244]	; (800b11c <inc_lock+0x118>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	4413      	add	r3, r2
 800b02e:	3304      	adds	r3, #4
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b036:	429a      	cmp	r2, r3
 800b038:	d109      	bne.n	800b04e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b03a:	4a38      	ldr	r2, [pc, #224]	; (800b11c <inc_lock+0x118>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	4413      	add	r3, r2
 800b042:	3308      	adds	r3, #8
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d006      	beq.n	800b05c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d9dc      	bls.n	800b014 <inc_lock+0x10>
 800b05a:	e000      	b.n	800b05e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b05c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d132      	bne.n	800b0ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	e002      	b.n	800b070 <inc_lock+0x6c>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d806      	bhi.n	800b084 <inc_lock+0x80>
 800b076:	4a29      	ldr	r2, [pc, #164]	; (800b11c <inc_lock+0x118>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	4413      	add	r3, r2
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1f2      	bne.n	800b06a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b02      	cmp	r3, #2
 800b088:	d101      	bne.n	800b08e <inc_lock+0x8a>
 800b08a:	2300      	movs	r3, #0
 800b08c:	e040      	b.n	800b110 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4922      	ldr	r1, [pc, #136]	; (800b11c <inc_lock+0x118>)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	440b      	add	r3, r1
 800b09a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	491e      	ldr	r1, [pc, #120]	; (800b11c <inc_lock+0x118>)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	440b      	add	r3, r1
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	695a      	ldr	r2, [r3, #20]
 800b0b0:	491a      	ldr	r1, [pc, #104]	; (800b11c <inc_lock+0x118>)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	011b      	lsls	r3, r3, #4
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b0bc:	4a17      	ldr	r2, [pc, #92]	; (800b11c <inc_lock+0x118>)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	4413      	add	r3, r2
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <inc_lock+0xe0>
 800b0d0:	4a12      	ldr	r2, [pc, #72]	; (800b11c <inc_lock+0x118>)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	011b      	lsls	r3, r3, #4
 800b0d6:	4413      	add	r3, r2
 800b0d8:	330c      	adds	r3, #12
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <inc_lock+0xe0>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e015      	b.n	800b110 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d108      	bne.n	800b0fc <inc_lock+0xf8>
 800b0ea:	4a0c      	ldr	r2, [pc, #48]	; (800b11c <inc_lock+0x118>)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	4413      	add	r3, r2
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	e001      	b.n	800b100 <inc_lock+0xfc>
 800b0fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b100:	4906      	ldr	r1, [pc, #24]	; (800b11c <inc_lock+0x118>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	440b      	add	r3, r1
 800b108:	330c      	adds	r3, #12
 800b10a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3301      	adds	r3, #1
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	20002c70 	.word	0x20002c70

0800b120 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	607b      	str	r3, [r7, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d825      	bhi.n	800b180 <dec_lock+0x60>
		n = Files[i].ctr;
 800b134:	4a17      	ldr	r2, [pc, #92]	; (800b194 <dec_lock+0x74>)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	4413      	add	r3, r2
 800b13c:	330c      	adds	r3, #12
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b142:	89fb      	ldrh	r3, [r7, #14]
 800b144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b148:	d101      	bne.n	800b14e <dec_lock+0x2e>
 800b14a:	2300      	movs	r3, #0
 800b14c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b14e:	89fb      	ldrh	r3, [r7, #14]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <dec_lock+0x3a>
 800b154:	89fb      	ldrh	r3, [r7, #14]
 800b156:	3b01      	subs	r3, #1
 800b158:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b15a:	4a0e      	ldr	r2, [pc, #56]	; (800b194 <dec_lock+0x74>)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	4413      	add	r3, r2
 800b162:	330c      	adds	r3, #12
 800b164:	89fa      	ldrh	r2, [r7, #14]
 800b166:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b168:	89fb      	ldrh	r3, [r7, #14]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d105      	bne.n	800b17a <dec_lock+0x5a>
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <dec_lock+0x74>)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	4413      	add	r3, r2
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	737b      	strb	r3, [r7, #13]
 800b17e:	e001      	b.n	800b184 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b180:	2302      	movs	r3, #2
 800b182:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b184:	7b7b      	ldrb	r3, [r7, #13]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20002c70 	.word	0x20002c70

0800b198 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	e010      	b.n	800b1c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b1a6:	4a0d      	ldr	r2, [pc, #52]	; (800b1dc <clear_lock+0x44>)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	011b      	lsls	r3, r3, #4
 800b1ac:	4413      	add	r3, r2
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d105      	bne.n	800b1c2 <clear_lock+0x2a>
 800b1b6:	4a09      	ldr	r2, [pc, #36]	; (800b1dc <clear_lock+0x44>)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	4413      	add	r3, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d9eb      	bls.n	800b1a6 <clear_lock+0xe>
	}
}
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	20002c70 	.word	0x20002c70

0800b1e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	78db      	ldrb	r3, [r3, #3]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d034      	beq.n	800b25e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	7858      	ldrb	r0, [r3, #1]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b204:	2301      	movs	r3, #1
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	f7ff fd40 	bl	800ac8c <disk_write>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b212:	2301      	movs	r3, #1
 800b214:	73fb      	strb	r3, [r7, #15]
 800b216:	e022      	b.n	800b25e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	1ad2      	subs	r2, r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d217      	bcs.n	800b25e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	789b      	ldrb	r3, [r3, #2]
 800b232:	613b      	str	r3, [r7, #16]
 800b234:	e010      	b.n	800b258 <sync_window+0x78>
					wsect += fs->fsize;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4413      	add	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	7858      	ldrb	r0, [r3, #1]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b24a:	2301      	movs	r3, #1
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	f7ff fd1d 	bl	800ac8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	3b01      	subs	r3, #1
 800b256:	613b      	str	r3, [r7, #16]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d8eb      	bhi.n	800b236 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d01b      	beq.n	800b2b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7ff ffad 	bl	800b1e0 <sync_window>
 800b286:	4603      	mov	r3, r0
 800b288:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d113      	bne.n	800b2b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	7858      	ldrb	r0, [r3, #1]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b29a:	2301      	movs	r3, #1
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	f7ff fcd5 	bl	800ac4c <disk_read>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d004      	beq.n	800b2b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
	...

0800b2c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff ff87 	bl	800b1e0 <sync_window>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d159      	bne.n	800b390 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b03      	cmp	r3, #3
 800b2e2:	d149      	bne.n	800b378 <sync_fs+0xb4>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	791b      	ldrb	r3, [r3, #4]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d145      	bne.n	800b378 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	899b      	ldrh	r3, [r3, #12]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	f7ff fda8 	bl	800ae4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3338      	adds	r3, #56	; 0x38
 800b302:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b306:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fd37 	bl	800ad7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3338      	adds	r3, #56	; 0x38
 800b314:	4921      	ldr	r1, [pc, #132]	; (800b39c <sync_fs+0xd8>)
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff fd4c 	bl	800adb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3338      	adds	r3, #56	; 0x38
 800b320:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b324:	491e      	ldr	r1, [pc, #120]	; (800b3a0 <sync_fs+0xdc>)
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fd44 	bl	800adb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3338      	adds	r3, #56	; 0x38
 800b330:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f7ff fd3a 	bl	800adb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3338      	adds	r3, #56	; 0x38
 800b344:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	4619      	mov	r1, r3
 800b34e:	4610      	mov	r0, r2
 800b350:	f7ff fd30 	bl	800adb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	7858      	ldrb	r0, [r3, #1]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b36c:	2301      	movs	r3, #1
 800b36e:	f7ff fc8d 	bl	800ac8c <disk_write>
			fs->fsi_flag = 0;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fca3 	bl	800accc <disk_ioctl>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <sync_fs+0xcc>
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	41615252 	.word	0x41615252
 800b3a0:	61417272 	.word	0x61417272

0800b3a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	3b02      	subs	r3, #2
 800b3b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	69db      	ldr	r3, [r3, #28]
 800b3b8:	3b02      	subs	r3, #2
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d301      	bcc.n	800b3c4 <clust2sect+0x20>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	e008      	b.n	800b3d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	895b      	ldrh	r3, [r3, #10]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	fb03 f202 	mul.w	r2, r3, r2
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d4:	4413      	add	r3, r2
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b086      	sub	sp, #24
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d904      	bls.n	800b402 <get_fat+0x20>
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d302      	bcc.n	800b408 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b402:	2301      	movs	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	e0bb      	b.n	800b580 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b408:	f04f 33ff 	mov.w	r3, #4294967295
 800b40c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b03      	cmp	r3, #3
 800b414:	f000 8083 	beq.w	800b51e <get_fat+0x13c>
 800b418:	2b03      	cmp	r3, #3
 800b41a:	f300 80a7 	bgt.w	800b56c <get_fat+0x18a>
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d002      	beq.n	800b428 <get_fat+0x46>
 800b422:	2b02      	cmp	r3, #2
 800b424:	d056      	beq.n	800b4d4 <get_fat+0xf2>
 800b426:	e0a1      	b.n	800b56c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	899b      	ldrh	r3, [r3, #12]
 800b43e:	4619      	mov	r1, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	fbb3 f3f1 	udiv	r3, r3, r1
 800b446:	4413      	add	r3, r2
 800b448:	4619      	mov	r1, r3
 800b44a:	6938      	ldr	r0, [r7, #16]
 800b44c:	f7ff ff0c 	bl	800b268 <move_window>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	f040 808d 	bne.w	800b572 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	60fa      	str	r2, [r7, #12]
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	8992      	ldrh	r2, [r2, #12]
 800b462:	fbb3 f1f2 	udiv	r1, r3, r2
 800b466:	fb01 f202 	mul.w	r2, r1, r2
 800b46a:	1a9b      	subs	r3, r3, r2
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b474:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	899b      	ldrh	r3, [r3, #12]
 800b47e:	4619      	mov	r1, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	fbb3 f3f1 	udiv	r3, r3, r1
 800b486:	4413      	add	r3, r2
 800b488:	4619      	mov	r1, r3
 800b48a:	6938      	ldr	r0, [r7, #16]
 800b48c:	f7ff feec 	bl	800b268 <move_window>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d16f      	bne.n	800b576 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	899b      	ldrh	r3, [r3, #12]
 800b49a:	461a      	mov	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4a2:	fb01 f202 	mul.w	r2, r1, r2
 800b4a6:	1a9b      	subs	r3, r3, r2
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b4b0:	021b      	lsls	r3, r3, #8
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <get_fat+0xe8>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	091b      	lsrs	r3, r3, #4
 800b4c8:	e002      	b.n	800b4d0 <get_fat+0xee>
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4d0:	617b      	str	r3, [r7, #20]
			break;
 800b4d2:	e055      	b.n	800b580 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	899b      	ldrh	r3, [r3, #12]
 800b4dc:	085b      	lsrs	r3, r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4e8:	4413      	add	r3, r2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6938      	ldr	r0, [r7, #16]
 800b4ee:	f7ff febb 	bl	800b268 <move_window>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d140      	bne.n	800b57a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	8992      	ldrh	r2, [r2, #12]
 800b506:	fbb3 f0f2 	udiv	r0, r3, r2
 800b50a:	fb00 f202 	mul.w	r2, r0, r2
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	440b      	add	r3, r1
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff fbf8 	bl	800ad08 <ld_word>
 800b518:	4603      	mov	r3, r0
 800b51a:	617b      	str	r3, [r7, #20]
			break;
 800b51c:	e030      	b.n	800b580 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	899b      	ldrh	r3, [r3, #12]
 800b526:	089b      	lsrs	r3, r3, #2
 800b528:	b29b      	uxth	r3, r3
 800b52a:	4619      	mov	r1, r3
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b532:	4413      	add	r3, r2
 800b534:	4619      	mov	r1, r3
 800b536:	6938      	ldr	r0, [r7, #16]
 800b538:	f7ff fe96 	bl	800b268 <move_window>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d11d      	bne.n	800b57e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	8992      	ldrh	r2, [r2, #12]
 800b550:	fbb3 f0f2 	udiv	r0, r3, r2
 800b554:	fb00 f202 	mul.w	r2, r0, r2
 800b558:	1a9b      	subs	r3, r3, r2
 800b55a:	440b      	add	r3, r1
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff fbeb 	bl	800ad38 <ld_dword>
 800b562:	4603      	mov	r3, r0
 800b564:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b568:	617b      	str	r3, [r7, #20]
			break;
 800b56a:	e009      	b.n	800b580 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b56c:	2301      	movs	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	e006      	b.n	800b580 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b572:	bf00      	nop
 800b574:	e004      	b.n	800b580 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b576:	bf00      	nop
 800b578:	e002      	b.n	800b580 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b57a:	bf00      	nop
 800b57c:	e000      	b.n	800b580 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b57e:	bf00      	nop
		}
	}

	return val;
 800b580:	697b      	ldr	r3, [r7, #20]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b58a:	b590      	push	{r4, r7, lr}
 800b58c:	b089      	sub	sp, #36	; 0x24
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b596:	2302      	movs	r3, #2
 800b598:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	f240 8102 	bls.w	800b7a6 <put_fat+0x21c>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	f080 80fc 	bcs.w	800b7a6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	f000 80b6 	beq.w	800b724 <put_fat+0x19a>
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	f300 80fd 	bgt.w	800b7b8 <put_fat+0x22e>
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d003      	beq.n	800b5ca <put_fat+0x40>
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	f000 8083 	beq.w	800b6ce <put_fat+0x144>
 800b5c8:	e0f6      	b.n	800b7b8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	61bb      	str	r3, [r7, #24]
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	085b      	lsrs	r3, r3, #1
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	899b      	ldrh	r3, [r3, #12]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7ff fe3b 	bl	800b268 <move_window>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5f6:	7ffb      	ldrb	r3, [r7, #31]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f040 80d6 	bne.w	800b7aa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	61ba      	str	r2, [r7, #24]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	8992      	ldrh	r2, [r2, #12]
 800b60e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b612:	fb00 f202 	mul.w	r2, r0, r2
 800b616:	1a9b      	subs	r3, r3, r2
 800b618:	440b      	add	r3, r1
 800b61a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00d      	beq.n	800b642 <put_fat+0xb8>
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	b25b      	sxtb	r3, r3
 800b62c:	f003 030f 	and.w	r3, r3, #15
 800b630:	b25a      	sxtb	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	b2db      	uxtb	r3, r3
 800b636:	011b      	lsls	r3, r3, #4
 800b638:	b25b      	sxtb	r3, r3
 800b63a:	4313      	orrs	r3, r2
 800b63c:	b25b      	sxtb	r3, r3
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	e001      	b.n	800b646 <put_fat+0xbc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2201      	movs	r2, #1
 800b64e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	899b      	ldrh	r3, [r3, #12]
 800b658:	4619      	mov	r1, r3
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b660:	4413      	add	r3, r2
 800b662:	4619      	mov	r1, r3
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff fdff 	bl	800b268 <move_window>
 800b66a:	4603      	mov	r3, r0
 800b66c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b66e:	7ffb      	ldrb	r3, [r7, #31]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 809c 	bne.w	800b7ae <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	899b      	ldrh	r3, [r3, #12]
 800b680:	461a      	mov	r2, r3
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	fbb3 f0f2 	udiv	r0, r3, r2
 800b688:	fb00 f202 	mul.w	r2, r0, r2
 800b68c:	1a9b      	subs	r3, r3, r2
 800b68e:	440b      	add	r3, r1
 800b690:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <put_fat+0x11a>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	091b      	lsrs	r3, r3, #4
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	e00e      	b.n	800b6c2 <put_fat+0x138>
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	b25b      	sxtb	r3, r3
 800b6aa:	f023 030f 	bic.w	r3, r3, #15
 800b6ae:	b25a      	sxtb	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b25b      	sxtb	r3, r3
 800b6b6:	f003 030f 	and.w	r3, r3, #15
 800b6ba:	b25b      	sxtb	r3, r3
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	b25b      	sxtb	r3, r3
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	70da      	strb	r2, [r3, #3]
			break;
 800b6cc:	e074      	b.n	800b7b8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	899b      	ldrh	r3, [r3, #12]
 800b6d6:	085b      	lsrs	r3, r3, #1
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4619      	mov	r1, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f7ff fdbe 	bl	800b268 <move_window>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6f0:	7ffb      	ldrb	r3, [r7, #31]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d15d      	bne.n	800b7b2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	8992      	ldrh	r2, [r2, #12]
 800b704:	fbb3 f0f2 	udiv	r0, r3, r2
 800b708:	fb00 f202 	mul.w	r2, r0, r2
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	440b      	add	r3, r1
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	b292      	uxth	r2, r2
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff fb31 	bl	800ad7e <st_word>
			fs->wflag = 1;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	70da      	strb	r2, [r3, #3]
			break;
 800b722:	e049      	b.n	800b7b8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	899b      	ldrh	r3, [r3, #12]
 800b72c:	089b      	lsrs	r3, r3, #2
 800b72e:	b29b      	uxth	r3, r3
 800b730:	4619      	mov	r1, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	fbb3 f3f1 	udiv	r3, r3, r1
 800b738:	4413      	add	r3, r2
 800b73a:	4619      	mov	r1, r3
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff fd93 	bl	800b268 <move_window>
 800b742:	4603      	mov	r3, r0
 800b744:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b746:	7ffb      	ldrb	r3, [r7, #31]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d134      	bne.n	800b7b6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	8992      	ldrh	r2, [r2, #12]
 800b760:	fbb3 f0f2 	udiv	r0, r3, r2
 800b764:	fb00 f202 	mul.w	r2, r0, r2
 800b768:	1a9b      	subs	r3, r3, r2
 800b76a:	440b      	add	r3, r1
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fae3 	bl	800ad38 <ld_dword>
 800b772:	4603      	mov	r3, r0
 800b774:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b778:	4323      	orrs	r3, r4
 800b77a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	8992      	ldrh	r2, [r2, #12]
 800b78a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b78e:	fb00 f202 	mul.w	r2, r0, r2
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	440b      	add	r3, r1
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fb0b 	bl	800adb4 <st_dword>
			fs->wflag = 1;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	70da      	strb	r2, [r3, #3]
			break;
 800b7a4:	e008      	b.n	800b7b8 <put_fat+0x22e>
		}
	}
 800b7a6:	bf00      	nop
 800b7a8:	e006      	b.n	800b7b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b7aa:	bf00      	nop
 800b7ac:	e004      	b.n	800b7b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b7ae:	bf00      	nop
 800b7b0:	e002      	b.n	800b7b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b7b2:	bf00      	nop
 800b7b4:	e000      	b.n	800b7b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b7b6:	bf00      	nop
	return res;
 800b7b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3724      	adds	r7, #36	; 0x24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd90      	pop	{r4, r7, pc}

0800b7c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b088      	sub	sp, #32
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d904      	bls.n	800b7e8 <remove_chain+0x26>
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d301      	bcc.n	800b7ec <remove_chain+0x2a>
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	e04b      	b.n	800b884 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00c      	beq.n	800b80c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	69b8      	ldr	r0, [r7, #24]
 800b7fa:	f7ff fec6 	bl	800b58a <put_fat>
 800b7fe:	4603      	mov	r3, r0
 800b800:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b802:	7ffb      	ldrb	r3, [r7, #31]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <remove_chain+0x4a>
 800b808:	7ffb      	ldrb	r3, [r7, #31]
 800b80a:	e03b      	b.n	800b884 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b80c:	68b9      	ldr	r1, [r7, #8]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff fde7 	bl	800b3e2 <get_fat>
 800b814:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d031      	beq.n	800b880 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <remove_chain+0x64>
 800b822:	2302      	movs	r3, #2
 800b824:	e02e      	b.n	800b884 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82c:	d101      	bne.n	800b832 <remove_chain+0x70>
 800b82e:	2301      	movs	r3, #1
 800b830:	e028      	b.n	800b884 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b832:	2200      	movs	r2, #0
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	69b8      	ldr	r0, [r7, #24]
 800b838:	f7ff fea7 	bl	800b58a <put_fat>
 800b83c:	4603      	mov	r3, r0
 800b83e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b840:	7ffb      	ldrb	r3, [r7, #31]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d001      	beq.n	800b84a <remove_chain+0x88>
 800b846:	7ffb      	ldrb	r3, [r7, #31]
 800b848:	e01c      	b.n	800b884 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	699a      	ldr	r2, [r3, #24]
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	69db      	ldr	r3, [r3, #28]
 800b852:	3b02      	subs	r3, #2
 800b854:	429a      	cmp	r2, r3
 800b856:	d20b      	bcs.n	800b870 <remove_chain+0xae>
			fs->free_clst++;
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	791b      	ldrb	r3, [r3, #4]
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d3c6      	bcc.n	800b80c <remove_chain+0x4a>
 800b87e:	e000      	b.n	800b882 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b880:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10d      	bne.n	800b8be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d004      	beq.n	800b8b8 <create_chain+0x2c>
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	69ba      	ldr	r2, [r7, #24]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d31b      	bcc.n	800b8f0 <create_chain+0x64>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	61bb      	str	r3, [r7, #24]
 800b8bc:	e018      	b.n	800b8f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff fd8e 	bl	800b3e2 <get_fat>
 800b8c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d801      	bhi.n	800b8d2 <create_chain+0x46>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e070      	b.n	800b9b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d8:	d101      	bne.n	800b8de <create_chain+0x52>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	e06a      	b.n	800b9b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d201      	bcs.n	800b8ec <create_chain+0x60>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	e063      	b.n	800b9b4 <create_chain+0x128>
		scl = clst;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	69fa      	ldr	r2, [r7, #28]
 800b900:	429a      	cmp	r2, r3
 800b902:	d307      	bcc.n	800b914 <create_chain+0x88>
				ncl = 2;
 800b904:	2302      	movs	r3, #2
 800b906:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b908:	69fa      	ldr	r2, [r7, #28]
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d901      	bls.n	800b914 <create_chain+0x88>
 800b910:	2300      	movs	r3, #0
 800b912:	e04f      	b.n	800b9b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b914:	69f9      	ldr	r1, [r7, #28]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff fd63 	bl	800b3e2 <get_fat>
 800b91c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d003      	beq.n	800b932 <create_chain+0xa6>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d101      	bne.n	800b936 <create_chain+0xaa>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	e03e      	b.n	800b9b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d1da      	bne.n	800b8f4 <create_chain+0x68>
 800b93e:	2300      	movs	r3, #0
 800b940:	e038      	b.n	800b9b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b942:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b944:	f04f 32ff 	mov.w	r2, #4294967295
 800b948:	69f9      	ldr	r1, [r7, #28]
 800b94a:	6938      	ldr	r0, [r7, #16]
 800b94c:	f7ff fe1d 	bl	800b58a <put_fat>
 800b950:	4603      	mov	r3, r0
 800b952:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b954:	7dfb      	ldrb	r3, [r7, #23]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d109      	bne.n	800b96e <create_chain+0xe2>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	6938      	ldr	r0, [r7, #16]
 800b966:	f7ff fe10 	bl	800b58a <put_fat>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d116      	bne.n	800b9a2 <create_chain+0x116>
		fs->last_clst = ncl;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	69fa      	ldr	r2, [r7, #28]
 800b978:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	3b02      	subs	r3, #2
 800b984:	429a      	cmp	r2, r3
 800b986:	d804      	bhi.n	800b992 <create_chain+0x106>
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	1e5a      	subs	r2, r3, #1
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	791b      	ldrb	r3, [r3, #4]
 800b996:	f043 0301 	orr.w	r3, r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	711a      	strb	r2, [r3, #4]
 800b9a0:	e007      	b.n	800b9b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d102      	bne.n	800b9ae <create_chain+0x122>
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	e000      	b.n	800b9b0 <create_chain+0x124>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b9b2:	69fb      	ldr	r3, [r7, #28]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	899b      	ldrh	r3, [r3, #12]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	8952      	ldrh	r2, [r2, #10]
 800b9e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	1d1a      	adds	r2, r3, #4
 800b9ee:	613a      	str	r2, [r7, #16]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <clmt_clust+0x42>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e010      	b.n	800ba20 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d307      	bcc.n	800ba16 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	3304      	adds	r3, #4
 800ba12:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba14:	e7e9      	b.n	800b9ea <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ba16:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	4413      	add	r3, r2
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba42:	d204      	bcs.n	800ba4e <dir_sdi+0x22>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	f003 031f 	and.w	r3, r3, #31
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ba4e:	2302      	movs	r3, #2
 800ba50:	e071      	b.n	800bb36 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d106      	bne.n	800ba72 <dir_sdi+0x46>
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d902      	bls.n	800ba72 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba70:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10c      	bne.n	800ba92 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	095b      	lsrs	r3, r3, #5
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	8912      	ldrh	r2, [r2, #8]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d301      	bcc.n	800ba88 <dir_sdi+0x5c>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e056      	b.n	800bb36 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	61da      	str	r2, [r3, #28]
 800ba90:	e02d      	b.n	800baee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	895b      	ldrh	r3, [r3, #10]
 800ba96:	461a      	mov	r2, r3
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	899b      	ldrh	r3, [r3, #12]
 800ba9c:	fb02 f303 	mul.w	r3, r2, r3
 800baa0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800baa2:	e019      	b.n	800bad8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6979      	ldr	r1, [r7, #20]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fc9a 	bl	800b3e2 <get_fat>
 800baae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab6:	d101      	bne.n	800babc <dir_sdi+0x90>
 800bab8:	2301      	movs	r3, #1
 800baba:	e03c      	b.n	800bb36 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d904      	bls.n	800bacc <dir_sdi+0xa0>
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d301      	bcc.n	800bad0 <dir_sdi+0xa4>
 800bacc:	2302      	movs	r3, #2
 800bace:	e032      	b.n	800bb36 <dir_sdi+0x10a>
			ofs -= csz;
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	429a      	cmp	r2, r3
 800bade:	d2e1      	bcs.n	800baa4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bae0:	6979      	ldr	r1, [r7, #20]
 800bae2:	6938      	ldr	r0, [r7, #16]
 800bae4:	f7ff fc5e 	bl	800b3a4 <clust2sect>
 800bae8:	4602      	mov	r2, r0
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	697a      	ldr	r2, [r7, #20]
 800baf2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <dir_sdi+0xd4>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e01a      	b.n	800bb36 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	69da      	ldr	r2, [r3, #28]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	899b      	ldrh	r3, [r3, #12]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb10:	441a      	add	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	899b      	ldrh	r3, [r3, #12]
 800bb20:	461a      	mov	r2, r3
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb28:	fb00 f202 	mul.w	r2, r0, r2
 800bb2c:	1a9b      	subs	r3, r3, r2
 800bb2e:	18ca      	adds	r2, r1, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b086      	sub	sp, #24
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	3320      	adds	r3, #32
 800bb54:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <dir_next+0x28>
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb64:	d301      	bcc.n	800bb6a <dir_next+0x2c>
 800bb66:	2304      	movs	r3, #4
 800bb68:	e0bb      	b.n	800bce2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	899b      	ldrh	r3, [r3, #12]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb76:	fb01 f202 	mul.w	r2, r1, r2
 800bb7a:	1a9b      	subs	r3, r3, r2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f040 809d 	bne.w	800bcbc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10b      	bne.n	800bbac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	8912      	ldrh	r2, [r2, #8]
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	f0c0 808d 	bcc.w	800bcbc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	61da      	str	r2, [r3, #28]
 800bba8:	2304      	movs	r3, #4
 800bbaa:	e09a      	b.n	800bce2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	899b      	ldrh	r3, [r3, #12]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	8952      	ldrh	r2, [r2, #10]
 800bbbc:	3a01      	subs	r2, #1
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d17b      	bne.n	800bcbc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7ff fc08 	bl	800b3e2 <get_fat>
 800bbd2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d801      	bhi.n	800bbde <dir_next+0xa0>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	e081      	b.n	800bce2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe4:	d101      	bne.n	800bbea <dir_next+0xac>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e07b      	b.n	800bce2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d359      	bcc.n	800bca8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d104      	bne.n	800bc04 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	61da      	str	r2, [r3, #28]
 800bc00:	2304      	movs	r3, #4
 800bc02:	e06e      	b.n	800bce2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	f7ff fe3d 	bl	800b88c <create_chain>
 800bc12:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <dir_next+0xe0>
 800bc1a:	2307      	movs	r3, #7
 800bc1c:	e061      	b.n	800bce2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <dir_next+0xea>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e05c      	b.n	800bce2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d101      	bne.n	800bc34 <dir_next+0xf6>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e056      	b.n	800bce2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fad3 	bl	800b1e0 <sync_window>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <dir_next+0x106>
 800bc40:	2301      	movs	r3, #1
 800bc42:	e04e      	b.n	800bce2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	899b      	ldrh	r3, [r3, #12]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	2100      	movs	r1, #0
 800bc52:	f7ff f8fc 	bl	800ae4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc56:	2300      	movs	r3, #0
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	6979      	ldr	r1, [r7, #20]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff fba1 	bl	800b3a4 <clust2sect>
 800bc62:	4602      	mov	r2, r0
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	635a      	str	r2, [r3, #52]	; 0x34
 800bc68:	e012      	b.n	800bc90 <dir_next+0x152>
						fs->wflag = 1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f7ff fab5 	bl	800b1e0 <sync_window>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <dir_next+0x142>
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e030      	b.n	800bce2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	3301      	adds	r3, #1
 800bc84:	613b      	str	r3, [r7, #16]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	635a      	str	r2, [r3, #52]	; 0x34
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	895b      	ldrh	r3, [r3, #10]
 800bc94:	461a      	mov	r2, r3
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d3e6      	bcc.n	800bc6a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bcae:	6979      	ldr	r1, [r7, #20]
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f7ff fb77 	bl	800b3a4 <clust2sect>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	899b      	ldrh	r3, [r3, #12]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcd4:	fb00 f202 	mul.w	r2, r0, r2
 800bcd8:	1a9b      	subs	r3, r3, r2
 800bcda:	18ca      	adds	r2, r1, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b086      	sub	sp, #24
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff fe95 	bl	800ba2c <dir_sdi>
 800bd02:	4603      	mov	r3, r0
 800bd04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d12b      	bne.n	800bd64 <dir_alloc+0x7a>
		n = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	4619      	mov	r1, r3
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff faa6 	bl	800b268 <move_window>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d11d      	bne.n	800bd62 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2be5      	cmp	r3, #229	; 0xe5
 800bd2e:	d004      	beq.n	800bd3a <dir_alloc+0x50>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d107      	bne.n	800bd4a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	613b      	str	r3, [r7, #16]
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d102      	bne.n	800bd4e <dir_alloc+0x64>
 800bd48:	e00c      	b.n	800bd64 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bd4e:	2101      	movs	r1, #1
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff fef4 	bl	800bb3e <dir_next>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0d7      	beq.n	800bd10 <dir_alloc+0x26>
 800bd60:	e000      	b.n	800bd64 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bd62:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
 800bd66:	2b04      	cmp	r3, #4
 800bd68:	d101      	bne.n	800bd6e <dir_alloc+0x84>
 800bd6a:	2307      	movs	r3, #7
 800bd6c:	75fb      	strb	r3, [r7, #23]
	return res;
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	331a      	adds	r3, #26
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe ffbe 	bl	800ad08 <ld_word>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d109      	bne.n	800bdac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fe ffb3 	bl	800ad08 <ld_word>
 800bda2:	4603      	mov	r3, r0
 800bda4:	041b      	lsls	r3, r3, #16
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bdac:	68fb      	ldr	r3, [r7, #12]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b084      	sub	sp, #16
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	331a      	adds	r3, #26
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	b292      	uxth	r2, r2
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fe ffd6 	bl	800ad7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d109      	bne.n	800bdee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f103 0214 	add.w	r2, r3, #20
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	0c1b      	lsrs	r3, r3, #16
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	f7fe ffc8 	bl	800ad7e <st_word>
	}
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bdf8:	b590      	push	{r4, r7, lr}
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	331a      	adds	r3, #26
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe ff7e 	bl	800ad08 <ld_word>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <cmp_lfn+0x1e>
 800be12:	2300      	movs	r3, #0
 800be14:	e059      	b.n	800beca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be1e:	1e5a      	subs	r2, r3, #1
 800be20:	4613      	mov	r3, r2
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be2c:	2301      	movs	r3, #1
 800be2e:	81fb      	strh	r3, [r7, #14]
 800be30:	2300      	movs	r3, #0
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	e033      	b.n	800be9e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800be36:	4a27      	ldr	r2, [pc, #156]	; (800bed4 <cmp_lfn+0xdc>)
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	4413      	add	r3, r2
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	4413      	add	r3, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe ff5f 	bl	800ad08 <ld_word>
 800be4a:	4603      	mov	r3, r0
 800be4c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800be4e:	89fb      	ldrh	r3, [r7, #14]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01a      	beq.n	800be8a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2bfe      	cmp	r3, #254	; 0xfe
 800be58:	d812      	bhi.n	800be80 <cmp_lfn+0x88>
 800be5a:	89bb      	ldrh	r3, [r7, #12]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f001 ff99 	bl	800dd94 <ff_wtoupper>
 800be62:	4603      	mov	r3, r0
 800be64:	461c      	mov	r4, r3
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	617a      	str	r2, [r7, #20]
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	4413      	add	r3, r2
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	4618      	mov	r0, r3
 800be76:	f001 ff8d 	bl	800dd94 <ff_wtoupper>
 800be7a:	4603      	mov	r3, r0
 800be7c:	429c      	cmp	r4, r3
 800be7e:	d001      	beq.n	800be84 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800be80:	2300      	movs	r3, #0
 800be82:	e022      	b.n	800beca <cmp_lfn+0xd2>
			}
			wc = uc;
 800be84:	89bb      	ldrh	r3, [r7, #12]
 800be86:	81fb      	strh	r3, [r7, #14]
 800be88:	e006      	b.n	800be98 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800be8a:	89bb      	ldrh	r3, [r7, #12]
 800be8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be90:	4293      	cmp	r3, r2
 800be92:	d001      	beq.n	800be98 <cmp_lfn+0xa0>
 800be94:	2300      	movs	r3, #0
 800be96:	e018      	b.n	800beca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	3301      	adds	r3, #1
 800be9c:	613b      	str	r3, [r7, #16]
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b0c      	cmp	r3, #12
 800bea2:	d9c8      	bls.n	800be36 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <cmp_lfn+0xd0>
 800beb0:	89fb      	ldrh	r3, [r7, #14]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d008      	beq.n	800bec8 <cmp_lfn+0xd0>
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	4413      	add	r3, r2
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <cmp_lfn+0xd0>
 800bec4:	2300      	movs	r3, #0
 800bec6:	e000      	b.n	800beca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bec8:	2301      	movs	r3, #1
}
 800beca:	4618      	mov	r0, r3
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd90      	pop	{r4, r7, pc}
 800bed2:	bf00      	nop
 800bed4:	080116e0 	.word	0x080116e0

0800bed8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	4611      	mov	r1, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	460b      	mov	r3, r1
 800bee8:	71fb      	strb	r3, [r7, #7]
 800beea:	4613      	mov	r3, r2
 800beec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	330d      	adds	r3, #13
 800bef2:	79ba      	ldrb	r2, [r7, #6]
 800bef4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	330b      	adds	r3, #11
 800befa:	220f      	movs	r2, #15
 800befc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	330c      	adds	r3, #12
 800bf02:	2200      	movs	r2, #0
 800bf04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	331a      	adds	r3, #26
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fe ff36 	bl	800ad7e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	1e5a      	subs	r2, r3, #1
 800bf16:	4613      	mov	r3, r2
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	82fb      	strh	r3, [r7, #22]
 800bf26:	2300      	movs	r3, #0
 800bf28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bf2a:	8afb      	ldrh	r3, [r7, #22]
 800bf2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d007      	beq.n	800bf44 <put_lfn+0x6c>
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	61fa      	str	r2, [r7, #28]
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4413      	add	r3, r2
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bf44:	4a17      	ldr	r2, [pc, #92]	; (800bfa4 <put_lfn+0xcc>)
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	4413      	add	r3, r2
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	4413      	add	r3, r2
 800bf52:	8afa      	ldrh	r2, [r7, #22]
 800bf54:	4611      	mov	r1, r2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe ff11 	bl	800ad7e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bf5c:	8afb      	ldrh	r3, [r7, #22]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d102      	bne.n	800bf68 <put_lfn+0x90>
 800bf62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b0c      	cmp	r3, #12
 800bf72:	d9da      	bls.n	800bf2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bf74:	8afb      	ldrh	r3, [r7, #22]
 800bf76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d006      	beq.n	800bf8c <put_lfn+0xb4>
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4413      	add	r3, r2
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <put_lfn+0xbc>
 800bf8c:	79fb      	ldrb	r3, [r7, #7]
 800bf8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	79fa      	ldrb	r2, [r7, #7]
 800bf98:	701a      	strb	r2, [r3, #0]
}
 800bf9a:	bf00      	nop
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	080116e0 	.word	0x080116e0

0800bfa8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08c      	sub	sp, #48	; 0x30
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bfb6:	220b      	movs	r2, #11
 800bfb8:	68b9      	ldr	r1, [r7, #8]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7fe ff26 	bl	800ae0c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	d92b      	bls.n	800c01e <gen_numname+0x76>
		sr = seq;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bfca:	e022      	b.n	800c012 <gen_numname+0x6a>
			wc = *lfn++;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	1c9a      	adds	r2, r3, #2
 800bfd0:	607a      	str	r2, [r7, #4]
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfda:	e017      	b.n	800c00c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	005a      	lsls	r2, r3, #1
 800bfe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	4413      	add	r3, r2
 800bfe8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bfea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfec:	085b      	lsrs	r3, r3, #1
 800bfee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d005      	beq.n	800c006 <gen_numname+0x5e>
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c000:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c004:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	3301      	adds	r3, #1
 800c00a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	2b0f      	cmp	r3, #15
 800c010:	d9e4      	bls.n	800bfdc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	881b      	ldrh	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1d8      	bne.n	800bfcc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c01e:	2307      	movs	r3, #7
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	f003 030f 	and.w	r3, r3, #15
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	3330      	adds	r3, #48	; 0x30
 800c02e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c036:	2b39      	cmp	r3, #57	; 0x39
 800c038:	d904      	bls.n	800c044 <gen_numname+0x9c>
 800c03a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c03e:	3307      	adds	r3, #7
 800c040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	1e5a      	subs	r2, r3, #1
 800c048:	62ba      	str	r2, [r7, #40]	; 0x28
 800c04a:	3330      	adds	r3, #48	; 0x30
 800c04c:	443b      	add	r3, r7
 800c04e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c052:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	091b      	lsrs	r3, r3, #4
 800c05a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1df      	bne.n	800c022 <gen_numname+0x7a>
	ns[i] = '~';
 800c062:	f107 0214 	add.w	r2, r7, #20
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	4413      	add	r3, r2
 800c06a:	227e      	movs	r2, #126	; 0x7e
 800c06c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c06e:	2300      	movs	r3, #0
 800c070:	627b      	str	r3, [r7, #36]	; 0x24
 800c072:	e002      	b.n	800c07a <gen_numname+0xd2>
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	3301      	adds	r3, #1
 800c078:	627b      	str	r3, [r7, #36]	; 0x24
 800c07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	429a      	cmp	r2, r3
 800c080:	d205      	bcs.n	800c08e <gen_numname+0xe6>
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	4413      	add	r3, r2
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d1f2      	bne.n	800c074 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	2b07      	cmp	r3, #7
 800c092:	d807      	bhi.n	800c0a4 <gen_numname+0xfc>
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	62ba      	str	r2, [r7, #40]	; 0x28
 800c09a:	3330      	adds	r3, #48	; 0x30
 800c09c:	443b      	add	r3, r7
 800c09e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c0a2:	e000      	b.n	800c0a6 <gen_numname+0xfe>
 800c0a4:	2120      	movs	r1, #32
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	627a      	str	r2, [r7, #36]	; 0x24
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	460a      	mov	r2, r1
 800c0b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	2b07      	cmp	r3, #7
 800c0b8:	d9e9      	bls.n	800c08e <gen_numname+0xe6>
}
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	3730      	adds	r7, #48	; 0x30
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c0d0:	230b      	movs	r3, #11
 800c0d2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	0852      	lsrs	r2, r2, #1
 800c0da:	01db      	lsls	r3, r3, #7
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	1c59      	adds	r1, r3, #1
 800c0e4:	6079      	str	r1, [r7, #4]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	60bb      	str	r3, [r7, #8]
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1ed      	bne.n	800c0d4 <sum_sfn+0x10>
	return sum;
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b086      	sub	sp, #24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c114:	2100      	movs	r1, #0
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fc88 	bl	800ba2c <dir_sdi>
 800c11c:	4603      	mov	r3, r0
 800c11e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <dir_find+0x24>
 800c126:	7dfb      	ldrb	r3, [r7, #23]
 800c128:	e0a9      	b.n	800c27e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c12a:	23ff      	movs	r3, #255	; 0xff
 800c12c:	753b      	strb	r3, [r7, #20]
 800c12e:	7d3b      	ldrb	r3, [r7, #20]
 800c130:	757b      	strb	r3, [r7, #21]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f04f 32ff 	mov.w	r2, #4294967295
 800c138:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	4619      	mov	r1, r3
 800c140:	6938      	ldr	r0, [r7, #16]
 800c142:	f7ff f891 	bl	800b268 <move_window>
 800c146:	4603      	mov	r3, r0
 800c148:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c14a:	7dfb      	ldrb	r3, [r7, #23]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 8090 	bne.w	800c272 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c15a:	7dbb      	ldrb	r3, [r7, #22]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d102      	bne.n	800c166 <dir_find+0x60>
 800c160:	2304      	movs	r3, #4
 800c162:	75fb      	strb	r3, [r7, #23]
 800c164:	e08a      	b.n	800c27c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	330b      	adds	r3, #11
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c172:	73fb      	strb	r3, [r7, #15]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	7bfa      	ldrb	r2, [r7, #15]
 800c178:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c17a:	7dbb      	ldrb	r3, [r7, #22]
 800c17c:	2be5      	cmp	r3, #229	; 0xe5
 800c17e:	d007      	beq.n	800c190 <dir_find+0x8a>
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	f003 0308 	and.w	r3, r3, #8
 800c186:	2b00      	cmp	r3, #0
 800c188:	d009      	beq.n	800c19e <dir_find+0x98>
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
 800c18c:	2b0f      	cmp	r3, #15
 800c18e:	d006      	beq.n	800c19e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c190:	23ff      	movs	r3, #255	; 0xff
 800c192:	757b      	strb	r3, [r7, #21]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f04f 32ff 	mov.w	r2, #4294967295
 800c19a:	631a      	str	r2, [r3, #48]	; 0x30
 800c19c:	e05e      	b.n	800c25c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	2b0f      	cmp	r3, #15
 800c1a2:	d136      	bne.n	800c212 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d154      	bne.n	800c25c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c1b2:	7dbb      	ldrb	r3, [r7, #22]
 800c1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00d      	beq.n	800c1d8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	7b5b      	ldrb	r3, [r3, #13]
 800c1c2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c1c4:	7dbb      	ldrb	r3, [r7, #22]
 800c1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ca:	75bb      	strb	r3, [r7, #22]
 800c1cc:	7dbb      	ldrb	r3, [r7, #22]
 800c1ce:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	695a      	ldr	r2, [r3, #20]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c1d8:	7dba      	ldrb	r2, [r7, #22]
 800c1da:	7d7b      	ldrb	r3, [r7, #21]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d115      	bne.n	800c20c <dir_find+0x106>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	330d      	adds	r3, #13
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	7d3a      	ldrb	r2, [r7, #20]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d10e      	bne.n	800c20c <dir_find+0x106>
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	691a      	ldr	r2, [r3, #16]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f7ff fdfd 	bl	800bdf8 <cmp_lfn>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <dir_find+0x106>
 800c204:	7d7b      	ldrb	r3, [r7, #21]
 800c206:	3b01      	subs	r3, #1
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	e000      	b.n	800c20e <dir_find+0x108>
 800c20c:	23ff      	movs	r3, #255	; 0xff
 800c20e:	757b      	strb	r3, [r7, #21]
 800c210:	e024      	b.n	800c25c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c212:	7d7b      	ldrb	r3, [r7, #21]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d109      	bne.n	800c22c <dir_find+0x126>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff ff51 	bl	800c0c4 <sum_sfn>
 800c222:	4603      	mov	r3, r0
 800c224:	461a      	mov	r2, r3
 800c226:	7d3b      	ldrb	r3, [r7, #20]
 800c228:	4293      	cmp	r3, r2
 800c22a:	d024      	beq.n	800c276 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10a      	bne.n	800c250 <dir_find+0x14a>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a18      	ldr	r0, [r3, #32]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3324      	adds	r3, #36	; 0x24
 800c242:	220b      	movs	r2, #11
 800c244:	4619      	mov	r1, r3
 800c246:	f7fe fe1d 	bl	800ae84 <mem_cmp>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d014      	beq.n	800c27a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c250:	23ff      	movs	r3, #255	; 0xff
 800c252:	757b      	strb	r3, [r7, #21]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c25c:	2100      	movs	r1, #0
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff fc6d 	bl	800bb3e <dir_next>
 800c264:	4603      	mov	r3, r0
 800c266:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c268:	7dfb      	ldrb	r3, [r7, #23]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f43f af65 	beq.w	800c13a <dir_find+0x34>
 800c270:	e004      	b.n	800c27c <dir_find+0x176>
		if (res != FR_OK) break;
 800c272:	bf00      	nop
 800c274:	e002      	b.n	800c27c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c276:	bf00      	nop
 800c278:	e000      	b.n	800c27c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c27a:	bf00      	nop

	return res;
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
	...

0800c288 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08c      	sub	sp, #48	; 0x30
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c29c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <dir_register+0x20>
 800c2a4:	2306      	movs	r3, #6
 800c2a6:	e0e0      	b.n	800c46a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ac:	e002      	b.n	800c2b4 <dir_register+0x2c>
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	691a      	ldr	r2, [r3, #16]
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	4413      	add	r3, r2
 800c2be:	881b      	ldrh	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1f4      	bne.n	800c2ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c2ca:	f107 030c 	add.w	r3, r7, #12
 800c2ce:	220c      	movs	r2, #12
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fe fd9b 	bl	800ae0c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d032      	beq.n	800c346 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2240      	movs	r2, #64	; 0x40
 800c2e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ec:	e016      	b.n	800c31c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	691a      	ldr	r2, [r3, #16]
 800c2f8:	f107 010c 	add.w	r1, r7, #12
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	f7ff fe53 	bl	800bfa8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff feff 	bl	800c106 <dir_find>
 800c308:	4603      	mov	r3, r0
 800c30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	3301      	adds	r3, #1
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	2b63      	cmp	r3, #99	; 0x63
 800c320:	d9e5      	bls.n	800c2ee <dir_register+0x66>
 800c322:	e000      	b.n	800c326 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c324:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	2b64      	cmp	r3, #100	; 0x64
 800c32a:	d101      	bne.n	800c330 <dir_register+0xa8>
 800c32c:	2307      	movs	r3, #7
 800c32e:	e09c      	b.n	800c46a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c334:	2b04      	cmp	r3, #4
 800c336:	d002      	beq.n	800c33e <dir_register+0xb6>
 800c338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c33c:	e095      	b.n	800c46a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c33e:	7dfa      	ldrb	r2, [r7, #23]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	f003 0302 	and.w	r3, r3, #2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d007      	beq.n	800c360 <dir_register+0xd8>
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	330c      	adds	r3, #12
 800c354:	4a47      	ldr	r2, [pc, #284]	; (800c474 <dir_register+0x1ec>)
 800c356:	fba2 2303 	umull	r2, r3, r2, r3
 800c35a:	089b      	lsrs	r3, r3, #2
 800c35c:	3301      	adds	r3, #1
 800c35e:	e000      	b.n	800c362 <dir_register+0xda>
 800c360:	2301      	movs	r3, #1
 800c362:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c364:	6a39      	ldr	r1, [r7, #32]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fcbf 	bl	800bcea <dir_alloc>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c376:	2b00      	cmp	r3, #0
 800c378:	d148      	bne.n	800c40c <dir_register+0x184>
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	623b      	str	r3, [r7, #32]
 800c380:	6a3b      	ldr	r3, [r7, #32]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d042      	beq.n	800c40c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	695a      	ldr	r2, [r3, #20]
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	015b      	lsls	r3, r3, #5
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	4619      	mov	r1, r3
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff fb4a 	bl	800ba2c <dir_sdi>
 800c398:	4603      	mov	r3, r0
 800c39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c39e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d132      	bne.n	800c40c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3324      	adds	r3, #36	; 0x24
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fe8a 	bl	800c0c4 <sum_sfn>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	69db      	ldr	r3, [r3, #28]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	69f8      	ldr	r0, [r7, #28]
 800c3bc:	f7fe ff54 	bl	800b268 <move_window>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d11d      	bne.n	800c40a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	6918      	ldr	r0, [r3, #16]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a19      	ldr	r1, [r3, #32]
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	7efb      	ldrb	r3, [r7, #27]
 800c3dc:	f7ff fd7c 	bl	800bed8 <put_lfn>
				fs->wflag = 1;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff fba8 	bl	800bb3e <dir_next>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c3f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d107      	bne.n	800c40c <dir_register+0x184>
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	623b      	str	r3, [r7, #32]
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1d5      	bne.n	800c3b4 <dir_register+0x12c>
 800c408:	e000      	b.n	800c40c <dir_register+0x184>
				if (res != FR_OK) break;
 800c40a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c40c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c410:	2b00      	cmp	r3, #0
 800c412:	d128      	bne.n	800c466 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	4619      	mov	r1, r3
 800c41a:	69f8      	ldr	r0, [r7, #28]
 800c41c:	f7fe ff24 	bl	800b268 <move_window>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d11b      	bne.n	800c466 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	2220      	movs	r2, #32
 800c434:	2100      	movs	r1, #0
 800c436:	4618      	mov	r0, r3
 800c438:	f7fe fd09 	bl	800ae4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a18      	ldr	r0, [r3, #32]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3324      	adds	r3, #36	; 0x24
 800c444:	220b      	movs	r2, #11
 800c446:	4619      	mov	r1, r3
 800c448:	f7fe fce0 	bl	800ae0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	330c      	adds	r3, #12
 800c458:	f002 0218 	and.w	r2, r2, #24
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	2201      	movs	r2, #1
 800c464:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3730      	adds	r7, #48	; 0x30
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	4ec4ec4f 	.word	0x4ec4ec4f

0800c478 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	2300      	movs	r3, #0
 800c492:	617b      	str	r3, [r7, #20]
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	61ba      	str	r2, [r7, #24]
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c4a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a8:	2b1f      	cmp	r3, #31
 800c4aa:	d940      	bls.n	800c52e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c4ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ae:	2b2f      	cmp	r3, #47	; 0x2f
 800c4b0:	d006      	beq.n	800c4c0 <create_name+0x48>
 800c4b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b4:	2b5c      	cmp	r3, #92	; 0x5c
 800c4b6:	d110      	bne.n	800c4da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c4b8:	e002      	b.n	800c4c0 <create_name+0x48>
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	61bb      	str	r3, [r7, #24]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b2f      	cmp	r3, #47	; 0x2f
 800c4ca:	d0f6      	beq.n	800c4ba <create_name+0x42>
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b5c      	cmp	r3, #92	; 0x5c
 800c4d6:	d0f0      	beq.n	800c4ba <create_name+0x42>
			break;
 800c4d8:	e02a      	b.n	800c530 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2bfe      	cmp	r3, #254	; 0xfe
 800c4de:	d901      	bls.n	800c4e4 <create_name+0x6c>
 800c4e0:	2306      	movs	r3, #6
 800c4e2:	e17d      	b.n	800c7e0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c4e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f001 fc14 	bl	800dd1c <ff_convert>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <create_name+0x8a>
 800c4fe:	2306      	movs	r3, #6
 800c500:	e16e      	b.n	800c7e0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c504:	2b7f      	cmp	r3, #127	; 0x7f
 800c506:	d809      	bhi.n	800c51c <create_name+0xa4>
 800c508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c50a:	4619      	mov	r1, r3
 800c50c:	488d      	ldr	r0, [pc, #564]	; (800c744 <create_name+0x2cc>)
 800c50e:	f7fe fce0 	bl	800aed2 <chk_chr>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <create_name+0xa4>
 800c518:	2306      	movs	r3, #6
 800c51a:	e161      	b.n	800c7e0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	617a      	str	r2, [r7, #20]
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	4413      	add	r3, r2
 800c528:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c52a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c52c:	e7b4      	b.n	800c498 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c52e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	441a      	add	r2, r3
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c53a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c53c:	2b1f      	cmp	r3, #31
 800c53e:	d801      	bhi.n	800c544 <create_name+0xcc>
 800c540:	2304      	movs	r3, #4
 800c542:	e000      	b.n	800c546 <create_name+0xce>
 800c544:	2300      	movs	r3, #0
 800c546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c54a:	e011      	b.n	800c570 <create_name+0xf8>
		w = lfn[di - 1];
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c552:	3b01      	subs	r3, #1
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c55e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c560:	2b20      	cmp	r3, #32
 800c562:	d002      	beq.n	800c56a <create_name+0xf2>
 800c564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c566:	2b2e      	cmp	r3, #46	; 0x2e
 800c568:	d106      	bne.n	800c578 <create_name+0x100>
		di--;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1ea      	bne.n	800c54c <create_name+0xd4>
 800c576:	e000      	b.n	800c57a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c578:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	4413      	add	r3, r2
 800c582:	2200      	movs	r2, #0
 800c584:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <create_name+0x118>
 800c58c:	2306      	movs	r3, #6
 800c58e:	e127      	b.n	800c7e0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3324      	adds	r3, #36	; 0x24
 800c594:	220b      	movs	r2, #11
 800c596:	2120      	movs	r1, #32
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fc58 	bl	800ae4e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	e002      	b.n	800c5aa <create_name+0x132>
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	61bb      	str	r3, [r7, #24]
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	2b20      	cmp	r3, #32
 800c5b6:	d0f5      	beq.n	800c5a4 <create_name+0x12c>
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5c4:	d0ee      	beq.n	800c5a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d009      	beq.n	800c5e0 <create_name+0x168>
 800c5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d0:	f043 0303 	orr.w	r3, r3, #3
 800c5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c5d8:	e002      	b.n	800c5e0 <create_name+0x168>
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d009      	beq.n	800c5fa <create_name+0x182>
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c5f8:	d1ef      	bne.n	800c5da <create_name+0x162>

	i = b = 0; ni = 8;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c600:	2300      	movs	r3, #0
 800c602:	623b      	str	r3, [r7, #32]
 800c604:	2308      	movs	r3, #8
 800c606:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	61ba      	str	r2, [r7, #24]
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	4413      	add	r3, r2
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 8090 	beq.w	800c740 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c622:	2b20      	cmp	r3, #32
 800c624:	d006      	beq.n	800c634 <create_name+0x1bc>
 800c626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c628:	2b2e      	cmp	r3, #46	; 0x2e
 800c62a:	d10a      	bne.n	800c642 <create_name+0x1ca>
 800c62c:	69ba      	ldr	r2, [r7, #24]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	429a      	cmp	r2, r3
 800c632:	d006      	beq.n	800c642 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c638:	f043 0303 	orr.w	r3, r3, #3
 800c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c640:	e07d      	b.n	800c73e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c642:	6a3a      	ldr	r2, [r7, #32]
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	429a      	cmp	r2, r3
 800c648:	d203      	bcs.n	800c652 <create_name+0x1da>
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d123      	bne.n	800c69a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	2b0b      	cmp	r3, #11
 800c656:	d106      	bne.n	800c666 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c65c:	f043 0303 	orr.w	r3, r3, #3
 800c660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c664:	e075      	b.n	800c752 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d005      	beq.n	800c67a <create_name+0x202>
 800c66e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c672:	f043 0303 	orr.w	r3, r3, #3
 800c676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d866      	bhi.n	800c750 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	61bb      	str	r3, [r7, #24]
 800c686:	2308      	movs	r3, #8
 800c688:	623b      	str	r3, [r7, #32]
 800c68a:	230b      	movs	r3, #11
 800c68c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c68e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c698:	e051      	b.n	800c73e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c69a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69c:	2b7f      	cmp	r3, #127	; 0x7f
 800c69e:	d914      	bls.n	800c6ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f001 fb39 	bl	800dd1c <ff_convert>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d004      	beq.n	800c6be <create_name+0x246>
 800c6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b6:	3b80      	subs	r3, #128	; 0x80
 800c6b8:	4a23      	ldr	r2, [pc, #140]	; (800c748 <create_name+0x2d0>)
 800c6ba:	5cd3      	ldrb	r3, [r2, r3]
 800c6bc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c6be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c2:	f043 0302 	orr.w	r3, r3, #2
 800c6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c6ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d007      	beq.n	800c6e0 <create_name+0x268>
 800c6d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	481d      	ldr	r0, [pc, #116]	; (800c74c <create_name+0x2d4>)
 800c6d6:	f7fe fbfc 	bl	800aed2 <chk_chr>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d008      	beq.n	800c6f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c6e0:	235f      	movs	r3, #95	; 0x5f
 800c6e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6e8:	f043 0303 	orr.w	r3, r3, #3
 800c6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6f0:	e01b      	b.n	800c72a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6f4:	2b40      	cmp	r3, #64	; 0x40
 800c6f6:	d909      	bls.n	800c70c <create_name+0x294>
 800c6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6fa:	2b5a      	cmp	r3, #90	; 0x5a
 800c6fc:	d806      	bhi.n	800c70c <create_name+0x294>
					b |= 2;
 800c6fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c702:	f043 0302 	orr.w	r3, r3, #2
 800c706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c70a:	e00e      	b.n	800c72a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c70c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c70e:	2b60      	cmp	r3, #96	; 0x60
 800c710:	d90b      	bls.n	800c72a <create_name+0x2b2>
 800c712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c714:	2b7a      	cmp	r3, #122	; 0x7a
 800c716:	d808      	bhi.n	800c72a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c71c:	f043 0301 	orr.w	r3, r3, #1
 800c720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c726:	3b20      	subs	r3, #32
 800c728:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	623a      	str	r2, [r7, #32]
 800c730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c732:	b2d1      	uxtb	r1, r2
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	4413      	add	r3, r2
 800c738:	460a      	mov	r2, r1
 800c73a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c73e:	e763      	b.n	800c608 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c740:	bf00      	nop
 800c742:	e006      	b.n	800c752 <create_name+0x2da>
 800c744:	080115f8 	.word	0x080115f8
 800c748:	08011660 	.word	0x08011660
 800c74c:	08011604 	.word	0x08011604
			if (si > di) break;			/* No extension */
 800c750:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c758:	2be5      	cmp	r3, #229	; 0xe5
 800c75a:	d103      	bne.n	800c764 <create_name+0x2ec>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2205      	movs	r2, #5
 800c760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2b08      	cmp	r3, #8
 800c768:	d104      	bne.n	800c774 <create_name+0x2fc>
 800c76a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c778:	f003 030c 	and.w	r3, r3, #12
 800c77c:	2b0c      	cmp	r3, #12
 800c77e:	d005      	beq.n	800c78c <create_name+0x314>
 800c780:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d105      	bne.n	800c798 <create_name+0x320>
 800c78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c790:	f043 0302 	orr.w	r3, r3, #2
 800c794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c79c:	f003 0302 	and.w	r3, r3, #2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d117      	bne.n	800c7d4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c7a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7a8:	f003 0303 	and.w	r3, r3, #3
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d105      	bne.n	800c7bc <create_name+0x344>
 800c7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b4:	f043 0310 	orr.w	r3, r3, #16
 800c7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c7bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7c0:	f003 030c 	and.w	r3, r3, #12
 800c7c4:	2b04      	cmp	r3, #4
 800c7c6:	d105      	bne.n	800c7d4 <create_name+0x35c>
 800c7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7cc:	f043 0308 	orr.w	r3, r3, #8
 800c7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c7da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c7de:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3728      	adds	r7, #40	; 0x28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c7fc:	e002      	b.n	800c804 <follow_path+0x1c>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b2f      	cmp	r3, #47	; 0x2f
 800c80a:	d0f8      	beq.n	800c7fe <follow_path+0x16>
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b5c      	cmp	r3, #92	; 0x5c
 800c812:	d0f4      	beq.n	800c7fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	2200      	movs	r2, #0
 800c818:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b1f      	cmp	r3, #31
 800c820:	d80a      	bhi.n	800c838 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2280      	movs	r2, #128	; 0x80
 800c826:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c82a:	2100      	movs	r1, #0
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff f8fd 	bl	800ba2c <dir_sdi>
 800c832:	4603      	mov	r3, r0
 800c834:	75fb      	strb	r3, [r7, #23]
 800c836:	e048      	b.n	800c8ca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c838:	463b      	mov	r3, r7
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fe1b 	bl	800c478 <create_name>
 800c842:	4603      	mov	r3, r0
 800c844:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d139      	bne.n	800c8c0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fc5a 	bl	800c106 <dir_find>
 800c852:	4603      	mov	r3, r0
 800c854:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c85c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c864:	7dfb      	ldrb	r3, [r7, #23]
 800c866:	2b04      	cmp	r3, #4
 800c868:	d12c      	bne.n	800c8c4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c86a:	7afb      	ldrb	r3, [r7, #11]
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b00      	cmp	r3, #0
 800c872:	d127      	bne.n	800c8c4 <follow_path+0xdc>
 800c874:	2305      	movs	r3, #5
 800c876:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c878:	e024      	b.n	800c8c4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d121      	bne.n	800c8c8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	799b      	ldrb	r3, [r3, #6]
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c890:	2305      	movs	r3, #5
 800c892:	75fb      	strb	r3, [r7, #23]
 800c894:	e019      	b.n	800c8ca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	8992      	ldrh	r2, [r2, #12]
 800c8a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8a8:	fb00 f202 	mul.w	r2, r0, r2
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7ff fa60 	bl	800bd78 <ld_clust>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8be:	e7bb      	b.n	800c838 <follow_path+0x50>
			if (res != FR_OK) break;
 800c8c0:	bf00      	nop
 800c8c2:	e002      	b.n	800c8ca <follow_path+0xe2>
				break;
 800c8c4:	bf00      	nop
 800c8c6:	e000      	b.n	800c8ca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8c8:	bf00      	nop
			}
		}
	}

	return res;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d031      	beq.n	800c94e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	e002      	b.n	800c8f8 <get_ldnumber+0x24>
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	617b      	str	r3, [r7, #20]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b1f      	cmp	r3, #31
 800c8fe:	d903      	bls.n	800c908 <get_ldnumber+0x34>
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b3a      	cmp	r3, #58	; 0x3a
 800c906:	d1f4      	bne.n	800c8f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b3a      	cmp	r3, #58	; 0x3a
 800c90e:	d11c      	bne.n	800c94a <get_ldnumber+0x76>
			tp = *path;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	60fa      	str	r2, [r7, #12]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	3b30      	subs	r3, #48	; 0x30
 800c920:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b09      	cmp	r3, #9
 800c926:	d80e      	bhi.n	800c946 <get_ldnumber+0x72>
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d10a      	bne.n	800c946 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d107      	bne.n	800c946 <get_ldnumber+0x72>
					vol = (int)i;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	3301      	adds	r3, #1
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	e002      	b.n	800c950 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c94e:	693b      	ldr	r3, [r7, #16]
}
 800c950:	4618      	mov	r0, r3
 800c952:	371c      	adds	r7, #28
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	70da      	strb	r2, [r3, #3]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7fe fc76 	bl	800b268 <move_window>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <check_fs+0x2a>
 800c982:	2304      	movs	r3, #4
 800c984:	e038      	b.n	800c9f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3338      	adds	r3, #56	; 0x38
 800c98a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe f9ba 	bl	800ad08 <ld_word>
 800c994:	4603      	mov	r3, r0
 800c996:	461a      	mov	r2, r3
 800c998:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d001      	beq.n	800c9a4 <check_fs+0x48>
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e029      	b.n	800c9f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c9aa:	2be9      	cmp	r3, #233	; 0xe9
 800c9ac:	d009      	beq.n	800c9c2 <check_fs+0x66>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c9b4:	2beb      	cmp	r3, #235	; 0xeb
 800c9b6:	d11e      	bne.n	800c9f6 <check_fs+0x9a>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c9be:	2b90      	cmp	r3, #144	; 0x90
 800c9c0:	d119      	bne.n	800c9f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3338      	adds	r3, #56	; 0x38
 800c9c6:	3336      	adds	r3, #54	; 0x36
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe f9b5 	bl	800ad38 <ld_dword>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ca00 <check_fs+0xa4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d101      	bne.n	800c9de <check_fs+0x82>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e00c      	b.n	800c9f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3338      	adds	r3, #56	; 0x38
 800c9e2:	3352      	adds	r3, #82	; 0x52
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe f9a7 	bl	800ad38 <ld_dword>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4a05      	ldr	r2, [pc, #20]	; (800ca04 <check_fs+0xa8>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d101      	bne.n	800c9f6 <check_fs+0x9a>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e000      	b.n	800c9f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9f6:	2302      	movs	r3, #2
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	00544146 	.word	0x00544146
 800ca04:	33544146 	.word	0x33544146

0800ca08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b096      	sub	sp, #88	; 0x58
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	4613      	mov	r3, r2
 800ca14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7ff ff59 	bl	800c8d4 <get_ldnumber>
 800ca22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	da01      	bge.n	800ca2e <find_volume+0x26>
 800ca2a:	230b      	movs	r3, #11
 800ca2c:	e265      	b.n	800cefa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca2e:	4a9f      	ldr	r2, [pc, #636]	; (800ccac <find_volume+0x2a4>)
 800ca30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <find_volume+0x3a>
 800ca3e:	230c      	movs	r3, #12
 800ca40:	e25b      	b.n	800cefa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	f023 0301 	bic.w	r3, r3, #1
 800ca4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01a      	beq.n	800ca8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	785b      	ldrb	r3, [r3, #1]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fe f8b5 	bl	800abcc <disk_status>
 800ca62:	4603      	mov	r3, r0
 800ca64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10c      	bne.n	800ca8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <find_volume+0x82>
 800ca7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca7e:	f003 0304 	and.w	r3, r3, #4
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca86:	230a      	movs	r3, #10
 800ca88:	e237      	b.n	800cefa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e235      	b.n	800cefa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	2200      	movs	r2, #0
 800ca92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe f8ad 	bl	800ac00 <disk_initialize>
 800caa6:	4603      	mov	r3, r0
 800caa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800caac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cab8:	2303      	movs	r3, #3
 800caba:	e21e      	b.n	800cefa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d007      	beq.n	800cad2 <find_volume+0xca>
 800cac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cac6:	f003 0304 	and.w	r3, r3, #4
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cace:	230a      	movs	r3, #10
 800cad0:	e213      	b.n	800cefa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad4:	7858      	ldrb	r0, [r3, #1]
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	330c      	adds	r3, #12
 800cada:	461a      	mov	r2, r3
 800cadc:	2102      	movs	r1, #2
 800cade:	f7fe f8f5 	bl	800accc <disk_ioctl>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <find_volume+0xe4>
 800cae8:	2301      	movs	r3, #1
 800caea:	e206      	b.n	800cefa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	899b      	ldrh	r3, [r3, #12]
 800caf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caf4:	d80d      	bhi.n	800cb12 <find_volume+0x10a>
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	899b      	ldrh	r3, [r3, #12]
 800cafa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cafe:	d308      	bcc.n	800cb12 <find_volume+0x10a>
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	899b      	ldrh	r3, [r3, #12]
 800cb04:	461a      	mov	r2, r3
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	899b      	ldrh	r3, [r3, #12]
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <find_volume+0x10e>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e1f1      	b.n	800cefa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cb1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb1e:	f7ff ff1d 	bl	800c95c <check_fs>
 800cb22:	4603      	mov	r3, r0
 800cb24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cb28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d149      	bne.n	800cbc4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb30:	2300      	movs	r3, #0
 800cb32:	643b      	str	r3, [r7, #64]	; 0x40
 800cb34:	e01e      	b.n	800cb74 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3e:	011b      	lsls	r3, r3, #4
 800cb40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cb44:	4413      	add	r3, r2
 800cb46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d006      	beq.n	800cb60 <find_volume+0x158>
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	3308      	adds	r3, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe f8ee 	bl	800ad38 <ld_dword>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	e000      	b.n	800cb62 <find_volume+0x15a>
 800cb60:	2200      	movs	r2, #0
 800cb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	3358      	adds	r3, #88	; 0x58
 800cb68:	443b      	add	r3, r7
 800cb6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb70:	3301      	adds	r3, #1
 800cb72:	643b      	str	r3, [r7, #64]	; 0x40
 800cb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d9dd      	bls.n	800cb36 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <find_volume+0x182>
 800cb84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb86:	3b01      	subs	r3, #1
 800cb88:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	3358      	adds	r3, #88	; 0x58
 800cb90:	443b      	add	r3, r7
 800cb92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d005      	beq.n	800cbaa <find_volume+0x1a2>
 800cb9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cba2:	f7ff fedb 	bl	800c95c <check_fs>
 800cba6:	4603      	mov	r3, r0
 800cba8:	e000      	b.n	800cbac <find_volume+0x1a4>
 800cbaa:	2303      	movs	r3, #3
 800cbac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cbb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d905      	bls.n	800cbc4 <find_volume+0x1bc>
 800cbb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbba:	3301      	adds	r3, #1
 800cbbc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc0:	2b03      	cmp	r3, #3
 800cbc2:	d9e2      	bls.n	800cb8a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cbc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d101      	bne.n	800cbd0 <find_volume+0x1c8>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e194      	b.n	800cefa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d901      	bls.n	800cbdc <find_volume+0x1d4>
 800cbd8:	230d      	movs	r3, #13
 800cbda:	e18e      	b.n	800cefa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	3338      	adds	r3, #56	; 0x38
 800cbe0:	330b      	adds	r3, #11
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe f890 	bl	800ad08 <ld_word>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d001      	beq.n	800cbf8 <find_volume+0x1f0>
 800cbf4:	230d      	movs	r3, #13
 800cbf6:	e180      	b.n	800cefa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	3338      	adds	r3, #56	; 0x38
 800cbfc:	3316      	adds	r3, #22
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe f882 	bl	800ad08 <ld_word>
 800cc04:	4603      	mov	r3, r0
 800cc06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <find_volume+0x214>
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	3338      	adds	r3, #56	; 0x38
 800cc12:	3324      	adds	r3, #36	; 0x24
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe f88f 	bl	800ad38 <ld_dword>
 800cc1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc20:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	789b      	ldrb	r3, [r3, #2]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d005      	beq.n	800cc40 <find_volume+0x238>
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	789b      	ldrb	r3, [r3, #2]
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	d001      	beq.n	800cc40 <find_volume+0x238>
 800cc3c:	230d      	movs	r3, #13
 800cc3e:	e15c      	b.n	800cefa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	789b      	ldrb	r3, [r3, #2]
 800cc44:	461a      	mov	r2, r3
 800cc46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc48:	fb02 f303 	mul.w	r3, r2, r3
 800cc4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	895b      	ldrh	r3, [r3, #10]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d008      	beq.n	800cc74 <find_volume+0x26c>
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	895b      	ldrh	r3, [r3, #10]
 800cc66:	461a      	mov	r2, r3
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	895b      	ldrh	r3, [r3, #10]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	4013      	ands	r3, r2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <find_volume+0x270>
 800cc74:	230d      	movs	r3, #13
 800cc76:	e140      	b.n	800cefa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	3338      	adds	r3, #56	; 0x38
 800cc7c:	3311      	adds	r3, #17
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe f842 	bl	800ad08 <ld_word>
 800cc84:	4603      	mov	r3, r0
 800cc86:	461a      	mov	r2, r3
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	891b      	ldrh	r3, [r3, #8]
 800cc90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc92:	8992      	ldrh	r2, [r2, #12]
 800cc94:	0952      	lsrs	r2, r2, #5
 800cc96:	b292      	uxth	r2, r2
 800cc98:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc9c:	fb01 f202 	mul.w	r2, r1, r2
 800cca0:	1a9b      	subs	r3, r3, r2
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d003      	beq.n	800ccb0 <find_volume+0x2a8>
 800cca8:	230d      	movs	r3, #13
 800ccaa:	e126      	b.n	800cefa <find_volume+0x4f2>
 800ccac:	20002c68 	.word	0x20002c68

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	3338      	adds	r3, #56	; 0x38
 800ccb4:	3313      	adds	r3, #19
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe f826 	bl	800ad08 <ld_word>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ccc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d106      	bne.n	800ccd4 <find_volume+0x2cc>
 800ccc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc8:	3338      	adds	r3, #56	; 0x38
 800ccca:	3320      	adds	r3, #32
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe f833 	bl	800ad38 <ld_dword>
 800ccd2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	3338      	adds	r3, #56	; 0x38
 800ccd8:	330e      	adds	r3, #14
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe f814 	bl	800ad08 <ld_word>
 800cce0:	4603      	mov	r3, r0
 800cce2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <find_volume+0x2e6>
 800ccea:	230d      	movs	r3, #13
 800ccec:	e105      	b.n	800cefa <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf2:	4413      	add	r3, r2
 800ccf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccf6:	8911      	ldrh	r1, [r2, #8]
 800ccf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccfa:	8992      	ldrh	r2, [r2, #12]
 800ccfc:	0952      	lsrs	r2, r2, #5
 800ccfe:	b292      	uxth	r2, r2
 800cd00:	fbb1 f2f2 	udiv	r2, r1, r2
 800cd04:	b292      	uxth	r2, r2
 800cd06:	4413      	add	r3, r2
 800cd08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cd0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d201      	bcs.n	800cd16 <find_volume+0x30e>
 800cd12:	230d      	movs	r3, #13
 800cd14:	e0f1      	b.n	800cefa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cd16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd1e:	8952      	ldrh	r2, [r2, #10]
 800cd20:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <find_volume+0x328>
 800cd2c:	230d      	movs	r3, #13
 800cd2e:	e0e4      	b.n	800cefa <find_volume+0x4f2>
		fmt = FS_FAT32;
 800cd30:	2303      	movs	r3, #3
 800cd32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d802      	bhi.n	800cd46 <find_volume+0x33e>
 800cd40:	2302      	movs	r3, #2
 800cd42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d802      	bhi.n	800cd56 <find_volume+0x34e>
 800cd50:	2301      	movs	r3, #1
 800cd52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	1c9a      	adds	r2, r3, #2
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd62:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd68:	441a      	add	r2, r3
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cd6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	441a      	add	r2, r3
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cd78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d11e      	bne.n	800cdbe <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	3338      	adds	r3, #56	; 0x38
 800cd84:	332a      	adds	r3, #42	; 0x2a
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fd ffbe 	bl	800ad08 <ld_word>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <find_volume+0x38e>
 800cd92:	230d      	movs	r3, #13
 800cd94:	e0b1      	b.n	800cefa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	891b      	ldrh	r3, [r3, #8]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <find_volume+0x39a>
 800cd9e:	230d      	movs	r3, #13
 800cda0:	e0ab      	b.n	800cefa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	3338      	adds	r3, #56	; 0x38
 800cda6:	332c      	adds	r3, #44	; 0x2c
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fd ffc5 	bl	800ad38 <ld_dword>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	647b      	str	r3, [r7, #68]	; 0x44
 800cdbc:	e01f      	b.n	800cdfe <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	891b      	ldrh	r3, [r3, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <find_volume+0x3c2>
 800cdc6:	230d      	movs	r3, #13
 800cdc8:	e097      	b.n	800cefa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd0:	441a      	add	r2, r3
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cdd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d103      	bne.n	800cde6 <find_volume+0x3de>
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	e00a      	b.n	800cdfc <find_volume+0x3f4>
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	69da      	ldr	r2, [r3, #28]
 800cdea:	4613      	mov	r3, r2
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	4413      	add	r3, r2
 800cdf0:	085a      	lsrs	r2, r3, #1
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	69db      	ldr	r3, [r3, #28]
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cdfc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	6a1a      	ldr	r2, [r3, #32]
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	899b      	ldrh	r3, [r3, #12]
 800ce06:	4619      	mov	r1, r3
 800ce08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce10:	8989      	ldrh	r1, [r1, #12]
 800ce12:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d201      	bcs.n	800ce1e <find_volume+0x416>
 800ce1a:	230d      	movs	r3, #13
 800ce1c:	e06d      	b.n	800cefa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce20:	f04f 32ff 	mov.w	r2, #4294967295
 800ce24:	619a      	str	r2, [r3, #24]
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	699a      	ldr	r2, [r3, #24]
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	2280      	movs	r2, #128	; 0x80
 800ce32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce38:	2b03      	cmp	r3, #3
 800ce3a:	d149      	bne.n	800ced0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	3338      	adds	r3, #56	; 0x38
 800ce40:	3330      	adds	r3, #48	; 0x30
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fd ff60 	bl	800ad08 <ld_word>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d140      	bne.n	800ced0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce50:	3301      	adds	r3, #1
 800ce52:	4619      	mov	r1, r3
 800ce54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce56:	f7fe fa07 	bl	800b268 <move_window>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d137      	bne.n	800ced0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	2200      	movs	r2, #0
 800ce64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	3338      	adds	r3, #56	; 0x38
 800ce6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd ff4a 	bl	800ad08 <ld_word>
 800ce74:	4603      	mov	r3, r0
 800ce76:	461a      	mov	r2, r3
 800ce78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d127      	bne.n	800ced0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	3338      	adds	r3, #56	; 0x38
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fd ff57 	bl	800ad38 <ld_dword>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4a1d      	ldr	r2, [pc, #116]	; (800cf04 <find_volume+0x4fc>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d11e      	bne.n	800ced0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce94:	3338      	adds	r3, #56	; 0x38
 800ce96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fd ff4c 	bl	800ad38 <ld_dword>
 800cea0:	4603      	mov	r3, r0
 800cea2:	4a19      	ldr	r2, [pc, #100]	; (800cf08 <find_volume+0x500>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d113      	bne.n	800ced0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	3338      	adds	r3, #56	; 0x38
 800ceac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fd ff41 	bl	800ad38 <ld_dword>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	3338      	adds	r3, #56	; 0x38
 800cec0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fd ff37 	bl	800ad38 <ld_dword>
 800ceca:	4602      	mov	r2, r0
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ced6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ced8:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <find_volume+0x504>)
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	3301      	adds	r3, #1
 800cede:	b29a      	uxth	r2, r3
 800cee0:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <find_volume+0x504>)
 800cee2:	801a      	strh	r2, [r3, #0]
 800cee4:	4b09      	ldr	r3, [pc, #36]	; (800cf0c <find_volume+0x504>)
 800cee6:	881a      	ldrh	r2, [r3, #0]
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	4a08      	ldr	r2, [pc, #32]	; (800cf10 <find_volume+0x508>)
 800cef0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cef2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cef4:	f7fe f950 	bl	800b198 <clear_lock>
#endif
	return FR_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3758      	adds	r7, #88	; 0x58
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	41615252 	.word	0x41615252
 800cf08:	61417272 	.word	0x61417272
 800cf0c:	20002c6c 	.word	0x20002c6c
 800cf10:	20002c90 	.word	0x20002c90

0800cf14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cf1e:	2309      	movs	r3, #9
 800cf20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01c      	beq.n	800cf62 <validate+0x4e>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d018      	beq.n	800cf62 <validate+0x4e>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d013      	beq.n	800cf62 <validate+0x4e>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	889a      	ldrh	r2, [r3, #4]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	88db      	ldrh	r3, [r3, #6]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d10c      	bne.n	800cf62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	785b      	ldrb	r3, [r3, #1]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fd fe3c 	bl	800abcc <disk_status>
 800cf54:	4603      	mov	r3, r0
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <validate+0x4e>
			res = FR_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <validate+0x5a>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	e000      	b.n	800cf70 <validate+0x5c>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	6013      	str	r3, [r2, #0]
	return res;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf92:	f107 0310 	add.w	r3, r7, #16
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff fc9c 	bl	800c8d4 <get_ldnumber>
 800cf9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da01      	bge.n	800cfa8 <f_mount+0x28>
 800cfa4:	230b      	movs	r3, #11
 800cfa6:	e02b      	b.n	800d000 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cfa8:	4a17      	ldr	r2, [pc, #92]	; (800d008 <f_mount+0x88>)
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d005      	beq.n	800cfc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cfb8:	69b8      	ldr	r0, [r7, #24]
 800cfba:	f7fe f8ed 	bl	800b198 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	490d      	ldr	r1, [pc, #52]	; (800d008 <f_mount+0x88>)
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <f_mount+0x66>
 800cfe0:	79fb      	ldrb	r3, [r7, #7]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d001      	beq.n	800cfea <f_mount+0x6a>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e00a      	b.n	800d000 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cfea:	f107 010c 	add.w	r1, r7, #12
 800cfee:	f107 0308 	add.w	r3, r7, #8
 800cff2:	2200      	movs	r2, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff fd07 	bl	800ca08 <find_volume>
 800cffa:	4603      	mov	r3, r0
 800cffc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	20002c68 	.word	0x20002c68

0800d00c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b09a      	sub	sp, #104	; 0x68
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	4613      	mov	r3, r2
 800d018:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <f_open+0x18>
 800d020:	2309      	movs	r3, #9
 800d022:	e1bb      	b.n	800d39c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d02a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d02c:	79fa      	ldrb	r2, [r7, #7]
 800d02e:	f107 0114 	add.w	r1, r7, #20
 800d032:	f107 0308 	add.w	r3, r7, #8
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff fce6 	bl	800ca08 <find_volume>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d042:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d046:	2b00      	cmp	r3, #0
 800d048:	f040 819f 	bne.w	800d38a <f_open+0x37e>
		dj.obj.fs = fs;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	f107 0318 	add.w	r3, r7, #24
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fbc5 	bl	800c7e8 <follow_path>
 800d05e:	4603      	mov	r3, r0
 800d060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d064:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d11a      	bne.n	800d0a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d06c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d070:	b25b      	sxtb	r3, r3
 800d072:	2b00      	cmp	r3, #0
 800d074:	da03      	bge.n	800d07e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d076:	2306      	movs	r3, #6
 800d078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d07c:	e011      	b.n	800d0a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	f023 0301 	bic.w	r3, r3, #1
 800d084:	2b00      	cmp	r3, #0
 800d086:	bf14      	ite	ne
 800d088:	2301      	movne	r3, #1
 800d08a:	2300      	moveq	r3, #0
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	461a      	mov	r2, r3
 800d090:	f107 0318 	add.w	r3, r7, #24
 800d094:	4611      	mov	r1, r2
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd ff36 	bl	800af08 <chk_lock>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	f003 031c 	and.w	r3, r3, #28
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d07f      	beq.n	800d1ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d0ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d017      	beq.n	800d0e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d0b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d10e      	bne.n	800d0da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d0bc:	f7fd ff80 	bl	800afc0 <enq_lock>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d006      	beq.n	800d0d4 <f_open+0xc8>
 800d0c6:	f107 0318 	add.w	r3, r7, #24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff f8dc 	bl	800c288 <dir_register>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	e000      	b.n	800d0d6 <f_open+0xca>
 800d0d4:	2312      	movs	r3, #18
 800d0d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	f043 0308 	orr.w	r3, r3, #8
 800d0e0:	71fb      	strb	r3, [r7, #7]
 800d0e2:	e010      	b.n	800d106 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d0e4:	7fbb      	ldrb	r3, [r7, #30]
 800d0e6:	f003 0311 	and.w	r3, r3, #17
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <f_open+0xea>
					res = FR_DENIED;
 800d0ee:	2307      	movs	r3, #7
 800d0f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0f4:	e007      	b.n	800d106 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	f003 0304 	and.w	r3, r3, #4
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <f_open+0xfa>
 800d100:	2308      	movs	r3, #8
 800d102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d168      	bne.n	800d1e0 <f_open+0x1d4>
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	f003 0308 	and.w	r3, r3, #8
 800d114:	2b00      	cmp	r3, #0
 800d116:	d063      	beq.n	800d1e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d118:	f7fd fcfa 	bl	800ab10 <get_fattime>
 800d11c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d120:	330e      	adds	r3, #14
 800d122:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d124:	4618      	mov	r0, r3
 800d126:	f7fd fe45 	bl	800adb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12c:	3316      	adds	r3, #22
 800d12e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d130:	4618      	mov	r0, r3
 800d132:	f7fd fe3f 	bl	800adb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	330b      	adds	r3, #11
 800d13a:	2220      	movs	r2, #32
 800d13c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d142:	4611      	mov	r1, r2
 800d144:	4618      	mov	r0, r3
 800d146:	f7fe fe17 	bl	800bd78 <ld_clust>
 800d14a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d150:	2200      	movs	r2, #0
 800d152:	4618      	mov	r0, r3
 800d154:	f7fe fe2f 	bl	800bdb6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	331c      	adds	r3, #28
 800d15c:	2100      	movs	r1, #0
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd fe28 	bl	800adb4 <st_dword>
					fs->wflag = 1;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	2201      	movs	r2, #1
 800d168:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d037      	beq.n	800d1e0 <f_open+0x1d4>
						dw = fs->winsect;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d174:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d176:	f107 0318 	add.w	r3, r7, #24
 800d17a:	2200      	movs	r2, #0
 800d17c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fe fb1f 	bl	800b7c2 <remove_chain>
 800d184:	4603      	mov	r3, r0
 800d186:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d18a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d126      	bne.n	800d1e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d196:	4618      	mov	r0, r3
 800d198:	f7fe f866 	bl	800b268 <move_window>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1a6:	3a01      	subs	r2, #1
 800d1a8:	615a      	str	r2, [r3, #20]
 800d1aa:	e019      	b.n	800d1e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d1ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d115      	bne.n	800d1e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d1b4:	7fbb      	ldrb	r3, [r7, #30]
 800d1b6:	f003 0310 	and.w	r3, r3, #16
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d1be:	2304      	movs	r3, #4
 800d1c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d1c4:	e00c      	b.n	800d1e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	f003 0302 	and.w	r3, r3, #2
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d007      	beq.n	800d1e0 <f_open+0x1d4>
 800d1d0:	7fbb      	ldrb	r3, [r7, #30]
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <f_open+0x1d4>
						res = FR_DENIED;
 800d1da:	2307      	movs	r3, #7
 800d1dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d1e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d128      	bne.n	800d23a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d1e8:	79fb      	ldrb	r3, [r7, #7]
 800d1ea:	f003 0308 	and.w	r3, r3, #8
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d208:	79fb      	ldrb	r3, [r7, #7]
 800d20a:	f023 0301 	bic.w	r3, r3, #1
 800d20e:	2b00      	cmp	r3, #0
 800d210:	bf14      	ite	ne
 800d212:	2301      	movne	r3, #1
 800d214:	2300      	moveq	r3, #0
 800d216:	b2db      	uxtb	r3, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	f107 0318 	add.w	r3, r7, #24
 800d21e:	4611      	mov	r1, r2
 800d220:	4618      	mov	r0, r3
 800d222:	f7fd feef 	bl	800b004 <inc_lock>
 800d226:	4602      	mov	r2, r0
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d102      	bne.n	800d23a <f_open+0x22e>
 800d234:	2302      	movs	r3, #2
 800d236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d23a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f040 80a3 	bne.w	800d38a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d248:	4611      	mov	r1, r2
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fd94 	bl	800bd78 <ld_clust>
 800d250:	4602      	mov	r2, r0
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d258:	331c      	adds	r3, #28
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fd fd6c 	bl	800ad38 <ld_dword>
 800d260:	4602      	mov	r2, r0
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2200      	movs	r2, #0
 800d26a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	88da      	ldrh	r2, [r3, #6]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	79fa      	ldrb	r2, [r7, #7]
 800d27e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3330      	adds	r3, #48	; 0x30
 800d296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d29a:	2100      	movs	r1, #0
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fd fdd6 	bl	800ae4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d06e      	beq.n	800d38a <f_open+0x37e>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d06a      	beq.n	800d38a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	895b      	ldrh	r3, [r3, #10]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	899b      	ldrh	r3, [r3, #12]
 800d2c6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ca:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2d8:	e016      	b.n	800d308 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fe f87f 	bl	800b3e2 <get_fat>
 800d2e4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d2e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d802      	bhi.n	800d2f2 <f_open+0x2e6>
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f8:	d102      	bne.n	800d300 <f_open+0x2f4>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d300:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d308:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d103      	bne.n	800d318 <f_open+0x30c>
 800d310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d314:	429a      	cmp	r2, r3
 800d316:	d8e0      	bhi.n	800d2da <f_open+0x2ce>
				}
				fp->clust = clst;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d31c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d31e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d322:	2b00      	cmp	r3, #0
 800d324:	d131      	bne.n	800d38a <f_open+0x37e>
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	899b      	ldrh	r3, [r3, #12]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d32e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d332:	fb01 f202 	mul.w	r2, r1, r2
 800d336:	1a9b      	subs	r3, r3, r2
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d026      	beq.n	800d38a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d340:	4618      	mov	r0, r3
 800d342:	f7fe f82f 	bl	800b3a4 <clust2sect>
 800d346:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d103      	bne.n	800d356 <f_open+0x34a>
						res = FR_INT_ERR;
 800d34e:	2302      	movs	r3, #2
 800d350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d354:	e019      	b.n	800d38a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	899b      	ldrh	r3, [r3, #12]
 800d35a:	461a      	mov	r2, r3
 800d35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d35e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d364:	441a      	add	r2, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	7858      	ldrb	r0, [r3, #1]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6a1a      	ldr	r2, [r3, #32]
 800d378:	2301      	movs	r3, #1
 800d37a:	f7fd fc67 	bl	800ac4c <disk_read>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <f_open+0x37e>
 800d384:	2301      	movs	r3, #1
 800d386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d38a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <f_open+0x38c>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d398:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3768      	adds	r7, #104	; 0x68
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08c      	sub	sp, #48	; 0x30
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f107 0210 	add.w	r2, r7, #16
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fda5 	bl	800cf14 <validate>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d3d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d107      	bne.n	800d3e8 <f_write+0x44>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	7d5b      	ldrb	r3, [r3, #21]
 800d3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d3e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <f_write+0x4a>
 800d3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3ec:	e16a      	b.n	800d6c4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	7d1b      	ldrb	r3, [r3, #20]
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <f_write+0x5a>
 800d3fa:	2307      	movs	r3, #7
 800d3fc:	e162      	b.n	800d6c4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	699a      	ldr	r2, [r3, #24]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	699b      	ldr	r3, [r3, #24]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	f080 814c 	bcs.w	800d6a8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	43db      	mvns	r3, r3
 800d416:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d418:	e146      	b.n	800d6a8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	8992      	ldrh	r2, [r2, #12]
 800d422:	fbb3 f1f2 	udiv	r1, r3, r2
 800d426:	fb01 f202 	mul.w	r2, r1, r2
 800d42a:	1a9b      	subs	r3, r3, r2
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f040 80f1 	bne.w	800d614 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	8992      	ldrh	r2, [r2, #12]
 800d43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	8952      	ldrh	r2, [r2, #10]
 800d442:	3a01      	subs	r2, #1
 800d444:	4013      	ands	r3, r2
 800d446:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d143      	bne.n	800d4d6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	699b      	ldr	r3, [r3, #24]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10c      	bne.n	800d470 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d11a      	bne.n	800d498 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2100      	movs	r1, #0
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fa10 	bl	800b88c <create_chain>
 800d46c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d46e:	e013      	b.n	800d498 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d474:	2b00      	cmp	r3, #0
 800d476:	d007      	beq.n	800d488 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	699b      	ldr	r3, [r3, #24]
 800d47c:	4619      	mov	r1, r3
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7fe fa9c 	bl	800b9bc <clmt_clust>
 800d484:	62b8      	str	r0, [r7, #40]	; 0x28
 800d486:	e007      	b.n	800d498 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	4619      	mov	r1, r3
 800d490:	4610      	mov	r0, r2
 800d492:	f7fe f9fb 	bl	800b88c <create_chain>
 800d496:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 8109 	beq.w	800d6b2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d104      	bne.n	800d4b0 <f_write+0x10c>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	755a      	strb	r2, [r3, #21]
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	e109      	b.n	800d6c4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b6:	d104      	bne.n	800d4c2 <f_write+0x11e>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	755a      	strb	r2, [r3, #21]
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e100      	b.n	800d6c4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d102      	bne.n	800d4d6 <f_write+0x132>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	7d1b      	ldrb	r3, [r3, #20]
 800d4da:	b25b      	sxtb	r3, r3
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	da18      	bge.n	800d512 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	7858      	ldrb	r0, [r3, #1]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6a1a      	ldr	r2, [r3, #32]
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f7fd fbcc 	bl	800ac8c <disk_write>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d004      	beq.n	800d504 <f_write+0x160>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	755a      	strb	r2, [r3, #21]
 800d500:	2301      	movs	r3, #1
 800d502:	e0df      	b.n	800d6c4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	7d1b      	ldrb	r3, [r3, #20]
 800d508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	4619      	mov	r1, r3
 800d51a:	4610      	mov	r0, r2
 800d51c:	f7fd ff42 	bl	800b3a4 <clust2sect>
 800d520:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d104      	bne.n	800d532 <f_write+0x18e>
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2202      	movs	r2, #2
 800d52c:	755a      	strb	r2, [r3, #21]
 800d52e:	2302      	movs	r3, #2
 800d530:	e0c8      	b.n	800d6c4 <f_write+0x320>
			sect += csect;
 800d532:	697a      	ldr	r2, [r7, #20]
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	4413      	add	r3, r2
 800d538:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	899b      	ldrh	r3, [r3, #12]
 800d53e:	461a      	mov	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	fbb3 f3f2 	udiv	r3, r3, r2
 800d546:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d043      	beq.n	800d5d6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	6a3b      	ldr	r3, [r7, #32]
 800d552:	4413      	add	r3, r2
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	8952      	ldrh	r2, [r2, #10]
 800d558:	4293      	cmp	r3, r2
 800d55a:	d905      	bls.n	800d568 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	895b      	ldrh	r3, [r3, #10]
 800d560:	461a      	mov	r2, r3
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	7858      	ldrb	r0, [r3, #1]
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	69f9      	ldr	r1, [r7, #28]
 800d572:	f7fd fb8b 	bl	800ac8c <disk_write>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d004      	beq.n	800d586 <f_write+0x1e2>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2201      	movs	r2, #1
 800d580:	755a      	strb	r2, [r3, #21]
 800d582:	2301      	movs	r3, #1
 800d584:	e09e      	b.n	800d6c4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6a1a      	ldr	r2, [r3, #32]
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	1ad3      	subs	r3, r2, r3
 800d58e:	6a3a      	ldr	r2, [r7, #32]
 800d590:	429a      	cmp	r2, r3
 800d592:	d918      	bls.n	800d5c6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a1a      	ldr	r2, [r3, #32]
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	693a      	ldr	r2, [r7, #16]
 800d5a4:	8992      	ldrh	r2, [r2, #12]
 800d5a6:	fb02 f303 	mul.w	r3, r2, r3
 800d5aa:	69fa      	ldr	r2, [r7, #28]
 800d5ac:	18d1      	adds	r1, r2, r3
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	899b      	ldrh	r3, [r3, #12]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7fd fc2a 	bl	800ae0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
 800d5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	899b      	ldrh	r3, [r3, #12]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	fb02 f303 	mul.w	r3, r2, r3
 800d5d2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d5d4:	e04b      	b.n	800d66e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d016      	beq.n	800d60e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	699a      	ldr	r2, [r3, #24]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d210      	bcs.n	800d60e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	7858      	ldrb	r0, [r3, #1]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	f7fd fb27 	bl	800ac4c <disk_read>
 800d5fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d600:	2b00      	cmp	r3, #0
 800d602:	d004      	beq.n	800d60e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2201      	movs	r2, #1
 800d608:	755a      	strb	r2, [r3, #21]
 800d60a:	2301      	movs	r3, #1
 800d60c:	e05a      	b.n	800d6c4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	899b      	ldrh	r3, [r3, #12]
 800d618:	4618      	mov	r0, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	8992      	ldrh	r2, [r2, #12]
 800d622:	fbb3 f1f2 	udiv	r1, r3, r2
 800d626:	fb01 f202 	mul.w	r2, r1, r2
 800d62a:	1a9b      	subs	r3, r3, r2
 800d62c:	1ac3      	subs	r3, r0, r3
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	429a      	cmp	r2, r3
 800d636:	d901      	bls.n	800d63c <f_write+0x298>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	8992      	ldrh	r2, [r2, #12]
 800d64a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d64e:	fb00 f202 	mul.w	r2, r0, r2
 800d652:	1a9b      	subs	r3, r3, r2
 800d654:	440b      	add	r3, r1
 800d656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d658:	69f9      	ldr	r1, [r7, #28]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fd fbd6 	bl	800ae0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	7d1b      	ldrb	r3, [r3, #20]
 800d664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d66e:	69fa      	ldr	r2, [r7, #28]
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	4413      	add	r3, r2
 800d674:	61fb      	str	r3, [r7, #28]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	699a      	ldr	r2, [r3, #24]
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	441a      	add	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	619a      	str	r2, [r3, #24]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	68da      	ldr	r2, [r3, #12]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	bf38      	it	cc
 800d68e:	461a      	movcc	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	60da      	str	r2, [r3, #12]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	441a      	add	r2, r3
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a4:	1ad3      	subs	r3, r2, r3
 800d6a6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f47f aeb5 	bne.w	800d41a <f_write+0x76>
 800d6b0:	e000      	b.n	800d6b4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d6b2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	7d1b      	ldrb	r3, [r3, #20]
 800d6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3730      	adds	r7, #48	; 0x30
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f107 0208 	add.w	r2, r7, #8
 800d6da:	4611      	mov	r1, r2
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff fc19 	bl	800cf14 <validate>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d168      	bne.n	800d7be <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7d1b      	ldrb	r3, [r3, #20]
 800d6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d062      	beq.n	800d7be <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	b25b      	sxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	da15      	bge.n	800d72e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	7858      	ldrb	r0, [r3, #1]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a1a      	ldr	r2, [r3, #32]
 800d710:	2301      	movs	r3, #1
 800d712:	f7fd fabb 	bl	800ac8c <disk_write>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <f_sync+0x54>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e04f      	b.n	800d7c0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	7d1b      	ldrb	r3, [r3, #20]
 800d724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d72e:	f7fd f9ef 	bl	800ab10 <get_fattime>
 800d732:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73a:	4619      	mov	r1, r3
 800d73c:	4610      	mov	r0, r2
 800d73e:	f7fd fd93 	bl	800b268 <move_window>
 800d742:	4603      	mov	r3, r0
 800d744:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d746:	7dfb      	ldrb	r3, [r7, #23]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d138      	bne.n	800d7be <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d750:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	330b      	adds	r3, #11
 800d756:	781a      	ldrb	r2, [r3, #0]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	330b      	adds	r3, #11
 800d75c:	f042 0220 	orr.w	r2, r2, #32
 800d760:	b2d2      	uxtb	r2, r2
 800d762:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6818      	ldr	r0, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	461a      	mov	r2, r3
 800d76e:	68f9      	ldr	r1, [r7, #12]
 800d770:	f7fe fb21 	bl	800bdb6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f103 021c 	add.w	r2, r3, #28
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	f7fd fb17 	bl	800adb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3316      	adds	r3, #22
 800d78a:	6939      	ldr	r1, [r7, #16]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fd fb11 	bl	800adb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	3312      	adds	r3, #18
 800d796:	2100      	movs	r1, #0
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fd faf0 	bl	800ad7e <st_word>
					fs->wflag = 1;
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fd fd8c 	bl	800b2c4 <sync_fs>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff ff7b 	bl	800d6cc <f_sync>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d118      	bne.n	800d812 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f107 0208 	add.w	r2, r7, #8
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fb93 	bl	800cf14 <validate>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7f2:	7bfb      	ldrb	r3, [r7, #15]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10c      	bne.n	800d812 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fd fc8f 	bl	800b120 <dec_lock>
 800d802:	4603      	mov	r3, r0
 800d804:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d806:	7bfb      	ldrb	r3, [r7, #15]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d102      	bne.n	800d812 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d812:	7bfb      	ldrb	r3, [r7, #15]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b090      	sub	sp, #64	; 0x40
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f107 0208 	add.w	r2, r7, #8
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fb70 	bl	800cf14 <validate>
 800d834:	4603      	mov	r3, r0
 800d836:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d83a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d103      	bne.n	800d84a <f_lseek+0x2e>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7d5b      	ldrb	r3, [r3, #21]
 800d846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d84a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d002      	beq.n	800d858 <f_lseek+0x3c>
 800d852:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d856:	e201      	b.n	800dc5c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 80d9 	beq.w	800da14 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d15a      	bne.n	800d920 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	1d1a      	adds	r2, r3, #4
 800d874:	627a      	str	r2, [r7, #36]	; 0x24
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	617b      	str	r3, [r7, #20]
 800d87a:	2302      	movs	r3, #2
 800d87c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d886:	2b00      	cmp	r3, #0
 800d888:	d03a      	beq.n	800d900 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	613b      	str	r3, [r7, #16]
 800d88e:	2300      	movs	r3, #0
 800d890:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	3302      	adds	r3, #2
 800d896:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	3301      	adds	r3, #1
 800d8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fd fd9b 	bl	800b3e2 <get_fat>
 800d8ac:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d804      	bhi.n	800d8be <f_lseek+0xa2>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	755a      	strb	r2, [r3, #21]
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	e1ce      	b.n	800dc5c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c4:	d104      	bne.n	800d8d0 <f_lseek+0xb4>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	755a      	strb	r2, [r3, #21]
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e1c5      	b.n	800dc5c <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d0de      	beq.n	800d898 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d809      	bhi.n	800d8f6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	1d1a      	adds	r2, r3, #4
 800d8e6:	627a      	str	r2, [r7, #36]	; 0x24
 800d8e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	1d1a      	adds	r2, r3, #4
 800d8f0:	627a      	str	r2, [r7, #36]	; 0x24
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	69db      	ldr	r3, [r3, #28]
 800d8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d3c4      	bcc.n	800d88a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d906:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d803      	bhi.n	800d918 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	e19f      	b.n	800dc58 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d918:	2311      	movs	r3, #17
 800d91a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d91e:	e19b      	b.n	800dc58 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d902      	bls.n	800d930 <f_lseek+0x114>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 818d 	beq.w	800dc58 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	3b01      	subs	r3, #1
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7fe f839 	bl	800b9bc <clmt_clust>
 800d94a:	4602      	mov	r2, r0
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	4619      	mov	r1, r3
 800d958:	4610      	mov	r0, r2
 800d95a:	f7fd fd23 	bl	800b3a4 <clust2sect>
 800d95e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d104      	bne.n	800d970 <f_lseek+0x154>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2202      	movs	r2, #2
 800d96a:	755a      	strb	r2, [r3, #21]
 800d96c:	2302      	movs	r3, #2
 800d96e:	e175      	b.n	800dc5c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	3b01      	subs	r3, #1
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	8992      	ldrh	r2, [r2, #12]
 800d978:	fbb3 f3f2 	udiv	r3, r3, r2
 800d97c:	68ba      	ldr	r2, [r7, #8]
 800d97e:	8952      	ldrh	r2, [r2, #10]
 800d980:	3a01      	subs	r2, #1
 800d982:	4013      	ands	r3, r2
 800d984:	69ba      	ldr	r2, [r7, #24]
 800d986:	4413      	add	r3, r2
 800d988:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	8992      	ldrh	r2, [r2, #12]
 800d992:	fbb3 f1f2 	udiv	r1, r3, r2
 800d996:	fb01 f202 	mul.w	r2, r1, r2
 800d99a:	1a9b      	subs	r3, r3, r2
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f000 815b 	beq.w	800dc58 <f_lseek+0x43c>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	69ba      	ldr	r2, [r7, #24]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	f000 8155 	beq.w	800dc58 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7d1b      	ldrb	r3, [r3, #20]
 800d9b2:	b25b      	sxtb	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	da18      	bge.n	800d9ea <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	7858      	ldrb	r0, [r3, #1]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a1a      	ldr	r2, [r3, #32]
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	f7fd f960 	bl	800ac8c <disk_write>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d004      	beq.n	800d9dc <f_lseek+0x1c0>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	755a      	strb	r2, [r3, #21]
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e13f      	b.n	800dc5c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7d1b      	ldrb	r3, [r3, #20]
 800d9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	7858      	ldrb	r0, [r3, #1]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	69ba      	ldr	r2, [r7, #24]
 800d9f8:	f7fd f928 	bl	800ac4c <disk_read>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d004      	beq.n	800da0c <f_lseek+0x1f0>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	755a      	strb	r2, [r3, #21]
 800da08:	2301      	movs	r3, #1
 800da0a:	e127      	b.n	800dc5c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	69ba      	ldr	r2, [r7, #24]
 800da10:	621a      	str	r2, [r3, #32]
 800da12:	e121      	b.n	800dc58 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d908      	bls.n	800da30 <f_lseek+0x214>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	7d1b      	ldrb	r3, [r3, #20]
 800da22:	f003 0302 	and.w	r3, r3, #2
 800da26:	2b00      	cmp	r3, #0
 800da28:	d102      	bne.n	800da30 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	637b      	str	r3, [r7, #52]	; 0x34
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da3e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 80b5 	beq.w	800dbb2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	895b      	ldrh	r3, [r3, #10]
 800da4c:	461a      	mov	r2, r3
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	899b      	ldrh	r3, [r3, #12]
 800da52:	fb02 f303 	mul.w	r3, r2, r3
 800da56:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d01b      	beq.n	800da96 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	1e5a      	subs	r2, r3, #1
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	fbb2 f2f3 	udiv	r2, r2, r3
 800da68:	6a3b      	ldr	r3, [r7, #32]
 800da6a:	1e59      	subs	r1, r3, #1
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800da72:	429a      	cmp	r2, r3
 800da74:	d30f      	bcc.n	800da96 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	1e5a      	subs	r2, r3, #1
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	425b      	negs	r3, r3
 800da7e:	401a      	ands	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	69db      	ldr	r3, [r3, #28]
 800da92:	63bb      	str	r3, [r7, #56]	; 0x38
 800da94:	e022      	b.n	800dadc <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d119      	bne.n	800dad6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2100      	movs	r1, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fd fef0 	bl	800b88c <create_chain>
 800daac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800daae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d104      	bne.n	800dabe <f_lseek+0x2a2>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2202      	movs	r2, #2
 800dab8:	755a      	strb	r2, [r3, #21]
 800daba:	2302      	movs	r3, #2
 800dabc:	e0ce      	b.n	800dc5c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac4:	d104      	bne.n	800dad0 <f_lseek+0x2b4>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	755a      	strb	r2, [r3, #21]
 800dacc:	2301      	movs	r3, #1
 800dace:	e0c5      	b.n	800dc5c <f_lseek+0x440>
					fp->obj.sclust = clst;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dad4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dada:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d067      	beq.n	800dbb2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800dae2:	e03a      	b.n	800db5a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	603b      	str	r3, [r7, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	699a      	ldr	r2, [r3, #24]
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	441a      	add	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7d1b      	ldrb	r3, [r3, #20]
 800dafc:	f003 0302 	and.w	r3, r3, #2
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00b      	beq.n	800db1c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fd febf 	bl	800b88c <create_chain>
 800db0e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	2b00      	cmp	r3, #0
 800db14:	d108      	bne.n	800db28 <f_lseek+0x30c>
							ofs = 0; break;
 800db16:	2300      	movs	r3, #0
 800db18:	603b      	str	r3, [r7, #0]
 800db1a:	e022      	b.n	800db62 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db20:	4618      	mov	r0, r3
 800db22:	f7fd fc5e 	bl	800b3e2 <get_fat>
 800db26:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2e:	d104      	bne.n	800db3a <f_lseek+0x31e>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	755a      	strb	r2, [r3, #21]
 800db36:	2301      	movs	r3, #1
 800db38:	e090      	b.n	800dc5c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800db3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d904      	bls.n	800db4a <f_lseek+0x32e>
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db46:	429a      	cmp	r2, r3
 800db48:	d304      	bcc.n	800db54 <f_lseek+0x338>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2202      	movs	r2, #2
 800db4e:	755a      	strb	r2, [r3, #21]
 800db50:	2302      	movs	r3, #2
 800db52:	e083      	b.n	800dc5c <f_lseek+0x440>
					fp->clust = clst;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db58:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d8c0      	bhi.n	800dae4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	699a      	ldr	r2, [r3, #24]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	441a      	add	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	899b      	ldrh	r3, [r3, #12]
 800db72:	461a      	mov	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	fbb3 f1f2 	udiv	r1, r3, r2
 800db7a:	fb01 f202 	mul.w	r2, r1, r2
 800db7e:	1a9b      	subs	r3, r3, r2
 800db80:	2b00      	cmp	r3, #0
 800db82:	d016      	beq.n	800dbb2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fd fc0b 	bl	800b3a4 <clust2sect>
 800db8e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db92:	2b00      	cmp	r3, #0
 800db94:	d104      	bne.n	800dba0 <f_lseek+0x384>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2202      	movs	r2, #2
 800db9a:	755a      	strb	r2, [r3, #21]
 800db9c:	2302      	movs	r3, #2
 800db9e:	e05d      	b.n	800dc5c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	899b      	ldrh	r3, [r3, #12]
 800dba4:	461a      	mov	r2, r3
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbae:	4413      	add	r3, r2
 800dbb0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	699a      	ldr	r2, [r3, #24]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d90a      	bls.n	800dbd4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	699a      	ldr	r2, [r3, #24]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	7d1b      	ldrb	r3, [r3, #20]
 800dbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	8992      	ldrh	r2, [r2, #12]
 800dbdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbe0:	fb01 f202 	mul.w	r2, r1, r2
 800dbe4:	1a9b      	subs	r3, r3, r2
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d036      	beq.n	800dc58 <f_lseek+0x43c>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d031      	beq.n	800dc58 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	7d1b      	ldrb	r3, [r3, #20]
 800dbf8:	b25b      	sxtb	r3, r3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	da18      	bge.n	800dc30 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	7858      	ldrb	r0, [r3, #1]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a1a      	ldr	r2, [r3, #32]
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	f7fd f83d 	bl	800ac8c <disk_write>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d004      	beq.n	800dc22 <f_lseek+0x406>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	755a      	strb	r2, [r3, #21]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e01c      	b.n	800dc5c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	7d1b      	ldrb	r3, [r3, #20]
 800dc26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	7858      	ldrb	r0, [r3, #1]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc3e:	f7fd f805 	bl	800ac4c <disk_read>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d004      	beq.n	800dc52 <f_lseek+0x436>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	755a      	strb	r2, [r3, #21]
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e004      	b.n	800dc5c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc56:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dc58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3740      	adds	r7, #64	; 0x40
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b087      	sub	sp, #28
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc72:	2301      	movs	r3, #1
 800dc74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc7a:	4b1f      	ldr	r3, [pc, #124]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dc7c:	7a5b      	ldrb	r3, [r3, #9]
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d131      	bne.n	800dce8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc84:	4b1c      	ldr	r3, [pc, #112]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dc86:	7a5b      	ldrb	r3, [r3, #9]
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	4b1a      	ldr	r3, [pc, #104]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dc8e:	2100      	movs	r1, #0
 800dc90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc92:	4b19      	ldr	r3, [pc, #100]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dc94:	7a5b      	ldrb	r3, [r3, #9]
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	4a17      	ldr	r2, [pc, #92]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dca4:	7a5b      	ldrb	r3, [r3, #9]
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	461a      	mov	r2, r3
 800dcaa:	4b13      	ldr	r3, [pc, #76]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dcac:	4413      	add	r3, r2
 800dcae:	79fa      	ldrb	r2, [r7, #7]
 800dcb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dcb2:	4b11      	ldr	r3, [pc, #68]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dcb4:	7a5b      	ldrb	r3, [r3, #9]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	b2d1      	uxtb	r1, r2
 800dcbc:	4a0e      	ldr	r2, [pc, #56]	; (800dcf8 <FATFS_LinkDriverEx+0x94>)
 800dcbe:	7251      	strb	r1, [r2, #9]
 800dcc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dcc2:	7dbb      	ldrb	r3, [r7, #22]
 800dcc4:	3330      	adds	r3, #48	; 0x30
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	223a      	movs	r2, #58	; 0x3a
 800dcd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	3302      	adds	r3, #2
 800dcd8:	222f      	movs	r2, #47	; 0x2f
 800dcda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	3303      	adds	r3, #3
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	20002e90 	.word	0x20002e90

0800dcfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd06:	2200      	movs	r2, #0
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff ffaa 	bl	800dc64 <FATFS_LinkDriverEx>
 800dd10:	4603      	mov	r3, r0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
	...

0800dd1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dd28:	88fb      	ldrh	r3, [r7, #6]
 800dd2a:	2b7f      	cmp	r3, #127	; 0x7f
 800dd2c:	d802      	bhi.n	800dd34 <ff_convert+0x18>
		c = chr;
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	81fb      	strh	r3, [r7, #14]
 800dd32:	e025      	b.n	800dd80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00b      	beq.n	800dd52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dd3a:	88fb      	ldrh	r3, [r7, #6]
 800dd3c:	2bff      	cmp	r3, #255	; 0xff
 800dd3e:	d805      	bhi.n	800dd4c <ff_convert+0x30>
 800dd40:	88fb      	ldrh	r3, [r7, #6]
 800dd42:	3b80      	subs	r3, #128	; 0x80
 800dd44:	4a12      	ldr	r2, [pc, #72]	; (800dd90 <ff_convert+0x74>)
 800dd46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd4a:	e000      	b.n	800dd4e <ff_convert+0x32>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	81fb      	strh	r3, [r7, #14]
 800dd50:	e016      	b.n	800dd80 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dd52:	2300      	movs	r3, #0
 800dd54:	81fb      	strh	r3, [r7, #14]
 800dd56:	e009      	b.n	800dd6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dd58:	89fb      	ldrh	r3, [r7, #14]
 800dd5a:	4a0d      	ldr	r2, [pc, #52]	; (800dd90 <ff_convert+0x74>)
 800dd5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd60:	88fa      	ldrh	r2, [r7, #6]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d006      	beq.n	800dd74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dd66:	89fb      	ldrh	r3, [r7, #14]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	81fb      	strh	r3, [r7, #14]
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd70:	d9f2      	bls.n	800dd58 <ff_convert+0x3c>
 800dd72:	e000      	b.n	800dd76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dd74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dd76:	89fb      	ldrh	r3, [r7, #14]
 800dd78:	3380      	adds	r3, #128	; 0x80
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dd80:	89fb      	ldrh	r3, [r7, #14]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3714      	adds	r7, #20
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	080116f0 	.word	0x080116f0

0800dd94 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b087      	sub	sp, #28
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dd9e:	88fb      	ldrh	r3, [r7, #6]
 800dda0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dda4:	d201      	bcs.n	800ddaa <ff_wtoupper+0x16>
 800dda6:	4b3e      	ldr	r3, [pc, #248]	; (800dea0 <ff_wtoupper+0x10c>)
 800dda8:	e000      	b.n	800ddac <ff_wtoupper+0x18>
 800ddaa:	4b3e      	ldr	r3, [pc, #248]	; (800dea4 <ff_wtoupper+0x110>)
 800ddac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	1c9a      	adds	r2, r3, #2
 800ddb2:	617a      	str	r2, [r7, #20]
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ddb8:	8a7b      	ldrh	r3, [r7, #18]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d068      	beq.n	800de90 <ff_wtoupper+0xfc>
 800ddbe:	88fa      	ldrh	r2, [r7, #6]
 800ddc0:	8a7b      	ldrh	r3, [r7, #18]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d364      	bcc.n	800de90 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	1c9a      	adds	r2, r3, #2
 800ddca:	617a      	str	r2, [r7, #20]
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	823b      	strh	r3, [r7, #16]
 800ddd0:	8a3b      	ldrh	r3, [r7, #16]
 800ddd2:	0a1b      	lsrs	r3, r3, #8
 800ddd4:	81fb      	strh	r3, [r7, #14]
 800ddd6:	8a3b      	ldrh	r3, [r7, #16]
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dddc:	88fa      	ldrh	r2, [r7, #6]
 800ddde:	8a79      	ldrh	r1, [r7, #18]
 800dde0:	8a3b      	ldrh	r3, [r7, #16]
 800dde2:	440b      	add	r3, r1
 800dde4:	429a      	cmp	r2, r3
 800dde6:	da49      	bge.n	800de7c <ff_wtoupper+0xe8>
			switch (cmd) {
 800dde8:	89fb      	ldrh	r3, [r7, #14]
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	d84f      	bhi.n	800de8e <ff_wtoupper+0xfa>
 800ddee:	a201      	add	r2, pc, #4	; (adr r2, 800ddf4 <ff_wtoupper+0x60>)
 800ddf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf4:	0800de19 	.word	0x0800de19
 800ddf8:	0800de2b 	.word	0x0800de2b
 800ddfc:	0800de41 	.word	0x0800de41
 800de00:	0800de49 	.word	0x0800de49
 800de04:	0800de51 	.word	0x0800de51
 800de08:	0800de59 	.word	0x0800de59
 800de0c:	0800de61 	.word	0x0800de61
 800de10:	0800de69 	.word	0x0800de69
 800de14:	0800de71 	.word	0x0800de71
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de18:	88fa      	ldrh	r2, [r7, #6]
 800de1a:	8a7b      	ldrh	r3, [r7, #18]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	005b      	lsls	r3, r3, #1
 800de20:	697a      	ldr	r2, [r7, #20]
 800de22:	4413      	add	r3, r2
 800de24:	881b      	ldrh	r3, [r3, #0]
 800de26:	80fb      	strh	r3, [r7, #6]
 800de28:	e027      	b.n	800de7a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800de2a:	88fa      	ldrh	r2, [r7, #6]
 800de2c:	8a7b      	ldrh	r3, [r7, #18]
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	b29b      	uxth	r3, r3
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	b29b      	uxth	r3, r3
 800de38:	88fa      	ldrh	r2, [r7, #6]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	80fb      	strh	r3, [r7, #6]
 800de3e:	e01c      	b.n	800de7a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800de40:	88fb      	ldrh	r3, [r7, #6]
 800de42:	3b10      	subs	r3, #16
 800de44:	80fb      	strh	r3, [r7, #6]
 800de46:	e018      	b.n	800de7a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800de48:	88fb      	ldrh	r3, [r7, #6]
 800de4a:	3b20      	subs	r3, #32
 800de4c:	80fb      	strh	r3, [r7, #6]
 800de4e:	e014      	b.n	800de7a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800de50:	88fb      	ldrh	r3, [r7, #6]
 800de52:	3b30      	subs	r3, #48	; 0x30
 800de54:	80fb      	strh	r3, [r7, #6]
 800de56:	e010      	b.n	800de7a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800de58:	88fb      	ldrh	r3, [r7, #6]
 800de5a:	3b1a      	subs	r3, #26
 800de5c:	80fb      	strh	r3, [r7, #6]
 800de5e:	e00c      	b.n	800de7a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800de60:	88fb      	ldrh	r3, [r7, #6]
 800de62:	3308      	adds	r3, #8
 800de64:	80fb      	strh	r3, [r7, #6]
 800de66:	e008      	b.n	800de7a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800de68:	88fb      	ldrh	r3, [r7, #6]
 800de6a:	3b50      	subs	r3, #80	; 0x50
 800de6c:	80fb      	strh	r3, [r7, #6]
 800de6e:	e004      	b.n	800de7a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800de70:	88fb      	ldrh	r3, [r7, #6]
 800de72:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800de76:	80fb      	strh	r3, [r7, #6]
 800de78:	bf00      	nop
			}
			break;
 800de7a:	e008      	b.n	800de8e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800de7c:	89fb      	ldrh	r3, [r7, #14]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d195      	bne.n	800ddae <ff_wtoupper+0x1a>
 800de82:	8a3b      	ldrh	r3, [r7, #16]
 800de84:	005b      	lsls	r3, r3, #1
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	4413      	add	r3, r2
 800de8a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800de8c:	e78f      	b.n	800ddae <ff_wtoupper+0x1a>
			break;
 800de8e:	bf00      	nop
	}

	return chr;
 800de90:	88fb      	ldrh	r3, [r7, #6]
}
 800de92:	4618      	mov	r0, r3
 800de94:	371c      	adds	r7, #28
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	080117f0 	.word	0x080117f0
 800dea4:	080119e4 	.word	0x080119e4

0800dea8 <atoi>:
 800dea8:	220a      	movs	r2, #10
 800deaa:	2100      	movs	r1, #0
 800deac:	f000 b8d8 	b.w	800e060 <strtol>

0800deb0 <gcvt>:
 800deb0:	b530      	push	{r4, r5, lr}
 800deb2:	2200      	movs	r2, #0
 800deb4:	b085      	sub	sp, #20
 800deb6:	460c      	mov	r4, r1
 800deb8:	4605      	mov	r5, r0
 800deba:	2300      	movs	r3, #0
 800debc:	ec51 0b10 	vmov	r0, r1, d0
 800dec0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dec4:	f7f2 fe2a 	bl	8000b1c <__aeabi_dcmplt>
 800dec8:	ed9d 0b02 	vldr	d0, [sp, #8]
 800decc:	4622      	mov	r2, r4
 800dece:	b118      	cbz	r0, 800ded8 <gcvt+0x28>
 800ded0:	232d      	movs	r3, #45	; 0x2d
 800ded2:	f802 3b01 	strb.w	r3, [r2], #1
 800ded6:	3d01      	subs	r5, #1
 800ded8:	2300      	movs	r3, #0
 800deda:	4806      	ldr	r0, [pc, #24]	; (800def4 <gcvt+0x44>)
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	4629      	mov	r1, r5
 800dee0:	2367      	movs	r3, #103	; 0x67
 800dee2:	6800      	ldr	r0, [r0, #0]
 800dee4:	f000 f940 	bl	800e168 <_gcvt>
 800dee8:	2800      	cmp	r0, #0
 800deea:	bf14      	ite	ne
 800deec:	4620      	movne	r0, r4
 800deee:	2000      	moveq	r0, #0
 800def0:	b005      	add	sp, #20
 800def2:	bd30      	pop	{r4, r5, pc}
 800def4:	2000003c 	.word	0x2000003c

0800def8 <__errno>:
 800def8:	4b01      	ldr	r3, [pc, #4]	; (800df00 <__errno+0x8>)
 800defa:	6818      	ldr	r0, [r3, #0]
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	2000003c 	.word	0x2000003c

0800df04 <__libc_init_array>:
 800df04:	b570      	push	{r4, r5, r6, lr}
 800df06:	4d0d      	ldr	r5, [pc, #52]	; (800df3c <__libc_init_array+0x38>)
 800df08:	4c0d      	ldr	r4, [pc, #52]	; (800df40 <__libc_init_array+0x3c>)
 800df0a:	1b64      	subs	r4, r4, r5
 800df0c:	10a4      	asrs	r4, r4, #2
 800df0e:	2600      	movs	r6, #0
 800df10:	42a6      	cmp	r6, r4
 800df12:	d109      	bne.n	800df28 <__libc_init_array+0x24>
 800df14:	4d0b      	ldr	r5, [pc, #44]	; (800df44 <__libc_init_array+0x40>)
 800df16:	4c0c      	ldr	r4, [pc, #48]	; (800df48 <__libc_init_array+0x44>)
 800df18:	f003 fb44 	bl	80115a4 <_init>
 800df1c:	1b64      	subs	r4, r4, r5
 800df1e:	10a4      	asrs	r4, r4, #2
 800df20:	2600      	movs	r6, #0
 800df22:	42a6      	cmp	r6, r4
 800df24:	d105      	bne.n	800df32 <__libc_init_array+0x2e>
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	f855 3b04 	ldr.w	r3, [r5], #4
 800df2c:	4798      	blx	r3
 800df2e:	3601      	adds	r6, #1
 800df30:	e7ee      	b.n	800df10 <__libc_init_array+0xc>
 800df32:	f855 3b04 	ldr.w	r3, [r5], #4
 800df36:	4798      	blx	r3
 800df38:	3601      	adds	r6, #1
 800df3a:	e7f2      	b.n	800df22 <__libc_init_array+0x1e>
 800df3c:	08011ea0 	.word	0x08011ea0
 800df40:	08011ea0 	.word	0x08011ea0
 800df44:	08011ea0 	.word	0x08011ea0
 800df48:	08011ea4 	.word	0x08011ea4

0800df4c <memset>:
 800df4c:	4402      	add	r2, r0
 800df4e:	4603      	mov	r3, r0
 800df50:	4293      	cmp	r3, r2
 800df52:	d100      	bne.n	800df56 <memset+0xa>
 800df54:	4770      	bx	lr
 800df56:	f803 1b01 	strb.w	r1, [r3], #1
 800df5a:	e7f9      	b.n	800df50 <memset+0x4>

0800df5c <_strtol_l.constprop.0>:
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df62:	d001      	beq.n	800df68 <_strtol_l.constprop.0+0xc>
 800df64:	2b24      	cmp	r3, #36	; 0x24
 800df66:	d906      	bls.n	800df76 <_strtol_l.constprop.0+0x1a>
 800df68:	f7ff ffc6 	bl	800def8 <__errno>
 800df6c:	2316      	movs	r3, #22
 800df6e:	6003      	str	r3, [r0, #0]
 800df70:	2000      	movs	r0, #0
 800df72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e05c <_strtol_l.constprop.0+0x100>
 800df7a:	460d      	mov	r5, r1
 800df7c:	462e      	mov	r6, r5
 800df7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df82:	f814 700c 	ldrb.w	r7, [r4, ip]
 800df86:	f017 0708 	ands.w	r7, r7, #8
 800df8a:	d1f7      	bne.n	800df7c <_strtol_l.constprop.0+0x20>
 800df8c:	2c2d      	cmp	r4, #45	; 0x2d
 800df8e:	d132      	bne.n	800dff6 <_strtol_l.constprop.0+0x9a>
 800df90:	782c      	ldrb	r4, [r5, #0]
 800df92:	2701      	movs	r7, #1
 800df94:	1cb5      	adds	r5, r6, #2
 800df96:	2b00      	cmp	r3, #0
 800df98:	d05b      	beq.n	800e052 <_strtol_l.constprop.0+0xf6>
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d109      	bne.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800df9e:	2c30      	cmp	r4, #48	; 0x30
 800dfa0:	d107      	bne.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800dfa2:	782c      	ldrb	r4, [r5, #0]
 800dfa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dfa8:	2c58      	cmp	r4, #88	; 0x58
 800dfaa:	d14d      	bne.n	800e048 <_strtol_l.constprop.0+0xec>
 800dfac:	786c      	ldrb	r4, [r5, #1]
 800dfae:	2310      	movs	r3, #16
 800dfb0:	3502      	adds	r5, #2
 800dfb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dfb6:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfba:	f04f 0c00 	mov.w	ip, #0
 800dfbe:	fbb8 f9f3 	udiv	r9, r8, r3
 800dfc2:	4666      	mov	r6, ip
 800dfc4:	fb03 8a19 	mls	sl, r3, r9, r8
 800dfc8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dfcc:	f1be 0f09 	cmp.w	lr, #9
 800dfd0:	d816      	bhi.n	800e000 <_strtol_l.constprop.0+0xa4>
 800dfd2:	4674      	mov	r4, lr
 800dfd4:	42a3      	cmp	r3, r4
 800dfd6:	dd24      	ble.n	800e022 <_strtol_l.constprop.0+0xc6>
 800dfd8:	f1bc 0f00 	cmp.w	ip, #0
 800dfdc:	db1e      	blt.n	800e01c <_strtol_l.constprop.0+0xc0>
 800dfde:	45b1      	cmp	r9, r6
 800dfe0:	d31c      	bcc.n	800e01c <_strtol_l.constprop.0+0xc0>
 800dfe2:	d101      	bne.n	800dfe8 <_strtol_l.constprop.0+0x8c>
 800dfe4:	45a2      	cmp	sl, r4
 800dfe6:	db19      	blt.n	800e01c <_strtol_l.constprop.0+0xc0>
 800dfe8:	fb06 4603 	mla	r6, r6, r3, r4
 800dfec:	f04f 0c01 	mov.w	ip, #1
 800dff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dff4:	e7e8      	b.n	800dfc8 <_strtol_l.constprop.0+0x6c>
 800dff6:	2c2b      	cmp	r4, #43	; 0x2b
 800dff8:	bf04      	itt	eq
 800dffa:	782c      	ldrbeq	r4, [r5, #0]
 800dffc:	1cb5      	addeq	r5, r6, #2
 800dffe:	e7ca      	b.n	800df96 <_strtol_l.constprop.0+0x3a>
 800e000:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e004:	f1be 0f19 	cmp.w	lr, #25
 800e008:	d801      	bhi.n	800e00e <_strtol_l.constprop.0+0xb2>
 800e00a:	3c37      	subs	r4, #55	; 0x37
 800e00c:	e7e2      	b.n	800dfd4 <_strtol_l.constprop.0+0x78>
 800e00e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e012:	f1be 0f19 	cmp.w	lr, #25
 800e016:	d804      	bhi.n	800e022 <_strtol_l.constprop.0+0xc6>
 800e018:	3c57      	subs	r4, #87	; 0x57
 800e01a:	e7db      	b.n	800dfd4 <_strtol_l.constprop.0+0x78>
 800e01c:	f04f 3cff 	mov.w	ip, #4294967295
 800e020:	e7e6      	b.n	800dff0 <_strtol_l.constprop.0+0x94>
 800e022:	f1bc 0f00 	cmp.w	ip, #0
 800e026:	da05      	bge.n	800e034 <_strtol_l.constprop.0+0xd8>
 800e028:	2322      	movs	r3, #34	; 0x22
 800e02a:	6003      	str	r3, [r0, #0]
 800e02c:	4646      	mov	r6, r8
 800e02e:	b942      	cbnz	r2, 800e042 <_strtol_l.constprop.0+0xe6>
 800e030:	4630      	mov	r0, r6
 800e032:	e79e      	b.n	800df72 <_strtol_l.constprop.0+0x16>
 800e034:	b107      	cbz	r7, 800e038 <_strtol_l.constprop.0+0xdc>
 800e036:	4276      	negs	r6, r6
 800e038:	2a00      	cmp	r2, #0
 800e03a:	d0f9      	beq.n	800e030 <_strtol_l.constprop.0+0xd4>
 800e03c:	f1bc 0f00 	cmp.w	ip, #0
 800e040:	d000      	beq.n	800e044 <_strtol_l.constprop.0+0xe8>
 800e042:	1e69      	subs	r1, r5, #1
 800e044:	6011      	str	r1, [r2, #0]
 800e046:	e7f3      	b.n	800e030 <_strtol_l.constprop.0+0xd4>
 800e048:	2430      	movs	r4, #48	; 0x30
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1b1      	bne.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800e04e:	2308      	movs	r3, #8
 800e050:	e7af      	b.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800e052:	2c30      	cmp	r4, #48	; 0x30
 800e054:	d0a5      	beq.n	800dfa2 <_strtol_l.constprop.0+0x46>
 800e056:	230a      	movs	r3, #10
 800e058:	e7ab      	b.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800e05a:	bf00      	nop
 800e05c:	08011aa5 	.word	0x08011aa5

0800e060 <strtol>:
 800e060:	4613      	mov	r3, r2
 800e062:	460a      	mov	r2, r1
 800e064:	4601      	mov	r1, r0
 800e066:	4802      	ldr	r0, [pc, #8]	; (800e070 <strtol+0x10>)
 800e068:	6800      	ldr	r0, [r0, #0]
 800e06a:	f7ff bf77 	b.w	800df5c <_strtol_l.constprop.0>
 800e06e:	bf00      	nop
 800e070:	2000003c 	.word	0x2000003c

0800e074 <print_e>:
 800e074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e076:	b087      	sub	sp, #28
 800e078:	ec43 2b10 	vmov	d0, r2, r3
 800e07c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e07e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e082:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e084:	ab04      	add	r3, sp, #16
 800e086:	9301      	str	r3, [sp, #4]
 800e088:	ab03      	add	r3, sp, #12
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	1c62      	adds	r2, r4, #1
 800e08e:	ab05      	add	r3, sp, #20
 800e090:	460f      	mov	r7, r1
 800e092:	2102      	movs	r1, #2
 800e094:	f000 fe38 	bl	800ed08 <_dtoa_r>
 800e098:	9a05      	ldr	r2, [sp, #20]
 800e09a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d105      	bne.n	800e0ae <print_e+0x3a>
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	4638      	mov	r0, r7
 800e0a6:	f000 fd7b 	bl	800eba0 <strcpy>
 800e0aa:	b007      	add	sp, #28
 800e0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	7801      	ldrb	r1, [r0, #0]
 800e0b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0b6:	2c00      	cmp	r4, #0
 800e0b8:	bfc8      	it	gt
 800e0ba:	2501      	movgt	r5, #1
 800e0bc:	212e      	movs	r1, #46	; 0x2e
 800e0be:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e0c2:	b10f      	cbz	r7, 800e0c8 <print_e+0x54>
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	dc37      	bgt.n	800e138 <print_e+0xc4>
 800e0c8:	2e67      	cmp	r6, #103	; 0x67
 800e0ca:	d046      	beq.n	800e15a <print_e+0xe6>
 800e0cc:	2e47      	cmp	r6, #71	; 0x47
 800e0ce:	d046      	beq.n	800e15e <print_e+0xea>
 800e0d0:	212e      	movs	r1, #46	; 0x2e
 800e0d2:	2030      	movs	r0, #48	; 0x30
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	dc38      	bgt.n	800e14a <print_e+0xd6>
 800e0d8:	1e51      	subs	r1, r2, #1
 800e0da:	2900      	cmp	r1, #0
 800e0dc:	bfb8      	it	lt
 800e0de:	f1c2 0201 	rsblt	r2, r2, #1
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	9105      	str	r1, [sp, #20]
 800e0e6:	bfac      	ite	ge
 800e0e8:	222b      	movge	r2, #43	; 0x2b
 800e0ea:	9205      	strlt	r2, [sp, #20]
 800e0ec:	f800 6b02 	strb.w	r6, [r0], #2
 800e0f0:	bfa8      	it	ge
 800e0f2:	705a      	strbge	r2, [r3, #1]
 800e0f4:	9a05      	ldr	r2, [sp, #20]
 800e0f6:	bfbc      	itt	lt
 800e0f8:	212d      	movlt	r1, #45	; 0x2d
 800e0fa:	7059      	strblt	r1, [r3, #1]
 800e0fc:	2a63      	cmp	r2, #99	; 0x63
 800e0fe:	dd0b      	ble.n	800e118 <print_e+0xa4>
 800e100:	2164      	movs	r1, #100	; 0x64
 800e102:	fb92 f1f1 	sdiv	r1, r2, r1
 800e106:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800e10a:	1cd8      	adds	r0, r3, #3
 800e10c:	709c      	strb	r4, [r3, #2]
 800e10e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e112:	fb03 2201 	mla	r2, r3, r1, r2
 800e116:	9205      	str	r2, [sp, #20]
 800e118:	9b05      	ldr	r3, [sp, #20]
 800e11a:	220a      	movs	r2, #10
 800e11c:	fb93 f2f2 	sdiv	r2, r3, r2
 800e120:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800e124:	7001      	strb	r1, [r0, #0]
 800e126:	f06f 0109 	mvn.w	r1, #9
 800e12a:	fb01 3302 	mla	r3, r1, r2, r3
 800e12e:	3330      	adds	r3, #48	; 0x30
 800e130:	7043      	strb	r3, [r0, #1]
 800e132:	2300      	movs	r3, #0
 800e134:	7083      	strb	r3, [r0, #2]
 800e136:	e7b8      	b.n	800e0aa <print_e+0x36>
 800e138:	b10d      	cbz	r5, 800e13e <print_e+0xca>
 800e13a:	f803 1b01 	strb.w	r1, [r3], #1
 800e13e:	7805      	ldrb	r5, [r0, #0]
 800e140:	f803 5b01 	strb.w	r5, [r3], #1
 800e144:	3c01      	subs	r4, #1
 800e146:	2500      	movs	r5, #0
 800e148:	e7b9      	b.n	800e0be <print_e+0x4a>
 800e14a:	b10d      	cbz	r5, 800e150 <print_e+0xdc>
 800e14c:	f803 1b01 	strb.w	r1, [r3], #1
 800e150:	f803 0b01 	strb.w	r0, [r3], #1
 800e154:	3c01      	subs	r4, #1
 800e156:	2500      	movs	r5, #0
 800e158:	e7bc      	b.n	800e0d4 <print_e+0x60>
 800e15a:	2665      	movs	r6, #101	; 0x65
 800e15c:	e7bc      	b.n	800e0d8 <print_e+0x64>
 800e15e:	2645      	movs	r6, #69	; 0x45
 800e160:	e7ba      	b.n	800e0d8 <print_e+0x64>
 800e162:	0000      	movs	r0, r0
 800e164:	0000      	movs	r0, r0
	...

0800e168 <_gcvt>:
 800e168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e16c:	ec55 4b10 	vmov	r4, r5, d0
 800e170:	b088      	sub	sp, #32
 800e172:	4681      	mov	r9, r0
 800e174:	4688      	mov	r8, r1
 800e176:	4616      	mov	r6, r2
 800e178:	469a      	mov	sl, r3
 800e17a:	ee10 0a10 	vmov	r0, s0
 800e17e:	2200      	movs	r2, #0
 800e180:	2300      	movs	r3, #0
 800e182:	4629      	mov	r1, r5
 800e184:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e186:	f7f2 fcc9 	bl	8000b1c <__aeabi_dcmplt>
 800e18a:	b110      	cbz	r0, 800e192 <_gcvt+0x2a>
 800e18c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e190:	461d      	mov	r5, r3
 800e192:	2200      	movs	r2, #0
 800e194:	2300      	movs	r3, #0
 800e196:	4620      	mov	r0, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 800e19e:	b138      	cbz	r0, 800e1b0 <_gcvt+0x48>
 800e1a0:	2330      	movs	r3, #48	; 0x30
 800e1a2:	7033      	strb	r3, [r6, #0]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	7073      	strb	r3, [r6, #1]
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	b008      	add	sp, #32
 800e1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b0:	a34b      	add	r3, pc, #300	; (adr r3, 800e2e0 <_gcvt+0x178>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	4629      	mov	r1, r5
 800e1ba:	f7f2 fcb9 	bl	8000b30 <__aeabi_dcmple>
 800e1be:	b158      	cbz	r0, 800e1d8 <_gcvt+0x70>
 800e1c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800e1c4:	9100      	str	r1, [sp, #0]
 800e1c6:	e9cd a701 	strd	sl, r7, [sp, #4]
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	462b      	mov	r3, r5
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4648      	mov	r0, r9
 800e1d2:	f7ff ff4f 	bl	800e074 <print_e>
 800e1d6:	e7e7      	b.n	800e1a8 <_gcvt+0x40>
 800e1d8:	4640      	mov	r0, r8
 800e1da:	f000 fc09 	bl	800e9f0 <_mprec_log10>
 800e1de:	4622      	mov	r2, r4
 800e1e0:	ec51 0b10 	vmov	r0, r1, d0
 800e1e4:	462b      	mov	r3, r5
 800e1e6:	f7f2 fca3 	bl	8000b30 <__aeabi_dcmple>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d1e8      	bne.n	800e1c0 <_gcvt+0x58>
 800e1ee:	ab07      	add	r3, sp, #28
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	ab06      	add	r3, sp, #24
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	ab05      	add	r3, sp, #20
 800e1fa:	ec45 4b10 	vmov	d0, r4, r5
 800e1fe:	2102      	movs	r1, #2
 800e200:	4648      	mov	r0, r9
 800e202:	f000 fd81 	bl	800ed08 <_dtoa_r>
 800e206:	9a05      	ldr	r2, [sp, #20]
 800e208:	f242 730f 	movw	r3, #9999	; 0x270f
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d00e      	beq.n	800e22e <_gcvt+0xc6>
 800e210:	4633      	mov	r3, r6
 800e212:	44b0      	add	r8, r6
 800e214:	4605      	mov	r5, r0
 800e216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e21a:	9c05      	ldr	r4, [sp, #20]
 800e21c:	eba8 0203 	sub.w	r2, r8, r3
 800e220:	b109      	cbz	r1, 800e226 <_gcvt+0xbe>
 800e222:	2c00      	cmp	r4, #0
 800e224:	dc08      	bgt.n	800e238 <_gcvt+0xd0>
 800e226:	2100      	movs	r1, #0
 800e228:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e22c:	e00d      	b.n	800e24a <_gcvt+0xe2>
 800e22e:	4601      	mov	r1, r0
 800e230:	4630      	mov	r0, r6
 800e232:	f000 fcb5 	bl	800eba0 <strcpy>
 800e236:	e7b7      	b.n	800e1a8 <_gcvt+0x40>
 800e238:	3c01      	subs	r4, #1
 800e23a:	f803 1b01 	strb.w	r1, [r3], #1
 800e23e:	9405      	str	r4, [sp, #20]
 800e240:	e7e8      	b.n	800e214 <_gcvt+0xac>
 800e242:	f803 cb01 	strb.w	ip, [r3], #1
 800e246:	3a01      	subs	r2, #1
 800e248:	2101      	movs	r1, #1
 800e24a:	2c00      	cmp	r4, #0
 800e24c:	4620      	mov	r0, r4
 800e24e:	dc2a      	bgt.n	800e2a6 <_gcvt+0x13e>
 800e250:	b101      	cbz	r1, 800e254 <_gcvt+0xec>
 800e252:	9405      	str	r4, [sp, #20]
 800e254:	b90f      	cbnz	r7, 800e25a <_gcvt+0xf2>
 800e256:	7829      	ldrb	r1, [r5, #0]
 800e258:	b311      	cbz	r1, 800e2a0 <_gcvt+0x138>
 800e25a:	42b3      	cmp	r3, r6
 800e25c:	bf04      	itt	eq
 800e25e:	2130      	moveq	r1, #48	; 0x30
 800e260:	f803 1b01 	strbeq.w	r1, [r3], #1
 800e264:	212e      	movs	r1, #46	; 0x2e
 800e266:	7019      	strb	r1, [r3, #0]
 800e268:	9905      	ldr	r1, [sp, #20]
 800e26a:	4618      	mov	r0, r3
 800e26c:	2400      	movs	r4, #0
 800e26e:	eba1 0c03 	sub.w	ip, r1, r3
 800e272:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800e276:	eb1c 0f00 	cmn.w	ip, r0
 800e27a:	d41c      	bmi.n	800e2b6 <_gcvt+0x14e>
 800e27c:	2900      	cmp	r1, #0
 800e27e:	f1c1 0000 	rsb	r0, r1, #0
 800e282:	bfc8      	it	gt
 800e284:	2000      	movgt	r0, #0
 800e286:	f100 0c01 	add.w	ip, r0, #1
 800e28a:	4463      	add	r3, ip
 800e28c:	4401      	add	r1, r0
 800e28e:	b104      	cbz	r4, 800e292 <_gcvt+0x12a>
 800e290:	9105      	str	r1, [sp, #20]
 800e292:	1e69      	subs	r1, r5, #1
 800e294:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e298:	b108      	cbz	r0, 800e29e <_gcvt+0x136>
 800e29a:	2a00      	cmp	r2, #0
 800e29c:	dc0f      	bgt.n	800e2be <_gcvt+0x156>
 800e29e:	b9df      	cbnz	r7, 800e2d8 <_gcvt+0x170>
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	e780      	b.n	800e1a8 <_gcvt+0x40>
 800e2a6:	2a00      	cmp	r2, #0
 800e2a8:	f104 34ff 	add.w	r4, r4, #4294967295
 800e2ac:	dcc9      	bgt.n	800e242 <_gcvt+0xda>
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	d0d0      	beq.n	800e254 <_gcvt+0xec>
 800e2b2:	9005      	str	r0, [sp, #20]
 800e2b4:	e7ce      	b.n	800e254 <_gcvt+0xec>
 800e2b6:	f800 ef01 	strb.w	lr, [r0, #1]!
 800e2ba:	2401      	movs	r4, #1
 800e2bc:	e7db      	b.n	800e276 <_gcvt+0x10e>
 800e2be:	f803 0b01 	strb.w	r0, [r3], #1
 800e2c2:	3a01      	subs	r2, #1
 800e2c4:	e7e6      	b.n	800e294 <_gcvt+0x12c>
 800e2c6:	f801 5b01 	strb.w	r5, [r1], #1
 800e2ca:	1a60      	subs	r0, r4, r1
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	dcfa      	bgt.n	800e2c6 <_gcvt+0x15e>
 800e2d0:	2a00      	cmp	r2, #0
 800e2d2:	bfa8      	it	ge
 800e2d4:	189b      	addge	r3, r3, r2
 800e2d6:	e7e3      	b.n	800e2a0 <_gcvt+0x138>
 800e2d8:	4619      	mov	r1, r3
 800e2da:	189c      	adds	r4, r3, r2
 800e2dc:	2530      	movs	r5, #48	; 0x30
 800e2de:	e7f4      	b.n	800e2ca <_gcvt+0x162>
 800e2e0:	eb1c432d 	.word	0xeb1c432d
 800e2e4:	3f1a36e2 	.word	0x3f1a36e2

0800e2e8 <_Balloc>:
 800e2e8:	b570      	push	{r4, r5, r6, lr}
 800e2ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	b976      	cbnz	r6, 800e310 <_Balloc+0x28>
 800e2f2:	2010      	movs	r0, #16
 800e2f4:	f001 fb08 	bl	800f908 <malloc>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	6260      	str	r0, [r4, #36]	; 0x24
 800e2fc:	b920      	cbnz	r0, 800e308 <_Balloc+0x20>
 800e2fe:	4b18      	ldr	r3, [pc, #96]	; (800e360 <_Balloc+0x78>)
 800e300:	4818      	ldr	r0, [pc, #96]	; (800e364 <_Balloc+0x7c>)
 800e302:	2166      	movs	r1, #102	; 0x66
 800e304:	f000 fc54 	bl	800ebb0 <__assert_func>
 800e308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e30c:	6006      	str	r6, [r0, #0]
 800e30e:	60c6      	str	r6, [r0, #12]
 800e310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e312:	68f3      	ldr	r3, [r6, #12]
 800e314:	b183      	cbz	r3, 800e338 <_Balloc+0x50>
 800e316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e31e:	b9b8      	cbnz	r0, 800e350 <_Balloc+0x68>
 800e320:	2101      	movs	r1, #1
 800e322:	fa01 f605 	lsl.w	r6, r1, r5
 800e326:	1d72      	adds	r2, r6, #5
 800e328:	0092      	lsls	r2, r2, #2
 800e32a:	4620      	mov	r0, r4
 800e32c:	f000 fb7e 	bl	800ea2c <_calloc_r>
 800e330:	b160      	cbz	r0, 800e34c <_Balloc+0x64>
 800e332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e336:	e00e      	b.n	800e356 <_Balloc+0x6e>
 800e338:	2221      	movs	r2, #33	; 0x21
 800e33a:	2104      	movs	r1, #4
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 fb75 	bl	800ea2c <_calloc_r>
 800e342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e344:	60f0      	str	r0, [r6, #12]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1e4      	bne.n	800e316 <_Balloc+0x2e>
 800e34c:	2000      	movs	r0, #0
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	6802      	ldr	r2, [r0, #0]
 800e352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e356:	2300      	movs	r3, #0
 800e358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e35c:	e7f7      	b.n	800e34e <_Balloc+0x66>
 800e35e:	bf00      	nop
 800e360:	08011ba5 	.word	0x08011ba5
 800e364:	08011bbc 	.word	0x08011bbc

0800e368 <_Bfree>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e36c:	4605      	mov	r5, r0
 800e36e:	460c      	mov	r4, r1
 800e370:	b976      	cbnz	r6, 800e390 <_Bfree+0x28>
 800e372:	2010      	movs	r0, #16
 800e374:	f001 fac8 	bl	800f908 <malloc>
 800e378:	4602      	mov	r2, r0
 800e37a:	6268      	str	r0, [r5, #36]	; 0x24
 800e37c:	b920      	cbnz	r0, 800e388 <_Bfree+0x20>
 800e37e:	4b09      	ldr	r3, [pc, #36]	; (800e3a4 <_Bfree+0x3c>)
 800e380:	4809      	ldr	r0, [pc, #36]	; (800e3a8 <_Bfree+0x40>)
 800e382:	218a      	movs	r1, #138	; 0x8a
 800e384:	f000 fc14 	bl	800ebb0 <__assert_func>
 800e388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e38c:	6006      	str	r6, [r0, #0]
 800e38e:	60c6      	str	r6, [r0, #12]
 800e390:	b13c      	cbz	r4, 800e3a2 <_Bfree+0x3a>
 800e392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e394:	6862      	ldr	r2, [r4, #4]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e39c:	6021      	str	r1, [r4, #0]
 800e39e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3a2:	bd70      	pop	{r4, r5, r6, pc}
 800e3a4:	08011ba5 	.word	0x08011ba5
 800e3a8:	08011bbc 	.word	0x08011bbc

0800e3ac <__multadd>:
 800e3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b0:	690d      	ldr	r5, [r1, #16]
 800e3b2:	4607      	mov	r7, r0
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	461e      	mov	r6, r3
 800e3b8:	f101 0c14 	add.w	ip, r1, #20
 800e3bc:	2000      	movs	r0, #0
 800e3be:	f8dc 3000 	ldr.w	r3, [ip]
 800e3c2:	b299      	uxth	r1, r3
 800e3c4:	fb02 6101 	mla	r1, r2, r1, r6
 800e3c8:	0c1e      	lsrs	r6, r3, #16
 800e3ca:	0c0b      	lsrs	r3, r1, #16
 800e3cc:	fb02 3306 	mla	r3, r2, r6, r3
 800e3d0:	b289      	uxth	r1, r1
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3d8:	4285      	cmp	r5, r0
 800e3da:	f84c 1b04 	str.w	r1, [ip], #4
 800e3de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3e2:	dcec      	bgt.n	800e3be <__multadd+0x12>
 800e3e4:	b30e      	cbz	r6, 800e42a <__multadd+0x7e>
 800e3e6:	68a3      	ldr	r3, [r4, #8]
 800e3e8:	42ab      	cmp	r3, r5
 800e3ea:	dc19      	bgt.n	800e420 <__multadd+0x74>
 800e3ec:	6861      	ldr	r1, [r4, #4]
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	3101      	adds	r1, #1
 800e3f2:	f7ff ff79 	bl	800e2e8 <_Balloc>
 800e3f6:	4680      	mov	r8, r0
 800e3f8:	b928      	cbnz	r0, 800e406 <__multadd+0x5a>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <__multadd+0x84>)
 800e3fe:	480d      	ldr	r0, [pc, #52]	; (800e434 <__multadd+0x88>)
 800e400:	21b5      	movs	r1, #181	; 0xb5
 800e402:	f000 fbd5 	bl	800ebb0 <__assert_func>
 800e406:	6922      	ldr	r2, [r4, #16]
 800e408:	3202      	adds	r2, #2
 800e40a:	f104 010c 	add.w	r1, r4, #12
 800e40e:	0092      	lsls	r2, r2, #2
 800e410:	300c      	adds	r0, #12
 800e412:	f001 fa81 	bl	800f918 <memcpy>
 800e416:	4621      	mov	r1, r4
 800e418:	4638      	mov	r0, r7
 800e41a:	f7ff ffa5 	bl	800e368 <_Bfree>
 800e41e:	4644      	mov	r4, r8
 800e420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e424:	3501      	adds	r5, #1
 800e426:	615e      	str	r6, [r3, #20]
 800e428:	6125      	str	r5, [r4, #16]
 800e42a:	4620      	mov	r0, r4
 800e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e430:	08011c18 	.word	0x08011c18
 800e434:	08011bbc 	.word	0x08011bbc

0800e438 <__hi0bits>:
 800e438:	0c03      	lsrs	r3, r0, #16
 800e43a:	041b      	lsls	r3, r3, #16
 800e43c:	b9d3      	cbnz	r3, 800e474 <__hi0bits+0x3c>
 800e43e:	0400      	lsls	r0, r0, #16
 800e440:	2310      	movs	r3, #16
 800e442:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e446:	bf04      	itt	eq
 800e448:	0200      	lsleq	r0, r0, #8
 800e44a:	3308      	addeq	r3, #8
 800e44c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e450:	bf04      	itt	eq
 800e452:	0100      	lsleq	r0, r0, #4
 800e454:	3304      	addeq	r3, #4
 800e456:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e45a:	bf04      	itt	eq
 800e45c:	0080      	lsleq	r0, r0, #2
 800e45e:	3302      	addeq	r3, #2
 800e460:	2800      	cmp	r0, #0
 800e462:	db05      	blt.n	800e470 <__hi0bits+0x38>
 800e464:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e468:	f103 0301 	add.w	r3, r3, #1
 800e46c:	bf08      	it	eq
 800e46e:	2320      	moveq	r3, #32
 800e470:	4618      	mov	r0, r3
 800e472:	4770      	bx	lr
 800e474:	2300      	movs	r3, #0
 800e476:	e7e4      	b.n	800e442 <__hi0bits+0xa>

0800e478 <__lo0bits>:
 800e478:	6803      	ldr	r3, [r0, #0]
 800e47a:	f013 0207 	ands.w	r2, r3, #7
 800e47e:	4601      	mov	r1, r0
 800e480:	d00b      	beq.n	800e49a <__lo0bits+0x22>
 800e482:	07da      	lsls	r2, r3, #31
 800e484:	d423      	bmi.n	800e4ce <__lo0bits+0x56>
 800e486:	0798      	lsls	r0, r3, #30
 800e488:	bf49      	itett	mi
 800e48a:	085b      	lsrmi	r3, r3, #1
 800e48c:	089b      	lsrpl	r3, r3, #2
 800e48e:	2001      	movmi	r0, #1
 800e490:	600b      	strmi	r3, [r1, #0]
 800e492:	bf5c      	itt	pl
 800e494:	600b      	strpl	r3, [r1, #0]
 800e496:	2002      	movpl	r0, #2
 800e498:	4770      	bx	lr
 800e49a:	b298      	uxth	r0, r3
 800e49c:	b9a8      	cbnz	r0, 800e4ca <__lo0bits+0x52>
 800e49e:	0c1b      	lsrs	r3, r3, #16
 800e4a0:	2010      	movs	r0, #16
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	b90a      	cbnz	r2, 800e4aa <__lo0bits+0x32>
 800e4a6:	3008      	adds	r0, #8
 800e4a8:	0a1b      	lsrs	r3, r3, #8
 800e4aa:	071a      	lsls	r2, r3, #28
 800e4ac:	bf04      	itt	eq
 800e4ae:	091b      	lsreq	r3, r3, #4
 800e4b0:	3004      	addeq	r0, #4
 800e4b2:	079a      	lsls	r2, r3, #30
 800e4b4:	bf04      	itt	eq
 800e4b6:	089b      	lsreq	r3, r3, #2
 800e4b8:	3002      	addeq	r0, #2
 800e4ba:	07da      	lsls	r2, r3, #31
 800e4bc:	d403      	bmi.n	800e4c6 <__lo0bits+0x4e>
 800e4be:	085b      	lsrs	r3, r3, #1
 800e4c0:	f100 0001 	add.w	r0, r0, #1
 800e4c4:	d005      	beq.n	800e4d2 <__lo0bits+0x5a>
 800e4c6:	600b      	str	r3, [r1, #0]
 800e4c8:	4770      	bx	lr
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	e7e9      	b.n	800e4a2 <__lo0bits+0x2a>
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	4770      	bx	lr
 800e4d2:	2020      	movs	r0, #32
 800e4d4:	4770      	bx	lr
	...

0800e4d8 <__i2b>:
 800e4d8:	b510      	push	{r4, lr}
 800e4da:	460c      	mov	r4, r1
 800e4dc:	2101      	movs	r1, #1
 800e4de:	f7ff ff03 	bl	800e2e8 <_Balloc>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	b928      	cbnz	r0, 800e4f2 <__i2b+0x1a>
 800e4e6:	4b05      	ldr	r3, [pc, #20]	; (800e4fc <__i2b+0x24>)
 800e4e8:	4805      	ldr	r0, [pc, #20]	; (800e500 <__i2b+0x28>)
 800e4ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e4ee:	f000 fb5f 	bl	800ebb0 <__assert_func>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	6144      	str	r4, [r0, #20]
 800e4f6:	6103      	str	r3, [r0, #16]
 800e4f8:	bd10      	pop	{r4, pc}
 800e4fa:	bf00      	nop
 800e4fc:	08011c18 	.word	0x08011c18
 800e500:	08011bbc 	.word	0x08011bbc

0800e504 <__multiply>:
 800e504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	4691      	mov	r9, r2
 800e50a:	690a      	ldr	r2, [r1, #16]
 800e50c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e510:	429a      	cmp	r2, r3
 800e512:	bfb8      	it	lt
 800e514:	460b      	movlt	r3, r1
 800e516:	460c      	mov	r4, r1
 800e518:	bfbc      	itt	lt
 800e51a:	464c      	movlt	r4, r9
 800e51c:	4699      	movlt	r9, r3
 800e51e:	6927      	ldr	r7, [r4, #16]
 800e520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e524:	68a3      	ldr	r3, [r4, #8]
 800e526:	6861      	ldr	r1, [r4, #4]
 800e528:	eb07 060a 	add.w	r6, r7, sl
 800e52c:	42b3      	cmp	r3, r6
 800e52e:	b085      	sub	sp, #20
 800e530:	bfb8      	it	lt
 800e532:	3101      	addlt	r1, #1
 800e534:	f7ff fed8 	bl	800e2e8 <_Balloc>
 800e538:	b930      	cbnz	r0, 800e548 <__multiply+0x44>
 800e53a:	4602      	mov	r2, r0
 800e53c:	4b44      	ldr	r3, [pc, #272]	; (800e650 <__multiply+0x14c>)
 800e53e:	4845      	ldr	r0, [pc, #276]	; (800e654 <__multiply+0x150>)
 800e540:	f240 115d 	movw	r1, #349	; 0x15d
 800e544:	f000 fb34 	bl	800ebb0 <__assert_func>
 800e548:	f100 0514 	add.w	r5, r0, #20
 800e54c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e550:	462b      	mov	r3, r5
 800e552:	2200      	movs	r2, #0
 800e554:	4543      	cmp	r3, r8
 800e556:	d321      	bcc.n	800e59c <__multiply+0x98>
 800e558:	f104 0314 	add.w	r3, r4, #20
 800e55c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e560:	f109 0314 	add.w	r3, r9, #20
 800e564:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e568:	9202      	str	r2, [sp, #8]
 800e56a:	1b3a      	subs	r2, r7, r4
 800e56c:	3a15      	subs	r2, #21
 800e56e:	f022 0203 	bic.w	r2, r2, #3
 800e572:	3204      	adds	r2, #4
 800e574:	f104 0115 	add.w	r1, r4, #21
 800e578:	428f      	cmp	r7, r1
 800e57a:	bf38      	it	cc
 800e57c:	2204      	movcc	r2, #4
 800e57e:	9201      	str	r2, [sp, #4]
 800e580:	9a02      	ldr	r2, [sp, #8]
 800e582:	9303      	str	r3, [sp, #12]
 800e584:	429a      	cmp	r2, r3
 800e586:	d80c      	bhi.n	800e5a2 <__multiply+0x9e>
 800e588:	2e00      	cmp	r6, #0
 800e58a:	dd03      	ble.n	800e594 <__multiply+0x90>
 800e58c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e590:	2b00      	cmp	r3, #0
 800e592:	d05a      	beq.n	800e64a <__multiply+0x146>
 800e594:	6106      	str	r6, [r0, #16]
 800e596:	b005      	add	sp, #20
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	f843 2b04 	str.w	r2, [r3], #4
 800e5a0:	e7d8      	b.n	800e554 <__multiply+0x50>
 800e5a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5a6:	f1ba 0f00 	cmp.w	sl, #0
 800e5aa:	d024      	beq.n	800e5f6 <__multiply+0xf2>
 800e5ac:	f104 0e14 	add.w	lr, r4, #20
 800e5b0:	46a9      	mov	r9, r5
 800e5b2:	f04f 0c00 	mov.w	ip, #0
 800e5b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5ba:	f8d9 1000 	ldr.w	r1, [r9]
 800e5be:	fa1f fb82 	uxth.w	fp, r2
 800e5c2:	b289      	uxth	r1, r1
 800e5c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5cc:	f8d9 2000 	ldr.w	r2, [r9]
 800e5d0:	4461      	add	r1, ip
 800e5d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5de:	b289      	uxth	r1, r1
 800e5e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e5e4:	4577      	cmp	r7, lr
 800e5e6:	f849 1b04 	str.w	r1, [r9], #4
 800e5ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5ee:	d8e2      	bhi.n	800e5b6 <__multiply+0xb2>
 800e5f0:	9a01      	ldr	r2, [sp, #4]
 800e5f2:	f845 c002 	str.w	ip, [r5, r2]
 800e5f6:	9a03      	ldr	r2, [sp, #12]
 800e5f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	f1b9 0f00 	cmp.w	r9, #0
 800e602:	d020      	beq.n	800e646 <__multiply+0x142>
 800e604:	6829      	ldr	r1, [r5, #0]
 800e606:	f104 0c14 	add.w	ip, r4, #20
 800e60a:	46ae      	mov	lr, r5
 800e60c:	f04f 0a00 	mov.w	sl, #0
 800e610:	f8bc b000 	ldrh.w	fp, [ip]
 800e614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e618:	fb09 220b 	mla	r2, r9, fp, r2
 800e61c:	4492      	add	sl, r2
 800e61e:	b289      	uxth	r1, r1
 800e620:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e624:	f84e 1b04 	str.w	r1, [lr], #4
 800e628:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e62c:	f8be 1000 	ldrh.w	r1, [lr]
 800e630:	0c12      	lsrs	r2, r2, #16
 800e632:	fb09 1102 	mla	r1, r9, r2, r1
 800e636:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e63a:	4567      	cmp	r7, ip
 800e63c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e640:	d8e6      	bhi.n	800e610 <__multiply+0x10c>
 800e642:	9a01      	ldr	r2, [sp, #4]
 800e644:	50a9      	str	r1, [r5, r2]
 800e646:	3504      	adds	r5, #4
 800e648:	e79a      	b.n	800e580 <__multiply+0x7c>
 800e64a:	3e01      	subs	r6, #1
 800e64c:	e79c      	b.n	800e588 <__multiply+0x84>
 800e64e:	bf00      	nop
 800e650:	08011c18 	.word	0x08011c18
 800e654:	08011bbc 	.word	0x08011bbc

0800e658 <__pow5mult>:
 800e658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e65c:	4615      	mov	r5, r2
 800e65e:	f012 0203 	ands.w	r2, r2, #3
 800e662:	4606      	mov	r6, r0
 800e664:	460f      	mov	r7, r1
 800e666:	d007      	beq.n	800e678 <__pow5mult+0x20>
 800e668:	4c25      	ldr	r4, [pc, #148]	; (800e700 <__pow5mult+0xa8>)
 800e66a:	3a01      	subs	r2, #1
 800e66c:	2300      	movs	r3, #0
 800e66e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e672:	f7ff fe9b 	bl	800e3ac <__multadd>
 800e676:	4607      	mov	r7, r0
 800e678:	10ad      	asrs	r5, r5, #2
 800e67a:	d03d      	beq.n	800e6f8 <__pow5mult+0xa0>
 800e67c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e67e:	b97c      	cbnz	r4, 800e6a0 <__pow5mult+0x48>
 800e680:	2010      	movs	r0, #16
 800e682:	f001 f941 	bl	800f908 <malloc>
 800e686:	4602      	mov	r2, r0
 800e688:	6270      	str	r0, [r6, #36]	; 0x24
 800e68a:	b928      	cbnz	r0, 800e698 <__pow5mult+0x40>
 800e68c:	4b1d      	ldr	r3, [pc, #116]	; (800e704 <__pow5mult+0xac>)
 800e68e:	481e      	ldr	r0, [pc, #120]	; (800e708 <__pow5mult+0xb0>)
 800e690:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e694:	f000 fa8c 	bl	800ebb0 <__assert_func>
 800e698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e69c:	6004      	str	r4, [r0, #0]
 800e69e:	60c4      	str	r4, [r0, #12]
 800e6a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6a8:	b94c      	cbnz	r4, 800e6be <__pow5mult+0x66>
 800e6aa:	f240 2171 	movw	r1, #625	; 0x271
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f7ff ff12 	bl	800e4d8 <__i2b>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	6003      	str	r3, [r0, #0]
 800e6be:	f04f 0900 	mov.w	r9, #0
 800e6c2:	07eb      	lsls	r3, r5, #31
 800e6c4:	d50a      	bpl.n	800e6dc <__pow5mult+0x84>
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	4622      	mov	r2, r4
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7ff ff1a 	bl	800e504 <__multiply>
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	4680      	mov	r8, r0
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff fe47 	bl	800e368 <_Bfree>
 800e6da:	4647      	mov	r7, r8
 800e6dc:	106d      	asrs	r5, r5, #1
 800e6de:	d00b      	beq.n	800e6f8 <__pow5mult+0xa0>
 800e6e0:	6820      	ldr	r0, [r4, #0]
 800e6e2:	b938      	cbnz	r0, 800e6f4 <__pow5mult+0x9c>
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	f7ff ff0b 	bl	800e504 <__multiply>
 800e6ee:	6020      	str	r0, [r4, #0]
 800e6f0:	f8c0 9000 	str.w	r9, [r0]
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	e7e4      	b.n	800e6c2 <__pow5mult+0x6a>
 800e6f8:	4638      	mov	r0, r7
 800e6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	bf00      	nop
 800e700:	08011d20 	.word	0x08011d20
 800e704:	08011ba5 	.word	0x08011ba5
 800e708:	08011bbc 	.word	0x08011bbc

0800e70c <__lshift>:
 800e70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e710:	460c      	mov	r4, r1
 800e712:	6849      	ldr	r1, [r1, #4]
 800e714:	6923      	ldr	r3, [r4, #16]
 800e716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e71a:	68a3      	ldr	r3, [r4, #8]
 800e71c:	4607      	mov	r7, r0
 800e71e:	4691      	mov	r9, r2
 800e720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e724:	f108 0601 	add.w	r6, r8, #1
 800e728:	42b3      	cmp	r3, r6
 800e72a:	db0b      	blt.n	800e744 <__lshift+0x38>
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7ff fddb 	bl	800e2e8 <_Balloc>
 800e732:	4605      	mov	r5, r0
 800e734:	b948      	cbnz	r0, 800e74a <__lshift+0x3e>
 800e736:	4602      	mov	r2, r0
 800e738:	4b2a      	ldr	r3, [pc, #168]	; (800e7e4 <__lshift+0xd8>)
 800e73a:	482b      	ldr	r0, [pc, #172]	; (800e7e8 <__lshift+0xdc>)
 800e73c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e740:	f000 fa36 	bl	800ebb0 <__assert_func>
 800e744:	3101      	adds	r1, #1
 800e746:	005b      	lsls	r3, r3, #1
 800e748:	e7ee      	b.n	800e728 <__lshift+0x1c>
 800e74a:	2300      	movs	r3, #0
 800e74c:	f100 0114 	add.w	r1, r0, #20
 800e750:	f100 0210 	add.w	r2, r0, #16
 800e754:	4618      	mov	r0, r3
 800e756:	4553      	cmp	r3, sl
 800e758:	db37      	blt.n	800e7ca <__lshift+0xbe>
 800e75a:	6920      	ldr	r0, [r4, #16]
 800e75c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e760:	f104 0314 	add.w	r3, r4, #20
 800e764:	f019 091f 	ands.w	r9, r9, #31
 800e768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e76c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e770:	d02f      	beq.n	800e7d2 <__lshift+0xc6>
 800e772:	f1c9 0e20 	rsb	lr, r9, #32
 800e776:	468a      	mov	sl, r1
 800e778:	f04f 0c00 	mov.w	ip, #0
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	fa02 f209 	lsl.w	r2, r2, r9
 800e782:	ea42 020c 	orr.w	r2, r2, ip
 800e786:	f84a 2b04 	str.w	r2, [sl], #4
 800e78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e78e:	4298      	cmp	r0, r3
 800e790:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e794:	d8f2      	bhi.n	800e77c <__lshift+0x70>
 800e796:	1b03      	subs	r3, r0, r4
 800e798:	3b15      	subs	r3, #21
 800e79a:	f023 0303 	bic.w	r3, r3, #3
 800e79e:	3304      	adds	r3, #4
 800e7a0:	f104 0215 	add.w	r2, r4, #21
 800e7a4:	4290      	cmp	r0, r2
 800e7a6:	bf38      	it	cc
 800e7a8:	2304      	movcc	r3, #4
 800e7aa:	f841 c003 	str.w	ip, [r1, r3]
 800e7ae:	f1bc 0f00 	cmp.w	ip, #0
 800e7b2:	d001      	beq.n	800e7b8 <__lshift+0xac>
 800e7b4:	f108 0602 	add.w	r6, r8, #2
 800e7b8:	3e01      	subs	r6, #1
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	612e      	str	r6, [r5, #16]
 800e7be:	4621      	mov	r1, r4
 800e7c0:	f7ff fdd2 	bl	800e368 <_Bfree>
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	e7c1      	b.n	800e756 <__lshift+0x4a>
 800e7d2:	3904      	subs	r1, #4
 800e7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7dc:	4298      	cmp	r0, r3
 800e7de:	d8f9      	bhi.n	800e7d4 <__lshift+0xc8>
 800e7e0:	e7ea      	b.n	800e7b8 <__lshift+0xac>
 800e7e2:	bf00      	nop
 800e7e4:	08011c18 	.word	0x08011c18
 800e7e8:	08011bbc 	.word	0x08011bbc

0800e7ec <__mcmp>:
 800e7ec:	b530      	push	{r4, r5, lr}
 800e7ee:	6902      	ldr	r2, [r0, #16]
 800e7f0:	690c      	ldr	r4, [r1, #16]
 800e7f2:	1b12      	subs	r2, r2, r4
 800e7f4:	d10e      	bne.n	800e814 <__mcmp+0x28>
 800e7f6:	f100 0314 	add.w	r3, r0, #20
 800e7fa:	3114      	adds	r1, #20
 800e7fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e800:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e804:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e808:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e80c:	42a5      	cmp	r5, r4
 800e80e:	d003      	beq.n	800e818 <__mcmp+0x2c>
 800e810:	d305      	bcc.n	800e81e <__mcmp+0x32>
 800e812:	2201      	movs	r2, #1
 800e814:	4610      	mov	r0, r2
 800e816:	bd30      	pop	{r4, r5, pc}
 800e818:	4283      	cmp	r3, r0
 800e81a:	d3f3      	bcc.n	800e804 <__mcmp+0x18>
 800e81c:	e7fa      	b.n	800e814 <__mcmp+0x28>
 800e81e:	f04f 32ff 	mov.w	r2, #4294967295
 800e822:	e7f7      	b.n	800e814 <__mcmp+0x28>

0800e824 <__mdiff>:
 800e824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	460c      	mov	r4, r1
 800e82a:	4606      	mov	r6, r0
 800e82c:	4611      	mov	r1, r2
 800e82e:	4620      	mov	r0, r4
 800e830:	4690      	mov	r8, r2
 800e832:	f7ff ffdb 	bl	800e7ec <__mcmp>
 800e836:	1e05      	subs	r5, r0, #0
 800e838:	d110      	bne.n	800e85c <__mdiff+0x38>
 800e83a:	4629      	mov	r1, r5
 800e83c:	4630      	mov	r0, r6
 800e83e:	f7ff fd53 	bl	800e2e8 <_Balloc>
 800e842:	b930      	cbnz	r0, 800e852 <__mdiff+0x2e>
 800e844:	4b3a      	ldr	r3, [pc, #232]	; (800e930 <__mdiff+0x10c>)
 800e846:	4602      	mov	r2, r0
 800e848:	f240 2132 	movw	r1, #562	; 0x232
 800e84c:	4839      	ldr	r0, [pc, #228]	; (800e934 <__mdiff+0x110>)
 800e84e:	f000 f9af 	bl	800ebb0 <__assert_func>
 800e852:	2301      	movs	r3, #1
 800e854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85c:	bfa4      	itt	ge
 800e85e:	4643      	movge	r3, r8
 800e860:	46a0      	movge	r8, r4
 800e862:	4630      	mov	r0, r6
 800e864:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e868:	bfa6      	itte	ge
 800e86a:	461c      	movge	r4, r3
 800e86c:	2500      	movge	r5, #0
 800e86e:	2501      	movlt	r5, #1
 800e870:	f7ff fd3a 	bl	800e2e8 <_Balloc>
 800e874:	b920      	cbnz	r0, 800e880 <__mdiff+0x5c>
 800e876:	4b2e      	ldr	r3, [pc, #184]	; (800e930 <__mdiff+0x10c>)
 800e878:	4602      	mov	r2, r0
 800e87a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e87e:	e7e5      	b.n	800e84c <__mdiff+0x28>
 800e880:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e884:	6926      	ldr	r6, [r4, #16]
 800e886:	60c5      	str	r5, [r0, #12]
 800e888:	f104 0914 	add.w	r9, r4, #20
 800e88c:	f108 0514 	add.w	r5, r8, #20
 800e890:	f100 0e14 	add.w	lr, r0, #20
 800e894:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e898:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e89c:	f108 0210 	add.w	r2, r8, #16
 800e8a0:	46f2      	mov	sl, lr
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8ac:	fa1f f883 	uxth.w	r8, r3
 800e8b0:	fa11 f18b 	uxtah	r1, r1, fp
 800e8b4:	0c1b      	lsrs	r3, r3, #16
 800e8b6:	eba1 0808 	sub.w	r8, r1, r8
 800e8ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8c2:	fa1f f888 	uxth.w	r8, r8
 800e8c6:	1419      	asrs	r1, r3, #16
 800e8c8:	454e      	cmp	r6, r9
 800e8ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8ce:	f84a 3b04 	str.w	r3, [sl], #4
 800e8d2:	d8e7      	bhi.n	800e8a4 <__mdiff+0x80>
 800e8d4:	1b33      	subs	r3, r6, r4
 800e8d6:	3b15      	subs	r3, #21
 800e8d8:	f023 0303 	bic.w	r3, r3, #3
 800e8dc:	3304      	adds	r3, #4
 800e8de:	3415      	adds	r4, #21
 800e8e0:	42a6      	cmp	r6, r4
 800e8e2:	bf38      	it	cc
 800e8e4:	2304      	movcc	r3, #4
 800e8e6:	441d      	add	r5, r3
 800e8e8:	4473      	add	r3, lr
 800e8ea:	469e      	mov	lr, r3
 800e8ec:	462e      	mov	r6, r5
 800e8ee:	4566      	cmp	r6, ip
 800e8f0:	d30e      	bcc.n	800e910 <__mdiff+0xec>
 800e8f2:	f10c 0203 	add.w	r2, ip, #3
 800e8f6:	1b52      	subs	r2, r2, r5
 800e8f8:	f022 0203 	bic.w	r2, r2, #3
 800e8fc:	3d03      	subs	r5, #3
 800e8fe:	45ac      	cmp	ip, r5
 800e900:	bf38      	it	cc
 800e902:	2200      	movcc	r2, #0
 800e904:	441a      	add	r2, r3
 800e906:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e90a:	b17b      	cbz	r3, 800e92c <__mdiff+0x108>
 800e90c:	6107      	str	r7, [r0, #16]
 800e90e:	e7a3      	b.n	800e858 <__mdiff+0x34>
 800e910:	f856 8b04 	ldr.w	r8, [r6], #4
 800e914:	fa11 f288 	uxtah	r2, r1, r8
 800e918:	1414      	asrs	r4, r2, #16
 800e91a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e91e:	b292      	uxth	r2, r2
 800e920:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e924:	f84e 2b04 	str.w	r2, [lr], #4
 800e928:	1421      	asrs	r1, r4, #16
 800e92a:	e7e0      	b.n	800e8ee <__mdiff+0xca>
 800e92c:	3f01      	subs	r7, #1
 800e92e:	e7ea      	b.n	800e906 <__mdiff+0xe2>
 800e930:	08011c18 	.word	0x08011c18
 800e934:	08011bbc 	.word	0x08011bbc

0800e938 <__d2b>:
 800e938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e93c:	4689      	mov	r9, r1
 800e93e:	2101      	movs	r1, #1
 800e940:	ec57 6b10 	vmov	r6, r7, d0
 800e944:	4690      	mov	r8, r2
 800e946:	f7ff fccf 	bl	800e2e8 <_Balloc>
 800e94a:	4604      	mov	r4, r0
 800e94c:	b930      	cbnz	r0, 800e95c <__d2b+0x24>
 800e94e:	4602      	mov	r2, r0
 800e950:	4b25      	ldr	r3, [pc, #148]	; (800e9e8 <__d2b+0xb0>)
 800e952:	4826      	ldr	r0, [pc, #152]	; (800e9ec <__d2b+0xb4>)
 800e954:	f240 310a 	movw	r1, #778	; 0x30a
 800e958:	f000 f92a 	bl	800ebb0 <__assert_func>
 800e95c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e964:	bb35      	cbnz	r5, 800e9b4 <__d2b+0x7c>
 800e966:	2e00      	cmp	r6, #0
 800e968:	9301      	str	r3, [sp, #4]
 800e96a:	d028      	beq.n	800e9be <__d2b+0x86>
 800e96c:	4668      	mov	r0, sp
 800e96e:	9600      	str	r6, [sp, #0]
 800e970:	f7ff fd82 	bl	800e478 <__lo0bits>
 800e974:	9900      	ldr	r1, [sp, #0]
 800e976:	b300      	cbz	r0, 800e9ba <__d2b+0x82>
 800e978:	9a01      	ldr	r2, [sp, #4]
 800e97a:	f1c0 0320 	rsb	r3, r0, #32
 800e97e:	fa02 f303 	lsl.w	r3, r2, r3
 800e982:	430b      	orrs	r3, r1
 800e984:	40c2      	lsrs	r2, r0
 800e986:	6163      	str	r3, [r4, #20]
 800e988:	9201      	str	r2, [sp, #4]
 800e98a:	9b01      	ldr	r3, [sp, #4]
 800e98c:	61a3      	str	r3, [r4, #24]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	bf14      	ite	ne
 800e992:	2202      	movne	r2, #2
 800e994:	2201      	moveq	r2, #1
 800e996:	6122      	str	r2, [r4, #16]
 800e998:	b1d5      	cbz	r5, 800e9d0 <__d2b+0x98>
 800e99a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e99e:	4405      	add	r5, r0
 800e9a0:	f8c9 5000 	str.w	r5, [r9]
 800e9a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9a8:	f8c8 0000 	str.w	r0, [r8]
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	b003      	add	sp, #12
 800e9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9b8:	e7d5      	b.n	800e966 <__d2b+0x2e>
 800e9ba:	6161      	str	r1, [r4, #20]
 800e9bc:	e7e5      	b.n	800e98a <__d2b+0x52>
 800e9be:	a801      	add	r0, sp, #4
 800e9c0:	f7ff fd5a 	bl	800e478 <__lo0bits>
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	6163      	str	r3, [r4, #20]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	6122      	str	r2, [r4, #16]
 800e9cc:	3020      	adds	r0, #32
 800e9ce:	e7e3      	b.n	800e998 <__d2b+0x60>
 800e9d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9d8:	f8c9 0000 	str.w	r0, [r9]
 800e9dc:	6918      	ldr	r0, [r3, #16]
 800e9de:	f7ff fd2b 	bl	800e438 <__hi0bits>
 800e9e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9e6:	e7df      	b.n	800e9a8 <__d2b+0x70>
 800e9e8:	08011c18 	.word	0x08011c18
 800e9ec:	08011bbc 	.word	0x08011bbc

0800e9f0 <_mprec_log10>:
 800e9f0:	2817      	cmp	r0, #23
 800e9f2:	b5d0      	push	{r4, r6, r7, lr}
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	dc07      	bgt.n	800ea08 <_mprec_log10+0x18>
 800e9f8:	4809      	ldr	r0, [pc, #36]	; (800ea20 <_mprec_log10+0x30>)
 800e9fa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800e9fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ea02:	ec41 0b10 	vmov	d0, r0, r1
 800ea06:	bdd0      	pop	{r4, r6, r7, pc}
 800ea08:	4906      	ldr	r1, [pc, #24]	; (800ea24 <_mprec_log10+0x34>)
 800ea0a:	4f07      	ldr	r7, [pc, #28]	; (800ea28 <_mprec_log10+0x38>)
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	2600      	movs	r6, #0
 800ea10:	4632      	mov	r2, r6
 800ea12:	463b      	mov	r3, r7
 800ea14:	f7f1 fe10 	bl	8000638 <__aeabi_dmul>
 800ea18:	3c01      	subs	r4, #1
 800ea1a:	d1f9      	bne.n	800ea10 <_mprec_log10+0x20>
 800ea1c:	e7f1      	b.n	800ea02 <_mprec_log10+0x12>
 800ea1e:	bf00      	nop
 800ea20:	08011c58 	.word	0x08011c58
 800ea24:	3ff00000 	.word	0x3ff00000
 800ea28:	40240000 	.word	0x40240000

0800ea2c <_calloc_r>:
 800ea2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea2e:	fba1 2402 	umull	r2, r4, r1, r2
 800ea32:	b94c      	cbnz	r4, 800ea48 <_calloc_r+0x1c>
 800ea34:	4611      	mov	r1, r2
 800ea36:	9201      	str	r2, [sp, #4]
 800ea38:	f000 f82e 	bl	800ea98 <_malloc_r>
 800ea3c:	9a01      	ldr	r2, [sp, #4]
 800ea3e:	4605      	mov	r5, r0
 800ea40:	b930      	cbnz	r0, 800ea50 <_calloc_r+0x24>
 800ea42:	4628      	mov	r0, r5
 800ea44:	b003      	add	sp, #12
 800ea46:	bd30      	pop	{r4, r5, pc}
 800ea48:	220c      	movs	r2, #12
 800ea4a:	6002      	str	r2, [r0, #0]
 800ea4c:	2500      	movs	r5, #0
 800ea4e:	e7f8      	b.n	800ea42 <_calloc_r+0x16>
 800ea50:	4621      	mov	r1, r4
 800ea52:	f7ff fa7b 	bl	800df4c <memset>
 800ea56:	e7f4      	b.n	800ea42 <_calloc_r+0x16>

0800ea58 <sbrk_aligned>:
 800ea58:	b570      	push	{r4, r5, r6, lr}
 800ea5a:	4e0e      	ldr	r6, [pc, #56]	; (800ea94 <sbrk_aligned+0x3c>)
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	6831      	ldr	r1, [r6, #0]
 800ea60:	4605      	mov	r5, r0
 800ea62:	b911      	cbnz	r1, 800ea6a <sbrk_aligned+0x12>
 800ea64:	f000 f88c 	bl	800eb80 <_sbrk_r>
 800ea68:	6030      	str	r0, [r6, #0]
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f000 f887 	bl	800eb80 <_sbrk_r>
 800ea72:	1c43      	adds	r3, r0, #1
 800ea74:	d00a      	beq.n	800ea8c <sbrk_aligned+0x34>
 800ea76:	1cc4      	adds	r4, r0, #3
 800ea78:	f024 0403 	bic.w	r4, r4, #3
 800ea7c:	42a0      	cmp	r0, r4
 800ea7e:	d007      	beq.n	800ea90 <sbrk_aligned+0x38>
 800ea80:	1a21      	subs	r1, r4, r0
 800ea82:	4628      	mov	r0, r5
 800ea84:	f000 f87c 	bl	800eb80 <_sbrk_r>
 800ea88:	3001      	adds	r0, #1
 800ea8a:	d101      	bne.n	800ea90 <sbrk_aligned+0x38>
 800ea8c:	f04f 34ff 	mov.w	r4, #4294967295
 800ea90:	4620      	mov	r0, r4
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
 800ea94:	20002ea0 	.word	0x20002ea0

0800ea98 <_malloc_r>:
 800ea98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9c:	1ccd      	adds	r5, r1, #3
 800ea9e:	f025 0503 	bic.w	r5, r5, #3
 800eaa2:	3508      	adds	r5, #8
 800eaa4:	2d0c      	cmp	r5, #12
 800eaa6:	bf38      	it	cc
 800eaa8:	250c      	movcc	r5, #12
 800eaaa:	2d00      	cmp	r5, #0
 800eaac:	4607      	mov	r7, r0
 800eaae:	db01      	blt.n	800eab4 <_malloc_r+0x1c>
 800eab0:	42a9      	cmp	r1, r5
 800eab2:	d905      	bls.n	800eac0 <_malloc_r+0x28>
 800eab4:	230c      	movs	r3, #12
 800eab6:	603b      	str	r3, [r7, #0]
 800eab8:	2600      	movs	r6, #0
 800eaba:	4630      	mov	r0, r6
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac0:	4e2e      	ldr	r6, [pc, #184]	; (800eb7c <_malloc_r+0xe4>)
 800eac2:	f000 ff37 	bl	800f934 <__malloc_lock>
 800eac6:	6833      	ldr	r3, [r6, #0]
 800eac8:	461c      	mov	r4, r3
 800eaca:	bb34      	cbnz	r4, 800eb1a <_malloc_r+0x82>
 800eacc:	4629      	mov	r1, r5
 800eace:	4638      	mov	r0, r7
 800ead0:	f7ff ffc2 	bl	800ea58 <sbrk_aligned>
 800ead4:	1c43      	adds	r3, r0, #1
 800ead6:	4604      	mov	r4, r0
 800ead8:	d14d      	bne.n	800eb76 <_malloc_r+0xde>
 800eada:	6834      	ldr	r4, [r6, #0]
 800eadc:	4626      	mov	r6, r4
 800eade:	2e00      	cmp	r6, #0
 800eae0:	d140      	bne.n	800eb64 <_malloc_r+0xcc>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	4631      	mov	r1, r6
 800eae6:	4638      	mov	r0, r7
 800eae8:	eb04 0803 	add.w	r8, r4, r3
 800eaec:	f000 f848 	bl	800eb80 <_sbrk_r>
 800eaf0:	4580      	cmp	r8, r0
 800eaf2:	d13a      	bne.n	800eb6a <_malloc_r+0xd2>
 800eaf4:	6821      	ldr	r1, [r4, #0]
 800eaf6:	3503      	adds	r5, #3
 800eaf8:	1a6d      	subs	r5, r5, r1
 800eafa:	f025 0503 	bic.w	r5, r5, #3
 800eafe:	3508      	adds	r5, #8
 800eb00:	2d0c      	cmp	r5, #12
 800eb02:	bf38      	it	cc
 800eb04:	250c      	movcc	r5, #12
 800eb06:	4629      	mov	r1, r5
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7ff ffa5 	bl	800ea58 <sbrk_aligned>
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d02b      	beq.n	800eb6a <_malloc_r+0xd2>
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	442b      	add	r3, r5
 800eb16:	6023      	str	r3, [r4, #0]
 800eb18:	e00e      	b.n	800eb38 <_malloc_r+0xa0>
 800eb1a:	6822      	ldr	r2, [r4, #0]
 800eb1c:	1b52      	subs	r2, r2, r5
 800eb1e:	d41e      	bmi.n	800eb5e <_malloc_r+0xc6>
 800eb20:	2a0b      	cmp	r2, #11
 800eb22:	d916      	bls.n	800eb52 <_malloc_r+0xba>
 800eb24:	1961      	adds	r1, r4, r5
 800eb26:	42a3      	cmp	r3, r4
 800eb28:	6025      	str	r5, [r4, #0]
 800eb2a:	bf18      	it	ne
 800eb2c:	6059      	strne	r1, [r3, #4]
 800eb2e:	6863      	ldr	r3, [r4, #4]
 800eb30:	bf08      	it	eq
 800eb32:	6031      	streq	r1, [r6, #0]
 800eb34:	5162      	str	r2, [r4, r5]
 800eb36:	604b      	str	r3, [r1, #4]
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f104 060b 	add.w	r6, r4, #11
 800eb3e:	f000 feff 	bl	800f940 <__malloc_unlock>
 800eb42:	f026 0607 	bic.w	r6, r6, #7
 800eb46:	1d23      	adds	r3, r4, #4
 800eb48:	1af2      	subs	r2, r6, r3
 800eb4a:	d0b6      	beq.n	800eaba <_malloc_r+0x22>
 800eb4c:	1b9b      	subs	r3, r3, r6
 800eb4e:	50a3      	str	r3, [r4, r2]
 800eb50:	e7b3      	b.n	800eaba <_malloc_r+0x22>
 800eb52:	6862      	ldr	r2, [r4, #4]
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	bf0c      	ite	eq
 800eb58:	6032      	streq	r2, [r6, #0]
 800eb5a:	605a      	strne	r2, [r3, #4]
 800eb5c:	e7ec      	b.n	800eb38 <_malloc_r+0xa0>
 800eb5e:	4623      	mov	r3, r4
 800eb60:	6864      	ldr	r4, [r4, #4]
 800eb62:	e7b2      	b.n	800eaca <_malloc_r+0x32>
 800eb64:	4634      	mov	r4, r6
 800eb66:	6876      	ldr	r6, [r6, #4]
 800eb68:	e7b9      	b.n	800eade <_malloc_r+0x46>
 800eb6a:	230c      	movs	r3, #12
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	4638      	mov	r0, r7
 800eb70:	f000 fee6 	bl	800f940 <__malloc_unlock>
 800eb74:	e7a1      	b.n	800eaba <_malloc_r+0x22>
 800eb76:	6025      	str	r5, [r4, #0]
 800eb78:	e7de      	b.n	800eb38 <_malloc_r+0xa0>
 800eb7a:	bf00      	nop
 800eb7c:	20002e9c 	.word	0x20002e9c

0800eb80 <_sbrk_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4d06      	ldr	r5, [pc, #24]	; (800eb9c <_sbrk_r+0x1c>)
 800eb84:	2300      	movs	r3, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	602b      	str	r3, [r5, #0]
 800eb8c:	f7f6 f8b2 	bl	8004cf4 <_sbrk>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d102      	bne.n	800eb9a <_sbrk_r+0x1a>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	b103      	cbz	r3, 800eb9a <_sbrk_r+0x1a>
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	bd38      	pop	{r3, r4, r5, pc}
 800eb9c:	20002ea4 	.word	0x20002ea4

0800eba0 <strcpy>:
 800eba0:	4603      	mov	r3, r0
 800eba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eba6:	f803 2b01 	strb.w	r2, [r3], #1
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	d1f9      	bne.n	800eba2 <strcpy+0x2>
 800ebae:	4770      	bx	lr

0800ebb0 <__assert_func>:
 800ebb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebb2:	4614      	mov	r4, r2
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	4b09      	ldr	r3, [pc, #36]	; (800ebdc <__assert_func+0x2c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4605      	mov	r5, r0
 800ebbc:	68d8      	ldr	r0, [r3, #12]
 800ebbe:	b14c      	cbz	r4, 800ebd4 <__assert_func+0x24>
 800ebc0:	4b07      	ldr	r3, [pc, #28]	; (800ebe0 <__assert_func+0x30>)
 800ebc2:	9100      	str	r1, [sp, #0]
 800ebc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebc8:	4906      	ldr	r1, [pc, #24]	; (800ebe4 <__assert_func+0x34>)
 800ebca:	462b      	mov	r3, r5
 800ebcc:	f000 fe8a 	bl	800f8e4 <fiprintf>
 800ebd0:	f001 fab6 	bl	8010140 <abort>
 800ebd4:	4b04      	ldr	r3, [pc, #16]	; (800ebe8 <__assert_func+0x38>)
 800ebd6:	461c      	mov	r4, r3
 800ebd8:	e7f3      	b.n	800ebc2 <__assert_func+0x12>
 800ebda:	bf00      	nop
 800ebdc:	2000003c 	.word	0x2000003c
 800ebe0:	08011d2c 	.word	0x08011d2c
 800ebe4:	08011d39 	.word	0x08011d39
 800ebe8:	08011d67 	.word	0x08011d67

0800ebec <quorem>:
 800ebec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf0:	6903      	ldr	r3, [r0, #16]
 800ebf2:	690c      	ldr	r4, [r1, #16]
 800ebf4:	42a3      	cmp	r3, r4
 800ebf6:	4607      	mov	r7, r0
 800ebf8:	f2c0 8081 	blt.w	800ecfe <quorem+0x112>
 800ebfc:	3c01      	subs	r4, #1
 800ebfe:	f101 0814 	add.w	r8, r1, #20
 800ec02:	f100 0514 	add.w	r5, r0, #20
 800ec06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec14:	3301      	adds	r3, #1
 800ec16:	429a      	cmp	r2, r3
 800ec18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ec1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec20:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec24:	d331      	bcc.n	800ec8a <quorem+0x9e>
 800ec26:	f04f 0e00 	mov.w	lr, #0
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	46ac      	mov	ip, r5
 800ec2e:	46f2      	mov	sl, lr
 800ec30:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec34:	b293      	uxth	r3, r2
 800ec36:	fb06 e303 	mla	r3, r6, r3, lr
 800ec3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	ebaa 0303 	sub.w	r3, sl, r3
 800ec44:	f8dc a000 	ldr.w	sl, [ip]
 800ec48:	0c12      	lsrs	r2, r2, #16
 800ec4a:	fa13 f38a 	uxtah	r3, r3, sl
 800ec4e:	fb06 e202 	mla	r2, r6, r2, lr
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	9b00      	ldr	r3, [sp, #0]
 800ec56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ec5a:	b292      	uxth	r2, r2
 800ec5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ec60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec64:	f8bd 3000 	ldrh.w	r3, [sp]
 800ec68:	4581      	cmp	r9, r0
 800ec6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec6e:	f84c 3b04 	str.w	r3, [ip], #4
 800ec72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec76:	d2db      	bcs.n	800ec30 <quorem+0x44>
 800ec78:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec7c:	b92b      	cbnz	r3, 800ec8a <quorem+0x9e>
 800ec7e:	9b01      	ldr	r3, [sp, #4]
 800ec80:	3b04      	subs	r3, #4
 800ec82:	429d      	cmp	r5, r3
 800ec84:	461a      	mov	r2, r3
 800ec86:	d32e      	bcc.n	800ece6 <quorem+0xfa>
 800ec88:	613c      	str	r4, [r7, #16]
 800ec8a:	4638      	mov	r0, r7
 800ec8c:	f7ff fdae 	bl	800e7ec <__mcmp>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	db24      	blt.n	800ecde <quorem+0xf2>
 800ec94:	3601      	adds	r6, #1
 800ec96:	4628      	mov	r0, r5
 800ec98:	f04f 0c00 	mov.w	ip, #0
 800ec9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800eca0:	f8d0 e000 	ldr.w	lr, [r0]
 800eca4:	b293      	uxth	r3, r2
 800eca6:	ebac 0303 	sub.w	r3, ip, r3
 800ecaa:	0c12      	lsrs	r2, r2, #16
 800ecac:	fa13 f38e 	uxtah	r3, r3, lr
 800ecb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ecb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecbe:	45c1      	cmp	r9, r8
 800ecc0:	f840 3b04 	str.w	r3, [r0], #4
 800ecc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ecc8:	d2e8      	bcs.n	800ec9c <quorem+0xb0>
 800ecca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ecd2:	b922      	cbnz	r2, 800ecde <quorem+0xf2>
 800ecd4:	3b04      	subs	r3, #4
 800ecd6:	429d      	cmp	r5, r3
 800ecd8:	461a      	mov	r2, r3
 800ecda:	d30a      	bcc.n	800ecf2 <quorem+0x106>
 800ecdc:	613c      	str	r4, [r7, #16]
 800ecde:	4630      	mov	r0, r6
 800ece0:	b003      	add	sp, #12
 800ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece6:	6812      	ldr	r2, [r2, #0]
 800ece8:	3b04      	subs	r3, #4
 800ecea:	2a00      	cmp	r2, #0
 800ecec:	d1cc      	bne.n	800ec88 <quorem+0x9c>
 800ecee:	3c01      	subs	r4, #1
 800ecf0:	e7c7      	b.n	800ec82 <quorem+0x96>
 800ecf2:	6812      	ldr	r2, [r2, #0]
 800ecf4:	3b04      	subs	r3, #4
 800ecf6:	2a00      	cmp	r2, #0
 800ecf8:	d1f0      	bne.n	800ecdc <quorem+0xf0>
 800ecfa:	3c01      	subs	r4, #1
 800ecfc:	e7eb      	b.n	800ecd6 <quorem+0xea>
 800ecfe:	2000      	movs	r0, #0
 800ed00:	e7ee      	b.n	800ece0 <quorem+0xf4>
 800ed02:	0000      	movs	r0, r0
 800ed04:	0000      	movs	r0, r0
	...

0800ed08 <_dtoa_r>:
 800ed08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0c:	ed2d 8b04 	vpush	{d8-d9}
 800ed10:	ec57 6b10 	vmov	r6, r7, d0
 800ed14:	b093      	sub	sp, #76	; 0x4c
 800ed16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ed1c:	9106      	str	r1, [sp, #24]
 800ed1e:	ee10 aa10 	vmov	sl, s0
 800ed22:	4604      	mov	r4, r0
 800ed24:	9209      	str	r2, [sp, #36]	; 0x24
 800ed26:	930c      	str	r3, [sp, #48]	; 0x30
 800ed28:	46bb      	mov	fp, r7
 800ed2a:	b975      	cbnz	r5, 800ed4a <_dtoa_r+0x42>
 800ed2c:	2010      	movs	r0, #16
 800ed2e:	f000 fdeb 	bl	800f908 <malloc>
 800ed32:	4602      	mov	r2, r0
 800ed34:	6260      	str	r0, [r4, #36]	; 0x24
 800ed36:	b920      	cbnz	r0, 800ed42 <_dtoa_r+0x3a>
 800ed38:	4ba7      	ldr	r3, [pc, #668]	; (800efd8 <_dtoa_r+0x2d0>)
 800ed3a:	21ea      	movs	r1, #234	; 0xea
 800ed3c:	48a7      	ldr	r0, [pc, #668]	; (800efdc <_dtoa_r+0x2d4>)
 800ed3e:	f7ff ff37 	bl	800ebb0 <__assert_func>
 800ed42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed46:	6005      	str	r5, [r0, #0]
 800ed48:	60c5      	str	r5, [r0, #12]
 800ed4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed4c:	6819      	ldr	r1, [r3, #0]
 800ed4e:	b151      	cbz	r1, 800ed66 <_dtoa_r+0x5e>
 800ed50:	685a      	ldr	r2, [r3, #4]
 800ed52:	604a      	str	r2, [r1, #4]
 800ed54:	2301      	movs	r3, #1
 800ed56:	4093      	lsls	r3, r2
 800ed58:	608b      	str	r3, [r1, #8]
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7ff fb04 	bl	800e368 <_Bfree>
 800ed60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed62:	2200      	movs	r2, #0
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	1e3b      	subs	r3, r7, #0
 800ed68:	bfaa      	itet	ge
 800ed6a:	2300      	movge	r3, #0
 800ed6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ed70:	f8c8 3000 	strge.w	r3, [r8]
 800ed74:	4b9a      	ldr	r3, [pc, #616]	; (800efe0 <_dtoa_r+0x2d8>)
 800ed76:	bfbc      	itt	lt
 800ed78:	2201      	movlt	r2, #1
 800ed7a:	f8c8 2000 	strlt.w	r2, [r8]
 800ed7e:	ea33 030b 	bics.w	r3, r3, fp
 800ed82:	d11b      	bne.n	800edbc <_dtoa_r+0xb4>
 800ed84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed86:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed8a:	6013      	str	r3, [r2, #0]
 800ed8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed90:	4333      	orrs	r3, r6
 800ed92:	f000 8592 	beq.w	800f8ba <_dtoa_r+0xbb2>
 800ed96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed98:	b963      	cbnz	r3, 800edb4 <_dtoa_r+0xac>
 800ed9a:	4b92      	ldr	r3, [pc, #584]	; (800efe4 <_dtoa_r+0x2dc>)
 800ed9c:	e022      	b.n	800ede4 <_dtoa_r+0xdc>
 800ed9e:	4b92      	ldr	r3, [pc, #584]	; (800efe8 <_dtoa_r+0x2e0>)
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	3308      	adds	r3, #8
 800eda4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	9801      	ldr	r0, [sp, #4]
 800edaa:	b013      	add	sp, #76	; 0x4c
 800edac:	ecbd 8b04 	vpop	{d8-d9}
 800edb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb4:	4b8b      	ldr	r3, [pc, #556]	; (800efe4 <_dtoa_r+0x2dc>)
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	3303      	adds	r3, #3
 800edba:	e7f3      	b.n	800eda4 <_dtoa_r+0x9c>
 800edbc:	2200      	movs	r2, #0
 800edbe:	2300      	movs	r3, #0
 800edc0:	4650      	mov	r0, sl
 800edc2:	4659      	mov	r1, fp
 800edc4:	f7f1 fea0 	bl	8000b08 <__aeabi_dcmpeq>
 800edc8:	ec4b ab19 	vmov	d9, sl, fp
 800edcc:	4680      	mov	r8, r0
 800edce:	b158      	cbz	r0, 800ede8 <_dtoa_r+0xe0>
 800edd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edd2:	2301      	movs	r3, #1
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 856b 	beq.w	800f8b4 <_dtoa_r+0xbac>
 800edde:	4883      	ldr	r0, [pc, #524]	; (800efec <_dtoa_r+0x2e4>)
 800ede0:	6018      	str	r0, [r3, #0]
 800ede2:	1e43      	subs	r3, r0, #1
 800ede4:	9301      	str	r3, [sp, #4]
 800ede6:	e7df      	b.n	800eda8 <_dtoa_r+0xa0>
 800ede8:	ec4b ab10 	vmov	d0, sl, fp
 800edec:	aa10      	add	r2, sp, #64	; 0x40
 800edee:	a911      	add	r1, sp, #68	; 0x44
 800edf0:	4620      	mov	r0, r4
 800edf2:	f7ff fda1 	bl	800e938 <__d2b>
 800edf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800edfa:	ee08 0a10 	vmov	s16, r0
 800edfe:	2d00      	cmp	r5, #0
 800ee00:	f000 8084 	beq.w	800ef0c <_dtoa_r+0x204>
 800ee04:	ee19 3a90 	vmov	r3, s19
 800ee08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ee10:	4656      	mov	r6, sl
 800ee12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ee16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ee1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ee1e:	4b74      	ldr	r3, [pc, #464]	; (800eff0 <_dtoa_r+0x2e8>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	4630      	mov	r0, r6
 800ee24:	4639      	mov	r1, r7
 800ee26:	f7f1 fa4f 	bl	80002c8 <__aeabi_dsub>
 800ee2a:	a365      	add	r3, pc, #404	; (adr r3, 800efc0 <_dtoa_r+0x2b8>)
 800ee2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee30:	f7f1 fc02 	bl	8000638 <__aeabi_dmul>
 800ee34:	a364      	add	r3, pc, #400	; (adr r3, 800efc8 <_dtoa_r+0x2c0>)
 800ee36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3a:	f7f1 fa47 	bl	80002cc <__adddf3>
 800ee3e:	4606      	mov	r6, r0
 800ee40:	4628      	mov	r0, r5
 800ee42:	460f      	mov	r7, r1
 800ee44:	f7f1 fb8e 	bl	8000564 <__aeabi_i2d>
 800ee48:	a361      	add	r3, pc, #388	; (adr r3, 800efd0 <_dtoa_r+0x2c8>)
 800ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4e:	f7f1 fbf3 	bl	8000638 <__aeabi_dmul>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4630      	mov	r0, r6
 800ee58:	4639      	mov	r1, r7
 800ee5a:	f7f1 fa37 	bl	80002cc <__adddf3>
 800ee5e:	4606      	mov	r6, r0
 800ee60:	460f      	mov	r7, r1
 800ee62:	f7f1 fe99 	bl	8000b98 <__aeabi_d2iz>
 800ee66:	2200      	movs	r2, #0
 800ee68:	9000      	str	r0, [sp, #0]
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f7f1 fe54 	bl	8000b1c <__aeabi_dcmplt>
 800ee74:	b150      	cbz	r0, 800ee8c <_dtoa_r+0x184>
 800ee76:	9800      	ldr	r0, [sp, #0]
 800ee78:	f7f1 fb74 	bl	8000564 <__aeabi_i2d>
 800ee7c:	4632      	mov	r2, r6
 800ee7e:	463b      	mov	r3, r7
 800ee80:	f7f1 fe42 	bl	8000b08 <__aeabi_dcmpeq>
 800ee84:	b910      	cbnz	r0, 800ee8c <_dtoa_r+0x184>
 800ee86:	9b00      	ldr	r3, [sp, #0]
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	9b00      	ldr	r3, [sp, #0]
 800ee8e:	2b16      	cmp	r3, #22
 800ee90:	d85a      	bhi.n	800ef48 <_dtoa_r+0x240>
 800ee92:	9a00      	ldr	r2, [sp, #0]
 800ee94:	4b57      	ldr	r3, [pc, #348]	; (800eff4 <_dtoa_r+0x2ec>)
 800ee96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	ec51 0b19 	vmov	r0, r1, d9
 800eea2:	f7f1 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d050      	beq.n	800ef4c <_dtoa_r+0x244>
 800eeaa:	9b00      	ldr	r3, [sp, #0]
 800eeac:	3b01      	subs	r3, #1
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eeb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eeb6:	1b5d      	subs	r5, r3, r5
 800eeb8:	1e6b      	subs	r3, r5, #1
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	bf45      	ittet	mi
 800eebe:	f1c5 0301 	rsbmi	r3, r5, #1
 800eec2:	9304      	strmi	r3, [sp, #16]
 800eec4:	2300      	movpl	r3, #0
 800eec6:	2300      	movmi	r3, #0
 800eec8:	bf4c      	ite	mi
 800eeca:	9305      	strmi	r3, [sp, #20]
 800eecc:	9304      	strpl	r3, [sp, #16]
 800eece:	9b00      	ldr	r3, [sp, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	db3d      	blt.n	800ef50 <_dtoa_r+0x248>
 800eed4:	9b05      	ldr	r3, [sp, #20]
 800eed6:	9a00      	ldr	r2, [sp, #0]
 800eed8:	920a      	str	r2, [sp, #40]	; 0x28
 800eeda:	4413      	add	r3, r2
 800eedc:	9305      	str	r3, [sp, #20]
 800eede:	2300      	movs	r3, #0
 800eee0:	9307      	str	r3, [sp, #28]
 800eee2:	9b06      	ldr	r3, [sp, #24]
 800eee4:	2b09      	cmp	r3, #9
 800eee6:	f200 8089 	bhi.w	800effc <_dtoa_r+0x2f4>
 800eeea:	2b05      	cmp	r3, #5
 800eeec:	bfc4      	itt	gt
 800eeee:	3b04      	subgt	r3, #4
 800eef0:	9306      	strgt	r3, [sp, #24]
 800eef2:	9b06      	ldr	r3, [sp, #24]
 800eef4:	f1a3 0302 	sub.w	r3, r3, #2
 800eef8:	bfcc      	ite	gt
 800eefa:	2500      	movgt	r5, #0
 800eefc:	2501      	movle	r5, #1
 800eefe:	2b03      	cmp	r3, #3
 800ef00:	f200 8087 	bhi.w	800f012 <_dtoa_r+0x30a>
 800ef04:	e8df f003 	tbb	[pc, r3]
 800ef08:	59383a2d 	.word	0x59383a2d
 800ef0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ef10:	441d      	add	r5, r3
 800ef12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef16:	2b20      	cmp	r3, #32
 800ef18:	bfc1      	itttt	gt
 800ef1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ef22:	fa0b f303 	lslgt.w	r3, fp, r3
 800ef26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ef2a:	bfda      	itte	le
 800ef2c:	f1c3 0320 	rsble	r3, r3, #32
 800ef30:	fa06 f003 	lslle.w	r0, r6, r3
 800ef34:	4318      	orrgt	r0, r3
 800ef36:	f7f1 fb05 	bl	8000544 <__aeabi_ui2d>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ef42:	3d01      	subs	r5, #1
 800ef44:	930e      	str	r3, [sp, #56]	; 0x38
 800ef46:	e76a      	b.n	800ee1e <_dtoa_r+0x116>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e7b2      	b.n	800eeb2 <_dtoa_r+0x1aa>
 800ef4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef4e:	e7b1      	b.n	800eeb4 <_dtoa_r+0x1ac>
 800ef50:	9b04      	ldr	r3, [sp, #16]
 800ef52:	9a00      	ldr	r2, [sp, #0]
 800ef54:	1a9b      	subs	r3, r3, r2
 800ef56:	9304      	str	r3, [sp, #16]
 800ef58:	4253      	negs	r3, r2
 800ef5a:	9307      	str	r3, [sp, #28]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef60:	e7bf      	b.n	800eee2 <_dtoa_r+0x1da>
 800ef62:	2300      	movs	r3, #0
 800ef64:	9308      	str	r3, [sp, #32]
 800ef66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	dc55      	bgt.n	800f018 <_dtoa_r+0x310>
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef72:	461a      	mov	r2, r3
 800ef74:	9209      	str	r2, [sp, #36]	; 0x24
 800ef76:	e00c      	b.n	800ef92 <_dtoa_r+0x28a>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e7f3      	b.n	800ef64 <_dtoa_r+0x25c>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef80:	9308      	str	r3, [sp, #32]
 800ef82:	9b00      	ldr	r3, [sp, #0]
 800ef84:	4413      	add	r3, r2
 800ef86:	9302      	str	r3, [sp, #8]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	9303      	str	r3, [sp, #12]
 800ef8e:	bfb8      	it	lt
 800ef90:	2301      	movlt	r3, #1
 800ef92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef94:	2200      	movs	r2, #0
 800ef96:	6042      	str	r2, [r0, #4]
 800ef98:	2204      	movs	r2, #4
 800ef9a:	f102 0614 	add.w	r6, r2, #20
 800ef9e:	429e      	cmp	r6, r3
 800efa0:	6841      	ldr	r1, [r0, #4]
 800efa2:	d93d      	bls.n	800f020 <_dtoa_r+0x318>
 800efa4:	4620      	mov	r0, r4
 800efa6:	f7ff f99f 	bl	800e2e8 <_Balloc>
 800efaa:	9001      	str	r0, [sp, #4]
 800efac:	2800      	cmp	r0, #0
 800efae:	d13b      	bne.n	800f028 <_dtoa_r+0x320>
 800efb0:	4b11      	ldr	r3, [pc, #68]	; (800eff8 <_dtoa_r+0x2f0>)
 800efb2:	4602      	mov	r2, r0
 800efb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800efb8:	e6c0      	b.n	800ed3c <_dtoa_r+0x34>
 800efba:	2301      	movs	r3, #1
 800efbc:	e7df      	b.n	800ef7e <_dtoa_r+0x276>
 800efbe:	bf00      	nop
 800efc0:	636f4361 	.word	0x636f4361
 800efc4:	3fd287a7 	.word	0x3fd287a7
 800efc8:	8b60c8b3 	.word	0x8b60c8b3
 800efcc:	3fc68a28 	.word	0x3fc68a28
 800efd0:	509f79fb 	.word	0x509f79fb
 800efd4:	3fd34413 	.word	0x3fd34413
 800efd8:	08011ba5 	.word	0x08011ba5
 800efdc:	08011d77 	.word	0x08011d77
 800efe0:	7ff00000 	.word	0x7ff00000
 800efe4:	08011d71 	.word	0x08011d71
 800efe8:	08011d68 	.word	0x08011d68
 800efec:	08011d76 	.word	0x08011d76
 800eff0:	3ff80000 	.word	0x3ff80000
 800eff4:	08011c58 	.word	0x08011c58
 800eff8:	08011c18 	.word	0x08011c18
 800effc:	2501      	movs	r5, #1
 800effe:	2300      	movs	r3, #0
 800f000:	9306      	str	r3, [sp, #24]
 800f002:	9508      	str	r5, [sp, #32]
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f00c:	2200      	movs	r2, #0
 800f00e:	2312      	movs	r3, #18
 800f010:	e7b0      	b.n	800ef74 <_dtoa_r+0x26c>
 800f012:	2301      	movs	r3, #1
 800f014:	9308      	str	r3, [sp, #32]
 800f016:	e7f5      	b.n	800f004 <_dtoa_r+0x2fc>
 800f018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f01a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f01e:	e7b8      	b.n	800ef92 <_dtoa_r+0x28a>
 800f020:	3101      	adds	r1, #1
 800f022:	6041      	str	r1, [r0, #4]
 800f024:	0052      	lsls	r2, r2, #1
 800f026:	e7b8      	b.n	800ef9a <_dtoa_r+0x292>
 800f028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f02a:	9a01      	ldr	r2, [sp, #4]
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	9b03      	ldr	r3, [sp, #12]
 800f030:	2b0e      	cmp	r3, #14
 800f032:	f200 809d 	bhi.w	800f170 <_dtoa_r+0x468>
 800f036:	2d00      	cmp	r5, #0
 800f038:	f000 809a 	beq.w	800f170 <_dtoa_r+0x468>
 800f03c:	9b00      	ldr	r3, [sp, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	dd32      	ble.n	800f0a8 <_dtoa_r+0x3a0>
 800f042:	4ab7      	ldr	r2, [pc, #732]	; (800f320 <_dtoa_r+0x618>)
 800f044:	f003 030f 	and.w	r3, r3, #15
 800f048:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f04c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	05d8      	lsls	r0, r3, #23
 800f054:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f058:	d516      	bpl.n	800f088 <_dtoa_r+0x380>
 800f05a:	4bb2      	ldr	r3, [pc, #712]	; (800f324 <_dtoa_r+0x61c>)
 800f05c:	ec51 0b19 	vmov	r0, r1, d9
 800f060:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f064:	f7f1 fc12 	bl	800088c <__aeabi_ddiv>
 800f068:	f007 070f 	and.w	r7, r7, #15
 800f06c:	4682      	mov	sl, r0
 800f06e:	468b      	mov	fp, r1
 800f070:	2503      	movs	r5, #3
 800f072:	4eac      	ldr	r6, [pc, #688]	; (800f324 <_dtoa_r+0x61c>)
 800f074:	b957      	cbnz	r7, 800f08c <_dtoa_r+0x384>
 800f076:	4642      	mov	r2, r8
 800f078:	464b      	mov	r3, r9
 800f07a:	4650      	mov	r0, sl
 800f07c:	4659      	mov	r1, fp
 800f07e:	f7f1 fc05 	bl	800088c <__aeabi_ddiv>
 800f082:	4682      	mov	sl, r0
 800f084:	468b      	mov	fp, r1
 800f086:	e028      	b.n	800f0da <_dtoa_r+0x3d2>
 800f088:	2502      	movs	r5, #2
 800f08a:	e7f2      	b.n	800f072 <_dtoa_r+0x36a>
 800f08c:	07f9      	lsls	r1, r7, #31
 800f08e:	d508      	bpl.n	800f0a2 <_dtoa_r+0x39a>
 800f090:	4640      	mov	r0, r8
 800f092:	4649      	mov	r1, r9
 800f094:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f098:	f7f1 face 	bl	8000638 <__aeabi_dmul>
 800f09c:	3501      	adds	r5, #1
 800f09e:	4680      	mov	r8, r0
 800f0a0:	4689      	mov	r9, r1
 800f0a2:	107f      	asrs	r7, r7, #1
 800f0a4:	3608      	adds	r6, #8
 800f0a6:	e7e5      	b.n	800f074 <_dtoa_r+0x36c>
 800f0a8:	f000 809b 	beq.w	800f1e2 <_dtoa_r+0x4da>
 800f0ac:	9b00      	ldr	r3, [sp, #0]
 800f0ae:	4f9d      	ldr	r7, [pc, #628]	; (800f324 <_dtoa_r+0x61c>)
 800f0b0:	425e      	negs	r6, r3
 800f0b2:	4b9b      	ldr	r3, [pc, #620]	; (800f320 <_dtoa_r+0x618>)
 800f0b4:	f006 020f 	and.w	r2, r6, #15
 800f0b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	ec51 0b19 	vmov	r0, r1, d9
 800f0c4:	f7f1 fab8 	bl	8000638 <__aeabi_dmul>
 800f0c8:	1136      	asrs	r6, r6, #4
 800f0ca:	4682      	mov	sl, r0
 800f0cc:	468b      	mov	fp, r1
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	2502      	movs	r5, #2
 800f0d2:	2e00      	cmp	r6, #0
 800f0d4:	d17a      	bne.n	800f1cc <_dtoa_r+0x4c4>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1d3      	bne.n	800f082 <_dtoa_r+0x37a>
 800f0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f000 8082 	beq.w	800f1e6 <_dtoa_r+0x4de>
 800f0e2:	4b91      	ldr	r3, [pc, #580]	; (800f328 <_dtoa_r+0x620>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	4650      	mov	r0, sl
 800f0e8:	4659      	mov	r1, fp
 800f0ea:	f7f1 fd17 	bl	8000b1c <__aeabi_dcmplt>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d079      	beq.n	800f1e6 <_dtoa_r+0x4de>
 800f0f2:	9b03      	ldr	r3, [sp, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d076      	beq.n	800f1e6 <_dtoa_r+0x4de>
 800f0f8:	9b02      	ldr	r3, [sp, #8]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	dd36      	ble.n	800f16c <_dtoa_r+0x464>
 800f0fe:	9b00      	ldr	r3, [sp, #0]
 800f100:	4650      	mov	r0, sl
 800f102:	4659      	mov	r1, fp
 800f104:	1e5f      	subs	r7, r3, #1
 800f106:	2200      	movs	r2, #0
 800f108:	4b88      	ldr	r3, [pc, #544]	; (800f32c <_dtoa_r+0x624>)
 800f10a:	f7f1 fa95 	bl	8000638 <__aeabi_dmul>
 800f10e:	9e02      	ldr	r6, [sp, #8]
 800f110:	4682      	mov	sl, r0
 800f112:	468b      	mov	fp, r1
 800f114:	3501      	adds	r5, #1
 800f116:	4628      	mov	r0, r5
 800f118:	f7f1 fa24 	bl	8000564 <__aeabi_i2d>
 800f11c:	4652      	mov	r2, sl
 800f11e:	465b      	mov	r3, fp
 800f120:	f7f1 fa8a 	bl	8000638 <__aeabi_dmul>
 800f124:	4b82      	ldr	r3, [pc, #520]	; (800f330 <_dtoa_r+0x628>)
 800f126:	2200      	movs	r2, #0
 800f128:	f7f1 f8d0 	bl	80002cc <__adddf3>
 800f12c:	46d0      	mov	r8, sl
 800f12e:	46d9      	mov	r9, fp
 800f130:	4682      	mov	sl, r0
 800f132:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f136:	2e00      	cmp	r6, #0
 800f138:	d158      	bne.n	800f1ec <_dtoa_r+0x4e4>
 800f13a:	4b7e      	ldr	r3, [pc, #504]	; (800f334 <_dtoa_r+0x62c>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f1 f8c1 	bl	80002c8 <__aeabi_dsub>
 800f146:	4652      	mov	r2, sl
 800f148:	465b      	mov	r3, fp
 800f14a:	4680      	mov	r8, r0
 800f14c:	4689      	mov	r9, r1
 800f14e:	f7f1 fd03 	bl	8000b58 <__aeabi_dcmpgt>
 800f152:	2800      	cmp	r0, #0
 800f154:	f040 8295 	bne.w	800f682 <_dtoa_r+0x97a>
 800f158:	4652      	mov	r2, sl
 800f15a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f15e:	4640      	mov	r0, r8
 800f160:	4649      	mov	r1, r9
 800f162:	f7f1 fcdb 	bl	8000b1c <__aeabi_dcmplt>
 800f166:	2800      	cmp	r0, #0
 800f168:	f040 8289 	bne.w	800f67e <_dtoa_r+0x976>
 800f16c:	ec5b ab19 	vmov	sl, fp, d9
 800f170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f172:	2b00      	cmp	r3, #0
 800f174:	f2c0 8148 	blt.w	800f408 <_dtoa_r+0x700>
 800f178:	9a00      	ldr	r2, [sp, #0]
 800f17a:	2a0e      	cmp	r2, #14
 800f17c:	f300 8144 	bgt.w	800f408 <_dtoa_r+0x700>
 800f180:	4b67      	ldr	r3, [pc, #412]	; (800f320 <_dtoa_r+0x618>)
 800f182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f186:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f280 80d5 	bge.w	800f33c <_dtoa_r+0x634>
 800f192:	9b03      	ldr	r3, [sp, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f300 80d1 	bgt.w	800f33c <_dtoa_r+0x634>
 800f19a:	f040 826f 	bne.w	800f67c <_dtoa_r+0x974>
 800f19e:	4b65      	ldr	r3, [pc, #404]	; (800f334 <_dtoa_r+0x62c>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4640      	mov	r0, r8
 800f1a4:	4649      	mov	r1, r9
 800f1a6:	f7f1 fa47 	bl	8000638 <__aeabi_dmul>
 800f1aa:	4652      	mov	r2, sl
 800f1ac:	465b      	mov	r3, fp
 800f1ae:	f7f1 fcc9 	bl	8000b44 <__aeabi_dcmpge>
 800f1b2:	9e03      	ldr	r6, [sp, #12]
 800f1b4:	4637      	mov	r7, r6
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f040 8245 	bne.w	800f646 <_dtoa_r+0x93e>
 800f1bc:	9d01      	ldr	r5, [sp, #4]
 800f1be:	2331      	movs	r3, #49	; 0x31
 800f1c0:	f805 3b01 	strb.w	r3, [r5], #1
 800f1c4:	9b00      	ldr	r3, [sp, #0]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	e240      	b.n	800f64e <_dtoa_r+0x946>
 800f1cc:	07f2      	lsls	r2, r6, #31
 800f1ce:	d505      	bpl.n	800f1dc <_dtoa_r+0x4d4>
 800f1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1d4:	f7f1 fa30 	bl	8000638 <__aeabi_dmul>
 800f1d8:	3501      	adds	r5, #1
 800f1da:	2301      	movs	r3, #1
 800f1dc:	1076      	asrs	r6, r6, #1
 800f1de:	3708      	adds	r7, #8
 800f1e0:	e777      	b.n	800f0d2 <_dtoa_r+0x3ca>
 800f1e2:	2502      	movs	r5, #2
 800f1e4:	e779      	b.n	800f0da <_dtoa_r+0x3d2>
 800f1e6:	9f00      	ldr	r7, [sp, #0]
 800f1e8:	9e03      	ldr	r6, [sp, #12]
 800f1ea:	e794      	b.n	800f116 <_dtoa_r+0x40e>
 800f1ec:	9901      	ldr	r1, [sp, #4]
 800f1ee:	4b4c      	ldr	r3, [pc, #304]	; (800f320 <_dtoa_r+0x618>)
 800f1f0:	4431      	add	r1, r6
 800f1f2:	910d      	str	r1, [sp, #52]	; 0x34
 800f1f4:	9908      	ldr	r1, [sp, #32]
 800f1f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f1fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1fe:	2900      	cmp	r1, #0
 800f200:	d043      	beq.n	800f28a <_dtoa_r+0x582>
 800f202:	494d      	ldr	r1, [pc, #308]	; (800f338 <_dtoa_r+0x630>)
 800f204:	2000      	movs	r0, #0
 800f206:	f7f1 fb41 	bl	800088c <__aeabi_ddiv>
 800f20a:	4652      	mov	r2, sl
 800f20c:	465b      	mov	r3, fp
 800f20e:	f7f1 f85b 	bl	80002c8 <__aeabi_dsub>
 800f212:	9d01      	ldr	r5, [sp, #4]
 800f214:	4682      	mov	sl, r0
 800f216:	468b      	mov	fp, r1
 800f218:	4649      	mov	r1, r9
 800f21a:	4640      	mov	r0, r8
 800f21c:	f7f1 fcbc 	bl	8000b98 <__aeabi_d2iz>
 800f220:	4606      	mov	r6, r0
 800f222:	f7f1 f99f 	bl	8000564 <__aeabi_i2d>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 f84b 	bl	80002c8 <__aeabi_dsub>
 800f232:	3630      	adds	r6, #48	; 0x30
 800f234:	f805 6b01 	strb.w	r6, [r5], #1
 800f238:	4652      	mov	r2, sl
 800f23a:	465b      	mov	r3, fp
 800f23c:	4680      	mov	r8, r0
 800f23e:	4689      	mov	r9, r1
 800f240:	f7f1 fc6c 	bl	8000b1c <__aeabi_dcmplt>
 800f244:	2800      	cmp	r0, #0
 800f246:	d163      	bne.n	800f310 <_dtoa_r+0x608>
 800f248:	4642      	mov	r2, r8
 800f24a:	464b      	mov	r3, r9
 800f24c:	4936      	ldr	r1, [pc, #216]	; (800f328 <_dtoa_r+0x620>)
 800f24e:	2000      	movs	r0, #0
 800f250:	f7f1 f83a 	bl	80002c8 <__aeabi_dsub>
 800f254:	4652      	mov	r2, sl
 800f256:	465b      	mov	r3, fp
 800f258:	f7f1 fc60 	bl	8000b1c <__aeabi_dcmplt>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	f040 80b5 	bne.w	800f3cc <_dtoa_r+0x6c4>
 800f262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f264:	429d      	cmp	r5, r3
 800f266:	d081      	beq.n	800f16c <_dtoa_r+0x464>
 800f268:	4b30      	ldr	r3, [pc, #192]	; (800f32c <_dtoa_r+0x624>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	4650      	mov	r0, sl
 800f26e:	4659      	mov	r1, fp
 800f270:	f7f1 f9e2 	bl	8000638 <__aeabi_dmul>
 800f274:	4b2d      	ldr	r3, [pc, #180]	; (800f32c <_dtoa_r+0x624>)
 800f276:	4682      	mov	sl, r0
 800f278:	468b      	mov	fp, r1
 800f27a:	4640      	mov	r0, r8
 800f27c:	4649      	mov	r1, r9
 800f27e:	2200      	movs	r2, #0
 800f280:	f7f1 f9da 	bl	8000638 <__aeabi_dmul>
 800f284:	4680      	mov	r8, r0
 800f286:	4689      	mov	r9, r1
 800f288:	e7c6      	b.n	800f218 <_dtoa_r+0x510>
 800f28a:	4650      	mov	r0, sl
 800f28c:	4659      	mov	r1, fp
 800f28e:	f7f1 f9d3 	bl	8000638 <__aeabi_dmul>
 800f292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f294:	9d01      	ldr	r5, [sp, #4]
 800f296:	930f      	str	r3, [sp, #60]	; 0x3c
 800f298:	4682      	mov	sl, r0
 800f29a:	468b      	mov	fp, r1
 800f29c:	4649      	mov	r1, r9
 800f29e:	4640      	mov	r0, r8
 800f2a0:	f7f1 fc7a 	bl	8000b98 <__aeabi_d2iz>
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	f7f1 f95d 	bl	8000564 <__aeabi_i2d>
 800f2aa:	3630      	adds	r6, #48	; 0x30
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	4649      	mov	r1, r9
 800f2b4:	f7f1 f808 	bl	80002c8 <__aeabi_dsub>
 800f2b8:	f805 6b01 	strb.w	r6, [r5], #1
 800f2bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2be:	429d      	cmp	r5, r3
 800f2c0:	4680      	mov	r8, r0
 800f2c2:	4689      	mov	r9, r1
 800f2c4:	f04f 0200 	mov.w	r2, #0
 800f2c8:	d124      	bne.n	800f314 <_dtoa_r+0x60c>
 800f2ca:	4b1b      	ldr	r3, [pc, #108]	; (800f338 <_dtoa_r+0x630>)
 800f2cc:	4650      	mov	r0, sl
 800f2ce:	4659      	mov	r1, fp
 800f2d0:	f7f0 fffc 	bl	80002cc <__adddf3>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	4640      	mov	r0, r8
 800f2da:	4649      	mov	r1, r9
 800f2dc:	f7f1 fc3c 	bl	8000b58 <__aeabi_dcmpgt>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d173      	bne.n	800f3cc <_dtoa_r+0x6c4>
 800f2e4:	4652      	mov	r2, sl
 800f2e6:	465b      	mov	r3, fp
 800f2e8:	4913      	ldr	r1, [pc, #76]	; (800f338 <_dtoa_r+0x630>)
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	f7f0 ffec 	bl	80002c8 <__aeabi_dsub>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	f7f1 fc10 	bl	8000b1c <__aeabi_dcmplt>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	f43f af35 	beq.w	800f16c <_dtoa_r+0x464>
 800f302:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f304:	1e6b      	subs	r3, r5, #1
 800f306:	930f      	str	r3, [sp, #60]	; 0x3c
 800f308:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f30c:	2b30      	cmp	r3, #48	; 0x30
 800f30e:	d0f8      	beq.n	800f302 <_dtoa_r+0x5fa>
 800f310:	9700      	str	r7, [sp, #0]
 800f312:	e049      	b.n	800f3a8 <_dtoa_r+0x6a0>
 800f314:	4b05      	ldr	r3, [pc, #20]	; (800f32c <_dtoa_r+0x624>)
 800f316:	f7f1 f98f 	bl	8000638 <__aeabi_dmul>
 800f31a:	4680      	mov	r8, r0
 800f31c:	4689      	mov	r9, r1
 800f31e:	e7bd      	b.n	800f29c <_dtoa_r+0x594>
 800f320:	08011c58 	.word	0x08011c58
 800f324:	08011c30 	.word	0x08011c30
 800f328:	3ff00000 	.word	0x3ff00000
 800f32c:	40240000 	.word	0x40240000
 800f330:	401c0000 	.word	0x401c0000
 800f334:	40140000 	.word	0x40140000
 800f338:	3fe00000 	.word	0x3fe00000
 800f33c:	9d01      	ldr	r5, [sp, #4]
 800f33e:	4656      	mov	r6, sl
 800f340:	465f      	mov	r7, fp
 800f342:	4642      	mov	r2, r8
 800f344:	464b      	mov	r3, r9
 800f346:	4630      	mov	r0, r6
 800f348:	4639      	mov	r1, r7
 800f34a:	f7f1 fa9f 	bl	800088c <__aeabi_ddiv>
 800f34e:	f7f1 fc23 	bl	8000b98 <__aeabi_d2iz>
 800f352:	4682      	mov	sl, r0
 800f354:	f7f1 f906 	bl	8000564 <__aeabi_i2d>
 800f358:	4642      	mov	r2, r8
 800f35a:	464b      	mov	r3, r9
 800f35c:	f7f1 f96c 	bl	8000638 <__aeabi_dmul>
 800f360:	4602      	mov	r2, r0
 800f362:	460b      	mov	r3, r1
 800f364:	4630      	mov	r0, r6
 800f366:	4639      	mov	r1, r7
 800f368:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f36c:	f7f0 ffac 	bl	80002c8 <__aeabi_dsub>
 800f370:	f805 6b01 	strb.w	r6, [r5], #1
 800f374:	9e01      	ldr	r6, [sp, #4]
 800f376:	9f03      	ldr	r7, [sp, #12]
 800f378:	1bae      	subs	r6, r5, r6
 800f37a:	42b7      	cmp	r7, r6
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	d135      	bne.n	800f3ee <_dtoa_r+0x6e6>
 800f382:	f7f0 ffa3 	bl	80002cc <__adddf3>
 800f386:	4642      	mov	r2, r8
 800f388:	464b      	mov	r3, r9
 800f38a:	4606      	mov	r6, r0
 800f38c:	460f      	mov	r7, r1
 800f38e:	f7f1 fbe3 	bl	8000b58 <__aeabi_dcmpgt>
 800f392:	b9d0      	cbnz	r0, 800f3ca <_dtoa_r+0x6c2>
 800f394:	4642      	mov	r2, r8
 800f396:	464b      	mov	r3, r9
 800f398:	4630      	mov	r0, r6
 800f39a:	4639      	mov	r1, r7
 800f39c:	f7f1 fbb4 	bl	8000b08 <__aeabi_dcmpeq>
 800f3a0:	b110      	cbz	r0, 800f3a8 <_dtoa_r+0x6a0>
 800f3a2:	f01a 0f01 	tst.w	sl, #1
 800f3a6:	d110      	bne.n	800f3ca <_dtoa_r+0x6c2>
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	ee18 1a10 	vmov	r1, s16
 800f3ae:	f7fe ffdb 	bl	800e368 <_Bfree>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	9800      	ldr	r0, [sp, #0]
 800f3b6:	702b      	strb	r3, [r5, #0]
 800f3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3ba:	3001      	adds	r0, #1
 800f3bc:	6018      	str	r0, [r3, #0]
 800f3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f43f acf1 	beq.w	800eda8 <_dtoa_r+0xa0>
 800f3c6:	601d      	str	r5, [r3, #0]
 800f3c8:	e4ee      	b.n	800eda8 <_dtoa_r+0xa0>
 800f3ca:	9f00      	ldr	r7, [sp, #0]
 800f3cc:	462b      	mov	r3, r5
 800f3ce:	461d      	mov	r5, r3
 800f3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3d4:	2a39      	cmp	r2, #57	; 0x39
 800f3d6:	d106      	bne.n	800f3e6 <_dtoa_r+0x6de>
 800f3d8:	9a01      	ldr	r2, [sp, #4]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d1f7      	bne.n	800f3ce <_dtoa_r+0x6c6>
 800f3de:	9901      	ldr	r1, [sp, #4]
 800f3e0:	2230      	movs	r2, #48	; 0x30
 800f3e2:	3701      	adds	r7, #1
 800f3e4:	700a      	strb	r2, [r1, #0]
 800f3e6:	781a      	ldrb	r2, [r3, #0]
 800f3e8:	3201      	adds	r2, #1
 800f3ea:	701a      	strb	r2, [r3, #0]
 800f3ec:	e790      	b.n	800f310 <_dtoa_r+0x608>
 800f3ee:	4ba6      	ldr	r3, [pc, #664]	; (800f688 <_dtoa_r+0x980>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f7f1 f921 	bl	8000638 <__aeabi_dmul>
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	460f      	mov	r7, r1
 800f3fe:	f7f1 fb83 	bl	8000b08 <__aeabi_dcmpeq>
 800f402:	2800      	cmp	r0, #0
 800f404:	d09d      	beq.n	800f342 <_dtoa_r+0x63a>
 800f406:	e7cf      	b.n	800f3a8 <_dtoa_r+0x6a0>
 800f408:	9a08      	ldr	r2, [sp, #32]
 800f40a:	2a00      	cmp	r2, #0
 800f40c:	f000 80d7 	beq.w	800f5be <_dtoa_r+0x8b6>
 800f410:	9a06      	ldr	r2, [sp, #24]
 800f412:	2a01      	cmp	r2, #1
 800f414:	f300 80ba 	bgt.w	800f58c <_dtoa_r+0x884>
 800f418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f41a:	2a00      	cmp	r2, #0
 800f41c:	f000 80b2 	beq.w	800f584 <_dtoa_r+0x87c>
 800f420:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f424:	9e07      	ldr	r6, [sp, #28]
 800f426:	9d04      	ldr	r5, [sp, #16]
 800f428:	9a04      	ldr	r2, [sp, #16]
 800f42a:	441a      	add	r2, r3
 800f42c:	9204      	str	r2, [sp, #16]
 800f42e:	9a05      	ldr	r2, [sp, #20]
 800f430:	2101      	movs	r1, #1
 800f432:	441a      	add	r2, r3
 800f434:	4620      	mov	r0, r4
 800f436:	9205      	str	r2, [sp, #20]
 800f438:	f7ff f84e 	bl	800e4d8 <__i2b>
 800f43c:	4607      	mov	r7, r0
 800f43e:	2d00      	cmp	r5, #0
 800f440:	dd0c      	ble.n	800f45c <_dtoa_r+0x754>
 800f442:	9b05      	ldr	r3, [sp, #20]
 800f444:	2b00      	cmp	r3, #0
 800f446:	dd09      	ble.n	800f45c <_dtoa_r+0x754>
 800f448:	42ab      	cmp	r3, r5
 800f44a:	9a04      	ldr	r2, [sp, #16]
 800f44c:	bfa8      	it	ge
 800f44e:	462b      	movge	r3, r5
 800f450:	1ad2      	subs	r2, r2, r3
 800f452:	9204      	str	r2, [sp, #16]
 800f454:	9a05      	ldr	r2, [sp, #20]
 800f456:	1aed      	subs	r5, r5, r3
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	9305      	str	r3, [sp, #20]
 800f45c:	9b07      	ldr	r3, [sp, #28]
 800f45e:	b31b      	cbz	r3, 800f4a8 <_dtoa_r+0x7a0>
 800f460:	9b08      	ldr	r3, [sp, #32]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f000 80af 	beq.w	800f5c6 <_dtoa_r+0x8be>
 800f468:	2e00      	cmp	r6, #0
 800f46a:	dd13      	ble.n	800f494 <_dtoa_r+0x78c>
 800f46c:	4639      	mov	r1, r7
 800f46e:	4632      	mov	r2, r6
 800f470:	4620      	mov	r0, r4
 800f472:	f7ff f8f1 	bl	800e658 <__pow5mult>
 800f476:	ee18 2a10 	vmov	r2, s16
 800f47a:	4601      	mov	r1, r0
 800f47c:	4607      	mov	r7, r0
 800f47e:	4620      	mov	r0, r4
 800f480:	f7ff f840 	bl	800e504 <__multiply>
 800f484:	ee18 1a10 	vmov	r1, s16
 800f488:	4680      	mov	r8, r0
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7fe ff6c 	bl	800e368 <_Bfree>
 800f490:	ee08 8a10 	vmov	s16, r8
 800f494:	9b07      	ldr	r3, [sp, #28]
 800f496:	1b9a      	subs	r2, r3, r6
 800f498:	d006      	beq.n	800f4a8 <_dtoa_r+0x7a0>
 800f49a:	ee18 1a10 	vmov	r1, s16
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7ff f8da 	bl	800e658 <__pow5mult>
 800f4a4:	ee08 0a10 	vmov	s16, r0
 800f4a8:	2101      	movs	r1, #1
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f7ff f814 	bl	800e4d8 <__i2b>
 800f4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	f340 8088 	ble.w	800f5ca <_dtoa_r+0x8c2>
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	4601      	mov	r1, r0
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f7ff f8ca 	bl	800e658 <__pow5mult>
 800f4c4:	9b06      	ldr	r3, [sp, #24]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	f340 8081 	ble.w	800f5d0 <_dtoa_r+0x8c8>
 800f4ce:	f04f 0800 	mov.w	r8, #0
 800f4d2:	6933      	ldr	r3, [r6, #16]
 800f4d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f4d8:	6918      	ldr	r0, [r3, #16]
 800f4da:	f7fe ffad 	bl	800e438 <__hi0bits>
 800f4de:	f1c0 0020 	rsb	r0, r0, #32
 800f4e2:	9b05      	ldr	r3, [sp, #20]
 800f4e4:	4418      	add	r0, r3
 800f4e6:	f010 001f 	ands.w	r0, r0, #31
 800f4ea:	f000 8092 	beq.w	800f612 <_dtoa_r+0x90a>
 800f4ee:	f1c0 0320 	rsb	r3, r0, #32
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	f340 808a 	ble.w	800f60c <_dtoa_r+0x904>
 800f4f8:	f1c0 001c 	rsb	r0, r0, #28
 800f4fc:	9b04      	ldr	r3, [sp, #16]
 800f4fe:	4403      	add	r3, r0
 800f500:	9304      	str	r3, [sp, #16]
 800f502:	9b05      	ldr	r3, [sp, #20]
 800f504:	4403      	add	r3, r0
 800f506:	4405      	add	r5, r0
 800f508:	9305      	str	r3, [sp, #20]
 800f50a:	9b04      	ldr	r3, [sp, #16]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	dd07      	ble.n	800f520 <_dtoa_r+0x818>
 800f510:	ee18 1a10 	vmov	r1, s16
 800f514:	461a      	mov	r2, r3
 800f516:	4620      	mov	r0, r4
 800f518:	f7ff f8f8 	bl	800e70c <__lshift>
 800f51c:	ee08 0a10 	vmov	s16, r0
 800f520:	9b05      	ldr	r3, [sp, #20]
 800f522:	2b00      	cmp	r3, #0
 800f524:	dd05      	ble.n	800f532 <_dtoa_r+0x82a>
 800f526:	4631      	mov	r1, r6
 800f528:	461a      	mov	r2, r3
 800f52a:	4620      	mov	r0, r4
 800f52c:	f7ff f8ee 	bl	800e70c <__lshift>
 800f530:	4606      	mov	r6, r0
 800f532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d06e      	beq.n	800f616 <_dtoa_r+0x90e>
 800f538:	ee18 0a10 	vmov	r0, s16
 800f53c:	4631      	mov	r1, r6
 800f53e:	f7ff f955 	bl	800e7ec <__mcmp>
 800f542:	2800      	cmp	r0, #0
 800f544:	da67      	bge.n	800f616 <_dtoa_r+0x90e>
 800f546:	9b00      	ldr	r3, [sp, #0]
 800f548:	3b01      	subs	r3, #1
 800f54a:	ee18 1a10 	vmov	r1, s16
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	220a      	movs	r2, #10
 800f552:	2300      	movs	r3, #0
 800f554:	4620      	mov	r0, r4
 800f556:	f7fe ff29 	bl	800e3ac <__multadd>
 800f55a:	9b08      	ldr	r3, [sp, #32]
 800f55c:	ee08 0a10 	vmov	s16, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	f000 81b1 	beq.w	800f8c8 <_dtoa_r+0xbc0>
 800f566:	2300      	movs	r3, #0
 800f568:	4639      	mov	r1, r7
 800f56a:	220a      	movs	r2, #10
 800f56c:	4620      	mov	r0, r4
 800f56e:	f7fe ff1d 	bl	800e3ac <__multadd>
 800f572:	9b02      	ldr	r3, [sp, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	4607      	mov	r7, r0
 800f578:	f300 808e 	bgt.w	800f698 <_dtoa_r+0x990>
 800f57c:	9b06      	ldr	r3, [sp, #24]
 800f57e:	2b02      	cmp	r3, #2
 800f580:	dc51      	bgt.n	800f626 <_dtoa_r+0x91e>
 800f582:	e089      	b.n	800f698 <_dtoa_r+0x990>
 800f584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f58a:	e74b      	b.n	800f424 <_dtoa_r+0x71c>
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	1e5e      	subs	r6, r3, #1
 800f590:	9b07      	ldr	r3, [sp, #28]
 800f592:	42b3      	cmp	r3, r6
 800f594:	bfbf      	itttt	lt
 800f596:	9b07      	ldrlt	r3, [sp, #28]
 800f598:	9607      	strlt	r6, [sp, #28]
 800f59a:	1af2      	sublt	r2, r6, r3
 800f59c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f59e:	bfb6      	itet	lt
 800f5a0:	189b      	addlt	r3, r3, r2
 800f5a2:	1b9e      	subge	r6, r3, r6
 800f5a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f5a6:	9b03      	ldr	r3, [sp, #12]
 800f5a8:	bfb8      	it	lt
 800f5aa:	2600      	movlt	r6, #0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	bfb7      	itett	lt
 800f5b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f5b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f5b8:	1a9d      	sublt	r5, r3, r2
 800f5ba:	2300      	movlt	r3, #0
 800f5bc:	e734      	b.n	800f428 <_dtoa_r+0x720>
 800f5be:	9e07      	ldr	r6, [sp, #28]
 800f5c0:	9d04      	ldr	r5, [sp, #16]
 800f5c2:	9f08      	ldr	r7, [sp, #32]
 800f5c4:	e73b      	b.n	800f43e <_dtoa_r+0x736>
 800f5c6:	9a07      	ldr	r2, [sp, #28]
 800f5c8:	e767      	b.n	800f49a <_dtoa_r+0x792>
 800f5ca:	9b06      	ldr	r3, [sp, #24]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	dc18      	bgt.n	800f602 <_dtoa_r+0x8fa>
 800f5d0:	f1ba 0f00 	cmp.w	sl, #0
 800f5d4:	d115      	bne.n	800f602 <_dtoa_r+0x8fa>
 800f5d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5da:	b993      	cbnz	r3, 800f602 <_dtoa_r+0x8fa>
 800f5dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5e0:	0d1b      	lsrs	r3, r3, #20
 800f5e2:	051b      	lsls	r3, r3, #20
 800f5e4:	b183      	cbz	r3, 800f608 <_dtoa_r+0x900>
 800f5e6:	9b04      	ldr	r3, [sp, #16]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	9304      	str	r3, [sp, #16]
 800f5ec:	9b05      	ldr	r3, [sp, #20]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	9305      	str	r3, [sp, #20]
 800f5f2:	f04f 0801 	mov.w	r8, #1
 800f5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f47f af6a 	bne.w	800f4d2 <_dtoa_r+0x7ca>
 800f5fe:	2001      	movs	r0, #1
 800f600:	e76f      	b.n	800f4e2 <_dtoa_r+0x7da>
 800f602:	f04f 0800 	mov.w	r8, #0
 800f606:	e7f6      	b.n	800f5f6 <_dtoa_r+0x8ee>
 800f608:	4698      	mov	r8, r3
 800f60a:	e7f4      	b.n	800f5f6 <_dtoa_r+0x8ee>
 800f60c:	f43f af7d 	beq.w	800f50a <_dtoa_r+0x802>
 800f610:	4618      	mov	r0, r3
 800f612:	301c      	adds	r0, #28
 800f614:	e772      	b.n	800f4fc <_dtoa_r+0x7f4>
 800f616:	9b03      	ldr	r3, [sp, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	dc37      	bgt.n	800f68c <_dtoa_r+0x984>
 800f61c:	9b06      	ldr	r3, [sp, #24]
 800f61e:	2b02      	cmp	r3, #2
 800f620:	dd34      	ble.n	800f68c <_dtoa_r+0x984>
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	9302      	str	r3, [sp, #8]
 800f626:	9b02      	ldr	r3, [sp, #8]
 800f628:	b96b      	cbnz	r3, 800f646 <_dtoa_r+0x93e>
 800f62a:	4631      	mov	r1, r6
 800f62c:	2205      	movs	r2, #5
 800f62e:	4620      	mov	r0, r4
 800f630:	f7fe febc 	bl	800e3ac <__multadd>
 800f634:	4601      	mov	r1, r0
 800f636:	4606      	mov	r6, r0
 800f638:	ee18 0a10 	vmov	r0, s16
 800f63c:	f7ff f8d6 	bl	800e7ec <__mcmp>
 800f640:	2800      	cmp	r0, #0
 800f642:	f73f adbb 	bgt.w	800f1bc <_dtoa_r+0x4b4>
 800f646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f648:	9d01      	ldr	r5, [sp, #4]
 800f64a:	43db      	mvns	r3, r3
 800f64c:	9300      	str	r3, [sp, #0]
 800f64e:	f04f 0800 	mov.w	r8, #0
 800f652:	4631      	mov	r1, r6
 800f654:	4620      	mov	r0, r4
 800f656:	f7fe fe87 	bl	800e368 <_Bfree>
 800f65a:	2f00      	cmp	r7, #0
 800f65c:	f43f aea4 	beq.w	800f3a8 <_dtoa_r+0x6a0>
 800f660:	f1b8 0f00 	cmp.w	r8, #0
 800f664:	d005      	beq.n	800f672 <_dtoa_r+0x96a>
 800f666:	45b8      	cmp	r8, r7
 800f668:	d003      	beq.n	800f672 <_dtoa_r+0x96a>
 800f66a:	4641      	mov	r1, r8
 800f66c:	4620      	mov	r0, r4
 800f66e:	f7fe fe7b 	bl	800e368 <_Bfree>
 800f672:	4639      	mov	r1, r7
 800f674:	4620      	mov	r0, r4
 800f676:	f7fe fe77 	bl	800e368 <_Bfree>
 800f67a:	e695      	b.n	800f3a8 <_dtoa_r+0x6a0>
 800f67c:	2600      	movs	r6, #0
 800f67e:	4637      	mov	r7, r6
 800f680:	e7e1      	b.n	800f646 <_dtoa_r+0x93e>
 800f682:	9700      	str	r7, [sp, #0]
 800f684:	4637      	mov	r7, r6
 800f686:	e599      	b.n	800f1bc <_dtoa_r+0x4b4>
 800f688:	40240000 	.word	0x40240000
 800f68c:	9b08      	ldr	r3, [sp, #32]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f000 80ca 	beq.w	800f828 <_dtoa_r+0xb20>
 800f694:	9b03      	ldr	r3, [sp, #12]
 800f696:	9302      	str	r3, [sp, #8]
 800f698:	2d00      	cmp	r5, #0
 800f69a:	dd05      	ble.n	800f6a8 <_dtoa_r+0x9a0>
 800f69c:	4639      	mov	r1, r7
 800f69e:	462a      	mov	r2, r5
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f7ff f833 	bl	800e70c <__lshift>
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	f1b8 0f00 	cmp.w	r8, #0
 800f6ac:	d05b      	beq.n	800f766 <_dtoa_r+0xa5e>
 800f6ae:	6879      	ldr	r1, [r7, #4]
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7fe fe19 	bl	800e2e8 <_Balloc>
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	b928      	cbnz	r0, 800f6c6 <_dtoa_r+0x9be>
 800f6ba:	4b87      	ldr	r3, [pc, #540]	; (800f8d8 <_dtoa_r+0xbd0>)
 800f6bc:	4602      	mov	r2, r0
 800f6be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f6c2:	f7ff bb3b 	b.w	800ed3c <_dtoa_r+0x34>
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	3202      	adds	r2, #2
 800f6ca:	0092      	lsls	r2, r2, #2
 800f6cc:	f107 010c 	add.w	r1, r7, #12
 800f6d0:	300c      	adds	r0, #12
 800f6d2:	f000 f921 	bl	800f918 <memcpy>
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	4629      	mov	r1, r5
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f7ff f816 	bl	800e70c <__lshift>
 800f6e0:	9b01      	ldr	r3, [sp, #4]
 800f6e2:	f103 0901 	add.w	r9, r3, #1
 800f6e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	9305      	str	r3, [sp, #20]
 800f6ee:	f00a 0301 	and.w	r3, sl, #1
 800f6f2:	46b8      	mov	r8, r7
 800f6f4:	9304      	str	r3, [sp, #16]
 800f6f6:	4607      	mov	r7, r0
 800f6f8:	4631      	mov	r1, r6
 800f6fa:	ee18 0a10 	vmov	r0, s16
 800f6fe:	f7ff fa75 	bl	800ebec <quorem>
 800f702:	4641      	mov	r1, r8
 800f704:	9002      	str	r0, [sp, #8]
 800f706:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f70a:	ee18 0a10 	vmov	r0, s16
 800f70e:	f7ff f86d 	bl	800e7ec <__mcmp>
 800f712:	463a      	mov	r2, r7
 800f714:	9003      	str	r0, [sp, #12]
 800f716:	4631      	mov	r1, r6
 800f718:	4620      	mov	r0, r4
 800f71a:	f7ff f883 	bl	800e824 <__mdiff>
 800f71e:	68c2      	ldr	r2, [r0, #12]
 800f720:	f109 3bff 	add.w	fp, r9, #4294967295
 800f724:	4605      	mov	r5, r0
 800f726:	bb02      	cbnz	r2, 800f76a <_dtoa_r+0xa62>
 800f728:	4601      	mov	r1, r0
 800f72a:	ee18 0a10 	vmov	r0, s16
 800f72e:	f7ff f85d 	bl	800e7ec <__mcmp>
 800f732:	4602      	mov	r2, r0
 800f734:	4629      	mov	r1, r5
 800f736:	4620      	mov	r0, r4
 800f738:	9207      	str	r2, [sp, #28]
 800f73a:	f7fe fe15 	bl	800e368 <_Bfree>
 800f73e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f742:	ea43 0102 	orr.w	r1, r3, r2
 800f746:	9b04      	ldr	r3, [sp, #16]
 800f748:	430b      	orrs	r3, r1
 800f74a:	464d      	mov	r5, r9
 800f74c:	d10f      	bne.n	800f76e <_dtoa_r+0xa66>
 800f74e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f752:	d02a      	beq.n	800f7aa <_dtoa_r+0xaa2>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	2b00      	cmp	r3, #0
 800f758:	dd02      	ble.n	800f760 <_dtoa_r+0xa58>
 800f75a:	9b02      	ldr	r3, [sp, #8]
 800f75c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f760:	f88b a000 	strb.w	sl, [fp]
 800f764:	e775      	b.n	800f652 <_dtoa_r+0x94a>
 800f766:	4638      	mov	r0, r7
 800f768:	e7ba      	b.n	800f6e0 <_dtoa_r+0x9d8>
 800f76a:	2201      	movs	r2, #1
 800f76c:	e7e2      	b.n	800f734 <_dtoa_r+0xa2c>
 800f76e:	9b03      	ldr	r3, [sp, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	db04      	blt.n	800f77e <_dtoa_r+0xa76>
 800f774:	9906      	ldr	r1, [sp, #24]
 800f776:	430b      	orrs	r3, r1
 800f778:	9904      	ldr	r1, [sp, #16]
 800f77a:	430b      	orrs	r3, r1
 800f77c:	d122      	bne.n	800f7c4 <_dtoa_r+0xabc>
 800f77e:	2a00      	cmp	r2, #0
 800f780:	ddee      	ble.n	800f760 <_dtoa_r+0xa58>
 800f782:	ee18 1a10 	vmov	r1, s16
 800f786:	2201      	movs	r2, #1
 800f788:	4620      	mov	r0, r4
 800f78a:	f7fe ffbf 	bl	800e70c <__lshift>
 800f78e:	4631      	mov	r1, r6
 800f790:	ee08 0a10 	vmov	s16, r0
 800f794:	f7ff f82a 	bl	800e7ec <__mcmp>
 800f798:	2800      	cmp	r0, #0
 800f79a:	dc03      	bgt.n	800f7a4 <_dtoa_r+0xa9c>
 800f79c:	d1e0      	bne.n	800f760 <_dtoa_r+0xa58>
 800f79e:	f01a 0f01 	tst.w	sl, #1
 800f7a2:	d0dd      	beq.n	800f760 <_dtoa_r+0xa58>
 800f7a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f7a8:	d1d7      	bne.n	800f75a <_dtoa_r+0xa52>
 800f7aa:	2339      	movs	r3, #57	; 0x39
 800f7ac:	f88b 3000 	strb.w	r3, [fp]
 800f7b0:	462b      	mov	r3, r5
 800f7b2:	461d      	mov	r5, r3
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f7ba:	2a39      	cmp	r2, #57	; 0x39
 800f7bc:	d071      	beq.n	800f8a2 <_dtoa_r+0xb9a>
 800f7be:	3201      	adds	r2, #1
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	e746      	b.n	800f652 <_dtoa_r+0x94a>
 800f7c4:	2a00      	cmp	r2, #0
 800f7c6:	dd07      	ble.n	800f7d8 <_dtoa_r+0xad0>
 800f7c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f7cc:	d0ed      	beq.n	800f7aa <_dtoa_r+0xaa2>
 800f7ce:	f10a 0301 	add.w	r3, sl, #1
 800f7d2:	f88b 3000 	strb.w	r3, [fp]
 800f7d6:	e73c      	b.n	800f652 <_dtoa_r+0x94a>
 800f7d8:	9b05      	ldr	r3, [sp, #20]
 800f7da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f7de:	4599      	cmp	r9, r3
 800f7e0:	d047      	beq.n	800f872 <_dtoa_r+0xb6a>
 800f7e2:	ee18 1a10 	vmov	r1, s16
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	220a      	movs	r2, #10
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f7fe fdde 	bl	800e3ac <__multadd>
 800f7f0:	45b8      	cmp	r8, r7
 800f7f2:	ee08 0a10 	vmov	s16, r0
 800f7f6:	f04f 0300 	mov.w	r3, #0
 800f7fa:	f04f 020a 	mov.w	r2, #10
 800f7fe:	4641      	mov	r1, r8
 800f800:	4620      	mov	r0, r4
 800f802:	d106      	bne.n	800f812 <_dtoa_r+0xb0a>
 800f804:	f7fe fdd2 	bl	800e3ac <__multadd>
 800f808:	4680      	mov	r8, r0
 800f80a:	4607      	mov	r7, r0
 800f80c:	f109 0901 	add.w	r9, r9, #1
 800f810:	e772      	b.n	800f6f8 <_dtoa_r+0x9f0>
 800f812:	f7fe fdcb 	bl	800e3ac <__multadd>
 800f816:	4639      	mov	r1, r7
 800f818:	4680      	mov	r8, r0
 800f81a:	2300      	movs	r3, #0
 800f81c:	220a      	movs	r2, #10
 800f81e:	4620      	mov	r0, r4
 800f820:	f7fe fdc4 	bl	800e3ac <__multadd>
 800f824:	4607      	mov	r7, r0
 800f826:	e7f1      	b.n	800f80c <_dtoa_r+0xb04>
 800f828:	9b03      	ldr	r3, [sp, #12]
 800f82a:	9302      	str	r3, [sp, #8]
 800f82c:	9d01      	ldr	r5, [sp, #4]
 800f82e:	ee18 0a10 	vmov	r0, s16
 800f832:	4631      	mov	r1, r6
 800f834:	f7ff f9da 	bl	800ebec <quorem>
 800f838:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f83c:	9b01      	ldr	r3, [sp, #4]
 800f83e:	f805 ab01 	strb.w	sl, [r5], #1
 800f842:	1aea      	subs	r2, r5, r3
 800f844:	9b02      	ldr	r3, [sp, #8]
 800f846:	4293      	cmp	r3, r2
 800f848:	dd09      	ble.n	800f85e <_dtoa_r+0xb56>
 800f84a:	ee18 1a10 	vmov	r1, s16
 800f84e:	2300      	movs	r3, #0
 800f850:	220a      	movs	r2, #10
 800f852:	4620      	mov	r0, r4
 800f854:	f7fe fdaa 	bl	800e3ac <__multadd>
 800f858:	ee08 0a10 	vmov	s16, r0
 800f85c:	e7e7      	b.n	800f82e <_dtoa_r+0xb26>
 800f85e:	9b02      	ldr	r3, [sp, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	bfc8      	it	gt
 800f864:	461d      	movgt	r5, r3
 800f866:	9b01      	ldr	r3, [sp, #4]
 800f868:	bfd8      	it	le
 800f86a:	2501      	movle	r5, #1
 800f86c:	441d      	add	r5, r3
 800f86e:	f04f 0800 	mov.w	r8, #0
 800f872:	ee18 1a10 	vmov	r1, s16
 800f876:	2201      	movs	r2, #1
 800f878:	4620      	mov	r0, r4
 800f87a:	f7fe ff47 	bl	800e70c <__lshift>
 800f87e:	4631      	mov	r1, r6
 800f880:	ee08 0a10 	vmov	s16, r0
 800f884:	f7fe ffb2 	bl	800e7ec <__mcmp>
 800f888:	2800      	cmp	r0, #0
 800f88a:	dc91      	bgt.n	800f7b0 <_dtoa_r+0xaa8>
 800f88c:	d102      	bne.n	800f894 <_dtoa_r+0xb8c>
 800f88e:	f01a 0f01 	tst.w	sl, #1
 800f892:	d18d      	bne.n	800f7b0 <_dtoa_r+0xaa8>
 800f894:	462b      	mov	r3, r5
 800f896:	461d      	mov	r5, r3
 800f898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f89c:	2a30      	cmp	r2, #48	; 0x30
 800f89e:	d0fa      	beq.n	800f896 <_dtoa_r+0xb8e>
 800f8a0:	e6d7      	b.n	800f652 <_dtoa_r+0x94a>
 800f8a2:	9a01      	ldr	r2, [sp, #4]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d184      	bne.n	800f7b2 <_dtoa_r+0xaaa>
 800f8a8:	9b00      	ldr	r3, [sp, #0]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	2331      	movs	r3, #49	; 0x31
 800f8b0:	7013      	strb	r3, [r2, #0]
 800f8b2:	e6ce      	b.n	800f652 <_dtoa_r+0x94a>
 800f8b4:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <_dtoa_r+0xbd4>)
 800f8b6:	f7ff ba95 	b.w	800ede4 <_dtoa_r+0xdc>
 800f8ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	f47f aa6e 	bne.w	800ed9e <_dtoa_r+0x96>
 800f8c2:	4b07      	ldr	r3, [pc, #28]	; (800f8e0 <_dtoa_r+0xbd8>)
 800f8c4:	f7ff ba8e 	b.w	800ede4 <_dtoa_r+0xdc>
 800f8c8:	9b02      	ldr	r3, [sp, #8]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dcae      	bgt.n	800f82c <_dtoa_r+0xb24>
 800f8ce:	9b06      	ldr	r3, [sp, #24]
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	f73f aea8 	bgt.w	800f626 <_dtoa_r+0x91e>
 800f8d6:	e7a9      	b.n	800f82c <_dtoa_r+0xb24>
 800f8d8:	08011c18 	.word	0x08011c18
 800f8dc:	08011d75 	.word	0x08011d75
 800f8e0:	08011d68 	.word	0x08011d68

0800f8e4 <fiprintf>:
 800f8e4:	b40e      	push	{r1, r2, r3}
 800f8e6:	b503      	push	{r0, r1, lr}
 800f8e8:	4601      	mov	r1, r0
 800f8ea:	ab03      	add	r3, sp, #12
 800f8ec:	4805      	ldr	r0, [pc, #20]	; (800f904 <fiprintf+0x20>)
 800f8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8f2:	6800      	ldr	r0, [r0, #0]
 800f8f4:	9301      	str	r3, [sp, #4]
 800f8f6:	f000 f89f 	bl	800fa38 <_vfiprintf_r>
 800f8fa:	b002      	add	sp, #8
 800f8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f900:	b003      	add	sp, #12
 800f902:	4770      	bx	lr
 800f904:	2000003c 	.word	0x2000003c

0800f908 <malloc>:
 800f908:	4b02      	ldr	r3, [pc, #8]	; (800f914 <malloc+0xc>)
 800f90a:	4601      	mov	r1, r0
 800f90c:	6818      	ldr	r0, [r3, #0]
 800f90e:	f7ff b8c3 	b.w	800ea98 <_malloc_r>
 800f912:	bf00      	nop
 800f914:	2000003c 	.word	0x2000003c

0800f918 <memcpy>:
 800f918:	440a      	add	r2, r1
 800f91a:	4291      	cmp	r1, r2
 800f91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f920:	d100      	bne.n	800f924 <memcpy+0xc>
 800f922:	4770      	bx	lr
 800f924:	b510      	push	{r4, lr}
 800f926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f92e:	4291      	cmp	r1, r2
 800f930:	d1f9      	bne.n	800f926 <memcpy+0xe>
 800f932:	bd10      	pop	{r4, pc}

0800f934 <__malloc_lock>:
 800f934:	4801      	ldr	r0, [pc, #4]	; (800f93c <__malloc_lock+0x8>)
 800f936:	f000 bdc3 	b.w	80104c0 <__retarget_lock_acquire_recursive>
 800f93a:	bf00      	nop
 800f93c:	20002ea8 	.word	0x20002ea8

0800f940 <__malloc_unlock>:
 800f940:	4801      	ldr	r0, [pc, #4]	; (800f948 <__malloc_unlock+0x8>)
 800f942:	f000 bdbe 	b.w	80104c2 <__retarget_lock_release_recursive>
 800f946:	bf00      	nop
 800f948:	20002ea8 	.word	0x20002ea8

0800f94c <_free_r>:
 800f94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f94e:	2900      	cmp	r1, #0
 800f950:	d044      	beq.n	800f9dc <_free_r+0x90>
 800f952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f956:	9001      	str	r0, [sp, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f1a1 0404 	sub.w	r4, r1, #4
 800f95e:	bfb8      	it	lt
 800f960:	18e4      	addlt	r4, r4, r3
 800f962:	f7ff ffe7 	bl	800f934 <__malloc_lock>
 800f966:	4a1e      	ldr	r2, [pc, #120]	; (800f9e0 <_free_r+0x94>)
 800f968:	9801      	ldr	r0, [sp, #4]
 800f96a:	6813      	ldr	r3, [r2, #0]
 800f96c:	b933      	cbnz	r3, 800f97c <_free_r+0x30>
 800f96e:	6063      	str	r3, [r4, #4]
 800f970:	6014      	str	r4, [r2, #0]
 800f972:	b003      	add	sp, #12
 800f974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f978:	f7ff bfe2 	b.w	800f940 <__malloc_unlock>
 800f97c:	42a3      	cmp	r3, r4
 800f97e:	d908      	bls.n	800f992 <_free_r+0x46>
 800f980:	6825      	ldr	r5, [r4, #0]
 800f982:	1961      	adds	r1, r4, r5
 800f984:	428b      	cmp	r3, r1
 800f986:	bf01      	itttt	eq
 800f988:	6819      	ldreq	r1, [r3, #0]
 800f98a:	685b      	ldreq	r3, [r3, #4]
 800f98c:	1949      	addeq	r1, r1, r5
 800f98e:	6021      	streq	r1, [r4, #0]
 800f990:	e7ed      	b.n	800f96e <_free_r+0x22>
 800f992:	461a      	mov	r2, r3
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	b10b      	cbz	r3, 800f99c <_free_r+0x50>
 800f998:	42a3      	cmp	r3, r4
 800f99a:	d9fa      	bls.n	800f992 <_free_r+0x46>
 800f99c:	6811      	ldr	r1, [r2, #0]
 800f99e:	1855      	adds	r5, r2, r1
 800f9a0:	42a5      	cmp	r5, r4
 800f9a2:	d10b      	bne.n	800f9bc <_free_r+0x70>
 800f9a4:	6824      	ldr	r4, [r4, #0]
 800f9a6:	4421      	add	r1, r4
 800f9a8:	1854      	adds	r4, r2, r1
 800f9aa:	42a3      	cmp	r3, r4
 800f9ac:	6011      	str	r1, [r2, #0]
 800f9ae:	d1e0      	bne.n	800f972 <_free_r+0x26>
 800f9b0:	681c      	ldr	r4, [r3, #0]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	6053      	str	r3, [r2, #4]
 800f9b6:	4421      	add	r1, r4
 800f9b8:	6011      	str	r1, [r2, #0]
 800f9ba:	e7da      	b.n	800f972 <_free_r+0x26>
 800f9bc:	d902      	bls.n	800f9c4 <_free_r+0x78>
 800f9be:	230c      	movs	r3, #12
 800f9c0:	6003      	str	r3, [r0, #0]
 800f9c2:	e7d6      	b.n	800f972 <_free_r+0x26>
 800f9c4:	6825      	ldr	r5, [r4, #0]
 800f9c6:	1961      	adds	r1, r4, r5
 800f9c8:	428b      	cmp	r3, r1
 800f9ca:	bf04      	itt	eq
 800f9cc:	6819      	ldreq	r1, [r3, #0]
 800f9ce:	685b      	ldreq	r3, [r3, #4]
 800f9d0:	6063      	str	r3, [r4, #4]
 800f9d2:	bf04      	itt	eq
 800f9d4:	1949      	addeq	r1, r1, r5
 800f9d6:	6021      	streq	r1, [r4, #0]
 800f9d8:	6054      	str	r4, [r2, #4]
 800f9da:	e7ca      	b.n	800f972 <_free_r+0x26>
 800f9dc:	b003      	add	sp, #12
 800f9de:	bd30      	pop	{r4, r5, pc}
 800f9e0:	20002e9c 	.word	0x20002e9c

0800f9e4 <__sfputc_r>:
 800f9e4:	6893      	ldr	r3, [r2, #8]
 800f9e6:	3b01      	subs	r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	b410      	push	{r4}
 800f9ec:	6093      	str	r3, [r2, #8]
 800f9ee:	da08      	bge.n	800fa02 <__sfputc_r+0x1e>
 800f9f0:	6994      	ldr	r4, [r2, #24]
 800f9f2:	42a3      	cmp	r3, r4
 800f9f4:	db01      	blt.n	800f9fa <__sfputc_r+0x16>
 800f9f6:	290a      	cmp	r1, #10
 800f9f8:	d103      	bne.n	800fa02 <__sfputc_r+0x1e>
 800f9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9fe:	f000 badf 	b.w	800ffc0 <__swbuf_r>
 800fa02:	6813      	ldr	r3, [r2, #0]
 800fa04:	1c58      	adds	r0, r3, #1
 800fa06:	6010      	str	r0, [r2, #0]
 800fa08:	7019      	strb	r1, [r3, #0]
 800fa0a:	4608      	mov	r0, r1
 800fa0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa10:	4770      	bx	lr

0800fa12 <__sfputs_r>:
 800fa12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa14:	4606      	mov	r6, r0
 800fa16:	460f      	mov	r7, r1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	18d5      	adds	r5, r2, r3
 800fa1c:	42ac      	cmp	r4, r5
 800fa1e:	d101      	bne.n	800fa24 <__sfputs_r+0x12>
 800fa20:	2000      	movs	r0, #0
 800fa22:	e007      	b.n	800fa34 <__sfputs_r+0x22>
 800fa24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa28:	463a      	mov	r2, r7
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f7ff ffda 	bl	800f9e4 <__sfputc_r>
 800fa30:	1c43      	adds	r3, r0, #1
 800fa32:	d1f3      	bne.n	800fa1c <__sfputs_r+0xa>
 800fa34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa38 <_vfiprintf_r>:
 800fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3c:	460d      	mov	r5, r1
 800fa3e:	b09d      	sub	sp, #116	; 0x74
 800fa40:	4614      	mov	r4, r2
 800fa42:	4698      	mov	r8, r3
 800fa44:	4606      	mov	r6, r0
 800fa46:	b118      	cbz	r0, 800fa50 <_vfiprintf_r+0x18>
 800fa48:	6983      	ldr	r3, [r0, #24]
 800fa4a:	b90b      	cbnz	r3, 800fa50 <_vfiprintf_r+0x18>
 800fa4c:	f000 fc9a 	bl	8010384 <__sinit>
 800fa50:	4b89      	ldr	r3, [pc, #548]	; (800fc78 <_vfiprintf_r+0x240>)
 800fa52:	429d      	cmp	r5, r3
 800fa54:	d11b      	bne.n	800fa8e <_vfiprintf_r+0x56>
 800fa56:	6875      	ldr	r5, [r6, #4]
 800fa58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa5a:	07d9      	lsls	r1, r3, #31
 800fa5c:	d405      	bmi.n	800fa6a <_vfiprintf_r+0x32>
 800fa5e:	89ab      	ldrh	r3, [r5, #12]
 800fa60:	059a      	lsls	r2, r3, #22
 800fa62:	d402      	bmi.n	800fa6a <_vfiprintf_r+0x32>
 800fa64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa66:	f000 fd2b 	bl	80104c0 <__retarget_lock_acquire_recursive>
 800fa6a:	89ab      	ldrh	r3, [r5, #12]
 800fa6c:	071b      	lsls	r3, r3, #28
 800fa6e:	d501      	bpl.n	800fa74 <_vfiprintf_r+0x3c>
 800fa70:	692b      	ldr	r3, [r5, #16]
 800fa72:	b9eb      	cbnz	r3, 800fab0 <_vfiprintf_r+0x78>
 800fa74:	4629      	mov	r1, r5
 800fa76:	4630      	mov	r0, r6
 800fa78:	f000 faf4 	bl	8010064 <__swsetup_r>
 800fa7c:	b1c0      	cbz	r0, 800fab0 <_vfiprintf_r+0x78>
 800fa7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa80:	07dc      	lsls	r4, r3, #31
 800fa82:	d50e      	bpl.n	800faa2 <_vfiprintf_r+0x6a>
 800fa84:	f04f 30ff 	mov.w	r0, #4294967295
 800fa88:	b01d      	add	sp, #116	; 0x74
 800fa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8e:	4b7b      	ldr	r3, [pc, #492]	; (800fc7c <_vfiprintf_r+0x244>)
 800fa90:	429d      	cmp	r5, r3
 800fa92:	d101      	bne.n	800fa98 <_vfiprintf_r+0x60>
 800fa94:	68b5      	ldr	r5, [r6, #8]
 800fa96:	e7df      	b.n	800fa58 <_vfiprintf_r+0x20>
 800fa98:	4b79      	ldr	r3, [pc, #484]	; (800fc80 <_vfiprintf_r+0x248>)
 800fa9a:	429d      	cmp	r5, r3
 800fa9c:	bf08      	it	eq
 800fa9e:	68f5      	ldreq	r5, [r6, #12]
 800faa0:	e7da      	b.n	800fa58 <_vfiprintf_r+0x20>
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	0598      	lsls	r0, r3, #22
 800faa6:	d4ed      	bmi.n	800fa84 <_vfiprintf_r+0x4c>
 800faa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faaa:	f000 fd0a 	bl	80104c2 <__retarget_lock_release_recursive>
 800faae:	e7e9      	b.n	800fa84 <_vfiprintf_r+0x4c>
 800fab0:	2300      	movs	r3, #0
 800fab2:	9309      	str	r3, [sp, #36]	; 0x24
 800fab4:	2320      	movs	r3, #32
 800fab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800faba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fabe:	2330      	movs	r3, #48	; 0x30
 800fac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc84 <_vfiprintf_r+0x24c>
 800fac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fac8:	f04f 0901 	mov.w	r9, #1
 800facc:	4623      	mov	r3, r4
 800face:	469a      	mov	sl, r3
 800fad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fad4:	b10a      	cbz	r2, 800fada <_vfiprintf_r+0xa2>
 800fad6:	2a25      	cmp	r2, #37	; 0x25
 800fad8:	d1f9      	bne.n	800face <_vfiprintf_r+0x96>
 800fada:	ebba 0b04 	subs.w	fp, sl, r4
 800fade:	d00b      	beq.n	800faf8 <_vfiprintf_r+0xc0>
 800fae0:	465b      	mov	r3, fp
 800fae2:	4622      	mov	r2, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	4630      	mov	r0, r6
 800fae8:	f7ff ff93 	bl	800fa12 <__sfputs_r>
 800faec:	3001      	adds	r0, #1
 800faee:	f000 80aa 	beq.w	800fc46 <_vfiprintf_r+0x20e>
 800faf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faf4:	445a      	add	r2, fp
 800faf6:	9209      	str	r2, [sp, #36]	; 0x24
 800faf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f000 80a2 	beq.w	800fc46 <_vfiprintf_r+0x20e>
 800fb02:	2300      	movs	r3, #0
 800fb04:	f04f 32ff 	mov.w	r2, #4294967295
 800fb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb0c:	f10a 0a01 	add.w	sl, sl, #1
 800fb10:	9304      	str	r3, [sp, #16]
 800fb12:	9307      	str	r3, [sp, #28]
 800fb14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb18:	931a      	str	r3, [sp, #104]	; 0x68
 800fb1a:	4654      	mov	r4, sl
 800fb1c:	2205      	movs	r2, #5
 800fb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb22:	4858      	ldr	r0, [pc, #352]	; (800fc84 <_vfiprintf_r+0x24c>)
 800fb24:	f7f0 fb7c 	bl	8000220 <memchr>
 800fb28:	9a04      	ldr	r2, [sp, #16]
 800fb2a:	b9d8      	cbnz	r0, 800fb64 <_vfiprintf_r+0x12c>
 800fb2c:	06d1      	lsls	r1, r2, #27
 800fb2e:	bf44      	itt	mi
 800fb30:	2320      	movmi	r3, #32
 800fb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb36:	0713      	lsls	r3, r2, #28
 800fb38:	bf44      	itt	mi
 800fb3a:	232b      	movmi	r3, #43	; 0x2b
 800fb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb40:	f89a 3000 	ldrb.w	r3, [sl]
 800fb44:	2b2a      	cmp	r3, #42	; 0x2a
 800fb46:	d015      	beq.n	800fb74 <_vfiprintf_r+0x13c>
 800fb48:	9a07      	ldr	r2, [sp, #28]
 800fb4a:	4654      	mov	r4, sl
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	f04f 0c0a 	mov.w	ip, #10
 800fb52:	4621      	mov	r1, r4
 800fb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb58:	3b30      	subs	r3, #48	; 0x30
 800fb5a:	2b09      	cmp	r3, #9
 800fb5c:	d94e      	bls.n	800fbfc <_vfiprintf_r+0x1c4>
 800fb5e:	b1b0      	cbz	r0, 800fb8e <_vfiprintf_r+0x156>
 800fb60:	9207      	str	r2, [sp, #28]
 800fb62:	e014      	b.n	800fb8e <_vfiprintf_r+0x156>
 800fb64:	eba0 0308 	sub.w	r3, r0, r8
 800fb68:	fa09 f303 	lsl.w	r3, r9, r3
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	46a2      	mov	sl, r4
 800fb72:	e7d2      	b.n	800fb1a <_vfiprintf_r+0xe2>
 800fb74:	9b03      	ldr	r3, [sp, #12]
 800fb76:	1d19      	adds	r1, r3, #4
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	9103      	str	r1, [sp, #12]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bfbb      	ittet	lt
 800fb80:	425b      	neglt	r3, r3
 800fb82:	f042 0202 	orrlt.w	r2, r2, #2
 800fb86:	9307      	strge	r3, [sp, #28]
 800fb88:	9307      	strlt	r3, [sp, #28]
 800fb8a:	bfb8      	it	lt
 800fb8c:	9204      	strlt	r2, [sp, #16]
 800fb8e:	7823      	ldrb	r3, [r4, #0]
 800fb90:	2b2e      	cmp	r3, #46	; 0x2e
 800fb92:	d10c      	bne.n	800fbae <_vfiprintf_r+0x176>
 800fb94:	7863      	ldrb	r3, [r4, #1]
 800fb96:	2b2a      	cmp	r3, #42	; 0x2a
 800fb98:	d135      	bne.n	800fc06 <_vfiprintf_r+0x1ce>
 800fb9a:	9b03      	ldr	r3, [sp, #12]
 800fb9c:	1d1a      	adds	r2, r3, #4
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	9203      	str	r2, [sp, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	bfb8      	it	lt
 800fba6:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbaa:	3402      	adds	r4, #2
 800fbac:	9305      	str	r3, [sp, #20]
 800fbae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc94 <_vfiprintf_r+0x25c>
 800fbb2:	7821      	ldrb	r1, [r4, #0]
 800fbb4:	2203      	movs	r2, #3
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	f7f0 fb32 	bl	8000220 <memchr>
 800fbbc:	b140      	cbz	r0, 800fbd0 <_vfiprintf_r+0x198>
 800fbbe:	2340      	movs	r3, #64	; 0x40
 800fbc0:	eba0 000a 	sub.w	r0, r0, sl
 800fbc4:	fa03 f000 	lsl.w	r0, r3, r0
 800fbc8:	9b04      	ldr	r3, [sp, #16]
 800fbca:	4303      	orrs	r3, r0
 800fbcc:	3401      	adds	r4, #1
 800fbce:	9304      	str	r3, [sp, #16]
 800fbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbd4:	482c      	ldr	r0, [pc, #176]	; (800fc88 <_vfiprintf_r+0x250>)
 800fbd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbda:	2206      	movs	r2, #6
 800fbdc:	f7f0 fb20 	bl	8000220 <memchr>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d03f      	beq.n	800fc64 <_vfiprintf_r+0x22c>
 800fbe4:	4b29      	ldr	r3, [pc, #164]	; (800fc8c <_vfiprintf_r+0x254>)
 800fbe6:	bb1b      	cbnz	r3, 800fc30 <_vfiprintf_r+0x1f8>
 800fbe8:	9b03      	ldr	r3, [sp, #12]
 800fbea:	3307      	adds	r3, #7
 800fbec:	f023 0307 	bic.w	r3, r3, #7
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	9303      	str	r3, [sp, #12]
 800fbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbf6:	443b      	add	r3, r7
 800fbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800fbfa:	e767      	b.n	800facc <_vfiprintf_r+0x94>
 800fbfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc00:	460c      	mov	r4, r1
 800fc02:	2001      	movs	r0, #1
 800fc04:	e7a5      	b.n	800fb52 <_vfiprintf_r+0x11a>
 800fc06:	2300      	movs	r3, #0
 800fc08:	3401      	adds	r4, #1
 800fc0a:	9305      	str	r3, [sp, #20]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	f04f 0c0a 	mov.w	ip, #10
 800fc12:	4620      	mov	r0, r4
 800fc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc18:	3a30      	subs	r2, #48	; 0x30
 800fc1a:	2a09      	cmp	r2, #9
 800fc1c:	d903      	bls.n	800fc26 <_vfiprintf_r+0x1ee>
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d0c5      	beq.n	800fbae <_vfiprintf_r+0x176>
 800fc22:	9105      	str	r1, [sp, #20]
 800fc24:	e7c3      	b.n	800fbae <_vfiprintf_r+0x176>
 800fc26:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e7f0      	b.n	800fc12 <_vfiprintf_r+0x1da>
 800fc30:	ab03      	add	r3, sp, #12
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	462a      	mov	r2, r5
 800fc36:	4b16      	ldr	r3, [pc, #88]	; (800fc90 <_vfiprintf_r+0x258>)
 800fc38:	a904      	add	r1, sp, #16
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	f3af 8000 	nop.w
 800fc40:	4607      	mov	r7, r0
 800fc42:	1c78      	adds	r0, r7, #1
 800fc44:	d1d6      	bne.n	800fbf4 <_vfiprintf_r+0x1bc>
 800fc46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc48:	07d9      	lsls	r1, r3, #31
 800fc4a:	d405      	bmi.n	800fc58 <_vfiprintf_r+0x220>
 800fc4c:	89ab      	ldrh	r3, [r5, #12]
 800fc4e:	059a      	lsls	r2, r3, #22
 800fc50:	d402      	bmi.n	800fc58 <_vfiprintf_r+0x220>
 800fc52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc54:	f000 fc35 	bl	80104c2 <__retarget_lock_release_recursive>
 800fc58:	89ab      	ldrh	r3, [r5, #12]
 800fc5a:	065b      	lsls	r3, r3, #25
 800fc5c:	f53f af12 	bmi.w	800fa84 <_vfiprintf_r+0x4c>
 800fc60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc62:	e711      	b.n	800fa88 <_vfiprintf_r+0x50>
 800fc64:	ab03      	add	r3, sp, #12
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	462a      	mov	r2, r5
 800fc6a:	4b09      	ldr	r3, [pc, #36]	; (800fc90 <_vfiprintf_r+0x258>)
 800fc6c:	a904      	add	r1, sp, #16
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f000 f880 	bl	800fd74 <_printf_i>
 800fc74:	e7e4      	b.n	800fc40 <_vfiprintf_r+0x208>
 800fc76:	bf00      	nop
 800fc78:	08011e28 	.word	0x08011e28
 800fc7c:	08011e48 	.word	0x08011e48
 800fc80:	08011e08 	.word	0x08011e08
 800fc84:	08011dd2 	.word	0x08011dd2
 800fc88:	08011ddc 	.word	0x08011ddc
 800fc8c:	00000000 	.word	0x00000000
 800fc90:	0800fa13 	.word	0x0800fa13
 800fc94:	08011dd8 	.word	0x08011dd8

0800fc98 <_printf_common>:
 800fc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc9c:	4616      	mov	r6, r2
 800fc9e:	4699      	mov	r9, r3
 800fca0:	688a      	ldr	r2, [r1, #8]
 800fca2:	690b      	ldr	r3, [r1, #16]
 800fca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	bfb8      	it	lt
 800fcac:	4613      	movlt	r3, r2
 800fcae:	6033      	str	r3, [r6, #0]
 800fcb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcb4:	4607      	mov	r7, r0
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	b10a      	cbz	r2, 800fcbe <_printf_common+0x26>
 800fcba:	3301      	adds	r3, #1
 800fcbc:	6033      	str	r3, [r6, #0]
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	0699      	lsls	r1, r3, #26
 800fcc2:	bf42      	ittt	mi
 800fcc4:	6833      	ldrmi	r3, [r6, #0]
 800fcc6:	3302      	addmi	r3, #2
 800fcc8:	6033      	strmi	r3, [r6, #0]
 800fcca:	6825      	ldr	r5, [r4, #0]
 800fccc:	f015 0506 	ands.w	r5, r5, #6
 800fcd0:	d106      	bne.n	800fce0 <_printf_common+0x48>
 800fcd2:	f104 0a19 	add.w	sl, r4, #25
 800fcd6:	68e3      	ldr	r3, [r4, #12]
 800fcd8:	6832      	ldr	r2, [r6, #0]
 800fcda:	1a9b      	subs	r3, r3, r2
 800fcdc:	42ab      	cmp	r3, r5
 800fcde:	dc26      	bgt.n	800fd2e <_printf_common+0x96>
 800fce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fce4:	1e13      	subs	r3, r2, #0
 800fce6:	6822      	ldr	r2, [r4, #0]
 800fce8:	bf18      	it	ne
 800fcea:	2301      	movne	r3, #1
 800fcec:	0692      	lsls	r2, r2, #26
 800fcee:	d42b      	bmi.n	800fd48 <_printf_common+0xb0>
 800fcf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	47c0      	blx	r8
 800fcfa:	3001      	adds	r0, #1
 800fcfc:	d01e      	beq.n	800fd3c <_printf_common+0xa4>
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	68e5      	ldr	r5, [r4, #12]
 800fd02:	6832      	ldr	r2, [r6, #0]
 800fd04:	f003 0306 	and.w	r3, r3, #6
 800fd08:	2b04      	cmp	r3, #4
 800fd0a:	bf08      	it	eq
 800fd0c:	1aad      	subeq	r5, r5, r2
 800fd0e:	68a3      	ldr	r3, [r4, #8]
 800fd10:	6922      	ldr	r2, [r4, #16]
 800fd12:	bf0c      	ite	eq
 800fd14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd18:	2500      	movne	r5, #0
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	bfc4      	itt	gt
 800fd1e:	1a9b      	subgt	r3, r3, r2
 800fd20:	18ed      	addgt	r5, r5, r3
 800fd22:	2600      	movs	r6, #0
 800fd24:	341a      	adds	r4, #26
 800fd26:	42b5      	cmp	r5, r6
 800fd28:	d11a      	bne.n	800fd60 <_printf_common+0xc8>
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	e008      	b.n	800fd40 <_printf_common+0xa8>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	4652      	mov	r2, sl
 800fd32:	4649      	mov	r1, r9
 800fd34:	4638      	mov	r0, r7
 800fd36:	47c0      	blx	r8
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d103      	bne.n	800fd44 <_printf_common+0xac>
 800fd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd44:	3501      	adds	r5, #1
 800fd46:	e7c6      	b.n	800fcd6 <_printf_common+0x3e>
 800fd48:	18e1      	adds	r1, r4, r3
 800fd4a:	1c5a      	adds	r2, r3, #1
 800fd4c:	2030      	movs	r0, #48	; 0x30
 800fd4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd52:	4422      	add	r2, r4
 800fd54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd5c:	3302      	adds	r3, #2
 800fd5e:	e7c7      	b.n	800fcf0 <_printf_common+0x58>
 800fd60:	2301      	movs	r3, #1
 800fd62:	4622      	mov	r2, r4
 800fd64:	4649      	mov	r1, r9
 800fd66:	4638      	mov	r0, r7
 800fd68:	47c0      	blx	r8
 800fd6a:	3001      	adds	r0, #1
 800fd6c:	d0e6      	beq.n	800fd3c <_printf_common+0xa4>
 800fd6e:	3601      	adds	r6, #1
 800fd70:	e7d9      	b.n	800fd26 <_printf_common+0x8e>
	...

0800fd74 <_printf_i>:
 800fd74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd78:	7e0f      	ldrb	r7, [r1, #24]
 800fd7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd7c:	2f78      	cmp	r7, #120	; 0x78
 800fd7e:	4691      	mov	r9, r2
 800fd80:	4680      	mov	r8, r0
 800fd82:	460c      	mov	r4, r1
 800fd84:	469a      	mov	sl, r3
 800fd86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd8a:	d807      	bhi.n	800fd9c <_printf_i+0x28>
 800fd8c:	2f62      	cmp	r7, #98	; 0x62
 800fd8e:	d80a      	bhi.n	800fda6 <_printf_i+0x32>
 800fd90:	2f00      	cmp	r7, #0
 800fd92:	f000 80d8 	beq.w	800ff46 <_printf_i+0x1d2>
 800fd96:	2f58      	cmp	r7, #88	; 0x58
 800fd98:	f000 80a3 	beq.w	800fee2 <_printf_i+0x16e>
 800fd9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fda0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fda4:	e03a      	b.n	800fe1c <_printf_i+0xa8>
 800fda6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdaa:	2b15      	cmp	r3, #21
 800fdac:	d8f6      	bhi.n	800fd9c <_printf_i+0x28>
 800fdae:	a101      	add	r1, pc, #4	; (adr r1, 800fdb4 <_printf_i+0x40>)
 800fdb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdb4:	0800fe0d 	.word	0x0800fe0d
 800fdb8:	0800fe21 	.word	0x0800fe21
 800fdbc:	0800fd9d 	.word	0x0800fd9d
 800fdc0:	0800fd9d 	.word	0x0800fd9d
 800fdc4:	0800fd9d 	.word	0x0800fd9d
 800fdc8:	0800fd9d 	.word	0x0800fd9d
 800fdcc:	0800fe21 	.word	0x0800fe21
 800fdd0:	0800fd9d 	.word	0x0800fd9d
 800fdd4:	0800fd9d 	.word	0x0800fd9d
 800fdd8:	0800fd9d 	.word	0x0800fd9d
 800fddc:	0800fd9d 	.word	0x0800fd9d
 800fde0:	0800ff2d 	.word	0x0800ff2d
 800fde4:	0800fe51 	.word	0x0800fe51
 800fde8:	0800ff0f 	.word	0x0800ff0f
 800fdec:	0800fd9d 	.word	0x0800fd9d
 800fdf0:	0800fd9d 	.word	0x0800fd9d
 800fdf4:	0800ff4f 	.word	0x0800ff4f
 800fdf8:	0800fd9d 	.word	0x0800fd9d
 800fdfc:	0800fe51 	.word	0x0800fe51
 800fe00:	0800fd9d 	.word	0x0800fd9d
 800fe04:	0800fd9d 	.word	0x0800fd9d
 800fe08:	0800ff17 	.word	0x0800ff17
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	1d1a      	adds	r2, r3, #4
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	602a      	str	r2, [r5, #0]
 800fe14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	e0a3      	b.n	800ff68 <_printf_i+0x1f4>
 800fe20:	6820      	ldr	r0, [r4, #0]
 800fe22:	6829      	ldr	r1, [r5, #0]
 800fe24:	0606      	lsls	r6, r0, #24
 800fe26:	f101 0304 	add.w	r3, r1, #4
 800fe2a:	d50a      	bpl.n	800fe42 <_printf_i+0xce>
 800fe2c:	680e      	ldr	r6, [r1, #0]
 800fe2e:	602b      	str	r3, [r5, #0]
 800fe30:	2e00      	cmp	r6, #0
 800fe32:	da03      	bge.n	800fe3c <_printf_i+0xc8>
 800fe34:	232d      	movs	r3, #45	; 0x2d
 800fe36:	4276      	negs	r6, r6
 800fe38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe3c:	485e      	ldr	r0, [pc, #376]	; (800ffb8 <_printf_i+0x244>)
 800fe3e:	230a      	movs	r3, #10
 800fe40:	e019      	b.n	800fe76 <_printf_i+0x102>
 800fe42:	680e      	ldr	r6, [r1, #0]
 800fe44:	602b      	str	r3, [r5, #0]
 800fe46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe4a:	bf18      	it	ne
 800fe4c:	b236      	sxthne	r6, r6
 800fe4e:	e7ef      	b.n	800fe30 <_printf_i+0xbc>
 800fe50:	682b      	ldr	r3, [r5, #0]
 800fe52:	6820      	ldr	r0, [r4, #0]
 800fe54:	1d19      	adds	r1, r3, #4
 800fe56:	6029      	str	r1, [r5, #0]
 800fe58:	0601      	lsls	r1, r0, #24
 800fe5a:	d501      	bpl.n	800fe60 <_printf_i+0xec>
 800fe5c:	681e      	ldr	r6, [r3, #0]
 800fe5e:	e002      	b.n	800fe66 <_printf_i+0xf2>
 800fe60:	0646      	lsls	r6, r0, #25
 800fe62:	d5fb      	bpl.n	800fe5c <_printf_i+0xe8>
 800fe64:	881e      	ldrh	r6, [r3, #0]
 800fe66:	4854      	ldr	r0, [pc, #336]	; (800ffb8 <_printf_i+0x244>)
 800fe68:	2f6f      	cmp	r7, #111	; 0x6f
 800fe6a:	bf0c      	ite	eq
 800fe6c:	2308      	moveq	r3, #8
 800fe6e:	230a      	movne	r3, #10
 800fe70:	2100      	movs	r1, #0
 800fe72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe76:	6865      	ldr	r5, [r4, #4]
 800fe78:	60a5      	str	r5, [r4, #8]
 800fe7a:	2d00      	cmp	r5, #0
 800fe7c:	bfa2      	ittt	ge
 800fe7e:	6821      	ldrge	r1, [r4, #0]
 800fe80:	f021 0104 	bicge.w	r1, r1, #4
 800fe84:	6021      	strge	r1, [r4, #0]
 800fe86:	b90e      	cbnz	r6, 800fe8c <_printf_i+0x118>
 800fe88:	2d00      	cmp	r5, #0
 800fe8a:	d04d      	beq.n	800ff28 <_printf_i+0x1b4>
 800fe8c:	4615      	mov	r5, r2
 800fe8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe92:	fb03 6711 	mls	r7, r3, r1, r6
 800fe96:	5dc7      	ldrb	r7, [r0, r7]
 800fe98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe9c:	4637      	mov	r7, r6
 800fe9e:	42bb      	cmp	r3, r7
 800fea0:	460e      	mov	r6, r1
 800fea2:	d9f4      	bls.n	800fe8e <_printf_i+0x11a>
 800fea4:	2b08      	cmp	r3, #8
 800fea6:	d10b      	bne.n	800fec0 <_printf_i+0x14c>
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	07de      	lsls	r6, r3, #31
 800feac:	d508      	bpl.n	800fec0 <_printf_i+0x14c>
 800feae:	6923      	ldr	r3, [r4, #16]
 800feb0:	6861      	ldr	r1, [r4, #4]
 800feb2:	4299      	cmp	r1, r3
 800feb4:	bfde      	ittt	le
 800feb6:	2330      	movle	r3, #48	; 0x30
 800feb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800febc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fec0:	1b52      	subs	r2, r2, r5
 800fec2:	6122      	str	r2, [r4, #16]
 800fec4:	f8cd a000 	str.w	sl, [sp]
 800fec8:	464b      	mov	r3, r9
 800feca:	aa03      	add	r2, sp, #12
 800fecc:	4621      	mov	r1, r4
 800fece:	4640      	mov	r0, r8
 800fed0:	f7ff fee2 	bl	800fc98 <_printf_common>
 800fed4:	3001      	adds	r0, #1
 800fed6:	d14c      	bne.n	800ff72 <_printf_i+0x1fe>
 800fed8:	f04f 30ff 	mov.w	r0, #4294967295
 800fedc:	b004      	add	sp, #16
 800fede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee2:	4835      	ldr	r0, [pc, #212]	; (800ffb8 <_printf_i+0x244>)
 800fee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fee8:	6829      	ldr	r1, [r5, #0]
 800feea:	6823      	ldr	r3, [r4, #0]
 800feec:	f851 6b04 	ldr.w	r6, [r1], #4
 800fef0:	6029      	str	r1, [r5, #0]
 800fef2:	061d      	lsls	r5, r3, #24
 800fef4:	d514      	bpl.n	800ff20 <_printf_i+0x1ac>
 800fef6:	07df      	lsls	r7, r3, #31
 800fef8:	bf44      	itt	mi
 800fefa:	f043 0320 	orrmi.w	r3, r3, #32
 800fefe:	6023      	strmi	r3, [r4, #0]
 800ff00:	b91e      	cbnz	r6, 800ff0a <_printf_i+0x196>
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	f023 0320 	bic.w	r3, r3, #32
 800ff08:	6023      	str	r3, [r4, #0]
 800ff0a:	2310      	movs	r3, #16
 800ff0c:	e7b0      	b.n	800fe70 <_printf_i+0xfc>
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	f043 0320 	orr.w	r3, r3, #32
 800ff14:	6023      	str	r3, [r4, #0]
 800ff16:	2378      	movs	r3, #120	; 0x78
 800ff18:	4828      	ldr	r0, [pc, #160]	; (800ffbc <_printf_i+0x248>)
 800ff1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff1e:	e7e3      	b.n	800fee8 <_printf_i+0x174>
 800ff20:	0659      	lsls	r1, r3, #25
 800ff22:	bf48      	it	mi
 800ff24:	b2b6      	uxthmi	r6, r6
 800ff26:	e7e6      	b.n	800fef6 <_printf_i+0x182>
 800ff28:	4615      	mov	r5, r2
 800ff2a:	e7bb      	b.n	800fea4 <_printf_i+0x130>
 800ff2c:	682b      	ldr	r3, [r5, #0]
 800ff2e:	6826      	ldr	r6, [r4, #0]
 800ff30:	6961      	ldr	r1, [r4, #20]
 800ff32:	1d18      	adds	r0, r3, #4
 800ff34:	6028      	str	r0, [r5, #0]
 800ff36:	0635      	lsls	r5, r6, #24
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	d501      	bpl.n	800ff40 <_printf_i+0x1cc>
 800ff3c:	6019      	str	r1, [r3, #0]
 800ff3e:	e002      	b.n	800ff46 <_printf_i+0x1d2>
 800ff40:	0670      	lsls	r0, r6, #25
 800ff42:	d5fb      	bpl.n	800ff3c <_printf_i+0x1c8>
 800ff44:	8019      	strh	r1, [r3, #0]
 800ff46:	2300      	movs	r3, #0
 800ff48:	6123      	str	r3, [r4, #16]
 800ff4a:	4615      	mov	r5, r2
 800ff4c:	e7ba      	b.n	800fec4 <_printf_i+0x150>
 800ff4e:	682b      	ldr	r3, [r5, #0]
 800ff50:	1d1a      	adds	r2, r3, #4
 800ff52:	602a      	str	r2, [r5, #0]
 800ff54:	681d      	ldr	r5, [r3, #0]
 800ff56:	6862      	ldr	r2, [r4, #4]
 800ff58:	2100      	movs	r1, #0
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	f7f0 f960 	bl	8000220 <memchr>
 800ff60:	b108      	cbz	r0, 800ff66 <_printf_i+0x1f2>
 800ff62:	1b40      	subs	r0, r0, r5
 800ff64:	6060      	str	r0, [r4, #4]
 800ff66:	6863      	ldr	r3, [r4, #4]
 800ff68:	6123      	str	r3, [r4, #16]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff70:	e7a8      	b.n	800fec4 <_printf_i+0x150>
 800ff72:	6923      	ldr	r3, [r4, #16]
 800ff74:	462a      	mov	r2, r5
 800ff76:	4649      	mov	r1, r9
 800ff78:	4640      	mov	r0, r8
 800ff7a:	47d0      	blx	sl
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	d0ab      	beq.n	800fed8 <_printf_i+0x164>
 800ff80:	6823      	ldr	r3, [r4, #0]
 800ff82:	079b      	lsls	r3, r3, #30
 800ff84:	d413      	bmi.n	800ffae <_printf_i+0x23a>
 800ff86:	68e0      	ldr	r0, [r4, #12]
 800ff88:	9b03      	ldr	r3, [sp, #12]
 800ff8a:	4298      	cmp	r0, r3
 800ff8c:	bfb8      	it	lt
 800ff8e:	4618      	movlt	r0, r3
 800ff90:	e7a4      	b.n	800fedc <_printf_i+0x168>
 800ff92:	2301      	movs	r3, #1
 800ff94:	4632      	mov	r2, r6
 800ff96:	4649      	mov	r1, r9
 800ff98:	4640      	mov	r0, r8
 800ff9a:	47d0      	blx	sl
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d09b      	beq.n	800fed8 <_printf_i+0x164>
 800ffa0:	3501      	adds	r5, #1
 800ffa2:	68e3      	ldr	r3, [r4, #12]
 800ffa4:	9903      	ldr	r1, [sp, #12]
 800ffa6:	1a5b      	subs	r3, r3, r1
 800ffa8:	42ab      	cmp	r3, r5
 800ffaa:	dcf2      	bgt.n	800ff92 <_printf_i+0x21e>
 800ffac:	e7eb      	b.n	800ff86 <_printf_i+0x212>
 800ffae:	2500      	movs	r5, #0
 800ffb0:	f104 0619 	add.w	r6, r4, #25
 800ffb4:	e7f5      	b.n	800ffa2 <_printf_i+0x22e>
 800ffb6:	bf00      	nop
 800ffb8:	08011de3 	.word	0x08011de3
 800ffbc:	08011df4 	.word	0x08011df4

0800ffc0 <__swbuf_r>:
 800ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc2:	460e      	mov	r6, r1
 800ffc4:	4614      	mov	r4, r2
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	b118      	cbz	r0, 800ffd2 <__swbuf_r+0x12>
 800ffca:	6983      	ldr	r3, [r0, #24]
 800ffcc:	b90b      	cbnz	r3, 800ffd2 <__swbuf_r+0x12>
 800ffce:	f000 f9d9 	bl	8010384 <__sinit>
 800ffd2:	4b21      	ldr	r3, [pc, #132]	; (8010058 <__swbuf_r+0x98>)
 800ffd4:	429c      	cmp	r4, r3
 800ffd6:	d12b      	bne.n	8010030 <__swbuf_r+0x70>
 800ffd8:	686c      	ldr	r4, [r5, #4]
 800ffda:	69a3      	ldr	r3, [r4, #24]
 800ffdc:	60a3      	str	r3, [r4, #8]
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	071a      	lsls	r2, r3, #28
 800ffe2:	d52f      	bpl.n	8010044 <__swbuf_r+0x84>
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	b36b      	cbz	r3, 8010044 <__swbuf_r+0x84>
 800ffe8:	6923      	ldr	r3, [r4, #16]
 800ffea:	6820      	ldr	r0, [r4, #0]
 800ffec:	1ac0      	subs	r0, r0, r3
 800ffee:	6963      	ldr	r3, [r4, #20]
 800fff0:	b2f6      	uxtb	r6, r6
 800fff2:	4283      	cmp	r3, r0
 800fff4:	4637      	mov	r7, r6
 800fff6:	dc04      	bgt.n	8010002 <__swbuf_r+0x42>
 800fff8:	4621      	mov	r1, r4
 800fffa:	4628      	mov	r0, r5
 800fffc:	f000 f92e 	bl	801025c <_fflush_r>
 8010000:	bb30      	cbnz	r0, 8010050 <__swbuf_r+0x90>
 8010002:	68a3      	ldr	r3, [r4, #8]
 8010004:	3b01      	subs	r3, #1
 8010006:	60a3      	str	r3, [r4, #8]
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	6022      	str	r2, [r4, #0]
 801000e:	701e      	strb	r6, [r3, #0]
 8010010:	6963      	ldr	r3, [r4, #20]
 8010012:	3001      	adds	r0, #1
 8010014:	4283      	cmp	r3, r0
 8010016:	d004      	beq.n	8010022 <__swbuf_r+0x62>
 8010018:	89a3      	ldrh	r3, [r4, #12]
 801001a:	07db      	lsls	r3, r3, #31
 801001c:	d506      	bpl.n	801002c <__swbuf_r+0x6c>
 801001e:	2e0a      	cmp	r6, #10
 8010020:	d104      	bne.n	801002c <__swbuf_r+0x6c>
 8010022:	4621      	mov	r1, r4
 8010024:	4628      	mov	r0, r5
 8010026:	f000 f919 	bl	801025c <_fflush_r>
 801002a:	b988      	cbnz	r0, 8010050 <__swbuf_r+0x90>
 801002c:	4638      	mov	r0, r7
 801002e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010030:	4b0a      	ldr	r3, [pc, #40]	; (801005c <__swbuf_r+0x9c>)
 8010032:	429c      	cmp	r4, r3
 8010034:	d101      	bne.n	801003a <__swbuf_r+0x7a>
 8010036:	68ac      	ldr	r4, [r5, #8]
 8010038:	e7cf      	b.n	800ffda <__swbuf_r+0x1a>
 801003a:	4b09      	ldr	r3, [pc, #36]	; (8010060 <__swbuf_r+0xa0>)
 801003c:	429c      	cmp	r4, r3
 801003e:	bf08      	it	eq
 8010040:	68ec      	ldreq	r4, [r5, #12]
 8010042:	e7ca      	b.n	800ffda <__swbuf_r+0x1a>
 8010044:	4621      	mov	r1, r4
 8010046:	4628      	mov	r0, r5
 8010048:	f000 f80c 	bl	8010064 <__swsetup_r>
 801004c:	2800      	cmp	r0, #0
 801004e:	d0cb      	beq.n	800ffe8 <__swbuf_r+0x28>
 8010050:	f04f 37ff 	mov.w	r7, #4294967295
 8010054:	e7ea      	b.n	801002c <__swbuf_r+0x6c>
 8010056:	bf00      	nop
 8010058:	08011e28 	.word	0x08011e28
 801005c:	08011e48 	.word	0x08011e48
 8010060:	08011e08 	.word	0x08011e08

08010064 <__swsetup_r>:
 8010064:	4b32      	ldr	r3, [pc, #200]	; (8010130 <__swsetup_r+0xcc>)
 8010066:	b570      	push	{r4, r5, r6, lr}
 8010068:	681d      	ldr	r5, [r3, #0]
 801006a:	4606      	mov	r6, r0
 801006c:	460c      	mov	r4, r1
 801006e:	b125      	cbz	r5, 801007a <__swsetup_r+0x16>
 8010070:	69ab      	ldr	r3, [r5, #24]
 8010072:	b913      	cbnz	r3, 801007a <__swsetup_r+0x16>
 8010074:	4628      	mov	r0, r5
 8010076:	f000 f985 	bl	8010384 <__sinit>
 801007a:	4b2e      	ldr	r3, [pc, #184]	; (8010134 <__swsetup_r+0xd0>)
 801007c:	429c      	cmp	r4, r3
 801007e:	d10f      	bne.n	80100a0 <__swsetup_r+0x3c>
 8010080:	686c      	ldr	r4, [r5, #4]
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010088:	0719      	lsls	r1, r3, #28
 801008a:	d42c      	bmi.n	80100e6 <__swsetup_r+0x82>
 801008c:	06dd      	lsls	r5, r3, #27
 801008e:	d411      	bmi.n	80100b4 <__swsetup_r+0x50>
 8010090:	2309      	movs	r3, #9
 8010092:	6033      	str	r3, [r6, #0]
 8010094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010098:	81a3      	strh	r3, [r4, #12]
 801009a:	f04f 30ff 	mov.w	r0, #4294967295
 801009e:	e03e      	b.n	801011e <__swsetup_r+0xba>
 80100a0:	4b25      	ldr	r3, [pc, #148]	; (8010138 <__swsetup_r+0xd4>)
 80100a2:	429c      	cmp	r4, r3
 80100a4:	d101      	bne.n	80100aa <__swsetup_r+0x46>
 80100a6:	68ac      	ldr	r4, [r5, #8]
 80100a8:	e7eb      	b.n	8010082 <__swsetup_r+0x1e>
 80100aa:	4b24      	ldr	r3, [pc, #144]	; (801013c <__swsetup_r+0xd8>)
 80100ac:	429c      	cmp	r4, r3
 80100ae:	bf08      	it	eq
 80100b0:	68ec      	ldreq	r4, [r5, #12]
 80100b2:	e7e6      	b.n	8010082 <__swsetup_r+0x1e>
 80100b4:	0758      	lsls	r0, r3, #29
 80100b6:	d512      	bpl.n	80100de <__swsetup_r+0x7a>
 80100b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100ba:	b141      	cbz	r1, 80100ce <__swsetup_r+0x6a>
 80100bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100c0:	4299      	cmp	r1, r3
 80100c2:	d002      	beq.n	80100ca <__swsetup_r+0x66>
 80100c4:	4630      	mov	r0, r6
 80100c6:	f7ff fc41 	bl	800f94c <_free_r>
 80100ca:	2300      	movs	r3, #0
 80100cc:	6363      	str	r3, [r4, #52]	; 0x34
 80100ce:	89a3      	ldrh	r3, [r4, #12]
 80100d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100d4:	81a3      	strh	r3, [r4, #12]
 80100d6:	2300      	movs	r3, #0
 80100d8:	6063      	str	r3, [r4, #4]
 80100da:	6923      	ldr	r3, [r4, #16]
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	89a3      	ldrh	r3, [r4, #12]
 80100e0:	f043 0308 	orr.w	r3, r3, #8
 80100e4:	81a3      	strh	r3, [r4, #12]
 80100e6:	6923      	ldr	r3, [r4, #16]
 80100e8:	b94b      	cbnz	r3, 80100fe <__swsetup_r+0x9a>
 80100ea:	89a3      	ldrh	r3, [r4, #12]
 80100ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100f4:	d003      	beq.n	80100fe <__swsetup_r+0x9a>
 80100f6:	4621      	mov	r1, r4
 80100f8:	4630      	mov	r0, r6
 80100fa:	f000 fa09 	bl	8010510 <__smakebuf_r>
 80100fe:	89a0      	ldrh	r0, [r4, #12]
 8010100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010104:	f010 0301 	ands.w	r3, r0, #1
 8010108:	d00a      	beq.n	8010120 <__swsetup_r+0xbc>
 801010a:	2300      	movs	r3, #0
 801010c:	60a3      	str	r3, [r4, #8]
 801010e:	6963      	ldr	r3, [r4, #20]
 8010110:	425b      	negs	r3, r3
 8010112:	61a3      	str	r3, [r4, #24]
 8010114:	6923      	ldr	r3, [r4, #16]
 8010116:	b943      	cbnz	r3, 801012a <__swsetup_r+0xc6>
 8010118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801011c:	d1ba      	bne.n	8010094 <__swsetup_r+0x30>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	0781      	lsls	r1, r0, #30
 8010122:	bf58      	it	pl
 8010124:	6963      	ldrpl	r3, [r4, #20]
 8010126:	60a3      	str	r3, [r4, #8]
 8010128:	e7f4      	b.n	8010114 <__swsetup_r+0xb0>
 801012a:	2000      	movs	r0, #0
 801012c:	e7f7      	b.n	801011e <__swsetup_r+0xba>
 801012e:	bf00      	nop
 8010130:	2000003c 	.word	0x2000003c
 8010134:	08011e28 	.word	0x08011e28
 8010138:	08011e48 	.word	0x08011e48
 801013c:	08011e08 	.word	0x08011e08

08010140 <abort>:
 8010140:	b508      	push	{r3, lr}
 8010142:	2006      	movs	r0, #6
 8010144:	f000 fa4c 	bl	80105e0 <raise>
 8010148:	2001      	movs	r0, #1
 801014a:	f7f4 fd77 	bl	8004c3c <_exit>
	...

08010150 <__sflush_r>:
 8010150:	898a      	ldrh	r2, [r1, #12]
 8010152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010156:	4605      	mov	r5, r0
 8010158:	0710      	lsls	r0, r2, #28
 801015a:	460c      	mov	r4, r1
 801015c:	d458      	bmi.n	8010210 <__sflush_r+0xc0>
 801015e:	684b      	ldr	r3, [r1, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	dc05      	bgt.n	8010170 <__sflush_r+0x20>
 8010164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010166:	2b00      	cmp	r3, #0
 8010168:	dc02      	bgt.n	8010170 <__sflush_r+0x20>
 801016a:	2000      	movs	r0, #0
 801016c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010172:	2e00      	cmp	r6, #0
 8010174:	d0f9      	beq.n	801016a <__sflush_r+0x1a>
 8010176:	2300      	movs	r3, #0
 8010178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801017c:	682f      	ldr	r7, [r5, #0]
 801017e:	602b      	str	r3, [r5, #0]
 8010180:	d032      	beq.n	80101e8 <__sflush_r+0x98>
 8010182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	075a      	lsls	r2, r3, #29
 8010188:	d505      	bpl.n	8010196 <__sflush_r+0x46>
 801018a:	6863      	ldr	r3, [r4, #4]
 801018c:	1ac0      	subs	r0, r0, r3
 801018e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010190:	b10b      	cbz	r3, 8010196 <__sflush_r+0x46>
 8010192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010194:	1ac0      	subs	r0, r0, r3
 8010196:	2300      	movs	r3, #0
 8010198:	4602      	mov	r2, r0
 801019a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801019c:	6a21      	ldr	r1, [r4, #32]
 801019e:	4628      	mov	r0, r5
 80101a0:	47b0      	blx	r6
 80101a2:	1c43      	adds	r3, r0, #1
 80101a4:	89a3      	ldrh	r3, [r4, #12]
 80101a6:	d106      	bne.n	80101b6 <__sflush_r+0x66>
 80101a8:	6829      	ldr	r1, [r5, #0]
 80101aa:	291d      	cmp	r1, #29
 80101ac:	d82c      	bhi.n	8010208 <__sflush_r+0xb8>
 80101ae:	4a2a      	ldr	r2, [pc, #168]	; (8010258 <__sflush_r+0x108>)
 80101b0:	40ca      	lsrs	r2, r1
 80101b2:	07d6      	lsls	r6, r2, #31
 80101b4:	d528      	bpl.n	8010208 <__sflush_r+0xb8>
 80101b6:	2200      	movs	r2, #0
 80101b8:	6062      	str	r2, [r4, #4]
 80101ba:	04d9      	lsls	r1, r3, #19
 80101bc:	6922      	ldr	r2, [r4, #16]
 80101be:	6022      	str	r2, [r4, #0]
 80101c0:	d504      	bpl.n	80101cc <__sflush_r+0x7c>
 80101c2:	1c42      	adds	r2, r0, #1
 80101c4:	d101      	bne.n	80101ca <__sflush_r+0x7a>
 80101c6:	682b      	ldr	r3, [r5, #0]
 80101c8:	b903      	cbnz	r3, 80101cc <__sflush_r+0x7c>
 80101ca:	6560      	str	r0, [r4, #84]	; 0x54
 80101cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101ce:	602f      	str	r7, [r5, #0]
 80101d0:	2900      	cmp	r1, #0
 80101d2:	d0ca      	beq.n	801016a <__sflush_r+0x1a>
 80101d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101d8:	4299      	cmp	r1, r3
 80101da:	d002      	beq.n	80101e2 <__sflush_r+0x92>
 80101dc:	4628      	mov	r0, r5
 80101de:	f7ff fbb5 	bl	800f94c <_free_r>
 80101e2:	2000      	movs	r0, #0
 80101e4:	6360      	str	r0, [r4, #52]	; 0x34
 80101e6:	e7c1      	b.n	801016c <__sflush_r+0x1c>
 80101e8:	6a21      	ldr	r1, [r4, #32]
 80101ea:	2301      	movs	r3, #1
 80101ec:	4628      	mov	r0, r5
 80101ee:	47b0      	blx	r6
 80101f0:	1c41      	adds	r1, r0, #1
 80101f2:	d1c7      	bne.n	8010184 <__sflush_r+0x34>
 80101f4:	682b      	ldr	r3, [r5, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d0c4      	beq.n	8010184 <__sflush_r+0x34>
 80101fa:	2b1d      	cmp	r3, #29
 80101fc:	d001      	beq.n	8010202 <__sflush_r+0xb2>
 80101fe:	2b16      	cmp	r3, #22
 8010200:	d101      	bne.n	8010206 <__sflush_r+0xb6>
 8010202:	602f      	str	r7, [r5, #0]
 8010204:	e7b1      	b.n	801016a <__sflush_r+0x1a>
 8010206:	89a3      	ldrh	r3, [r4, #12]
 8010208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801020c:	81a3      	strh	r3, [r4, #12]
 801020e:	e7ad      	b.n	801016c <__sflush_r+0x1c>
 8010210:	690f      	ldr	r7, [r1, #16]
 8010212:	2f00      	cmp	r7, #0
 8010214:	d0a9      	beq.n	801016a <__sflush_r+0x1a>
 8010216:	0793      	lsls	r3, r2, #30
 8010218:	680e      	ldr	r6, [r1, #0]
 801021a:	bf08      	it	eq
 801021c:	694b      	ldreq	r3, [r1, #20]
 801021e:	600f      	str	r7, [r1, #0]
 8010220:	bf18      	it	ne
 8010222:	2300      	movne	r3, #0
 8010224:	eba6 0807 	sub.w	r8, r6, r7
 8010228:	608b      	str	r3, [r1, #8]
 801022a:	f1b8 0f00 	cmp.w	r8, #0
 801022e:	dd9c      	ble.n	801016a <__sflush_r+0x1a>
 8010230:	6a21      	ldr	r1, [r4, #32]
 8010232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010234:	4643      	mov	r3, r8
 8010236:	463a      	mov	r2, r7
 8010238:	4628      	mov	r0, r5
 801023a:	47b0      	blx	r6
 801023c:	2800      	cmp	r0, #0
 801023e:	dc06      	bgt.n	801024e <__sflush_r+0xfe>
 8010240:	89a3      	ldrh	r3, [r4, #12]
 8010242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010246:	81a3      	strh	r3, [r4, #12]
 8010248:	f04f 30ff 	mov.w	r0, #4294967295
 801024c:	e78e      	b.n	801016c <__sflush_r+0x1c>
 801024e:	4407      	add	r7, r0
 8010250:	eba8 0800 	sub.w	r8, r8, r0
 8010254:	e7e9      	b.n	801022a <__sflush_r+0xda>
 8010256:	bf00      	nop
 8010258:	20400001 	.word	0x20400001

0801025c <_fflush_r>:
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	690b      	ldr	r3, [r1, #16]
 8010260:	4605      	mov	r5, r0
 8010262:	460c      	mov	r4, r1
 8010264:	b913      	cbnz	r3, 801026c <_fflush_r+0x10>
 8010266:	2500      	movs	r5, #0
 8010268:	4628      	mov	r0, r5
 801026a:	bd38      	pop	{r3, r4, r5, pc}
 801026c:	b118      	cbz	r0, 8010276 <_fflush_r+0x1a>
 801026e:	6983      	ldr	r3, [r0, #24]
 8010270:	b90b      	cbnz	r3, 8010276 <_fflush_r+0x1a>
 8010272:	f000 f887 	bl	8010384 <__sinit>
 8010276:	4b14      	ldr	r3, [pc, #80]	; (80102c8 <_fflush_r+0x6c>)
 8010278:	429c      	cmp	r4, r3
 801027a:	d11b      	bne.n	80102b4 <_fflush_r+0x58>
 801027c:	686c      	ldr	r4, [r5, #4]
 801027e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d0ef      	beq.n	8010266 <_fflush_r+0xa>
 8010286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010288:	07d0      	lsls	r0, r2, #31
 801028a:	d404      	bmi.n	8010296 <_fflush_r+0x3a>
 801028c:	0599      	lsls	r1, r3, #22
 801028e:	d402      	bmi.n	8010296 <_fflush_r+0x3a>
 8010290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010292:	f000 f915 	bl	80104c0 <__retarget_lock_acquire_recursive>
 8010296:	4628      	mov	r0, r5
 8010298:	4621      	mov	r1, r4
 801029a:	f7ff ff59 	bl	8010150 <__sflush_r>
 801029e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102a0:	07da      	lsls	r2, r3, #31
 80102a2:	4605      	mov	r5, r0
 80102a4:	d4e0      	bmi.n	8010268 <_fflush_r+0xc>
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	059b      	lsls	r3, r3, #22
 80102aa:	d4dd      	bmi.n	8010268 <_fflush_r+0xc>
 80102ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ae:	f000 f908 	bl	80104c2 <__retarget_lock_release_recursive>
 80102b2:	e7d9      	b.n	8010268 <_fflush_r+0xc>
 80102b4:	4b05      	ldr	r3, [pc, #20]	; (80102cc <_fflush_r+0x70>)
 80102b6:	429c      	cmp	r4, r3
 80102b8:	d101      	bne.n	80102be <_fflush_r+0x62>
 80102ba:	68ac      	ldr	r4, [r5, #8]
 80102bc:	e7df      	b.n	801027e <_fflush_r+0x22>
 80102be:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <_fflush_r+0x74>)
 80102c0:	429c      	cmp	r4, r3
 80102c2:	bf08      	it	eq
 80102c4:	68ec      	ldreq	r4, [r5, #12]
 80102c6:	e7da      	b.n	801027e <_fflush_r+0x22>
 80102c8:	08011e28 	.word	0x08011e28
 80102cc:	08011e48 	.word	0x08011e48
 80102d0:	08011e08 	.word	0x08011e08

080102d4 <std>:
 80102d4:	2300      	movs	r3, #0
 80102d6:	b510      	push	{r4, lr}
 80102d8:	4604      	mov	r4, r0
 80102da:	e9c0 3300 	strd	r3, r3, [r0]
 80102de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102e2:	6083      	str	r3, [r0, #8]
 80102e4:	8181      	strh	r1, [r0, #12]
 80102e6:	6643      	str	r3, [r0, #100]	; 0x64
 80102e8:	81c2      	strh	r2, [r0, #14]
 80102ea:	6183      	str	r3, [r0, #24]
 80102ec:	4619      	mov	r1, r3
 80102ee:	2208      	movs	r2, #8
 80102f0:	305c      	adds	r0, #92	; 0x5c
 80102f2:	f7fd fe2b 	bl	800df4c <memset>
 80102f6:	4b05      	ldr	r3, [pc, #20]	; (801030c <std+0x38>)
 80102f8:	6263      	str	r3, [r4, #36]	; 0x24
 80102fa:	4b05      	ldr	r3, [pc, #20]	; (8010310 <std+0x3c>)
 80102fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80102fe:	4b05      	ldr	r3, [pc, #20]	; (8010314 <std+0x40>)
 8010300:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010302:	4b05      	ldr	r3, [pc, #20]	; (8010318 <std+0x44>)
 8010304:	6224      	str	r4, [r4, #32]
 8010306:	6323      	str	r3, [r4, #48]	; 0x30
 8010308:	bd10      	pop	{r4, pc}
 801030a:	bf00      	nop
 801030c:	08010619 	.word	0x08010619
 8010310:	0801063b 	.word	0x0801063b
 8010314:	08010673 	.word	0x08010673
 8010318:	08010697 	.word	0x08010697

0801031c <_cleanup_r>:
 801031c:	4901      	ldr	r1, [pc, #4]	; (8010324 <_cleanup_r+0x8>)
 801031e:	f000 b8af 	b.w	8010480 <_fwalk_reent>
 8010322:	bf00      	nop
 8010324:	0801025d 	.word	0x0801025d

08010328 <__sfmoreglue>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	2268      	movs	r2, #104	; 0x68
 801032c:	1e4d      	subs	r5, r1, #1
 801032e:	4355      	muls	r5, r2
 8010330:	460e      	mov	r6, r1
 8010332:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010336:	f7fe fbaf 	bl	800ea98 <_malloc_r>
 801033a:	4604      	mov	r4, r0
 801033c:	b140      	cbz	r0, 8010350 <__sfmoreglue+0x28>
 801033e:	2100      	movs	r1, #0
 8010340:	e9c0 1600 	strd	r1, r6, [r0]
 8010344:	300c      	adds	r0, #12
 8010346:	60a0      	str	r0, [r4, #8]
 8010348:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801034c:	f7fd fdfe 	bl	800df4c <memset>
 8010350:	4620      	mov	r0, r4
 8010352:	bd70      	pop	{r4, r5, r6, pc}

08010354 <__sfp_lock_acquire>:
 8010354:	4801      	ldr	r0, [pc, #4]	; (801035c <__sfp_lock_acquire+0x8>)
 8010356:	f000 b8b3 	b.w	80104c0 <__retarget_lock_acquire_recursive>
 801035a:	bf00      	nop
 801035c:	20002ea9 	.word	0x20002ea9

08010360 <__sfp_lock_release>:
 8010360:	4801      	ldr	r0, [pc, #4]	; (8010368 <__sfp_lock_release+0x8>)
 8010362:	f000 b8ae 	b.w	80104c2 <__retarget_lock_release_recursive>
 8010366:	bf00      	nop
 8010368:	20002ea9 	.word	0x20002ea9

0801036c <__sinit_lock_acquire>:
 801036c:	4801      	ldr	r0, [pc, #4]	; (8010374 <__sinit_lock_acquire+0x8>)
 801036e:	f000 b8a7 	b.w	80104c0 <__retarget_lock_acquire_recursive>
 8010372:	bf00      	nop
 8010374:	20002eaa 	.word	0x20002eaa

08010378 <__sinit_lock_release>:
 8010378:	4801      	ldr	r0, [pc, #4]	; (8010380 <__sinit_lock_release+0x8>)
 801037a:	f000 b8a2 	b.w	80104c2 <__retarget_lock_release_recursive>
 801037e:	bf00      	nop
 8010380:	20002eaa 	.word	0x20002eaa

08010384 <__sinit>:
 8010384:	b510      	push	{r4, lr}
 8010386:	4604      	mov	r4, r0
 8010388:	f7ff fff0 	bl	801036c <__sinit_lock_acquire>
 801038c:	69a3      	ldr	r3, [r4, #24]
 801038e:	b11b      	cbz	r3, 8010398 <__sinit+0x14>
 8010390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010394:	f7ff bff0 	b.w	8010378 <__sinit_lock_release>
 8010398:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801039c:	6523      	str	r3, [r4, #80]	; 0x50
 801039e:	4b13      	ldr	r3, [pc, #76]	; (80103ec <__sinit+0x68>)
 80103a0:	4a13      	ldr	r2, [pc, #76]	; (80103f0 <__sinit+0x6c>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80103a6:	42a3      	cmp	r3, r4
 80103a8:	bf04      	itt	eq
 80103aa:	2301      	moveq	r3, #1
 80103ac:	61a3      	streq	r3, [r4, #24]
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 f820 	bl	80103f4 <__sfp>
 80103b4:	6060      	str	r0, [r4, #4]
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 f81c 	bl	80103f4 <__sfp>
 80103bc:	60a0      	str	r0, [r4, #8]
 80103be:	4620      	mov	r0, r4
 80103c0:	f000 f818 	bl	80103f4 <__sfp>
 80103c4:	2200      	movs	r2, #0
 80103c6:	60e0      	str	r0, [r4, #12]
 80103c8:	2104      	movs	r1, #4
 80103ca:	6860      	ldr	r0, [r4, #4]
 80103cc:	f7ff ff82 	bl	80102d4 <std>
 80103d0:	68a0      	ldr	r0, [r4, #8]
 80103d2:	2201      	movs	r2, #1
 80103d4:	2109      	movs	r1, #9
 80103d6:	f7ff ff7d 	bl	80102d4 <std>
 80103da:	68e0      	ldr	r0, [r4, #12]
 80103dc:	2202      	movs	r2, #2
 80103de:	2112      	movs	r1, #18
 80103e0:	f7ff ff78 	bl	80102d4 <std>
 80103e4:	2301      	movs	r3, #1
 80103e6:	61a3      	str	r3, [r4, #24]
 80103e8:	e7d2      	b.n	8010390 <__sinit+0xc>
 80103ea:	bf00      	nop
 80103ec:	08011aa0 	.word	0x08011aa0
 80103f0:	0801031d 	.word	0x0801031d

080103f4 <__sfp>:
 80103f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f6:	4607      	mov	r7, r0
 80103f8:	f7ff ffac 	bl	8010354 <__sfp_lock_acquire>
 80103fc:	4b1e      	ldr	r3, [pc, #120]	; (8010478 <__sfp+0x84>)
 80103fe:	681e      	ldr	r6, [r3, #0]
 8010400:	69b3      	ldr	r3, [r6, #24]
 8010402:	b913      	cbnz	r3, 801040a <__sfp+0x16>
 8010404:	4630      	mov	r0, r6
 8010406:	f7ff ffbd 	bl	8010384 <__sinit>
 801040a:	3648      	adds	r6, #72	; 0x48
 801040c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010410:	3b01      	subs	r3, #1
 8010412:	d503      	bpl.n	801041c <__sfp+0x28>
 8010414:	6833      	ldr	r3, [r6, #0]
 8010416:	b30b      	cbz	r3, 801045c <__sfp+0x68>
 8010418:	6836      	ldr	r6, [r6, #0]
 801041a:	e7f7      	b.n	801040c <__sfp+0x18>
 801041c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010420:	b9d5      	cbnz	r5, 8010458 <__sfp+0x64>
 8010422:	4b16      	ldr	r3, [pc, #88]	; (801047c <__sfp+0x88>)
 8010424:	60e3      	str	r3, [r4, #12]
 8010426:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801042a:	6665      	str	r5, [r4, #100]	; 0x64
 801042c:	f000 f847 	bl	80104be <__retarget_lock_init_recursive>
 8010430:	f7ff ff96 	bl	8010360 <__sfp_lock_release>
 8010434:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010438:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801043c:	6025      	str	r5, [r4, #0]
 801043e:	61a5      	str	r5, [r4, #24]
 8010440:	2208      	movs	r2, #8
 8010442:	4629      	mov	r1, r5
 8010444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010448:	f7fd fd80 	bl	800df4c <memset>
 801044c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010450:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010454:	4620      	mov	r0, r4
 8010456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010458:	3468      	adds	r4, #104	; 0x68
 801045a:	e7d9      	b.n	8010410 <__sfp+0x1c>
 801045c:	2104      	movs	r1, #4
 801045e:	4638      	mov	r0, r7
 8010460:	f7ff ff62 	bl	8010328 <__sfmoreglue>
 8010464:	4604      	mov	r4, r0
 8010466:	6030      	str	r0, [r6, #0]
 8010468:	2800      	cmp	r0, #0
 801046a:	d1d5      	bne.n	8010418 <__sfp+0x24>
 801046c:	f7ff ff78 	bl	8010360 <__sfp_lock_release>
 8010470:	230c      	movs	r3, #12
 8010472:	603b      	str	r3, [r7, #0]
 8010474:	e7ee      	b.n	8010454 <__sfp+0x60>
 8010476:	bf00      	nop
 8010478:	08011aa0 	.word	0x08011aa0
 801047c:	ffff0001 	.word	0xffff0001

08010480 <_fwalk_reent>:
 8010480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010484:	4606      	mov	r6, r0
 8010486:	4688      	mov	r8, r1
 8010488:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801048c:	2700      	movs	r7, #0
 801048e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010492:	f1b9 0901 	subs.w	r9, r9, #1
 8010496:	d505      	bpl.n	80104a4 <_fwalk_reent+0x24>
 8010498:	6824      	ldr	r4, [r4, #0]
 801049a:	2c00      	cmp	r4, #0
 801049c:	d1f7      	bne.n	801048e <_fwalk_reent+0xe>
 801049e:	4638      	mov	r0, r7
 80104a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a4:	89ab      	ldrh	r3, [r5, #12]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d907      	bls.n	80104ba <_fwalk_reent+0x3a>
 80104aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104ae:	3301      	adds	r3, #1
 80104b0:	d003      	beq.n	80104ba <_fwalk_reent+0x3a>
 80104b2:	4629      	mov	r1, r5
 80104b4:	4630      	mov	r0, r6
 80104b6:	47c0      	blx	r8
 80104b8:	4307      	orrs	r7, r0
 80104ba:	3568      	adds	r5, #104	; 0x68
 80104bc:	e7e9      	b.n	8010492 <_fwalk_reent+0x12>

080104be <__retarget_lock_init_recursive>:
 80104be:	4770      	bx	lr

080104c0 <__retarget_lock_acquire_recursive>:
 80104c0:	4770      	bx	lr

080104c2 <__retarget_lock_release_recursive>:
 80104c2:	4770      	bx	lr

080104c4 <__swhatbuf_r>:
 80104c4:	b570      	push	{r4, r5, r6, lr}
 80104c6:	460e      	mov	r6, r1
 80104c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104cc:	2900      	cmp	r1, #0
 80104ce:	b096      	sub	sp, #88	; 0x58
 80104d0:	4614      	mov	r4, r2
 80104d2:	461d      	mov	r5, r3
 80104d4:	da08      	bge.n	80104e8 <__swhatbuf_r+0x24>
 80104d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104da:	2200      	movs	r2, #0
 80104dc:	602a      	str	r2, [r5, #0]
 80104de:	061a      	lsls	r2, r3, #24
 80104e0:	d410      	bmi.n	8010504 <__swhatbuf_r+0x40>
 80104e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104e6:	e00e      	b.n	8010506 <__swhatbuf_r+0x42>
 80104e8:	466a      	mov	r2, sp
 80104ea:	f000 f8fb 	bl	80106e4 <_fstat_r>
 80104ee:	2800      	cmp	r0, #0
 80104f0:	dbf1      	blt.n	80104d6 <__swhatbuf_r+0x12>
 80104f2:	9a01      	ldr	r2, [sp, #4]
 80104f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80104f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80104fc:	425a      	negs	r2, r3
 80104fe:	415a      	adcs	r2, r3
 8010500:	602a      	str	r2, [r5, #0]
 8010502:	e7ee      	b.n	80104e2 <__swhatbuf_r+0x1e>
 8010504:	2340      	movs	r3, #64	; 0x40
 8010506:	2000      	movs	r0, #0
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	b016      	add	sp, #88	; 0x58
 801050c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010510 <__smakebuf_r>:
 8010510:	898b      	ldrh	r3, [r1, #12]
 8010512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010514:	079d      	lsls	r5, r3, #30
 8010516:	4606      	mov	r6, r0
 8010518:	460c      	mov	r4, r1
 801051a:	d507      	bpl.n	801052c <__smakebuf_r+0x1c>
 801051c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	6123      	str	r3, [r4, #16]
 8010524:	2301      	movs	r3, #1
 8010526:	6163      	str	r3, [r4, #20]
 8010528:	b002      	add	sp, #8
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	ab01      	add	r3, sp, #4
 801052e:	466a      	mov	r2, sp
 8010530:	f7ff ffc8 	bl	80104c4 <__swhatbuf_r>
 8010534:	9900      	ldr	r1, [sp, #0]
 8010536:	4605      	mov	r5, r0
 8010538:	4630      	mov	r0, r6
 801053a:	f7fe faad 	bl	800ea98 <_malloc_r>
 801053e:	b948      	cbnz	r0, 8010554 <__smakebuf_r+0x44>
 8010540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010544:	059a      	lsls	r2, r3, #22
 8010546:	d4ef      	bmi.n	8010528 <__smakebuf_r+0x18>
 8010548:	f023 0303 	bic.w	r3, r3, #3
 801054c:	f043 0302 	orr.w	r3, r3, #2
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	e7e3      	b.n	801051c <__smakebuf_r+0xc>
 8010554:	4b0d      	ldr	r3, [pc, #52]	; (801058c <__smakebuf_r+0x7c>)
 8010556:	62b3      	str	r3, [r6, #40]	; 0x28
 8010558:	89a3      	ldrh	r3, [r4, #12]
 801055a:	6020      	str	r0, [r4, #0]
 801055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010560:	81a3      	strh	r3, [r4, #12]
 8010562:	9b00      	ldr	r3, [sp, #0]
 8010564:	6163      	str	r3, [r4, #20]
 8010566:	9b01      	ldr	r3, [sp, #4]
 8010568:	6120      	str	r0, [r4, #16]
 801056a:	b15b      	cbz	r3, 8010584 <__smakebuf_r+0x74>
 801056c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010570:	4630      	mov	r0, r6
 8010572:	f000 f8c9 	bl	8010708 <_isatty_r>
 8010576:	b128      	cbz	r0, 8010584 <__smakebuf_r+0x74>
 8010578:	89a3      	ldrh	r3, [r4, #12]
 801057a:	f023 0303 	bic.w	r3, r3, #3
 801057e:	f043 0301 	orr.w	r3, r3, #1
 8010582:	81a3      	strh	r3, [r4, #12]
 8010584:	89a0      	ldrh	r0, [r4, #12]
 8010586:	4305      	orrs	r5, r0
 8010588:	81a5      	strh	r5, [r4, #12]
 801058a:	e7cd      	b.n	8010528 <__smakebuf_r+0x18>
 801058c:	0801031d 	.word	0x0801031d

08010590 <_raise_r>:
 8010590:	291f      	cmp	r1, #31
 8010592:	b538      	push	{r3, r4, r5, lr}
 8010594:	4604      	mov	r4, r0
 8010596:	460d      	mov	r5, r1
 8010598:	d904      	bls.n	80105a4 <_raise_r+0x14>
 801059a:	2316      	movs	r3, #22
 801059c:	6003      	str	r3, [r0, #0]
 801059e:	f04f 30ff 	mov.w	r0, #4294967295
 80105a2:	bd38      	pop	{r3, r4, r5, pc}
 80105a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105a6:	b112      	cbz	r2, 80105ae <_raise_r+0x1e>
 80105a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105ac:	b94b      	cbnz	r3, 80105c2 <_raise_r+0x32>
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 f830 	bl	8010614 <_getpid_r>
 80105b4:	462a      	mov	r2, r5
 80105b6:	4601      	mov	r1, r0
 80105b8:	4620      	mov	r0, r4
 80105ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105be:	f000 b817 	b.w	80105f0 <_kill_r>
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d00a      	beq.n	80105dc <_raise_r+0x4c>
 80105c6:	1c59      	adds	r1, r3, #1
 80105c8:	d103      	bne.n	80105d2 <_raise_r+0x42>
 80105ca:	2316      	movs	r3, #22
 80105cc:	6003      	str	r3, [r0, #0]
 80105ce:	2001      	movs	r0, #1
 80105d0:	e7e7      	b.n	80105a2 <_raise_r+0x12>
 80105d2:	2400      	movs	r4, #0
 80105d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105d8:	4628      	mov	r0, r5
 80105da:	4798      	blx	r3
 80105dc:	2000      	movs	r0, #0
 80105de:	e7e0      	b.n	80105a2 <_raise_r+0x12>

080105e0 <raise>:
 80105e0:	4b02      	ldr	r3, [pc, #8]	; (80105ec <raise+0xc>)
 80105e2:	4601      	mov	r1, r0
 80105e4:	6818      	ldr	r0, [r3, #0]
 80105e6:	f7ff bfd3 	b.w	8010590 <_raise_r>
 80105ea:	bf00      	nop
 80105ec:	2000003c 	.word	0x2000003c

080105f0 <_kill_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d07      	ldr	r5, [pc, #28]	; (8010610 <_kill_r+0x20>)
 80105f4:	2300      	movs	r3, #0
 80105f6:	4604      	mov	r4, r0
 80105f8:	4608      	mov	r0, r1
 80105fa:	4611      	mov	r1, r2
 80105fc:	602b      	str	r3, [r5, #0]
 80105fe:	f7f4 fb0d 	bl	8004c1c <_kill>
 8010602:	1c43      	adds	r3, r0, #1
 8010604:	d102      	bne.n	801060c <_kill_r+0x1c>
 8010606:	682b      	ldr	r3, [r5, #0]
 8010608:	b103      	cbz	r3, 801060c <_kill_r+0x1c>
 801060a:	6023      	str	r3, [r4, #0]
 801060c:	bd38      	pop	{r3, r4, r5, pc}
 801060e:	bf00      	nop
 8010610:	20002ea4 	.word	0x20002ea4

08010614 <_getpid_r>:
 8010614:	f7f4 bafa 	b.w	8004c0c <_getpid>

08010618 <__sread>:
 8010618:	b510      	push	{r4, lr}
 801061a:	460c      	mov	r4, r1
 801061c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010620:	f000 f894 	bl	801074c <_read_r>
 8010624:	2800      	cmp	r0, #0
 8010626:	bfab      	itete	ge
 8010628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801062a:	89a3      	ldrhlt	r3, [r4, #12]
 801062c:	181b      	addge	r3, r3, r0
 801062e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010632:	bfac      	ite	ge
 8010634:	6563      	strge	r3, [r4, #84]	; 0x54
 8010636:	81a3      	strhlt	r3, [r4, #12]
 8010638:	bd10      	pop	{r4, pc}

0801063a <__swrite>:
 801063a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063e:	461f      	mov	r7, r3
 8010640:	898b      	ldrh	r3, [r1, #12]
 8010642:	05db      	lsls	r3, r3, #23
 8010644:	4605      	mov	r5, r0
 8010646:	460c      	mov	r4, r1
 8010648:	4616      	mov	r6, r2
 801064a:	d505      	bpl.n	8010658 <__swrite+0x1e>
 801064c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010650:	2302      	movs	r3, #2
 8010652:	2200      	movs	r2, #0
 8010654:	f000 f868 	bl	8010728 <_lseek_r>
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801065e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010662:	81a3      	strh	r3, [r4, #12]
 8010664:	4632      	mov	r2, r6
 8010666:	463b      	mov	r3, r7
 8010668:	4628      	mov	r0, r5
 801066a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801066e:	f000 b817 	b.w	80106a0 <_write_r>

08010672 <__sseek>:
 8010672:	b510      	push	{r4, lr}
 8010674:	460c      	mov	r4, r1
 8010676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801067a:	f000 f855 	bl	8010728 <_lseek_r>
 801067e:	1c43      	adds	r3, r0, #1
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	bf15      	itete	ne
 8010684:	6560      	strne	r0, [r4, #84]	; 0x54
 8010686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801068a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801068e:	81a3      	strheq	r3, [r4, #12]
 8010690:	bf18      	it	ne
 8010692:	81a3      	strhne	r3, [r4, #12]
 8010694:	bd10      	pop	{r4, pc}

08010696 <__sclose>:
 8010696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069a:	f000 b813 	b.w	80106c4 <_close_r>
	...

080106a0 <_write_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4d07      	ldr	r5, [pc, #28]	; (80106c0 <_write_r+0x20>)
 80106a4:	4604      	mov	r4, r0
 80106a6:	4608      	mov	r0, r1
 80106a8:	4611      	mov	r1, r2
 80106aa:	2200      	movs	r2, #0
 80106ac:	602a      	str	r2, [r5, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	f7f3 fca8 	bl	8004004 <_write>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d102      	bne.n	80106be <_write_r+0x1e>
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	b103      	cbz	r3, 80106be <_write_r+0x1e>
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	20002ea4 	.word	0x20002ea4

080106c4 <_close_r>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	4d06      	ldr	r5, [pc, #24]	; (80106e0 <_close_r+0x1c>)
 80106c8:	2300      	movs	r3, #0
 80106ca:	4604      	mov	r4, r0
 80106cc:	4608      	mov	r0, r1
 80106ce:	602b      	str	r3, [r5, #0]
 80106d0:	f7f4 fadb 	bl	8004c8a <_close>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d102      	bne.n	80106de <_close_r+0x1a>
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	b103      	cbz	r3, 80106de <_close_r+0x1a>
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	20002ea4 	.word	0x20002ea4

080106e4 <_fstat_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	4d07      	ldr	r5, [pc, #28]	; (8010704 <_fstat_r+0x20>)
 80106e8:	2300      	movs	r3, #0
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	4611      	mov	r1, r2
 80106f0:	602b      	str	r3, [r5, #0]
 80106f2:	f7f4 fad6 	bl	8004ca2 <_fstat>
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	d102      	bne.n	8010700 <_fstat_r+0x1c>
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	b103      	cbz	r3, 8010700 <_fstat_r+0x1c>
 80106fe:	6023      	str	r3, [r4, #0]
 8010700:	bd38      	pop	{r3, r4, r5, pc}
 8010702:	bf00      	nop
 8010704:	20002ea4 	.word	0x20002ea4

08010708 <_isatty_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4d06      	ldr	r5, [pc, #24]	; (8010724 <_isatty_r+0x1c>)
 801070c:	2300      	movs	r3, #0
 801070e:	4604      	mov	r4, r0
 8010710:	4608      	mov	r0, r1
 8010712:	602b      	str	r3, [r5, #0]
 8010714:	f7f4 fad5 	bl	8004cc2 <_isatty>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_isatty_r+0x1a>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_isatty_r+0x1a>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20002ea4 	.word	0x20002ea4

08010728 <_lseek_r>:
 8010728:	b538      	push	{r3, r4, r5, lr}
 801072a:	4d07      	ldr	r5, [pc, #28]	; (8010748 <_lseek_r+0x20>)
 801072c:	4604      	mov	r4, r0
 801072e:	4608      	mov	r0, r1
 8010730:	4611      	mov	r1, r2
 8010732:	2200      	movs	r2, #0
 8010734:	602a      	str	r2, [r5, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	f7f4 face 	bl	8004cd8 <_lseek>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_lseek_r+0x1e>
 8010740:	682b      	ldr	r3, [r5, #0]
 8010742:	b103      	cbz	r3, 8010746 <_lseek_r+0x1e>
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	20002ea4 	.word	0x20002ea4

0801074c <_read_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d07      	ldr	r5, [pc, #28]	; (801076c <_read_r+0x20>)
 8010750:	4604      	mov	r4, r0
 8010752:	4608      	mov	r0, r1
 8010754:	4611      	mov	r1, r2
 8010756:	2200      	movs	r2, #0
 8010758:	602a      	str	r2, [r5, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	f7f4 fa78 	bl	8004c50 <_read>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	d102      	bne.n	801076a <_read_r+0x1e>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	b103      	cbz	r3, 801076a <_read_r+0x1e>
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	20002ea4 	.word	0x20002ea4

08010770 <pow>:
 8010770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010772:	ed2d 8b02 	vpush	{d8}
 8010776:	eeb0 8a40 	vmov.f32	s16, s0
 801077a:	eef0 8a60 	vmov.f32	s17, s1
 801077e:	ec55 4b11 	vmov	r4, r5, d1
 8010782:	f000 f865 	bl	8010850 <__ieee754_pow>
 8010786:	4622      	mov	r2, r4
 8010788:	462b      	mov	r3, r5
 801078a:	4620      	mov	r0, r4
 801078c:	4629      	mov	r1, r5
 801078e:	ec57 6b10 	vmov	r6, r7, d0
 8010792:	f7f0 f9eb 	bl	8000b6c <__aeabi_dcmpun>
 8010796:	2800      	cmp	r0, #0
 8010798:	d13b      	bne.n	8010812 <pow+0xa2>
 801079a:	ec51 0b18 	vmov	r0, r1, d8
 801079e:	2200      	movs	r2, #0
 80107a0:	2300      	movs	r3, #0
 80107a2:	f7f0 f9b1 	bl	8000b08 <__aeabi_dcmpeq>
 80107a6:	b1b8      	cbz	r0, 80107d8 <pow+0x68>
 80107a8:	2200      	movs	r2, #0
 80107aa:	2300      	movs	r3, #0
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7f0 f9aa 	bl	8000b08 <__aeabi_dcmpeq>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d146      	bne.n	8010846 <pow+0xd6>
 80107b8:	ec45 4b10 	vmov	d0, r4, r5
 80107bc:	f000 fe61 	bl	8011482 <finite>
 80107c0:	b338      	cbz	r0, 8010812 <pow+0xa2>
 80107c2:	2200      	movs	r2, #0
 80107c4:	2300      	movs	r3, #0
 80107c6:	4620      	mov	r0, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	f7f0 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80107ce:	b300      	cbz	r0, 8010812 <pow+0xa2>
 80107d0:	f7fd fb92 	bl	800def8 <__errno>
 80107d4:	2322      	movs	r3, #34	; 0x22
 80107d6:	e01b      	b.n	8010810 <pow+0xa0>
 80107d8:	ec47 6b10 	vmov	d0, r6, r7
 80107dc:	f000 fe51 	bl	8011482 <finite>
 80107e0:	b9e0      	cbnz	r0, 801081c <pow+0xac>
 80107e2:	eeb0 0a48 	vmov.f32	s0, s16
 80107e6:	eef0 0a68 	vmov.f32	s1, s17
 80107ea:	f000 fe4a 	bl	8011482 <finite>
 80107ee:	b1a8      	cbz	r0, 801081c <pow+0xac>
 80107f0:	ec45 4b10 	vmov	d0, r4, r5
 80107f4:	f000 fe45 	bl	8011482 <finite>
 80107f8:	b180      	cbz	r0, 801081c <pow+0xac>
 80107fa:	4632      	mov	r2, r6
 80107fc:	463b      	mov	r3, r7
 80107fe:	4630      	mov	r0, r6
 8010800:	4639      	mov	r1, r7
 8010802:	f7f0 f9b3 	bl	8000b6c <__aeabi_dcmpun>
 8010806:	2800      	cmp	r0, #0
 8010808:	d0e2      	beq.n	80107d0 <pow+0x60>
 801080a:	f7fd fb75 	bl	800def8 <__errno>
 801080e:	2321      	movs	r3, #33	; 0x21
 8010810:	6003      	str	r3, [r0, #0]
 8010812:	ecbd 8b02 	vpop	{d8}
 8010816:	ec47 6b10 	vmov	d0, r6, r7
 801081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081c:	2200      	movs	r2, #0
 801081e:	2300      	movs	r3, #0
 8010820:	4630      	mov	r0, r6
 8010822:	4639      	mov	r1, r7
 8010824:	f7f0 f970 	bl	8000b08 <__aeabi_dcmpeq>
 8010828:	2800      	cmp	r0, #0
 801082a:	d0f2      	beq.n	8010812 <pow+0xa2>
 801082c:	eeb0 0a48 	vmov.f32	s0, s16
 8010830:	eef0 0a68 	vmov.f32	s1, s17
 8010834:	f000 fe25 	bl	8011482 <finite>
 8010838:	2800      	cmp	r0, #0
 801083a:	d0ea      	beq.n	8010812 <pow+0xa2>
 801083c:	ec45 4b10 	vmov	d0, r4, r5
 8010840:	f000 fe1f 	bl	8011482 <finite>
 8010844:	e7c3      	b.n	80107ce <pow+0x5e>
 8010846:	4f01      	ldr	r7, [pc, #4]	; (801084c <pow+0xdc>)
 8010848:	2600      	movs	r6, #0
 801084a:	e7e2      	b.n	8010812 <pow+0xa2>
 801084c:	3ff00000 	.word	0x3ff00000

08010850 <__ieee754_pow>:
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	ed2d 8b06 	vpush	{d8-d10}
 8010858:	b089      	sub	sp, #36	; 0x24
 801085a:	ed8d 1b00 	vstr	d1, [sp]
 801085e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010862:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010866:	ea58 0102 	orrs.w	r1, r8, r2
 801086a:	ec57 6b10 	vmov	r6, r7, d0
 801086e:	d115      	bne.n	801089c <__ieee754_pow+0x4c>
 8010870:	19b3      	adds	r3, r6, r6
 8010872:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010876:	4152      	adcs	r2, r2
 8010878:	4299      	cmp	r1, r3
 801087a:	4b89      	ldr	r3, [pc, #548]	; (8010aa0 <__ieee754_pow+0x250>)
 801087c:	4193      	sbcs	r3, r2
 801087e:	f080 84d2 	bcs.w	8011226 <__ieee754_pow+0x9d6>
 8010882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010886:	4630      	mov	r0, r6
 8010888:	4639      	mov	r1, r7
 801088a:	f7ef fd1f 	bl	80002cc <__adddf3>
 801088e:	ec41 0b10 	vmov	d0, r0, r1
 8010892:	b009      	add	sp, #36	; 0x24
 8010894:	ecbd 8b06 	vpop	{d8-d10}
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	4b81      	ldr	r3, [pc, #516]	; (8010aa4 <__ieee754_pow+0x254>)
 801089e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80108a2:	429c      	cmp	r4, r3
 80108a4:	ee10 aa10 	vmov	sl, s0
 80108a8:	463d      	mov	r5, r7
 80108aa:	dc06      	bgt.n	80108ba <__ieee754_pow+0x6a>
 80108ac:	d101      	bne.n	80108b2 <__ieee754_pow+0x62>
 80108ae:	2e00      	cmp	r6, #0
 80108b0:	d1e7      	bne.n	8010882 <__ieee754_pow+0x32>
 80108b2:	4598      	cmp	r8, r3
 80108b4:	dc01      	bgt.n	80108ba <__ieee754_pow+0x6a>
 80108b6:	d10f      	bne.n	80108d8 <__ieee754_pow+0x88>
 80108b8:	b172      	cbz	r2, 80108d8 <__ieee754_pow+0x88>
 80108ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80108be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80108c2:	ea55 050a 	orrs.w	r5, r5, sl
 80108c6:	d1dc      	bne.n	8010882 <__ieee754_pow+0x32>
 80108c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80108cc:	18db      	adds	r3, r3, r3
 80108ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80108d2:	4152      	adcs	r2, r2
 80108d4:	429d      	cmp	r5, r3
 80108d6:	e7d0      	b.n	801087a <__ieee754_pow+0x2a>
 80108d8:	2d00      	cmp	r5, #0
 80108da:	da3b      	bge.n	8010954 <__ieee754_pow+0x104>
 80108dc:	4b72      	ldr	r3, [pc, #456]	; (8010aa8 <__ieee754_pow+0x258>)
 80108de:	4598      	cmp	r8, r3
 80108e0:	dc51      	bgt.n	8010986 <__ieee754_pow+0x136>
 80108e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80108e6:	4598      	cmp	r8, r3
 80108e8:	f340 84ac 	ble.w	8011244 <__ieee754_pow+0x9f4>
 80108ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80108f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80108f4:	2b14      	cmp	r3, #20
 80108f6:	dd0f      	ble.n	8010918 <__ieee754_pow+0xc8>
 80108f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80108fc:	fa22 f103 	lsr.w	r1, r2, r3
 8010900:	fa01 f303 	lsl.w	r3, r1, r3
 8010904:	4293      	cmp	r3, r2
 8010906:	f040 849d 	bne.w	8011244 <__ieee754_pow+0x9f4>
 801090a:	f001 0101 	and.w	r1, r1, #1
 801090e:	f1c1 0302 	rsb	r3, r1, #2
 8010912:	9304      	str	r3, [sp, #16]
 8010914:	b182      	cbz	r2, 8010938 <__ieee754_pow+0xe8>
 8010916:	e05f      	b.n	80109d8 <__ieee754_pow+0x188>
 8010918:	2a00      	cmp	r2, #0
 801091a:	d15b      	bne.n	80109d4 <__ieee754_pow+0x184>
 801091c:	f1c3 0314 	rsb	r3, r3, #20
 8010920:	fa48 f103 	asr.w	r1, r8, r3
 8010924:	fa01 f303 	lsl.w	r3, r1, r3
 8010928:	4543      	cmp	r3, r8
 801092a:	f040 8488 	bne.w	801123e <__ieee754_pow+0x9ee>
 801092e:	f001 0101 	and.w	r1, r1, #1
 8010932:	f1c1 0302 	rsb	r3, r1, #2
 8010936:	9304      	str	r3, [sp, #16]
 8010938:	4b5c      	ldr	r3, [pc, #368]	; (8010aac <__ieee754_pow+0x25c>)
 801093a:	4598      	cmp	r8, r3
 801093c:	d132      	bne.n	80109a4 <__ieee754_pow+0x154>
 801093e:	f1b9 0f00 	cmp.w	r9, #0
 8010942:	f280 8478 	bge.w	8011236 <__ieee754_pow+0x9e6>
 8010946:	4959      	ldr	r1, [pc, #356]	; (8010aac <__ieee754_pow+0x25c>)
 8010948:	4632      	mov	r2, r6
 801094a:	463b      	mov	r3, r7
 801094c:	2000      	movs	r0, #0
 801094e:	f7ef ff9d 	bl	800088c <__aeabi_ddiv>
 8010952:	e79c      	b.n	801088e <__ieee754_pow+0x3e>
 8010954:	2300      	movs	r3, #0
 8010956:	9304      	str	r3, [sp, #16]
 8010958:	2a00      	cmp	r2, #0
 801095a:	d13d      	bne.n	80109d8 <__ieee754_pow+0x188>
 801095c:	4b51      	ldr	r3, [pc, #324]	; (8010aa4 <__ieee754_pow+0x254>)
 801095e:	4598      	cmp	r8, r3
 8010960:	d1ea      	bne.n	8010938 <__ieee754_pow+0xe8>
 8010962:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010966:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801096a:	ea53 030a 	orrs.w	r3, r3, sl
 801096e:	f000 845a 	beq.w	8011226 <__ieee754_pow+0x9d6>
 8010972:	4b4f      	ldr	r3, [pc, #316]	; (8010ab0 <__ieee754_pow+0x260>)
 8010974:	429c      	cmp	r4, r3
 8010976:	dd08      	ble.n	801098a <__ieee754_pow+0x13a>
 8010978:	f1b9 0f00 	cmp.w	r9, #0
 801097c:	f2c0 8457 	blt.w	801122e <__ieee754_pow+0x9de>
 8010980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010984:	e783      	b.n	801088e <__ieee754_pow+0x3e>
 8010986:	2302      	movs	r3, #2
 8010988:	e7e5      	b.n	8010956 <__ieee754_pow+0x106>
 801098a:	f1b9 0f00 	cmp.w	r9, #0
 801098e:	f04f 0000 	mov.w	r0, #0
 8010992:	f04f 0100 	mov.w	r1, #0
 8010996:	f6bf af7a 	bge.w	801088e <__ieee754_pow+0x3e>
 801099a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801099e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80109a2:	e774      	b.n	801088e <__ieee754_pow+0x3e>
 80109a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80109a8:	d106      	bne.n	80109b8 <__ieee754_pow+0x168>
 80109aa:	4632      	mov	r2, r6
 80109ac:	463b      	mov	r3, r7
 80109ae:	4630      	mov	r0, r6
 80109b0:	4639      	mov	r1, r7
 80109b2:	f7ef fe41 	bl	8000638 <__aeabi_dmul>
 80109b6:	e76a      	b.n	801088e <__ieee754_pow+0x3e>
 80109b8:	4b3e      	ldr	r3, [pc, #248]	; (8010ab4 <__ieee754_pow+0x264>)
 80109ba:	4599      	cmp	r9, r3
 80109bc:	d10c      	bne.n	80109d8 <__ieee754_pow+0x188>
 80109be:	2d00      	cmp	r5, #0
 80109c0:	db0a      	blt.n	80109d8 <__ieee754_pow+0x188>
 80109c2:	ec47 6b10 	vmov	d0, r6, r7
 80109c6:	b009      	add	sp, #36	; 0x24
 80109c8:	ecbd 8b06 	vpop	{d8-d10}
 80109cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d0:	f000 bc6c 	b.w	80112ac <__ieee754_sqrt>
 80109d4:	2300      	movs	r3, #0
 80109d6:	9304      	str	r3, [sp, #16]
 80109d8:	ec47 6b10 	vmov	d0, r6, r7
 80109dc:	f000 fd48 	bl	8011470 <fabs>
 80109e0:	ec51 0b10 	vmov	r0, r1, d0
 80109e4:	f1ba 0f00 	cmp.w	sl, #0
 80109e8:	d129      	bne.n	8010a3e <__ieee754_pow+0x1ee>
 80109ea:	b124      	cbz	r4, 80109f6 <__ieee754_pow+0x1a6>
 80109ec:	4b2f      	ldr	r3, [pc, #188]	; (8010aac <__ieee754_pow+0x25c>)
 80109ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d123      	bne.n	8010a3e <__ieee754_pow+0x1ee>
 80109f6:	f1b9 0f00 	cmp.w	r9, #0
 80109fa:	da05      	bge.n	8010a08 <__ieee754_pow+0x1b8>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	2000      	movs	r0, #0
 8010a02:	492a      	ldr	r1, [pc, #168]	; (8010aac <__ieee754_pow+0x25c>)
 8010a04:	f7ef ff42 	bl	800088c <__aeabi_ddiv>
 8010a08:	2d00      	cmp	r5, #0
 8010a0a:	f6bf af40 	bge.w	801088e <__ieee754_pow+0x3e>
 8010a0e:	9b04      	ldr	r3, [sp, #16]
 8010a10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010a14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010a18:	4323      	orrs	r3, r4
 8010a1a:	d108      	bne.n	8010a2e <__ieee754_pow+0x1de>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	460b      	mov	r3, r1
 8010a20:	4610      	mov	r0, r2
 8010a22:	4619      	mov	r1, r3
 8010a24:	f7ef fc50 	bl	80002c8 <__aeabi_dsub>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	e78f      	b.n	801094e <__ieee754_pow+0xfe>
 8010a2e:	9b04      	ldr	r3, [sp, #16]
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	f47f af2c 	bne.w	801088e <__ieee754_pow+0x3e>
 8010a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	e727      	b.n	801088e <__ieee754_pow+0x3e>
 8010a3e:	0feb      	lsrs	r3, r5, #31
 8010a40:	3b01      	subs	r3, #1
 8010a42:	9306      	str	r3, [sp, #24]
 8010a44:	9a06      	ldr	r2, [sp, #24]
 8010a46:	9b04      	ldr	r3, [sp, #16]
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	d102      	bne.n	8010a52 <__ieee754_pow+0x202>
 8010a4c:	4632      	mov	r2, r6
 8010a4e:	463b      	mov	r3, r7
 8010a50:	e7e6      	b.n	8010a20 <__ieee754_pow+0x1d0>
 8010a52:	4b19      	ldr	r3, [pc, #100]	; (8010ab8 <__ieee754_pow+0x268>)
 8010a54:	4598      	cmp	r8, r3
 8010a56:	f340 80fb 	ble.w	8010c50 <__ieee754_pow+0x400>
 8010a5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010a5e:	4598      	cmp	r8, r3
 8010a60:	4b13      	ldr	r3, [pc, #76]	; (8010ab0 <__ieee754_pow+0x260>)
 8010a62:	dd0c      	ble.n	8010a7e <__ieee754_pow+0x22e>
 8010a64:	429c      	cmp	r4, r3
 8010a66:	dc0f      	bgt.n	8010a88 <__ieee754_pow+0x238>
 8010a68:	f1b9 0f00 	cmp.w	r9, #0
 8010a6c:	da0f      	bge.n	8010a8e <__ieee754_pow+0x23e>
 8010a6e:	2000      	movs	r0, #0
 8010a70:	b009      	add	sp, #36	; 0x24
 8010a72:	ecbd 8b06 	vpop	{d8-d10}
 8010a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a7a:	f000 bcf0 	b.w	801145e <__math_oflow>
 8010a7e:	429c      	cmp	r4, r3
 8010a80:	dbf2      	blt.n	8010a68 <__ieee754_pow+0x218>
 8010a82:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <__ieee754_pow+0x25c>)
 8010a84:	429c      	cmp	r4, r3
 8010a86:	dd19      	ble.n	8010abc <__ieee754_pow+0x26c>
 8010a88:	f1b9 0f00 	cmp.w	r9, #0
 8010a8c:	dcef      	bgt.n	8010a6e <__ieee754_pow+0x21e>
 8010a8e:	2000      	movs	r0, #0
 8010a90:	b009      	add	sp, #36	; 0x24
 8010a92:	ecbd 8b06 	vpop	{d8-d10}
 8010a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9a:	f000 bcd7 	b.w	801144c <__math_uflow>
 8010a9e:	bf00      	nop
 8010aa0:	fff00000 	.word	0xfff00000
 8010aa4:	7ff00000 	.word	0x7ff00000
 8010aa8:	433fffff 	.word	0x433fffff
 8010aac:	3ff00000 	.word	0x3ff00000
 8010ab0:	3fefffff 	.word	0x3fefffff
 8010ab4:	3fe00000 	.word	0x3fe00000
 8010ab8:	41e00000 	.word	0x41e00000
 8010abc:	4b60      	ldr	r3, [pc, #384]	; (8010c40 <__ieee754_pow+0x3f0>)
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f7ef fc02 	bl	80002c8 <__aeabi_dsub>
 8010ac4:	a354      	add	r3, pc, #336	; (adr r3, 8010c18 <__ieee754_pow+0x3c8>)
 8010ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aca:	4604      	mov	r4, r0
 8010acc:	460d      	mov	r5, r1
 8010ace:	f7ef fdb3 	bl	8000638 <__aeabi_dmul>
 8010ad2:	a353      	add	r3, pc, #332	; (adr r3, 8010c20 <__ieee754_pow+0x3d0>)
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	4606      	mov	r6, r0
 8010ada:	460f      	mov	r7, r1
 8010adc:	4620      	mov	r0, r4
 8010ade:	4629      	mov	r1, r5
 8010ae0:	f7ef fdaa 	bl	8000638 <__aeabi_dmul>
 8010ae4:	4b57      	ldr	r3, [pc, #348]	; (8010c44 <__ieee754_pow+0x3f4>)
 8010ae6:	4682      	mov	sl, r0
 8010ae8:	468b      	mov	fp, r1
 8010aea:	2200      	movs	r2, #0
 8010aec:	4620      	mov	r0, r4
 8010aee:	4629      	mov	r1, r5
 8010af0:	f7ef fda2 	bl	8000638 <__aeabi_dmul>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	a14b      	add	r1, pc, #300	; (adr r1, 8010c28 <__ieee754_pow+0x3d8>)
 8010afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010afe:	f7ef fbe3 	bl	80002c8 <__aeabi_dsub>
 8010b02:	4622      	mov	r2, r4
 8010b04:	462b      	mov	r3, r5
 8010b06:	f7ef fd97 	bl	8000638 <__aeabi_dmul>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	2000      	movs	r0, #0
 8010b10:	494d      	ldr	r1, [pc, #308]	; (8010c48 <__ieee754_pow+0x3f8>)
 8010b12:	f7ef fbd9 	bl	80002c8 <__aeabi_dsub>
 8010b16:	4622      	mov	r2, r4
 8010b18:	4680      	mov	r8, r0
 8010b1a:	4689      	mov	r9, r1
 8010b1c:	462b      	mov	r3, r5
 8010b1e:	4620      	mov	r0, r4
 8010b20:	4629      	mov	r1, r5
 8010b22:	f7ef fd89 	bl	8000638 <__aeabi_dmul>
 8010b26:	4602      	mov	r2, r0
 8010b28:	460b      	mov	r3, r1
 8010b2a:	4640      	mov	r0, r8
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	f7ef fd83 	bl	8000638 <__aeabi_dmul>
 8010b32:	a33f      	add	r3, pc, #252	; (adr r3, 8010c30 <__ieee754_pow+0x3e0>)
 8010b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b38:	f7ef fd7e 	bl	8000638 <__aeabi_dmul>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	460b      	mov	r3, r1
 8010b40:	4650      	mov	r0, sl
 8010b42:	4659      	mov	r1, fp
 8010b44:	f7ef fbc0 	bl	80002c8 <__aeabi_dsub>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	4680      	mov	r8, r0
 8010b4e:	4689      	mov	r9, r1
 8010b50:	4630      	mov	r0, r6
 8010b52:	4639      	mov	r1, r7
 8010b54:	f7ef fbba 	bl	80002cc <__adddf3>
 8010b58:	2000      	movs	r0, #0
 8010b5a:	4632      	mov	r2, r6
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	4604      	mov	r4, r0
 8010b60:	460d      	mov	r5, r1
 8010b62:	f7ef fbb1 	bl	80002c8 <__aeabi_dsub>
 8010b66:	4602      	mov	r2, r0
 8010b68:	460b      	mov	r3, r1
 8010b6a:	4640      	mov	r0, r8
 8010b6c:	4649      	mov	r1, r9
 8010b6e:	f7ef fbab 	bl	80002c8 <__aeabi_dsub>
 8010b72:	9b04      	ldr	r3, [sp, #16]
 8010b74:	9a06      	ldr	r2, [sp, #24]
 8010b76:	3b01      	subs	r3, #1
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	4682      	mov	sl, r0
 8010b7c:	468b      	mov	fp, r1
 8010b7e:	f040 81e7 	bne.w	8010f50 <__ieee754_pow+0x700>
 8010b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010c38 <__ieee754_pow+0x3e8>
 8010b86:	eeb0 8a47 	vmov.f32	s16, s14
 8010b8a:	eef0 8a67 	vmov.f32	s17, s15
 8010b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010b92:	2600      	movs	r6, #0
 8010b94:	4632      	mov	r2, r6
 8010b96:	463b      	mov	r3, r7
 8010b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b9c:	f7ef fb94 	bl	80002c8 <__aeabi_dsub>
 8010ba0:	4622      	mov	r2, r4
 8010ba2:	462b      	mov	r3, r5
 8010ba4:	f7ef fd48 	bl	8000638 <__aeabi_dmul>
 8010ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bac:	4680      	mov	r8, r0
 8010bae:	4689      	mov	r9, r1
 8010bb0:	4650      	mov	r0, sl
 8010bb2:	4659      	mov	r1, fp
 8010bb4:	f7ef fd40 	bl	8000638 <__aeabi_dmul>
 8010bb8:	4602      	mov	r2, r0
 8010bba:	460b      	mov	r3, r1
 8010bbc:	4640      	mov	r0, r8
 8010bbe:	4649      	mov	r1, r9
 8010bc0:	f7ef fb84 	bl	80002cc <__adddf3>
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	463b      	mov	r3, r7
 8010bc8:	4680      	mov	r8, r0
 8010bca:	4689      	mov	r9, r1
 8010bcc:	4620      	mov	r0, r4
 8010bce:	4629      	mov	r1, r5
 8010bd0:	f7ef fd32 	bl	8000638 <__aeabi_dmul>
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	460d      	mov	r5, r1
 8010bda:	4602      	mov	r2, r0
 8010bdc:	4649      	mov	r1, r9
 8010bde:	4640      	mov	r0, r8
 8010be0:	f7ef fb74 	bl	80002cc <__adddf3>
 8010be4:	4b19      	ldr	r3, [pc, #100]	; (8010c4c <__ieee754_pow+0x3fc>)
 8010be6:	4299      	cmp	r1, r3
 8010be8:	ec45 4b19 	vmov	d9, r4, r5
 8010bec:	4606      	mov	r6, r0
 8010bee:	460f      	mov	r7, r1
 8010bf0:	468b      	mov	fp, r1
 8010bf2:	f340 82f1 	ble.w	80111d8 <__ieee754_pow+0x988>
 8010bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010bfe:	4303      	orrs	r3, r0
 8010c00:	f000 81e4 	beq.w	8010fcc <__ieee754_pow+0x77c>
 8010c04:	ec51 0b18 	vmov	r0, r1, d8
 8010c08:	2200      	movs	r2, #0
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f7ef ff86 	bl	8000b1c <__aeabi_dcmplt>
 8010c10:	3800      	subs	r0, #0
 8010c12:	bf18      	it	ne
 8010c14:	2001      	movne	r0, #1
 8010c16:	e72b      	b.n	8010a70 <__ieee754_pow+0x220>
 8010c18:	60000000 	.word	0x60000000
 8010c1c:	3ff71547 	.word	0x3ff71547
 8010c20:	f85ddf44 	.word	0xf85ddf44
 8010c24:	3e54ae0b 	.word	0x3e54ae0b
 8010c28:	55555555 	.word	0x55555555
 8010c2c:	3fd55555 	.word	0x3fd55555
 8010c30:	652b82fe 	.word	0x652b82fe
 8010c34:	3ff71547 	.word	0x3ff71547
 8010c38:	00000000 	.word	0x00000000
 8010c3c:	bff00000 	.word	0xbff00000
 8010c40:	3ff00000 	.word	0x3ff00000
 8010c44:	3fd00000 	.word	0x3fd00000
 8010c48:	3fe00000 	.word	0x3fe00000
 8010c4c:	408fffff 	.word	0x408fffff
 8010c50:	4bd5      	ldr	r3, [pc, #852]	; (8010fa8 <__ieee754_pow+0x758>)
 8010c52:	402b      	ands	r3, r5
 8010c54:	2200      	movs	r2, #0
 8010c56:	b92b      	cbnz	r3, 8010c64 <__ieee754_pow+0x414>
 8010c58:	4bd4      	ldr	r3, [pc, #848]	; (8010fac <__ieee754_pow+0x75c>)
 8010c5a:	f7ef fced 	bl	8000638 <__aeabi_dmul>
 8010c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010c62:	460c      	mov	r4, r1
 8010c64:	1523      	asrs	r3, r4, #20
 8010c66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c6a:	4413      	add	r3, r2
 8010c6c:	9305      	str	r3, [sp, #20]
 8010c6e:	4bd0      	ldr	r3, [pc, #832]	; (8010fb0 <__ieee754_pow+0x760>)
 8010c70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010c74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010c78:	429c      	cmp	r4, r3
 8010c7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010c7e:	dd08      	ble.n	8010c92 <__ieee754_pow+0x442>
 8010c80:	4bcc      	ldr	r3, [pc, #816]	; (8010fb4 <__ieee754_pow+0x764>)
 8010c82:	429c      	cmp	r4, r3
 8010c84:	f340 8162 	ble.w	8010f4c <__ieee754_pow+0x6fc>
 8010c88:	9b05      	ldr	r3, [sp, #20]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	9305      	str	r3, [sp, #20]
 8010c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010c92:	2400      	movs	r4, #0
 8010c94:	00e3      	lsls	r3, r4, #3
 8010c96:	9307      	str	r3, [sp, #28]
 8010c98:	4bc7      	ldr	r3, [pc, #796]	; (8010fb8 <__ieee754_pow+0x768>)
 8010c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c9e:	ed93 7b00 	vldr	d7, [r3]
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	ec53 2b17 	vmov	r2, r3, d7
 8010ca8:	eeb0 9a47 	vmov.f32	s18, s14
 8010cac:	eef0 9a67 	vmov.f32	s19, s15
 8010cb0:	4682      	mov	sl, r0
 8010cb2:	f7ef fb09 	bl	80002c8 <__aeabi_dsub>
 8010cb6:	4652      	mov	r2, sl
 8010cb8:	4606      	mov	r6, r0
 8010cba:	460f      	mov	r7, r1
 8010cbc:	462b      	mov	r3, r5
 8010cbe:	ec51 0b19 	vmov	r0, r1, d9
 8010cc2:	f7ef fb03 	bl	80002cc <__adddf3>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	460b      	mov	r3, r1
 8010cca:	2000      	movs	r0, #0
 8010ccc:	49bb      	ldr	r1, [pc, #748]	; (8010fbc <__ieee754_pow+0x76c>)
 8010cce:	f7ef fddd 	bl	800088c <__aeabi_ddiv>
 8010cd2:	ec41 0b1a 	vmov	d10, r0, r1
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	460b      	mov	r3, r1
 8010cda:	4630      	mov	r0, r6
 8010cdc:	4639      	mov	r1, r7
 8010cde:	f7ef fcab 	bl	8000638 <__aeabi_dmul>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ce8:	9302      	str	r3, [sp, #8]
 8010cea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010cee:	46ab      	mov	fp, r5
 8010cf0:	106d      	asrs	r5, r5, #1
 8010cf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010cf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010cfa:	ec41 0b18 	vmov	d8, r0, r1
 8010cfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010d02:	2200      	movs	r2, #0
 8010d04:	4640      	mov	r0, r8
 8010d06:	4649      	mov	r1, r9
 8010d08:	4614      	mov	r4, r2
 8010d0a:	461d      	mov	r5, r3
 8010d0c:	f7ef fc94 	bl	8000638 <__aeabi_dmul>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4630      	mov	r0, r6
 8010d16:	4639      	mov	r1, r7
 8010d18:	f7ef fad6 	bl	80002c8 <__aeabi_dsub>
 8010d1c:	ec53 2b19 	vmov	r2, r3, d9
 8010d20:	4606      	mov	r6, r0
 8010d22:	460f      	mov	r7, r1
 8010d24:	4620      	mov	r0, r4
 8010d26:	4629      	mov	r1, r5
 8010d28:	f7ef face 	bl	80002c8 <__aeabi_dsub>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4650      	mov	r0, sl
 8010d32:	4659      	mov	r1, fp
 8010d34:	f7ef fac8 	bl	80002c8 <__aeabi_dsub>
 8010d38:	4642      	mov	r2, r8
 8010d3a:	464b      	mov	r3, r9
 8010d3c:	f7ef fc7c 	bl	8000638 <__aeabi_dmul>
 8010d40:	4602      	mov	r2, r0
 8010d42:	460b      	mov	r3, r1
 8010d44:	4630      	mov	r0, r6
 8010d46:	4639      	mov	r1, r7
 8010d48:	f7ef fabe 	bl	80002c8 <__aeabi_dsub>
 8010d4c:	ec53 2b1a 	vmov	r2, r3, d10
 8010d50:	f7ef fc72 	bl	8000638 <__aeabi_dmul>
 8010d54:	ec53 2b18 	vmov	r2, r3, d8
 8010d58:	ec41 0b19 	vmov	d9, r0, r1
 8010d5c:	ec51 0b18 	vmov	r0, r1, d8
 8010d60:	f7ef fc6a 	bl	8000638 <__aeabi_dmul>
 8010d64:	a37c      	add	r3, pc, #496	; (adr r3, 8010f58 <__ieee754_pow+0x708>)
 8010d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	460d      	mov	r5, r1
 8010d6e:	f7ef fc63 	bl	8000638 <__aeabi_dmul>
 8010d72:	a37b      	add	r3, pc, #492	; (adr r3, 8010f60 <__ieee754_pow+0x710>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7ef faa8 	bl	80002cc <__adddf3>
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	462b      	mov	r3, r5
 8010d80:	f7ef fc5a 	bl	8000638 <__aeabi_dmul>
 8010d84:	a378      	add	r3, pc, #480	; (adr r3, 8010f68 <__ieee754_pow+0x718>)
 8010d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8a:	f7ef fa9f 	bl	80002cc <__adddf3>
 8010d8e:	4622      	mov	r2, r4
 8010d90:	462b      	mov	r3, r5
 8010d92:	f7ef fc51 	bl	8000638 <__aeabi_dmul>
 8010d96:	a376      	add	r3, pc, #472	; (adr r3, 8010f70 <__ieee754_pow+0x720>)
 8010d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9c:	f7ef fa96 	bl	80002cc <__adddf3>
 8010da0:	4622      	mov	r2, r4
 8010da2:	462b      	mov	r3, r5
 8010da4:	f7ef fc48 	bl	8000638 <__aeabi_dmul>
 8010da8:	a373      	add	r3, pc, #460	; (adr r3, 8010f78 <__ieee754_pow+0x728>)
 8010daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dae:	f7ef fa8d 	bl	80002cc <__adddf3>
 8010db2:	4622      	mov	r2, r4
 8010db4:	462b      	mov	r3, r5
 8010db6:	f7ef fc3f 	bl	8000638 <__aeabi_dmul>
 8010dba:	a371      	add	r3, pc, #452	; (adr r3, 8010f80 <__ieee754_pow+0x730>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	f7ef fa84 	bl	80002cc <__adddf3>
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	460f      	mov	r7, r1
 8010dca:	462b      	mov	r3, r5
 8010dcc:	4620      	mov	r0, r4
 8010dce:	4629      	mov	r1, r5
 8010dd0:	f7ef fc32 	bl	8000638 <__aeabi_dmul>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	4630      	mov	r0, r6
 8010dda:	4639      	mov	r1, r7
 8010ddc:	f7ef fc2c 	bl	8000638 <__aeabi_dmul>
 8010de0:	4642      	mov	r2, r8
 8010de2:	4604      	mov	r4, r0
 8010de4:	460d      	mov	r5, r1
 8010de6:	464b      	mov	r3, r9
 8010de8:	ec51 0b18 	vmov	r0, r1, d8
 8010dec:	f7ef fa6e 	bl	80002cc <__adddf3>
 8010df0:	ec53 2b19 	vmov	r2, r3, d9
 8010df4:	f7ef fc20 	bl	8000638 <__aeabi_dmul>
 8010df8:	4622      	mov	r2, r4
 8010dfa:	462b      	mov	r3, r5
 8010dfc:	f7ef fa66 	bl	80002cc <__adddf3>
 8010e00:	4642      	mov	r2, r8
 8010e02:	4682      	mov	sl, r0
 8010e04:	468b      	mov	fp, r1
 8010e06:	464b      	mov	r3, r9
 8010e08:	4640      	mov	r0, r8
 8010e0a:	4649      	mov	r1, r9
 8010e0c:	f7ef fc14 	bl	8000638 <__aeabi_dmul>
 8010e10:	4b6b      	ldr	r3, [pc, #428]	; (8010fc0 <__ieee754_pow+0x770>)
 8010e12:	2200      	movs	r2, #0
 8010e14:	4606      	mov	r6, r0
 8010e16:	460f      	mov	r7, r1
 8010e18:	f7ef fa58 	bl	80002cc <__adddf3>
 8010e1c:	4652      	mov	r2, sl
 8010e1e:	465b      	mov	r3, fp
 8010e20:	f7ef fa54 	bl	80002cc <__adddf3>
 8010e24:	2000      	movs	r0, #0
 8010e26:	4604      	mov	r4, r0
 8010e28:	460d      	mov	r5, r1
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	4640      	mov	r0, r8
 8010e30:	4649      	mov	r1, r9
 8010e32:	f7ef fc01 	bl	8000638 <__aeabi_dmul>
 8010e36:	4b62      	ldr	r3, [pc, #392]	; (8010fc0 <__ieee754_pow+0x770>)
 8010e38:	4680      	mov	r8, r0
 8010e3a:	4689      	mov	r9, r1
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	4620      	mov	r0, r4
 8010e40:	4629      	mov	r1, r5
 8010e42:	f7ef fa41 	bl	80002c8 <__aeabi_dsub>
 8010e46:	4632      	mov	r2, r6
 8010e48:	463b      	mov	r3, r7
 8010e4a:	f7ef fa3d 	bl	80002c8 <__aeabi_dsub>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	4650      	mov	r0, sl
 8010e54:	4659      	mov	r1, fp
 8010e56:	f7ef fa37 	bl	80002c8 <__aeabi_dsub>
 8010e5a:	ec53 2b18 	vmov	r2, r3, d8
 8010e5e:	f7ef fbeb 	bl	8000638 <__aeabi_dmul>
 8010e62:	4622      	mov	r2, r4
 8010e64:	4606      	mov	r6, r0
 8010e66:	460f      	mov	r7, r1
 8010e68:	462b      	mov	r3, r5
 8010e6a:	ec51 0b19 	vmov	r0, r1, d9
 8010e6e:	f7ef fbe3 	bl	8000638 <__aeabi_dmul>
 8010e72:	4602      	mov	r2, r0
 8010e74:	460b      	mov	r3, r1
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	f7ef fa27 	bl	80002cc <__adddf3>
 8010e7e:	4606      	mov	r6, r0
 8010e80:	460f      	mov	r7, r1
 8010e82:	4602      	mov	r2, r0
 8010e84:	460b      	mov	r3, r1
 8010e86:	4640      	mov	r0, r8
 8010e88:	4649      	mov	r1, r9
 8010e8a:	f7ef fa1f 	bl	80002cc <__adddf3>
 8010e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8010f88 <__ieee754_pow+0x738>)
 8010e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e94:	2000      	movs	r0, #0
 8010e96:	4604      	mov	r4, r0
 8010e98:	460d      	mov	r5, r1
 8010e9a:	f7ef fbcd 	bl	8000638 <__aeabi_dmul>
 8010e9e:	4642      	mov	r2, r8
 8010ea0:	ec41 0b18 	vmov	d8, r0, r1
 8010ea4:	464b      	mov	r3, r9
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	f7ef fa0d 	bl	80002c8 <__aeabi_dsub>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	f7ef fa07 	bl	80002c8 <__aeabi_dsub>
 8010eba:	a335      	add	r3, pc, #212	; (adr r3, 8010f90 <__ieee754_pow+0x740>)
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f7ef fbba 	bl	8000638 <__aeabi_dmul>
 8010ec4:	a334      	add	r3, pc, #208	; (adr r3, 8010f98 <__ieee754_pow+0x748>)
 8010ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eca:	4606      	mov	r6, r0
 8010ecc:	460f      	mov	r7, r1
 8010ece:	4620      	mov	r0, r4
 8010ed0:	4629      	mov	r1, r5
 8010ed2:	f7ef fbb1 	bl	8000638 <__aeabi_dmul>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
 8010eda:	4630      	mov	r0, r6
 8010edc:	4639      	mov	r1, r7
 8010ede:	f7ef f9f5 	bl	80002cc <__adddf3>
 8010ee2:	9a07      	ldr	r2, [sp, #28]
 8010ee4:	4b37      	ldr	r3, [pc, #220]	; (8010fc4 <__ieee754_pow+0x774>)
 8010ee6:	4413      	add	r3, r2
 8010ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eec:	f7ef f9ee 	bl	80002cc <__adddf3>
 8010ef0:	4682      	mov	sl, r0
 8010ef2:	9805      	ldr	r0, [sp, #20]
 8010ef4:	468b      	mov	fp, r1
 8010ef6:	f7ef fb35 	bl	8000564 <__aeabi_i2d>
 8010efa:	9a07      	ldr	r2, [sp, #28]
 8010efc:	4b32      	ldr	r3, [pc, #200]	; (8010fc8 <__ieee754_pow+0x778>)
 8010efe:	4413      	add	r3, r2
 8010f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f04:	4606      	mov	r6, r0
 8010f06:	460f      	mov	r7, r1
 8010f08:	4652      	mov	r2, sl
 8010f0a:	465b      	mov	r3, fp
 8010f0c:	ec51 0b18 	vmov	r0, r1, d8
 8010f10:	f7ef f9dc 	bl	80002cc <__adddf3>
 8010f14:	4642      	mov	r2, r8
 8010f16:	464b      	mov	r3, r9
 8010f18:	f7ef f9d8 	bl	80002cc <__adddf3>
 8010f1c:	4632      	mov	r2, r6
 8010f1e:	463b      	mov	r3, r7
 8010f20:	f7ef f9d4 	bl	80002cc <__adddf3>
 8010f24:	2000      	movs	r0, #0
 8010f26:	4632      	mov	r2, r6
 8010f28:	463b      	mov	r3, r7
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	460d      	mov	r5, r1
 8010f2e:	f7ef f9cb 	bl	80002c8 <__aeabi_dsub>
 8010f32:	4642      	mov	r2, r8
 8010f34:	464b      	mov	r3, r9
 8010f36:	f7ef f9c7 	bl	80002c8 <__aeabi_dsub>
 8010f3a:	ec53 2b18 	vmov	r2, r3, d8
 8010f3e:	f7ef f9c3 	bl	80002c8 <__aeabi_dsub>
 8010f42:	4602      	mov	r2, r0
 8010f44:	460b      	mov	r3, r1
 8010f46:	4650      	mov	r0, sl
 8010f48:	4659      	mov	r1, fp
 8010f4a:	e610      	b.n	8010b6e <__ieee754_pow+0x31e>
 8010f4c:	2401      	movs	r4, #1
 8010f4e:	e6a1      	b.n	8010c94 <__ieee754_pow+0x444>
 8010f50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010fa0 <__ieee754_pow+0x750>
 8010f54:	e617      	b.n	8010b86 <__ieee754_pow+0x336>
 8010f56:	bf00      	nop
 8010f58:	4a454eef 	.word	0x4a454eef
 8010f5c:	3fca7e28 	.word	0x3fca7e28
 8010f60:	93c9db65 	.word	0x93c9db65
 8010f64:	3fcd864a 	.word	0x3fcd864a
 8010f68:	a91d4101 	.word	0xa91d4101
 8010f6c:	3fd17460 	.word	0x3fd17460
 8010f70:	518f264d 	.word	0x518f264d
 8010f74:	3fd55555 	.word	0x3fd55555
 8010f78:	db6fabff 	.word	0xdb6fabff
 8010f7c:	3fdb6db6 	.word	0x3fdb6db6
 8010f80:	33333303 	.word	0x33333303
 8010f84:	3fe33333 	.word	0x3fe33333
 8010f88:	e0000000 	.word	0xe0000000
 8010f8c:	3feec709 	.word	0x3feec709
 8010f90:	dc3a03fd 	.word	0xdc3a03fd
 8010f94:	3feec709 	.word	0x3feec709
 8010f98:	145b01f5 	.word	0x145b01f5
 8010f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8010fa0:	00000000 	.word	0x00000000
 8010fa4:	3ff00000 	.word	0x3ff00000
 8010fa8:	7ff00000 	.word	0x7ff00000
 8010fac:	43400000 	.word	0x43400000
 8010fb0:	0003988e 	.word	0x0003988e
 8010fb4:	000bb679 	.word	0x000bb679
 8010fb8:	08011e68 	.word	0x08011e68
 8010fbc:	3ff00000 	.word	0x3ff00000
 8010fc0:	40080000 	.word	0x40080000
 8010fc4:	08011e88 	.word	0x08011e88
 8010fc8:	08011e78 	.word	0x08011e78
 8010fcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80112a4 <__ieee754_pow+0xa54>)
 8010fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd2:	4640      	mov	r0, r8
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	f7ef f979 	bl	80002cc <__adddf3>
 8010fda:	4622      	mov	r2, r4
 8010fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8010fe0:	462b      	mov	r3, r5
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	f7ef f96f 	bl	80002c8 <__aeabi_dsub>
 8010fea:	4602      	mov	r2, r0
 8010fec:	460b      	mov	r3, r1
 8010fee:	ec51 0b1a 	vmov	r0, r1, d10
 8010ff2:	f7ef fdb1 	bl	8000b58 <__aeabi_dcmpgt>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	f47f ae04 	bne.w	8010c04 <__ieee754_pow+0x3b4>
 8010ffc:	4aa4      	ldr	r2, [pc, #656]	; (8011290 <__ieee754_pow+0xa40>)
 8010ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011002:	4293      	cmp	r3, r2
 8011004:	f340 8108 	ble.w	8011218 <__ieee754_pow+0x9c8>
 8011008:	151b      	asrs	r3, r3, #20
 801100a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801100e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011012:	fa4a f303 	asr.w	r3, sl, r3
 8011016:	445b      	add	r3, fp
 8011018:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801101c:	4e9d      	ldr	r6, [pc, #628]	; (8011294 <__ieee754_pow+0xa44>)
 801101e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011022:	4116      	asrs	r6, r2
 8011024:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011028:	2000      	movs	r0, #0
 801102a:	ea23 0106 	bic.w	r1, r3, r6
 801102e:	f1c2 0214 	rsb	r2, r2, #20
 8011032:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011036:	fa4a fa02 	asr.w	sl, sl, r2
 801103a:	f1bb 0f00 	cmp.w	fp, #0
 801103e:	4602      	mov	r2, r0
 8011040:	460b      	mov	r3, r1
 8011042:	4620      	mov	r0, r4
 8011044:	4629      	mov	r1, r5
 8011046:	bfb8      	it	lt
 8011048:	f1ca 0a00 	rsblt	sl, sl, #0
 801104c:	f7ef f93c 	bl	80002c8 <__aeabi_dsub>
 8011050:	ec41 0b19 	vmov	d9, r0, r1
 8011054:	4642      	mov	r2, r8
 8011056:	464b      	mov	r3, r9
 8011058:	ec51 0b19 	vmov	r0, r1, d9
 801105c:	f7ef f936 	bl	80002cc <__adddf3>
 8011060:	a37b      	add	r3, pc, #492	; (adr r3, 8011250 <__ieee754_pow+0xa00>)
 8011062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011066:	2000      	movs	r0, #0
 8011068:	4604      	mov	r4, r0
 801106a:	460d      	mov	r5, r1
 801106c:	f7ef fae4 	bl	8000638 <__aeabi_dmul>
 8011070:	ec53 2b19 	vmov	r2, r3, d9
 8011074:	4606      	mov	r6, r0
 8011076:	460f      	mov	r7, r1
 8011078:	4620      	mov	r0, r4
 801107a:	4629      	mov	r1, r5
 801107c:	f7ef f924 	bl	80002c8 <__aeabi_dsub>
 8011080:	4602      	mov	r2, r0
 8011082:	460b      	mov	r3, r1
 8011084:	4640      	mov	r0, r8
 8011086:	4649      	mov	r1, r9
 8011088:	f7ef f91e 	bl	80002c8 <__aeabi_dsub>
 801108c:	a372      	add	r3, pc, #456	; (adr r3, 8011258 <__ieee754_pow+0xa08>)
 801108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011092:	f7ef fad1 	bl	8000638 <__aeabi_dmul>
 8011096:	a372      	add	r3, pc, #456	; (adr r3, 8011260 <__ieee754_pow+0xa10>)
 8011098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109c:	4680      	mov	r8, r0
 801109e:	4689      	mov	r9, r1
 80110a0:	4620      	mov	r0, r4
 80110a2:	4629      	mov	r1, r5
 80110a4:	f7ef fac8 	bl	8000638 <__aeabi_dmul>
 80110a8:	4602      	mov	r2, r0
 80110aa:	460b      	mov	r3, r1
 80110ac:	4640      	mov	r0, r8
 80110ae:	4649      	mov	r1, r9
 80110b0:	f7ef f90c 	bl	80002cc <__adddf3>
 80110b4:	4604      	mov	r4, r0
 80110b6:	460d      	mov	r5, r1
 80110b8:	4602      	mov	r2, r0
 80110ba:	460b      	mov	r3, r1
 80110bc:	4630      	mov	r0, r6
 80110be:	4639      	mov	r1, r7
 80110c0:	f7ef f904 	bl	80002cc <__adddf3>
 80110c4:	4632      	mov	r2, r6
 80110c6:	463b      	mov	r3, r7
 80110c8:	4680      	mov	r8, r0
 80110ca:	4689      	mov	r9, r1
 80110cc:	f7ef f8fc 	bl	80002c8 <__aeabi_dsub>
 80110d0:	4602      	mov	r2, r0
 80110d2:	460b      	mov	r3, r1
 80110d4:	4620      	mov	r0, r4
 80110d6:	4629      	mov	r1, r5
 80110d8:	f7ef f8f6 	bl	80002c8 <__aeabi_dsub>
 80110dc:	4642      	mov	r2, r8
 80110de:	4606      	mov	r6, r0
 80110e0:	460f      	mov	r7, r1
 80110e2:	464b      	mov	r3, r9
 80110e4:	4640      	mov	r0, r8
 80110e6:	4649      	mov	r1, r9
 80110e8:	f7ef faa6 	bl	8000638 <__aeabi_dmul>
 80110ec:	a35e      	add	r3, pc, #376	; (adr r3, 8011268 <__ieee754_pow+0xa18>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	4604      	mov	r4, r0
 80110f4:	460d      	mov	r5, r1
 80110f6:	f7ef fa9f 	bl	8000638 <__aeabi_dmul>
 80110fa:	a35d      	add	r3, pc, #372	; (adr r3, 8011270 <__ieee754_pow+0xa20>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef f8e2 	bl	80002c8 <__aeabi_dsub>
 8011104:	4622      	mov	r2, r4
 8011106:	462b      	mov	r3, r5
 8011108:	f7ef fa96 	bl	8000638 <__aeabi_dmul>
 801110c:	a35a      	add	r3, pc, #360	; (adr r3, 8011278 <__ieee754_pow+0xa28>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef f8db 	bl	80002cc <__adddf3>
 8011116:	4622      	mov	r2, r4
 8011118:	462b      	mov	r3, r5
 801111a:	f7ef fa8d 	bl	8000638 <__aeabi_dmul>
 801111e:	a358      	add	r3, pc, #352	; (adr r3, 8011280 <__ieee754_pow+0xa30>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef f8d0 	bl	80002c8 <__aeabi_dsub>
 8011128:	4622      	mov	r2, r4
 801112a:	462b      	mov	r3, r5
 801112c:	f7ef fa84 	bl	8000638 <__aeabi_dmul>
 8011130:	a355      	add	r3, pc, #340	; (adr r3, 8011288 <__ieee754_pow+0xa38>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef f8c9 	bl	80002cc <__adddf3>
 801113a:	4622      	mov	r2, r4
 801113c:	462b      	mov	r3, r5
 801113e:	f7ef fa7b 	bl	8000638 <__aeabi_dmul>
 8011142:	4602      	mov	r2, r0
 8011144:	460b      	mov	r3, r1
 8011146:	4640      	mov	r0, r8
 8011148:	4649      	mov	r1, r9
 801114a:	f7ef f8bd 	bl	80002c8 <__aeabi_dsub>
 801114e:	4604      	mov	r4, r0
 8011150:	460d      	mov	r5, r1
 8011152:	4602      	mov	r2, r0
 8011154:	460b      	mov	r3, r1
 8011156:	4640      	mov	r0, r8
 8011158:	4649      	mov	r1, r9
 801115a:	f7ef fa6d 	bl	8000638 <__aeabi_dmul>
 801115e:	2200      	movs	r2, #0
 8011160:	ec41 0b19 	vmov	d9, r0, r1
 8011164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011168:	4620      	mov	r0, r4
 801116a:	4629      	mov	r1, r5
 801116c:	f7ef f8ac 	bl	80002c8 <__aeabi_dsub>
 8011170:	4602      	mov	r2, r0
 8011172:	460b      	mov	r3, r1
 8011174:	ec51 0b19 	vmov	r0, r1, d9
 8011178:	f7ef fb88 	bl	800088c <__aeabi_ddiv>
 801117c:	4632      	mov	r2, r6
 801117e:	4604      	mov	r4, r0
 8011180:	460d      	mov	r5, r1
 8011182:	463b      	mov	r3, r7
 8011184:	4640      	mov	r0, r8
 8011186:	4649      	mov	r1, r9
 8011188:	f7ef fa56 	bl	8000638 <__aeabi_dmul>
 801118c:	4632      	mov	r2, r6
 801118e:	463b      	mov	r3, r7
 8011190:	f7ef f89c 	bl	80002cc <__adddf3>
 8011194:	4602      	mov	r2, r0
 8011196:	460b      	mov	r3, r1
 8011198:	4620      	mov	r0, r4
 801119a:	4629      	mov	r1, r5
 801119c:	f7ef f894 	bl	80002c8 <__aeabi_dsub>
 80111a0:	4642      	mov	r2, r8
 80111a2:	464b      	mov	r3, r9
 80111a4:	f7ef f890 	bl	80002c8 <__aeabi_dsub>
 80111a8:	460b      	mov	r3, r1
 80111aa:	4602      	mov	r2, r0
 80111ac:	493a      	ldr	r1, [pc, #232]	; (8011298 <__ieee754_pow+0xa48>)
 80111ae:	2000      	movs	r0, #0
 80111b0:	f7ef f88a 	bl	80002c8 <__aeabi_dsub>
 80111b4:	ec41 0b10 	vmov	d0, r0, r1
 80111b8:	ee10 3a90 	vmov	r3, s1
 80111bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80111c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111c4:	da2b      	bge.n	801121e <__ieee754_pow+0x9ce>
 80111c6:	4650      	mov	r0, sl
 80111c8:	f000 f966 	bl	8011498 <scalbn>
 80111cc:	ec51 0b10 	vmov	r0, r1, d0
 80111d0:	ec53 2b18 	vmov	r2, r3, d8
 80111d4:	f7ff bbed 	b.w	80109b2 <__ieee754_pow+0x162>
 80111d8:	4b30      	ldr	r3, [pc, #192]	; (801129c <__ieee754_pow+0xa4c>)
 80111da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80111de:	429e      	cmp	r6, r3
 80111e0:	f77f af0c 	ble.w	8010ffc <__ieee754_pow+0x7ac>
 80111e4:	4b2e      	ldr	r3, [pc, #184]	; (80112a0 <__ieee754_pow+0xa50>)
 80111e6:	440b      	add	r3, r1
 80111e8:	4303      	orrs	r3, r0
 80111ea:	d009      	beq.n	8011200 <__ieee754_pow+0x9b0>
 80111ec:	ec51 0b18 	vmov	r0, r1, d8
 80111f0:	2200      	movs	r2, #0
 80111f2:	2300      	movs	r3, #0
 80111f4:	f7ef fc92 	bl	8000b1c <__aeabi_dcmplt>
 80111f8:	3800      	subs	r0, #0
 80111fa:	bf18      	it	ne
 80111fc:	2001      	movne	r0, #1
 80111fe:	e447      	b.n	8010a90 <__ieee754_pow+0x240>
 8011200:	4622      	mov	r2, r4
 8011202:	462b      	mov	r3, r5
 8011204:	f7ef f860 	bl	80002c8 <__aeabi_dsub>
 8011208:	4642      	mov	r2, r8
 801120a:	464b      	mov	r3, r9
 801120c:	f7ef fc9a 	bl	8000b44 <__aeabi_dcmpge>
 8011210:	2800      	cmp	r0, #0
 8011212:	f43f aef3 	beq.w	8010ffc <__ieee754_pow+0x7ac>
 8011216:	e7e9      	b.n	80111ec <__ieee754_pow+0x99c>
 8011218:	f04f 0a00 	mov.w	sl, #0
 801121c:	e71a      	b.n	8011054 <__ieee754_pow+0x804>
 801121e:	ec51 0b10 	vmov	r0, r1, d0
 8011222:	4619      	mov	r1, r3
 8011224:	e7d4      	b.n	80111d0 <__ieee754_pow+0x980>
 8011226:	491c      	ldr	r1, [pc, #112]	; (8011298 <__ieee754_pow+0xa48>)
 8011228:	2000      	movs	r0, #0
 801122a:	f7ff bb30 	b.w	801088e <__ieee754_pow+0x3e>
 801122e:	2000      	movs	r0, #0
 8011230:	2100      	movs	r1, #0
 8011232:	f7ff bb2c 	b.w	801088e <__ieee754_pow+0x3e>
 8011236:	4630      	mov	r0, r6
 8011238:	4639      	mov	r1, r7
 801123a:	f7ff bb28 	b.w	801088e <__ieee754_pow+0x3e>
 801123e:	9204      	str	r2, [sp, #16]
 8011240:	f7ff bb7a 	b.w	8010938 <__ieee754_pow+0xe8>
 8011244:	2300      	movs	r3, #0
 8011246:	f7ff bb64 	b.w	8010912 <__ieee754_pow+0xc2>
 801124a:	bf00      	nop
 801124c:	f3af 8000 	nop.w
 8011250:	00000000 	.word	0x00000000
 8011254:	3fe62e43 	.word	0x3fe62e43
 8011258:	fefa39ef 	.word	0xfefa39ef
 801125c:	3fe62e42 	.word	0x3fe62e42
 8011260:	0ca86c39 	.word	0x0ca86c39
 8011264:	be205c61 	.word	0xbe205c61
 8011268:	72bea4d0 	.word	0x72bea4d0
 801126c:	3e663769 	.word	0x3e663769
 8011270:	c5d26bf1 	.word	0xc5d26bf1
 8011274:	3ebbbd41 	.word	0x3ebbbd41
 8011278:	af25de2c 	.word	0xaf25de2c
 801127c:	3f11566a 	.word	0x3f11566a
 8011280:	16bebd93 	.word	0x16bebd93
 8011284:	3f66c16c 	.word	0x3f66c16c
 8011288:	5555553e 	.word	0x5555553e
 801128c:	3fc55555 	.word	0x3fc55555
 8011290:	3fe00000 	.word	0x3fe00000
 8011294:	000fffff 	.word	0x000fffff
 8011298:	3ff00000 	.word	0x3ff00000
 801129c:	4090cbff 	.word	0x4090cbff
 80112a0:	3f6f3400 	.word	0x3f6f3400
 80112a4:	652b82fe 	.word	0x652b82fe
 80112a8:	3c971547 	.word	0x3c971547

080112ac <__ieee754_sqrt>:
 80112ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b0:	ec55 4b10 	vmov	r4, r5, d0
 80112b4:	4e55      	ldr	r6, [pc, #340]	; (801140c <__ieee754_sqrt+0x160>)
 80112b6:	43ae      	bics	r6, r5
 80112b8:	ee10 0a10 	vmov	r0, s0
 80112bc:	ee10 3a10 	vmov	r3, s0
 80112c0:	462a      	mov	r2, r5
 80112c2:	4629      	mov	r1, r5
 80112c4:	d110      	bne.n	80112e8 <__ieee754_sqrt+0x3c>
 80112c6:	ee10 2a10 	vmov	r2, s0
 80112ca:	462b      	mov	r3, r5
 80112cc:	f7ef f9b4 	bl	8000638 <__aeabi_dmul>
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	4620      	mov	r0, r4
 80112d6:	4629      	mov	r1, r5
 80112d8:	f7ee fff8 	bl	80002cc <__adddf3>
 80112dc:	4604      	mov	r4, r0
 80112de:	460d      	mov	r5, r1
 80112e0:	ec45 4b10 	vmov	d0, r4, r5
 80112e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e8:	2d00      	cmp	r5, #0
 80112ea:	dc10      	bgt.n	801130e <__ieee754_sqrt+0x62>
 80112ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80112f0:	4330      	orrs	r0, r6
 80112f2:	d0f5      	beq.n	80112e0 <__ieee754_sqrt+0x34>
 80112f4:	b15d      	cbz	r5, 801130e <__ieee754_sqrt+0x62>
 80112f6:	ee10 2a10 	vmov	r2, s0
 80112fa:	462b      	mov	r3, r5
 80112fc:	ee10 0a10 	vmov	r0, s0
 8011300:	f7ee ffe2 	bl	80002c8 <__aeabi_dsub>
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	f7ef fac0 	bl	800088c <__aeabi_ddiv>
 801130c:	e7e6      	b.n	80112dc <__ieee754_sqrt+0x30>
 801130e:	1512      	asrs	r2, r2, #20
 8011310:	d074      	beq.n	80113fc <__ieee754_sqrt+0x150>
 8011312:	07d4      	lsls	r4, r2, #31
 8011314:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011318:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801131c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011320:	bf5e      	ittt	pl
 8011322:	0fda      	lsrpl	r2, r3, #31
 8011324:	005b      	lslpl	r3, r3, #1
 8011326:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801132a:	2400      	movs	r4, #0
 801132c:	0fda      	lsrs	r2, r3, #31
 801132e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011332:	107f      	asrs	r7, r7, #1
 8011334:	005b      	lsls	r3, r3, #1
 8011336:	2516      	movs	r5, #22
 8011338:	4620      	mov	r0, r4
 801133a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801133e:	1886      	adds	r6, r0, r2
 8011340:	428e      	cmp	r6, r1
 8011342:	bfde      	ittt	le
 8011344:	1b89      	suble	r1, r1, r6
 8011346:	18b0      	addle	r0, r6, r2
 8011348:	18a4      	addle	r4, r4, r2
 801134a:	0049      	lsls	r1, r1, #1
 801134c:	3d01      	subs	r5, #1
 801134e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011352:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011356:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801135a:	d1f0      	bne.n	801133e <__ieee754_sqrt+0x92>
 801135c:	462a      	mov	r2, r5
 801135e:	f04f 0e20 	mov.w	lr, #32
 8011362:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011366:	4281      	cmp	r1, r0
 8011368:	eb06 0c05 	add.w	ip, r6, r5
 801136c:	dc02      	bgt.n	8011374 <__ieee754_sqrt+0xc8>
 801136e:	d113      	bne.n	8011398 <__ieee754_sqrt+0xec>
 8011370:	459c      	cmp	ip, r3
 8011372:	d811      	bhi.n	8011398 <__ieee754_sqrt+0xec>
 8011374:	f1bc 0f00 	cmp.w	ip, #0
 8011378:	eb0c 0506 	add.w	r5, ip, r6
 801137c:	da43      	bge.n	8011406 <__ieee754_sqrt+0x15a>
 801137e:	2d00      	cmp	r5, #0
 8011380:	db41      	blt.n	8011406 <__ieee754_sqrt+0x15a>
 8011382:	f100 0801 	add.w	r8, r0, #1
 8011386:	1a09      	subs	r1, r1, r0
 8011388:	459c      	cmp	ip, r3
 801138a:	bf88      	it	hi
 801138c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011390:	eba3 030c 	sub.w	r3, r3, ip
 8011394:	4432      	add	r2, r6
 8011396:	4640      	mov	r0, r8
 8011398:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801139c:	f1be 0e01 	subs.w	lr, lr, #1
 80113a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80113a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80113a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80113ac:	d1db      	bne.n	8011366 <__ieee754_sqrt+0xba>
 80113ae:	430b      	orrs	r3, r1
 80113b0:	d006      	beq.n	80113c0 <__ieee754_sqrt+0x114>
 80113b2:	1c50      	adds	r0, r2, #1
 80113b4:	bf13      	iteet	ne
 80113b6:	3201      	addne	r2, #1
 80113b8:	3401      	addeq	r4, #1
 80113ba:	4672      	moveq	r2, lr
 80113bc:	f022 0201 	bicne.w	r2, r2, #1
 80113c0:	1063      	asrs	r3, r4, #1
 80113c2:	0852      	lsrs	r2, r2, #1
 80113c4:	07e1      	lsls	r1, r4, #31
 80113c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80113ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80113ce:	bf48      	it	mi
 80113d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80113d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80113d8:	4614      	mov	r4, r2
 80113da:	e781      	b.n	80112e0 <__ieee754_sqrt+0x34>
 80113dc:	0ad9      	lsrs	r1, r3, #11
 80113de:	3815      	subs	r0, #21
 80113e0:	055b      	lsls	r3, r3, #21
 80113e2:	2900      	cmp	r1, #0
 80113e4:	d0fa      	beq.n	80113dc <__ieee754_sqrt+0x130>
 80113e6:	02cd      	lsls	r5, r1, #11
 80113e8:	d50a      	bpl.n	8011400 <__ieee754_sqrt+0x154>
 80113ea:	f1c2 0420 	rsb	r4, r2, #32
 80113ee:	fa23 f404 	lsr.w	r4, r3, r4
 80113f2:	1e55      	subs	r5, r2, #1
 80113f4:	4093      	lsls	r3, r2
 80113f6:	4321      	orrs	r1, r4
 80113f8:	1b42      	subs	r2, r0, r5
 80113fa:	e78a      	b.n	8011312 <__ieee754_sqrt+0x66>
 80113fc:	4610      	mov	r0, r2
 80113fe:	e7f0      	b.n	80113e2 <__ieee754_sqrt+0x136>
 8011400:	0049      	lsls	r1, r1, #1
 8011402:	3201      	adds	r2, #1
 8011404:	e7ef      	b.n	80113e6 <__ieee754_sqrt+0x13a>
 8011406:	4680      	mov	r8, r0
 8011408:	e7bd      	b.n	8011386 <__ieee754_sqrt+0xda>
 801140a:	bf00      	nop
 801140c:	7ff00000 	.word	0x7ff00000

08011410 <with_errno>:
 8011410:	b570      	push	{r4, r5, r6, lr}
 8011412:	4604      	mov	r4, r0
 8011414:	460d      	mov	r5, r1
 8011416:	4616      	mov	r6, r2
 8011418:	f7fc fd6e 	bl	800def8 <__errno>
 801141c:	4629      	mov	r1, r5
 801141e:	6006      	str	r6, [r0, #0]
 8011420:	4620      	mov	r0, r4
 8011422:	bd70      	pop	{r4, r5, r6, pc}

08011424 <xflow>:
 8011424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011426:	4614      	mov	r4, r2
 8011428:	461d      	mov	r5, r3
 801142a:	b108      	cbz	r0, 8011430 <xflow+0xc>
 801142c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011430:	e9cd 2300 	strd	r2, r3, [sp]
 8011434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011438:	4620      	mov	r0, r4
 801143a:	4629      	mov	r1, r5
 801143c:	f7ef f8fc 	bl	8000638 <__aeabi_dmul>
 8011440:	2222      	movs	r2, #34	; 0x22
 8011442:	b003      	add	sp, #12
 8011444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011448:	f7ff bfe2 	b.w	8011410 <with_errno>

0801144c <__math_uflow>:
 801144c:	b508      	push	{r3, lr}
 801144e:	2200      	movs	r2, #0
 8011450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011454:	f7ff ffe6 	bl	8011424 <xflow>
 8011458:	ec41 0b10 	vmov	d0, r0, r1
 801145c:	bd08      	pop	{r3, pc}

0801145e <__math_oflow>:
 801145e:	b508      	push	{r3, lr}
 8011460:	2200      	movs	r2, #0
 8011462:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011466:	f7ff ffdd 	bl	8011424 <xflow>
 801146a:	ec41 0b10 	vmov	d0, r0, r1
 801146e:	bd08      	pop	{r3, pc}

08011470 <fabs>:
 8011470:	ec51 0b10 	vmov	r0, r1, d0
 8011474:	ee10 2a10 	vmov	r2, s0
 8011478:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801147c:	ec43 2b10 	vmov	d0, r2, r3
 8011480:	4770      	bx	lr

08011482 <finite>:
 8011482:	b082      	sub	sp, #8
 8011484:	ed8d 0b00 	vstr	d0, [sp]
 8011488:	9801      	ldr	r0, [sp, #4]
 801148a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801148e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011492:	0fc0      	lsrs	r0, r0, #31
 8011494:	b002      	add	sp, #8
 8011496:	4770      	bx	lr

08011498 <scalbn>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	ec55 4b10 	vmov	r4, r5, d0
 801149e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80114a2:	4606      	mov	r6, r0
 80114a4:	462b      	mov	r3, r5
 80114a6:	b99a      	cbnz	r2, 80114d0 <scalbn+0x38>
 80114a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80114ac:	4323      	orrs	r3, r4
 80114ae:	d036      	beq.n	801151e <scalbn+0x86>
 80114b0:	4b39      	ldr	r3, [pc, #228]	; (8011598 <scalbn+0x100>)
 80114b2:	4629      	mov	r1, r5
 80114b4:	ee10 0a10 	vmov	r0, s0
 80114b8:	2200      	movs	r2, #0
 80114ba:	f7ef f8bd 	bl	8000638 <__aeabi_dmul>
 80114be:	4b37      	ldr	r3, [pc, #220]	; (801159c <scalbn+0x104>)
 80114c0:	429e      	cmp	r6, r3
 80114c2:	4604      	mov	r4, r0
 80114c4:	460d      	mov	r5, r1
 80114c6:	da10      	bge.n	80114ea <scalbn+0x52>
 80114c8:	a32b      	add	r3, pc, #172	; (adr r3, 8011578 <scalbn+0xe0>)
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	e03a      	b.n	8011546 <scalbn+0xae>
 80114d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80114d4:	428a      	cmp	r2, r1
 80114d6:	d10c      	bne.n	80114f2 <scalbn+0x5a>
 80114d8:	ee10 2a10 	vmov	r2, s0
 80114dc:	4620      	mov	r0, r4
 80114de:	4629      	mov	r1, r5
 80114e0:	f7ee fef4 	bl	80002cc <__adddf3>
 80114e4:	4604      	mov	r4, r0
 80114e6:	460d      	mov	r5, r1
 80114e8:	e019      	b.n	801151e <scalbn+0x86>
 80114ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80114ee:	460b      	mov	r3, r1
 80114f0:	3a36      	subs	r2, #54	; 0x36
 80114f2:	4432      	add	r2, r6
 80114f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80114f8:	428a      	cmp	r2, r1
 80114fa:	dd08      	ble.n	801150e <scalbn+0x76>
 80114fc:	2d00      	cmp	r5, #0
 80114fe:	a120      	add	r1, pc, #128	; (adr r1, 8011580 <scalbn+0xe8>)
 8011500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011504:	da1c      	bge.n	8011540 <scalbn+0xa8>
 8011506:	a120      	add	r1, pc, #128	; (adr r1, 8011588 <scalbn+0xf0>)
 8011508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801150c:	e018      	b.n	8011540 <scalbn+0xa8>
 801150e:	2a00      	cmp	r2, #0
 8011510:	dd08      	ble.n	8011524 <scalbn+0x8c>
 8011512:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801151a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801151e:	ec45 4b10 	vmov	d0, r4, r5
 8011522:	bd70      	pop	{r4, r5, r6, pc}
 8011524:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011528:	da19      	bge.n	801155e <scalbn+0xc6>
 801152a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801152e:	429e      	cmp	r6, r3
 8011530:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011534:	dd0a      	ble.n	801154c <scalbn+0xb4>
 8011536:	a112      	add	r1, pc, #72	; (adr r1, 8011580 <scalbn+0xe8>)
 8011538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d1e2      	bne.n	8011506 <scalbn+0x6e>
 8011540:	a30f      	add	r3, pc, #60	; (adr r3, 8011580 <scalbn+0xe8>)
 8011542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011546:	f7ef f877 	bl	8000638 <__aeabi_dmul>
 801154a:	e7cb      	b.n	80114e4 <scalbn+0x4c>
 801154c:	a10a      	add	r1, pc, #40	; (adr r1, 8011578 <scalbn+0xe0>)
 801154e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d0b8      	beq.n	80114c8 <scalbn+0x30>
 8011556:	a10e      	add	r1, pc, #56	; (adr r1, 8011590 <scalbn+0xf8>)
 8011558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801155c:	e7b4      	b.n	80114c8 <scalbn+0x30>
 801155e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011562:	3236      	adds	r2, #54	; 0x36
 8011564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011568:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801156c:	4620      	mov	r0, r4
 801156e:	4b0c      	ldr	r3, [pc, #48]	; (80115a0 <scalbn+0x108>)
 8011570:	2200      	movs	r2, #0
 8011572:	e7e8      	b.n	8011546 <scalbn+0xae>
 8011574:	f3af 8000 	nop.w
 8011578:	c2f8f359 	.word	0xc2f8f359
 801157c:	01a56e1f 	.word	0x01a56e1f
 8011580:	8800759c 	.word	0x8800759c
 8011584:	7e37e43c 	.word	0x7e37e43c
 8011588:	8800759c 	.word	0x8800759c
 801158c:	fe37e43c 	.word	0xfe37e43c
 8011590:	c2f8f359 	.word	0xc2f8f359
 8011594:	81a56e1f 	.word	0x81a56e1f
 8011598:	43500000 	.word	0x43500000
 801159c:	ffff3cb0 	.word	0xffff3cb0
 80115a0:	3c900000 	.word	0x3c900000

080115a4 <_init>:
 80115a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115a6:	bf00      	nop
 80115a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115aa:	bc08      	pop	{r3}
 80115ac:	469e      	mov	lr, r3
 80115ae:	4770      	bx	lr

080115b0 <_fini>:
 80115b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b2:	bf00      	nop
 80115b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115b6:	bc08      	pop	{r3}
 80115b8:	469e      	mov	lr, r3
 80115ba:	4770      	bx	lr
