
ISU DSM Integration 02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  08010f20  08010f20  00020f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118e0  080118e0  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  080118e0  080118e0  000218e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118e8  080118e8  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118e8  080118e8  000218e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118ec  080118ec  000218ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080118f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d04  200000a0  08011990  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20002da4  08011990  00032da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e241  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000440c  00000000  00000000  0004e311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00052720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00054068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d3e  00000000  00000000  000557f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c1a  00000000  00000000  0007d536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6062  00000000  00000000  000a1150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001871b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e04  00000000  00000000  00187204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010f04 	.word	0x08010f04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08010f04 	.word	0x08010f04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000fd2:	23aa      	movs	r3, #170	; 0xaa
 8000fd4:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2316      	movs	r3, #22
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <read_calliberation_data+0x124>)
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	21ee      	movs	r1, #238	; 0xee
 8000fea:	4842      	ldr	r0, [pc, #264]	; (80010f4 <read_calliberation_data+0x128>)
 8000fec:	f005 fdb8 	bl	8006b60 <HAL_I2C_Mem_Read>
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <read_calliberation_data+0x124>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <read_calliberation_data+0x124>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <read_calliberation_data+0x12c>)
 8001004:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <read_calliberation_data+0x124>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <read_calliberation_data+0x124>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <read_calliberation_data+0x130>)
 800101a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <read_calliberation_data+0x124>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <read_calliberation_data+0x124>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <read_calliberation_data+0x134>)
 8001030:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <read_calliberation_data+0x124>)
 8001034:	799b      	ldrb	r3, [r3, #6]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <read_calliberation_data+0x124>)
 800103c:	79db      	ldrb	r3, [r3, #7]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <read_calliberation_data+0x138>)
 8001048:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <read_calliberation_data+0x124>)
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <read_calliberation_data+0x124>)
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <read_calliberation_data+0x13c>)
 8001060:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <read_calliberation_data+0x124>)
 8001064:	7a9b      	ldrb	r3, [r3, #10]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <read_calliberation_data+0x124>)
 800106c:	7adb      	ldrb	r3, [r3, #11]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <read_calliberation_data+0x140>)
 8001078:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <read_calliberation_data+0x124>)
 800107c:	7b1b      	ldrb	r3, [r3, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <read_calliberation_data+0x124>)
 8001084:	7b5b      	ldrb	r3, [r3, #13]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <read_calliberation_data+0x144>)
 800108e:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <read_calliberation_data+0x124>)
 8001092:	7b9b      	ldrb	r3, [r3, #14]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <read_calliberation_data+0x124>)
 800109a:	7bdb      	ldrb	r3, [r3, #15]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <read_calliberation_data+0x148>)
 80010a4:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <read_calliberation_data+0x124>)
 80010a8:	7c1b      	ldrb	r3, [r3, #16]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <read_calliberation_data+0x124>)
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <read_calliberation_data+0x14c>)
 80010ba:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <read_calliberation_data+0x124>)
 80010be:	7c9b      	ldrb	r3, [r3, #18]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <read_calliberation_data+0x124>)
 80010c6:	7cdb      	ldrb	r3, [r3, #19]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <read_calliberation_data+0x150>)
 80010d0:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <read_calliberation_data+0x124>)
 80010d4:	7d1b      	ldrb	r3, [r3, #20]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <read_calliberation_data+0x124>)
 80010dc:	7d5b      	ldrb	r3, [r3, #21]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <read_calliberation_data+0x154>)
 80010e6:	801a      	strh	r2, [r3, #0]

}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000104 	.word	0x20000104
 80010f4:	20000244 	.word	0x20000244
 80010f8:	200000bc 	.word	0x200000bc
 80010fc:	200000be 	.word	0x200000be
 8001100:	200000c0 	.word	0x200000c0
 8001104:	200000c2 	.word	0x200000c2
 8001108:	200000c4 	.word	0x200000c4
 800110c:	200000c6 	.word	0x200000c6
 8001110:	200000c8 	.word	0x200000c8
 8001114:	200000ca 	.word	0x200000ca
 8001118:	200000cc 	.word	0x200000cc
 800111c:	200000ce 	.word	0x200000ce
 8001120:	200000d0 	.word	0x200000d0

08001124 <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800112a:	232e      	movs	r3, #46	; 0x2e
 800112c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22f4      	movs	r2, #244	; 0xf4
 8001140:	21ee      	movs	r1, #238	; 0xee
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <Get_UTemp+0x60>)
 8001144:	f005 fc12 	bl	800696c <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001148:	2005      	movs	r0, #5
 800114a:	f003 ffab 	bl	80050a4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2302      	movs	r3, #2
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <Get_UTemp+0x64>)
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	22f6      	movs	r2, #246	; 0xf6
 8001160:	21ee      	movs	r1, #238	; 0xee
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <Get_UTemp+0x60>)
 8001164:	f005 fcfc 	bl	8006b60 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <Get_UTemp+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <Get_UTemp+0x64>)
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000244 	.word	0x20000244
 8001188:	20000120 	.word	0x20000120

0800118c <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001190:	f7ff ffc8 	bl	8001124 <Get_UTemp>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <BMP180_GetTemp+0x108>)
 800119a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <BMP180_GetTemp+0x108>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a3d      	ldr	r2, [pc, #244]	; (8001298 <BMP180_GetTemp+0x10c>)
 80011a2:	8812      	ldrh	r2, [r2, #0]
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9dc 	bl	8000564 <__aeabi_i2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	4b3a      	ldr	r3, [pc, #232]	; (800129c <BMP180_GetTemp+0x110>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9d5 	bl	8000564 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <BMP180_GetTemp+0x114>)
 80011c0:	f7ff fb64 	bl	800088c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7ff fa34 	bl	8000638 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcde 	bl	8000b98 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <BMP180_GetTemp+0x118>)
 80011e0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <BMP180_GetTemp+0x11c>)
 80011e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9bb 	bl	8000564 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <BMP180_GetTemp+0x120>)
 80011f4:	f7ff fa20 	bl	8000638 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <BMP180_GetTemp+0x124>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	461a      	mov	r2, r3
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <BMP180_GetTemp+0x118>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9a8 	bl	8000564 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff fb36 	bl	800088c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcb6 	bl	8000b98 <__aeabi_d2iz>
 800122c:	4603      	mov	r3, r0
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <BMP180_GetTemp+0x128>)
 8001230:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <BMP180_GetTemp+0x118>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <BMP180_GetTemp+0x128>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <BMP180_GetTemp+0x12c>)
 800123e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <BMP180_GetTemp+0x12c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3308      	adds	r3, #8
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f98c 	bl	8000564 <__aeabi_i2d>
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <BMP180_GetTemp+0x130>)
 8001252:	f7ff fb1b 	bl	800088c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc9b 	bl	8000b98 <__aeabi_d2iz>
 8001262:	4603      	mov	r3, r0
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <BMP180_GetTemp+0x134>)
 8001266:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <BMP180_GetTemp+0x134>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f979 	bl	8000564 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <BMP180_GetTemp+0x138>)
 8001278:	f7ff fb08 	bl	800088c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fcd0 	bl	8000c28 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	ee07 3a90 	vmov	s15, r3
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	200000d4 	.word	0x200000d4
 8001298:	200000c6 	.word	0x200000c6
 800129c:	200000c4 	.word	0x200000c4
 80012a0:	40e00000 	.word	0x40e00000
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	200000ce 	.word	0x200000ce
 80012ac:	40a00000 	.word	0x40a00000
 80012b0:	200000d0 	.word	0x200000d0
 80012b4:	200000e0 	.word	0x200000e0
 80012b8:	200000ec 	.word	0x200000ec
 80012bc:	40300000 	.word	0x40300000
 80012c0:	20000100 	.word	0x20000100
 80012c4:	40240000 	.word	0x40240000

080012c8 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3334      	adds	r3, #52	; 0x34
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	22f4      	movs	r2, #244	; 0xf4
 80012f2:	21ee      	movs	r1, #238	; 0xee
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <Get_UPress+0xb0>)
 80012f6:	f005 fb39 	bl	800696c <HAL_I2C_Mem_Write>

	switch (oss)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d81b      	bhi.n	8001338 <Get_UPress+0x70>
 8001300:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <Get_UPress+0x40>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	08001321 	.word	0x08001321
 8001310:	08001329 	.word	0x08001329
 8001314:	08001331 	.word	0x08001331
	{
		case (0):
			HAL_Delay (5);
 8001318:	2005      	movs	r0, #5
 800131a:	f003 fec3 	bl	80050a4 <HAL_Delay>
			break;
 800131e:	e00b      	b.n	8001338 <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001320:	2008      	movs	r0, #8
 8001322:	f003 febf 	bl	80050a4 <HAL_Delay>
			break;
 8001326:	e007      	b.n	8001338 <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 8001328:	200e      	movs	r0, #14
 800132a:	f003 febb 	bl	80050a4 <HAL_Delay>
			break;
 800132e:	e003      	b.n	8001338 <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001330:	201a      	movs	r0, #26
 8001332:	f003 feb7 	bl	80050a4 <HAL_Delay>
			break;
 8001336:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2303      	movs	r3, #3
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <Get_UPress+0xb4>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f6      	movs	r2, #246	; 0xf6
 800134a:	21ee      	movs	r1, #238	; 0xee
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <Get_UPress+0xb0>)
 800134e:	f005 fc07 	bl	8006b60 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <Get_UPress+0xb4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	041a      	lsls	r2, r3, #16
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Get_UPress+0xb4>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	4413      	add	r3, r2
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <Get_UPress+0xb4>)
 8001362:	7892      	ldrb	r2, [r2, #2]
 8001364:	441a      	add	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f1c3 0308 	rsb	r3, r3, #8
 800136c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000244 	.word	0x20000244
 800137c:	2000011c 	.word	0x2000011c

08001380 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff9d 	bl	80012c8 <Get_UPress>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4ba8      	ldr	r3, [pc, #672]	; (8001634 <BMP180_GetPress+0x2b4>)
 8001394:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <BMP180_GetPress+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4aa8      	ldr	r2, [pc, #672]	; (800163c <BMP180_GetPress+0x2bc>)
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8df 	bl	8000564 <__aeabi_i2d>
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <BMP180_GetPress+0x2c0>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8d8 	bl	8000564 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <BMP180_GetPress+0x2c4>)
 80013ba:	f7ff fa67 	bl	800088c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff f937 	bl	8000638 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbe1 	bl	8000b98 <__aeabi_d2iz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a9b      	ldr	r2, [pc, #620]	; (8001648 <BMP180_GetPress+0x2c8>)
 80013da:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013dc:	4b9b      	ldr	r3, [pc, #620]	; (800164c <BMP180_GetPress+0x2cc>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8be 	bl	8000564 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b98      	ldr	r3, [pc, #608]	; (8001650 <BMP180_GetPress+0x2d0>)
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4614      	mov	r4, r2
 80013f8:	461d      	mov	r5, r3
 80013fa:	4b96      	ldr	r3, [pc, #600]	; (8001654 <BMP180_GetPress+0x2d4>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	461a      	mov	r2, r3
 8001402:	4b91      	ldr	r3, [pc, #580]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8ab 	bl	8000564 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff fa39 	bl	800088c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbb9 	bl	8000b98 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	4a8b      	ldr	r2, [pc, #556]	; (8001658 <BMP180_GetPress+0x2d8>)
 800142a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800142c:	4b86      	ldr	r3, [pc, #536]	; (8001648 <BMP180_GetPress+0x2c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b89      	ldr	r3, [pc, #548]	; (8001658 <BMP180_GetPress+0x2d8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a89      	ldr	r2, [pc, #548]	; (800165c <BMP180_GetPress+0x2dc>)
 8001438:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <BMP180_GetPress+0x2dc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001444:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <BMP180_GetPress+0x2e4>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f889 	bl	8000564 <__aeabi_i2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a81      	ldr	r2, [pc, #516]	; (8001660 <BMP180_GetPress+0x2e0>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f87e 	bl	8000564 <__aeabi_i2d>
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <BMP180_GetPress+0x2e8>)
 800146e:	f7ff fa0d 	bl	800088c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f8dd 	bl	8000638 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b71      	ldr	r3, [pc, #452]	; (8001650 <BMP180_GetPress+0x2d0>)
 800148c:	f7ff f9fe 	bl	800088c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fb7e 	bl	8000b98 <__aeabi_d2iz>
 800149c:	4603      	mov	r3, r0
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <BMP180_GetPress+0x2c8>)
 80014a0:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <BMP180_GetPress+0x2ec>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <BMP180_GetPress+0x2e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f856 	bl	8000564 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b64      	ldr	r3, [pc, #400]	; (8001650 <BMP180_GetPress+0x2d0>)
 80014be:	f7ff f9e5 	bl	800088c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb65 	bl	8000b98 <__aeabi_d2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a61      	ldr	r2, [pc, #388]	; (8001658 <BMP180_GetPress+0x2d8>)
 80014d2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014d4:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <BMP180_GetPress+0x2c8>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <BMP180_GetPress+0x2d8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a64      	ldr	r2, [pc, #400]	; (8001670 <BMP180_GetPress+0x2f0>)
 80014e0:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <BMP180_GetPress+0x2f4>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	4b61      	ldr	r3, [pc, #388]	; (8001670 <BMP180_GetPress+0x2f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	441a      	add	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	3302      	adds	r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <BMP180_GetPress+0x17e>
 80014fc:	3303      	adds	r3, #3
 80014fe:	109b      	asrs	r3, r3, #2
 8001500:	461a      	mov	r2, r3
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <BMP180_GetPress+0x2f8>)
 8001504:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <BMP180_GetPress+0x2fc>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	461a      	mov	r2, r3
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f824 	bl	8000564 <__aeabi_i2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <BMP180_GetPress+0x300>)
 8001522:	f7ff f9b3 	bl	800088c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb33 	bl	8000b98 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	4a44      	ldr	r2, [pc, #272]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001536:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <BMP180_GetPress+0x304>)
 800153a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f810 	bl	8000564 <__aeabi_i2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <BMP180_GetPress+0x2e0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a44      	ldr	r2, [pc, #272]	; (8001660 <BMP180_GetPress+0x2e0>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f805 	bl	8000564 <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <BMP180_GetPress+0x2e8>)
 8001560:	f7ff f994 	bl	800088c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7ff f864 	bl	8000638 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b42      	ldr	r3, [pc, #264]	; (8001688 <BMP180_GetPress+0x308>)
 800157e:	f7ff f985 	bl	800088c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb05 	bl	8000b98 <__aeabi_d2iz>
 800158e:	4603      	mov	r3, r0
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <BMP180_GetPress+0x2d8>)
 8001592:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <BMP180_GetPress+0x2d8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4413      	add	r3, r2
 800159e:	3302      	adds	r3, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffdf 	bl	8000564 <__aeabi_i2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <BMP180_GetPress+0x30c>)
 80015ac:	f7ff f96e 	bl	800088c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff faee 	bl	8000b98 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <BMP180_GetPress+0x2f0>)
 80015c0:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <BMP180_GetPress+0x310>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <BMP180_GetPress+0x2f0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb5 	bl	8000544 <__aeabi_ui2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <BMP180_GetPress+0x2c4>)
 80015e0:	f7ff f954 	bl	800088c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fafc 	bl	8000be8 <__aeabi_d2uiz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <BMP180_GetPress+0x314>)
 80015f4:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <BMP180_GetPress+0x2b4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <BMP180_GetPress+0x2f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa41 f202 	asr.w	r2, r1, r2
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <BMP180_GetPress+0x318>)
 8001612:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <BMP180_GetPress+0x318>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db41      	blt.n	80016a0 <BMP180_GetPress+0x320>
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <BMP180_GetPress+0x318>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <BMP180_GetPress+0x314>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <BMP180_GetPress+0x31c>)
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e040      	b.n	80016b4 <BMP180_GetPress+0x334>
 8001632:	bf00      	nop
 8001634:	200000d8 	.word	0x200000d8
 8001638:	200000d4 	.word	0x200000d4
 800163c:	200000c6 	.word	0x200000c6
 8001640:	200000c4 	.word	0x200000c4
 8001644:	40e00000 	.word	0x40e00000
 8001648:	200000dc 	.word	0x200000dc
 800164c:	200000ce 	.word	0x200000ce
 8001650:	40a00000 	.word	0x40a00000
 8001654:	200000d0 	.word	0x200000d0
 8001658:	200000e0 	.word	0x200000e0
 800165c:	200000ec 	.word	0x200000ec
 8001660:	200000f4 	.word	0x200000f4
 8001664:	200000ca 	.word	0x200000ca
 8001668:	40b00000 	.word	0x40b00000
 800166c:	200000be 	.word	0x200000be
 8001670:	200000e4 	.word	0x200000e4
 8001674:	200000bc 	.word	0x200000bc
 8001678:	200000e8 	.word	0x200000e8
 800167c:	200000c0 	.word	0x200000c0
 8001680:	40c00000 	.word	0x40c00000
 8001684:	200000c8 	.word	0x200000c8
 8001688:	40f00000 	.word	0x40f00000
 800168c:	40100000 	.word	0x40100000
 8001690:	200000c2 	.word	0x200000c2
 8001694:	200000f0 	.word	0x200000f0
 8001698:	200000f8 	.word	0x200000f8
 800169c:	200000fc 	.word	0x200000fc
	else Press = (B7/B4)*2;
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <BMP180_GetPress+0x43c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <BMP180_GetPress+0x440>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <BMP180_GetPress+0x444>)
 80016b2:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <BMP180_GetPress+0x444>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_i2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <BMP180_GetPress+0x448>)
 80016c4:	f7ff f8e2 	bl	800088c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <BMP180_GetPress+0x444>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff45 	bl	8000564 <__aeabi_i2d>
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <BMP180_GetPress+0x448>)
 80016e0:	f7ff f8d4 	bl	800088c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe ffa4 	bl	8000638 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa4e 	bl	8000b98 <__aeabi_d2iz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a33      	ldr	r2, [pc, #204]	; (80017cc <BMP180_GetPress+0x44c>)
 8001700:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <BMP180_GetPress+0x44c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f640 32de 	movw	r2, #3038	; 0xbde
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff28 	bl	8000564 <__aeabi_i2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <BMP180_GetPress+0x450>)
 800171a:	f7ff f8b7 	bl	800088c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa37 	bl	8000b98 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <BMP180_GetPress+0x44c>)
 800172e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <BMP180_GetPress+0x444>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <BMP180_GetPress+0x454>)
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff12 	bl	8000564 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <BMP180_GetPress+0x450>)
 8001746:	f7ff f8a1 	bl	800088c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa21 	bl	8000b98 <__aeabi_d2iz>
 8001756:	4603      	mov	r3, r0
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <BMP180_GetPress+0x458>)
 800175a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <BMP180_GetPress+0x444>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feff 	bl	8000564 <__aeabi_i2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <BMP180_GetPress+0x44c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <BMP180_GetPress+0x458>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fef3 	bl	8000564 <__aeabi_i2d>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <BMP180_GetPress+0x45c>)
 8001784:	f7ff f882 	bl	800088c <__aeabi_ddiv>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fd9c 	bl	80002cc <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9fc 	bl	8000b98 <__aeabi_d2iz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <BMP180_GetPress+0x444>)
 80017a4:	6013      	str	r3, [r2, #0]
	return Press;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <BMP180_GetPress+0x444>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	200000f8 	.word	0x200000f8
 80017c0:	200000f0 	.word	0x200000f0
 80017c4:	200000fc 	.word	0x200000fc
 80017c8:	40700000 	.word	0x40700000
 80017cc:	200000dc 	.word	0x200000dc
 80017d0:	40f00000 	.word	0x40f00000
 80017d4:	ffffe343 	.word	0xffffe343
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	40300000 	.word	0x40300000

080017e0 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fdc9 	bl	8001380 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <BMP180_GetAlt+0x88>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800186c <BMP180_GetAlt+0x8c>
 80017fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001802:	ee16 0a90 	vmov	r0, s13
 8001806:	f7fe febf 	bl	8000588 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001858 <BMP180_GetAlt+0x78>
 8001812:	ec43 2b10 	vmov	d0, r2, r3
 8001816:	f00e fc59 	bl	80100cc <pow>
 800181a:	ec53 2b10 	vmov	r2, r3, d0
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	4913      	ldr	r1, [pc, #76]	; (8001870 <BMP180_GetAlt+0x90>)
 8001824:	f7fe fd50 	bl	80002c8 <__aeabi_dsub>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a30b      	add	r3, pc, #44	; (adr r3, 8001860 <BMP180_GetAlt+0x80>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9f1 	bl	8000c28 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	ee07 3a90 	vmov	s15, r3
}
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	cc745124 	.word	0xcc745124
 800185c:	3fc85b95 	.word	0x3fc85b95
 8001860:	00000000 	.word	0x00000000
 8001864:	40e5a540 	.word	0x40e5a540
 8001868:	200000fc 	.word	0x200000fc
 800186c:	47c5e680 	.word	0x47c5e680
 8001870:	3ff00000 	.word	0x3ff00000

08001874 <BMP180_Start>:

void BMP180_Start (void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001878:	f7ff fba8 	bl	8000fcc <read_calliberation_data>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <shiftIn>:
#include "HX710B.h"

enum HX_MODE { NONE, DIFF_10Hz, TEMP_40Hz, DIFF_40Hz};
const byte HX_MODE = DIFF_40Hz;

uint8_t shiftIn(GPIO_TypeDef* dataPort, uint16_t dataPin, GPIO_TypeDef* clockPort, uint16_t clockPin, uint8_t bitOrder) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	460b      	mov	r3, r1
 800188e:	817b      	strh	r3, [r7, #10]
 8001890:	4613      	mov	r3, r2
 8001892:	813b      	strh	r3, [r7, #8]
	uint8_t value = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	for (i = 0; i < 8; ++i) {
 8001898:	2300      	movs	r3, #0
 800189a:	75bb      	strb	r3, [r7, #22]
 800189c:	e035      	b.n	800190a <shiftIn+0x8a>
		HAL_GPIO_WritePin(clockPort,clockPin, 1);
 800189e:	893b      	ldrh	r3, [r7, #8]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 ff03 	bl	80066b0 <HAL_GPIO_WritePin>
		if (bitOrder == LSBFIRST)
 80018aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d110      	bne.n	80018d4 <shiftIn+0x54>
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << i;
 80018b2:	897b      	ldrh	r3, [r7, #10]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f004 fee2 	bl	8006680 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	7dbb      	ldrb	r3, [r7, #22]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e011      	b.n	80018f8 <shiftIn+0x78>
		else
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << (7 - i);
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	4619      	mov	r1, r3
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f004 fed1 	bl	8006680 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	7dbb      	ldrb	r3, [r7, #22]
 80018e4:	f1c3 0307 	rsb	r3, r3, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(clockPort, clockPin, 0);
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fed6 	bl	80066b0 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; ++i) {
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	3301      	adds	r3, #1
 8001908:	75bb      	strb	r3, [r7, #22]
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d9c6      	bls.n	800189e <shiftIn+0x1e>
	}
	return value;
 8001910:	7dfb      	ldrb	r3, [r7, #23]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <readHX>:

unsigned long readHX() {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b087      	sub	sp, #28
 8001920:	af02      	add	r7, sp, #8

  // pulse clock line to start a reading
  for (char i = 0; i < HX_MODE; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e00e      	b.n	8001946 <readHX+0x2a>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 1);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192e:	4827      	ldr	r0, [pc, #156]	; (80019cc <readHX+0xb0>)
 8001930:	f004 febe 	bl	80066b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4824      	ldr	r0, [pc, #144]	; (80019cc <readHX+0xb0>)
 800193c:	f004 feb8 	bl	80066b0 <HAL_GPIO_WritePin>
  for (char i = 0; i < HX_MODE; i++) {
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3301      	adds	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	2203      	movs	r2, #3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4293      	cmp	r3, r2
 800194c:	d3ec      	bcc.n	8001928 <readHX+0xc>
  }

  // wait for the reading to finish
  while (HAL_GPIO_ReadPin(NCP_DAT_GPIO_Port,NCP_DAT_Pin)) {}
 800194e:	bf00      	nop
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <readHX+0xb0>)
 8001956:	f004 fe93 	bl	8006680 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f7      	bne.n	8001950 <readHX+0x34>

  // read the 24-bit pressure as 3 bytes using SPI
  byte data[3];
  for (byte j = 3; j--;) {
 8001960:	2303      	movs	r3, #3
 8001962:	73bb      	strb	r3, [r7, #14]
 8001964:	e011      	b.n	800198a <readHX+0x6e>
    data[j] = shiftIn(NCP_DAT_GPIO_Port, NCP_DAT_Pin, NCP_SCK_GPIO_Port, NCP_SCK_Pin, MSBFIRST);
 8001966:	7bbc      	ldrb	r4, [r7, #14]
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	4a16      	ldr	r2, [pc, #88]	; (80019cc <readHX+0xb0>)
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <readHX+0xb0>)
 8001978:	f7ff ff82 	bl	8001880 <shiftIn>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	f104 0310 	add.w	r3, r4, #16
 8001984:	443b      	add	r3, r7
 8001986:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for (byte j = 3; j--;) {
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	73ba      	strb	r2, [r7, #14]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e8      	bne.n	8001966 <readHX+0x4a>
  }

  data[2] ^= 0x80;  // see note
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800199a:	43db      	mvns	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	71bb      	strb	r3, [r7, #6]

  // shift the 3 bytes into a large integer
  long result=0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  result += (long)data[2] << 16;
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	4413      	add	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
  result += (long)data[1] << 8;
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  result += (long)data[0];
 80019b8:	793b      	ldrb	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]

  return result;
 80019c2:	68bb      	ldr	r3, [r7, #8]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40020000 	.word	0x40020000

080019d0 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	4834      	ldr	r0, [pc, #208]	; (8001ab4 <Max6675_Read_Temp+0xe4>)
 80019e2:	f004 fe65 	bl	80066b0 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80019e6:	2332      	movs	r3, #50	; 0x32
 80019e8:	2201      	movs	r2, #1
 80019ea:	4933      	ldr	r1, [pc, #204]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 80019ec:	4833      	ldr	r0, [pc, #204]	; (8001abc <Max6675_Read_Temp+0xec>)
 80019ee:	f006 fe36 	bl	800865e <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80019f2:	2201      	movs	r2, #1
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <Max6675_Read_Temp+0xe4>)
 80019f8:	f004 fe5a 	bl	80066b0 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a08:	701a      	strb	r2, [r3, #0]
Error=0;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d02b      	beq.n	8001a70 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d120      	bne.n	8001a62 <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001a20:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <Max6675_Read_Temp+0xf8>)
 8001a22:	f007 fa4f 	bl	8008ec4 <HAL_TIM_Base_Start>
		while(timer_val<1)
 8001a26:	e011      	b.n	8001a4c <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d103      	bne.n	8001a38 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
				break;
 8001a36:	e00d      	b.n	8001a54 <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <Max6675_Read_Temp+0xf8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <Max6675_Read_Temp+0xfc>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a4a:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0e9      	beq.n	8001a28 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e006      	b.n	8001a70 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d102      	bne.n	8001a70 <Max6675_Read_Temp+0xa0>
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	10db      	asrs	r3, r3, #3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8001a9c:	20fa      	movs	r0, #250	; 0xfa
 8001a9e:	f003 fb01 	bl	80050a4 <HAL_Delay>
return Temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	ee07 3a90 	vmov	s15, r3
}
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	20000124 	.word	0x20000124
 8001abc:	200002ec 	.word	0x200002ec
 8001ac0:	20000126 	.word	0x20000126
 8001ac4:	20000127 	.word	0x20000127
 8001ac8:	2000039c 	.word	0x2000039c
 8001acc:	d1b71759 	.word	0xd1b71759
 8001ad0:	20000442 	.word	0x20000442
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b08c      	sub	sp, #48	; 0x30
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <decodeGGA+0x17c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001aee:	e004      	b.n	8001afa <decodeGGA+0x22>
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <decodeGGA+0x17c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <decodeGGA+0x17c>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <decodeGGA+0x17c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b2c      	cmp	r3, #44	; 0x2c
 8001b08:	d1f2      	bne.n	8001af0 <decodeGGA+0x18>
	inx++;
 8001b0a:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <decodeGGA+0x17c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <decodeGGA+0x17c>)
 8001b12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001b14:	e004      	b.n	8001b20 <decodeGGA+0x48>
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <decodeGGA+0x17c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <decodeGGA+0x17c>)
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <decodeGGA+0x17c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b2e:	d1f2      	bne.n	8001b16 <decodeGGA+0x3e>
	inx++;
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <decodeGGA+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <decodeGGA+0x17c>)
 8001b38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001b3a:	e004      	b.n	8001b46 <decodeGGA+0x6e>
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <decodeGGA+0x17c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <decodeGGA+0x17c>)
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <decodeGGA+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b2c      	cmp	r3, #44	; 0x2c
 8001b54:	d1f2      	bne.n	8001b3c <decodeGGA+0x64>
	inx++;
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <decodeGGA+0x17c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <decodeGGA+0x17c>)
 8001b5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001b60:	e004      	b.n	8001b6c <decodeGGA+0x94>
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <decodeGGA+0x17c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <decodeGGA+0x17c>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <decodeGGA+0x17c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b2c      	cmp	r3, #44	; 0x2c
 8001b7a:	d1f2      	bne.n	8001b62 <decodeGGA+0x8a>
	inx++;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <decodeGGA+0x17c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <decodeGGA+0x17c>)
 8001b84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001b86:	e004      	b.n	8001b92 <decodeGGA+0xba>
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <decodeGGA+0x17c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <decodeGGA+0x17c>)
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <decodeGGA+0x17c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba0:	d1f2      	bne.n	8001b88 <decodeGGA+0xb0>
	inx++;
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <decodeGGA+0x17c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <decodeGGA+0x17c>)
 8001baa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001bac:	e004      	b.n	8001bb8 <decodeGGA+0xe0>
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <decodeGGA+0x17c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <decodeGGA+0x17c>)
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <decodeGGA+0x17c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001bc6:	d1f2      	bne.n	8001bae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <decodeGGA+0x17c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <decodeGGA+0x17c>)
 8001bd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <decodeGGA+0x17c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b31      	cmp	r3, #49	; 0x31
 8001be0:	d00f      	beq.n	8001c02 <decodeGGA+0x12a>
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <decodeGGA+0x17c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b32      	cmp	r3, #50	; 0x32
 8001bf0:	d007      	beq.n	8001c02 <decodeGGA+0x12a>
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <decodeGGA+0x17c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b36      	cmp	r3, #54	; 0x36
 8001c00:	d106      	bne.n	8001c10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <decodeGGA+0x17c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c0e:	e009      	b.n	8001c24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001c16:	2301      	movs	r3, #1
 8001c18:	e2fd      	b.n	8002216 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <decodeGGA+0x17c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <decodeGGA+0x17c>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <decodeGGA+0x17c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2c      	cmp	r3, #44	; 0x2c
 8001c32:	d1f2      	bne.n	8001c1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <decodeGGA+0x17c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <decodeGGA+0x17c>)
 8001c3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	220c      	movs	r2, #12
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00b fdb0 	bl	800d7ac <memset>
	i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c50:	e016      	b.n	8001c80 <decodeGGA+0x1a8>
 8001c52:	bf00      	nop
 8001c54:	20000128 	.word	0x20000128
	{
		buffer[i] = GGAbuffer[inx];
 8001c58:	4bab      	ldr	r3, [pc, #684]	; (8001f08 <decodeGGA+0x430>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	7819      	ldrb	r1, [r3, #0]
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	4413      	add	r3, r2
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
		i++;
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	3301      	adds	r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001c76:	4ba4      	ldr	r3, [pc, #656]	; (8001f08 <decodeGGA+0x430>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4aa2      	ldr	r2, [pc, #648]	; (8001f08 <decodeGGA+0x430>)
 8001c7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <decodeGGA+0x430>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c8e:	d1e3      	bne.n	8001c58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00b fd29 	bl	800d6ec <atoi>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <decodeGGA+0x434>)
 8001c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca2:	1312      	asrs	r2, r2, #12
 8001ca4:	17db      	asrs	r3, r3, #31
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	4b99      	ldr	r3, [pc, #612]	; (8001f10 <decodeGGA+0x438>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4999      	ldr	r1, [pc, #612]	; (8001f14 <decodeGGA+0x43c>)
 8001cae:	fb81 0103 	smull	r0, r1, r1, r3
 8001cb2:	1149      	asrs	r1, r1, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1acb      	subs	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a97      	ldr	r2, [pc, #604]	; (8001f18 <decodeGGA+0x440>)
 8001cbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00b fd12 	bl	800d6ec <atoi>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <decodeGGA+0x43c>)
 8001ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd0:	1152      	asrs	r2, r2, #5
 8001cd2:	17db      	asrs	r3, r3, #31
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	4a8f      	ldr	r2, [pc, #572]	; (8001f14 <decodeGGA+0x43c>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1151      	asrs	r1, r2, #5
 8001cde:	17da      	asrs	r2, r3, #31
 8001ce0:	1a8a      	subs	r2, r1, r2
 8001ce2:	2164      	movs	r1, #100	; 0x64
 8001ce4:	fb01 f202 	mul.w	r2, r1, r2
 8001ce8:	1a9a      	subs	r2, r3, r2
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <decodeGGA+0x438>)
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <decodeGGA+0x43c>)
 8001cf0:	fb83 0301 	smull	r0, r3, r3, r1
 8001cf4:	1158      	asrs	r0, r3, #5
 8001cf6:	17cb      	asrs	r3, r1, #31
 8001cf8:	1ac3      	subs	r3, r0, r3
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	fb00 f303 	mul.w	r3, r0, r3
 8001d00:	1acb      	subs	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <decodeGGA+0x444>)
 8001d06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <decodeGGA+0x444>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b3b      	cmp	r3, #59	; 0x3b
 8001d0e:	dd09      	ble.n	8001d24 <decodeGGA+0x24c>
	{
		min = min-60;
 8001d10:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <decodeGGA+0x444>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3b3c      	subs	r3, #60	; 0x3c
 8001d16:	4a81      	ldr	r2, [pc, #516]	; (8001f1c <decodeGGA+0x444>)
 8001d18:	6013      	str	r3, [r2, #0]
		hr++;
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <decodeGGA+0x440>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a7d      	ldr	r2, [pc, #500]	; (8001f18 <decodeGGA+0x440>)
 8001d22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001d24:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <decodeGGA+0x440>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da09      	bge.n	8001d40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <decodeGGA+0x440>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3318      	adds	r3, #24
 8001d32:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <decodeGGA+0x440>)
 8001d34:	6013      	str	r3, [r2, #0]
		daychange--;
 8001d36:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <decodeGGA+0x448>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a78      	ldr	r2, [pc, #480]	; (8001f20 <decodeGGA+0x448>)
 8001d3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <decodeGGA+0x440>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b17      	cmp	r3, #23
 8001d46:	dd09      	ble.n	8001d5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <decodeGGA+0x440>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b18      	subs	r3, #24
 8001d4e:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <decodeGGA+0x440>)
 8001d50:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d52:	4b73      	ldr	r3, [pc, #460]	; (8001f20 <decodeGGA+0x448>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <decodeGGA+0x448>)
 8001d5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001d5c:	4b6e      	ldr	r3, [pc, #440]	; (8001f18 <decodeGGA+0x440>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <decodeGGA+0x444>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00b fcbb 	bl	800d6ec <atoi>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <decodeGGA+0x43c>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	1159      	asrs	r1, r3, #5
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	2164      	movs	r1, #100	; 0x64
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001d90:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <decodeGGA+0x430>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <decodeGGA+0x430>)
 8001d98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	220c      	movs	r2, #12
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00b fd02 	bl	800d7ac <memset>
	i=0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dac:	e013      	b.n	8001dd6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <decodeGGA+0x430>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	7819      	ldrb	r1, [r3, #0]
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
		i++;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	3301      	adds	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <decodeGGA+0x430>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <decodeGGA+0x430>)
 8001dd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <decodeGGA+0x430>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b2c      	cmp	r3, #44	; 0x2c
 8001de4:	d1e3      	bne.n	8001dae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa10 	bl	8000210 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d801      	bhi.n	8001dfa <decodeGGA+0x322>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e20d      	b.n	8002216 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00b fc74 	bl	800d6ec <atoi>
 8001e04:	4603      	mov	r3, r0
 8001e06:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001e0c:	e002      	b.n	8001e14 <decodeGGA+0x33c>
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	3301      	adds	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e20:	d1f5      	bne.n	8001e0e <decodeGGA+0x336>
	j++;
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	3301      	adds	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe f9ef 	bl	8000210 <strlen>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	4413      	add	r3, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00b fc52 	bl	800d6ec <atoi>
 8001e48:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb88 	bl	8000564 <__aeabi_i2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <decodeGGA+0x44c>)
 8001e5a:	f7fe fd17 	bl	800088c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f7fe fb7c 	bl	8000564 <__aeabi_i2d>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	460d      	mov	r5, r1
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	3302      	adds	r3, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb75 	bl	8000564 <__aeabi_i2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	ec43 2b11 	vmov	d1, r2, r3
 8001e82:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001f00 <decodeGGA+0x428>
 8001e86:	f00e f921 	bl	80100cc <pow>
 8001e8a:	ec53 2b10 	vmov	r2, r3, d0
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f7fe fcfb 	bl	800088c <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	f7fe fa15 	bl	80002cc <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe febd 	bl	8000c28 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]
	inx++;  
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <decodeGGA+0x430>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <decodeGGA+0x430>)
 8001ec0:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <decodeGGA+0x430>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <decodeGGA+0x430>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <decodeGGA+0x430>)
 8001eda:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <decodeGGA+0x430>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <decodeGGA+0x430>)
 8001ee4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	220c      	movs	r2, #12
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00b fc5c 	bl	800d7ac <memset>
	i=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001ef8:	e02a      	b.n	8001f50 <decodeGGA+0x478>
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	40240000 	.word	0x40240000
 8001f08:	20000128 	.word	0x20000128
 8001f0c:	68db8bad 	.word	0x68db8bad
 8001f10:	20000000 	.word	0x20000000
 8001f14:	51eb851f 	.word	0x51eb851f
 8001f18:	2000012c 	.word	0x2000012c
 8001f1c:	20000130 	.word	0x20000130
 8001f20:	20000140 	.word	0x20000140
 8001f24:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <decodeGGA+0x680>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
		i++;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	3301      	adds	r3, #1
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f46:	4b84      	ldr	r3, [pc, #528]	; (8002158 <decodeGGA+0x680>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a82      	ldr	r2, [pc, #520]	; (8002158 <decodeGGA+0x680>)
 8001f4e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <decodeGGA+0x680>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f5e:	d1e3      	bne.n	8001f28 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00b fbc1 	bl	800d6ec <atoi>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001f72:	e002      	b.n	8001f7a <decodeGGA+0x4a2>
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	3301      	adds	r3, #1
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7a:	f107 020c 	add.w	r2, r7, #12
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b2e      	cmp	r3, #46	; 0x2e
 8001f86:	d1f5      	bne.n	8001f74 <decodeGGA+0x49c>
	j++;
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f93c 	bl	8000210 <strlen>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00b fb9f 	bl	800d6ec <atoi>
 8001fae:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001fb0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fad5 	bl	8000564 <__aeabi_i2d>
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <decodeGGA+0x684>)
 8001fc0:	f7fe fc64 	bl	800088c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4690      	mov	r8, r2
 8001fca:	4699      	mov	r9, r3
 8001fcc:	69f8      	ldr	r0, [r7, #28]
 8001fce:	f7fe fac9 	bl	8000564 <__aeabi_i2d>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fac2 	bl	8000564 <__aeabi_i2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	ec43 2b11 	vmov	d1, r2, r3
 8001fe8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002150 <decodeGGA+0x678>
 8001fec:	f00e f86e 	bl	80100cc <pow>
 8001ff0:	ec53 2b10 	vmov	r2, r3, d0
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe fc48 	bl	800088c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe f962 	bl	80002cc <__adddf3>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fe0a 	bl	8000c28 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]
	inx++;
 800201e:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <decodeGGA+0x680>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <decodeGGA+0x680>)
 8002026:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <decodeGGA+0x680>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <decodeGGA+0x680>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <decodeGGA+0x680>)
 8002040:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <decodeGGA+0x680>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <decodeGGA+0x680>)
 800204a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <decodeGGA+0x680>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a41      	ldr	r2, [pc, #260]	; (8002158 <decodeGGA+0x680>)
 8002054:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002056:	4b40      	ldr	r3, [pc, #256]	; (8002158 <decodeGGA+0x680>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <decodeGGA+0x680>)
 800205e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	220c      	movs	r2, #12
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f00b fb9f 	bl	800d7ac <memset>
	i=0;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8002072:	e013      	b.n	800209c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <decodeGGA+0x680>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	7819      	ldrb	r1, [r3, #0]
 8002080:	f107 020c 	add.w	r2, r7, #12
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	4413      	add	r3, r2
 8002088:	460a      	mov	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
		i++;
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	3301      	adds	r3, #1
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <decodeGGA+0x680>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <decodeGGA+0x680>)
 800209a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <decodeGGA+0x680>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2c      	cmp	r3, #44	; 0x2c
 80020aa:	d1e3      	bne.n	8002074 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00b fb1b 	bl	800d6ec <atoi>
 80020b6:	4602      	mov	r2, r0
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <decodeGGA+0x680>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <decodeGGA+0x680>)
 80020c4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80020c6:	e004      	b.n	80020d2 <decodeGGA+0x5fa>
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <decodeGGA+0x680>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	4a22      	ldr	r2, [pc, #136]	; (8002158 <decodeGGA+0x680>)
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <decodeGGA+0x680>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b2c      	cmp	r3, #44	; 0x2c
 80020e0:	d1f2      	bne.n	80020c8 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <decodeGGA+0x680>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <decodeGGA+0x680>)
 80020ea:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	220c      	movs	r2, #12
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00b fb59 	bl	800d7ac <memset>
	i=0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80020fe:	e013      	b.n	8002128 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <decodeGGA+0x680>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	7819      	ldrb	r1, [r3, #0]
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	4413      	add	r3, r2
 8002114:	460a      	mov	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
		i++;
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	3301      	adds	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <decodeGGA+0x680>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <decodeGGA+0x680>)
 8002126:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <decodeGGA+0x680>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b2c      	cmp	r3, #44	; 0x2c
 8002136:	d1e3      	bne.n	8002100 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f00b fad5 	bl	800d6ec <atoi>
 8002142:	4603      	mov	r3, r0
 8002144:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800214a:	e00c      	b.n	8002166 <decodeGGA+0x68e>
 800214c:	f3af 8000 	nop.w
 8002150:	00000000 	.word	0x00000000
 8002154:	40240000 	.word	0x40240000
 8002158:	20000128 	.word	0x20000128
 800215c:	40590000 	.word	0x40590000
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	3301      	adds	r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b2e      	cmp	r3, #46	; 0x2e
 8002172:	d1f5      	bne.n	8002160 <decodeGGA+0x688>
	j++;
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	3301      	adds	r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f846 	bl	8000210 <strlen>
 8002184:	4602      	mov	r2, r0
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	4413      	add	r3, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f00b faa9 	bl	800d6ec <atoi>
 800219a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800219c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9df 	bl	8000564 <__aeabi_i2d>
 80021a6:	4604      	mov	r4, r0
 80021a8:	460d      	mov	r5, r1
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f7fe f9da 	bl	8000564 <__aeabi_i2d>
 80021b0:	4680      	mov	r8, r0
 80021b2:	4689      	mov	r9, r1
 80021b4:	6a38      	ldr	r0, [r7, #32]
 80021b6:	f7fe f9d5 	bl	8000564 <__aeabi_i2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	ec43 2b11 	vmov	d1, r2, r3
 80021c2:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002220 <decodeGGA+0x748>
 80021c6:	f00d ff81 	bl	80100cc <pow>
 80021ca:	ec53 2b10 	vmov	r2, r3, d0
 80021ce:	4640      	mov	r0, r8
 80021d0:	4649      	mov	r1, r9
 80021d2:	f7fe fb5b 	bl	800088c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe f875 	bl	80002cc <__adddf3>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fd1d 	bl	8000c28 <__aeabi_d2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	621a      	str	r2, [r3, #32]

	inx++;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <decodeGGA+0x750>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <decodeGGA+0x750>)
 8002200:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <decodeGGA+0x750>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8002214:	2300      	movs	r3, #0

}
 8002216:	4618      	mov	r0, r3
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002220:	00000000 	.word	0x00000000
 8002224:	40240000 	.word	0x40240000
 8002228:	20000128 	.word	0x20000128
 800222c:	00000000 	.word	0x00000000

08002230 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002234:	b090      	sub	sp, #64	; 0x40
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <decodeRMC+0x260>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8002246:	e004      	b.n	8002252 <decodeRMC+0x22>
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <decodeRMC+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a90      	ldr	r2, [pc, #576]	; (8002490 <decodeRMC+0x260>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <decodeRMC+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b2c      	cmp	r3, #44	; 0x2c
 8002260:	d1f2      	bne.n	8002248 <decodeRMC+0x18>
	inx++;
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <decodeRMC+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	4a89      	ldr	r2, [pc, #548]	; (8002490 <decodeRMC+0x260>)
 800226a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 800226c:	e004      	b.n	8002278 <decodeRMC+0x48>
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <decodeRMC+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a86      	ldr	r2, [pc, #536]	; (8002490 <decodeRMC+0x260>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b85      	ldr	r3, [pc, #532]	; (8002490 <decodeRMC+0x260>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b2c      	cmp	r3, #44	; 0x2c
 8002286:	d1f2      	bne.n	800226e <decodeRMC+0x3e>
	inx++;
 8002288:	4b81      	ldr	r3, [pc, #516]	; (8002490 <decodeRMC+0x260>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a80      	ldr	r2, [pc, #512]	; (8002490 <decodeRMC+0x260>)
 8002290:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <decodeRMC+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b41      	cmp	r3, #65	; 0x41
 80022a0:	d10d      	bne.n	80022be <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <decodeRMC+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a78      	ldr	r2, [pc, #480]	; (8002490 <decodeRMC+0x260>)
 80022b0:	6013      	str	r3, [r2, #0]
	inx++;
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <decodeRMC+0x260>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a75      	ldr	r2, [pc, #468]	; (8002490 <decodeRMC+0x260>)
 80022ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022bc:	e009      	b.n	80022d2 <decodeRMC+0xa2>
		rmc->isValid =0;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
		return 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e1d8      	b.n	800267a <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022c8:	4b71      	ldr	r3, [pc, #452]	; (8002490 <decodeRMC+0x260>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <decodeRMC+0x260>)
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <decodeRMC+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b2c      	cmp	r3, #44	; 0x2c
 80022e0:	d1f2      	bne.n	80022c8 <decodeRMC+0x98>
	inx++;
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <decodeRMC+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	4a69      	ldr	r2, [pc, #420]	; (8002490 <decodeRMC+0x260>)
 80022ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80022ec:	e004      	b.n	80022f8 <decodeRMC+0xc8>
 80022ee:	4b68      	ldr	r3, [pc, #416]	; (8002490 <decodeRMC+0x260>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a66      	ldr	r2, [pc, #408]	; (8002490 <decodeRMC+0x260>)
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b65      	ldr	r3, [pc, #404]	; (8002490 <decodeRMC+0x260>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b2c      	cmp	r3, #44	; 0x2c
 8002306:	d1f2      	bne.n	80022ee <decodeRMC+0xbe>
	inx++;
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <decodeRMC+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a60      	ldr	r2, [pc, #384]	; (8002490 <decodeRMC+0x260>)
 8002310:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8002312:	e004      	b.n	800231e <decodeRMC+0xee>
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <decodeRMC+0x260>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <decodeRMC+0x260>)
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <decodeRMC+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b2c      	cmp	r3, #44	; 0x2c
 800232c:	d1f2      	bne.n	8002314 <decodeRMC+0xe4>
	inx++;
 800232e:	4b58      	ldr	r3, [pc, #352]	; (8002490 <decodeRMC+0x260>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <decodeRMC+0x260>)
 8002336:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002338:	e004      	b.n	8002344 <decodeRMC+0x114>
 800233a:	4b55      	ldr	r3, [pc, #340]	; (8002490 <decodeRMC+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <decodeRMC+0x260>)
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <decodeRMC+0x260>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b2c      	cmp	r3, #44	; 0x2c
 8002352:	d1f2      	bne.n	800233a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <decodeRMC+0x260>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <decodeRMC+0x260>)
 800235c:	6013      	str	r3, [r2, #0]
	i=0;
 800235e:	2300      	movs	r3, #0
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	220c      	movs	r2, #12
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f00b fa1e 	bl	800d7ac <memset>
	while (RMCbuffer[inx] != ',')
 8002370:	e013      	b.n	800239a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <decodeRMC+0x260>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	f107 0208 	add.w	r2, r7, #8
 8002382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002384:	4413      	add	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
		i++;
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238c:	3301      	adds	r3, #1
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <decodeRMC+0x260>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <decodeRMC+0x260>)
 8002398:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <decodeRMC+0x260>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b2c      	cmp	r3, #44	; 0x2c
 80023a8:	d1e3      	bne.n	8002372 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d056      	beq.n	8002462 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f00b f997 	bl	800d6ec <atoi>
 80023be:	4603      	mov	r3, r0
 80023c0:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80023c6:	e002      	b.n	80023ce <decodeRMC+0x19e>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	3301      	adds	r3, #1
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ce:	f107 0208 	add.w	r2, r7, #8
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b2e      	cmp	r3, #46	; 0x2e
 80023da:	d1f5      	bne.n	80023c8 <decodeRMC+0x198>
		j++;
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	3301      	adds	r3, #1
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd ff12 	bl	8000210 <strlen>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	4413      	add	r3, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00b f975 	bl	800d6ec <atoi>
 8002402:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8002404:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8ab 	bl	8000564 <__aeabi_i2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002414:	f7fe f8a6 	bl	8000564 <__aeabi_i2d>
 8002418:	4680      	mov	r8, r0
 800241a:	4689      	mov	r9, r1
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f7fe f8a1 	bl	8000564 <__aeabi_i2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ec43 2b11 	vmov	d1, r2, r3
 800242a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002488 <decodeRMC+0x258>
 800242e:	f00d fe4d 	bl	80100cc <pow>
 8002432:	ec53 2b10 	vmov	r2, r3, d0
 8002436:	4640      	mov	r0, r8
 8002438:	4649      	mov	r1, r9
 800243a:	f7fe fa27 	bl	800088c <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff41 	bl	80002cc <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fbe9 	bl	8000c28 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e003      	b.n	800246a <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <decodeRMC+0x260>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <decodeRMC+0x260>)
 8002472:	6013      	str	r3, [r2, #0]
	i=0;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	220c      	movs	r2, #12
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f00b f993 	bl	800d7ac <memset>
	while (RMCbuffer[inx] != ',')
 8002486:	e019      	b.n	80024bc <decodeRMC+0x28c>
 8002488:	00000000 	.word	0x00000000
 800248c:	40240000 	.word	0x40240000
 8002490:	20000128 	.word	0x20000128
	{
		buffer[i] = RMCbuffer[inx];
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <decodeRMC+0x460>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	7819      	ldrb	r1, [r3, #0]
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a6:	4413      	add	r3, r2
 80024a8:	460a      	mov	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
		i++;
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	3301      	adds	r3, #1
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <decodeRMC+0x460>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	4a75      	ldr	r2, [pc, #468]	; (8002690 <decodeRMC+0x460>)
 80024ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024bc:	4b74      	ldr	r3, [pc, #464]	; (8002690 <decodeRMC+0x460>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b2c      	cmp	r3, #44	; 0x2c
 80024ca:	d1e3      	bne.n	8002494 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d056      	beq.n	8002584 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4618      	mov	r0, r3
 80024dc:	f00b f906 	bl	800d6ec <atoi>
 80024e0:	4603      	mov	r3, r0
 80024e2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80024e8:	e002      	b.n	80024f0 <decodeRMC+0x2c0>
 80024ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ec:	3301      	adds	r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	f107 0208 	add.w	r2, r7, #8
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b2e      	cmp	r3, #46	; 0x2e
 80024fc:	d1f5      	bne.n	80024ea <decodeRMC+0x2ba>
		j++;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	3301      	adds	r3, #1
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe81 	bl	8000210 <strlen>
 800250e:	4602      	mov	r2, r0
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	4413      	add	r3, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f00b f8e4 	bl	800d6ec <atoi>
 8002524:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8002526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f81a 	bl	8000564 <__aeabi_i2d>
 8002530:	4604      	mov	r4, r0
 8002532:	460d      	mov	r5, r1
 8002534:	69b8      	ldr	r0, [r7, #24]
 8002536:	f7fe f815 	bl	8000564 <__aeabi_i2d>
 800253a:	4680      	mov	r8, r0
 800253c:	4689      	mov	r9, r1
 800253e:	69f8      	ldr	r0, [r7, #28]
 8002540:	f7fe f810 	bl	8000564 <__aeabi_i2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	ec43 2b11 	vmov	d1, r2, r3
 800254c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002688 <decodeRMC+0x458>
 8002550:	f00d fdbc 	bl	80100cc <pow>
 8002554:	ec53 2b10 	vmov	r2, r3, d0
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fe f996 	bl	800088c <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb0 	bl	80002cc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb58 	bl	8000c28 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	e003      	b.n	800258c <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <decodeRMC+0x460>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <decodeRMC+0x460>)
 8002594:	6013      	str	r3, [r2, #0]
	i=0;
 8002596:	2300      	movs	r3, #0
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	220c      	movs	r2, #12
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f00b f902 	bl	800d7ac <memset>
	while (RMCbuffer[inx] != ',')
 80025a8:	e013      	b.n	80025d2 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <decodeRMC+0x460>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	f107 0208 	add.w	r2, r7, #8
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	4413      	add	r3, r2
 80025be:	460a      	mov	r2, r1
 80025c0:	701a      	strb	r2, [r3, #0]
		i++;
 80025c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c4:	3301      	adds	r3, #1
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <decodeRMC+0x460>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a30      	ldr	r2, [pc, #192]	; (8002690 <decodeRMC+0x460>)
 80025d0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <decodeRMC+0x460>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b2c      	cmp	r3, #44	; 0x2c
 80025e0:	d1e3      	bne.n	80025aa <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00b f880 	bl	800d6ec <atoi>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <decodeRMC+0x464>)
 80025f0:	fb82 1203 	smull	r1, r2, r2, r3
 80025f4:	1312      	asrs	r2, r2, #12
 80025f6:	17db      	asrs	r3, r3, #31
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a27      	ldr	r2, [pc, #156]	; (8002698 <decodeRMC+0x468>)
 80025fc:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	4618      	mov	r0, r3
 8002604:	f00b f872 	bl	800d6ec <atoi>
 8002608:	4603      	mov	r3, r0
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <decodeRMC+0x46c>)
 800260c:	fb82 1203 	smull	r1, r2, r2, r3
 8002610:	1152      	asrs	r2, r2, #5
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <decodeRMC+0x46c>)
 8002618:	fb83 1302 	smull	r1, r3, r3, r2
 800261c:	1159      	asrs	r1, r3, #5
 800261e:	17d3      	asrs	r3, r2, #31
 8002620:	1acb      	subs	r3, r1, r3
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <decodeRMC+0x470>)
 800262c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4618      	mov	r0, r3
 8002634:	f00b f85a 	bl	800d6ec <atoi>
 8002638:	4602      	mov	r2, r0
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <decodeRMC+0x46c>)
 800263c:	fb83 1302 	smull	r1, r3, r3, r2
 8002640:	1159      	asrs	r1, r3, #5
 8002642:	17d3      	asrs	r3, r2, #31
 8002644:	1acb      	subs	r3, r1, r3
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <decodeRMC+0x474>)
 8002650:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <decodeRMC+0x468>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <decodeRMC+0x478>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <decodeRMC+0x468>)
 800265e:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <decodeRMC+0x468>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <decodeRMC+0x470>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <decodeRMC+0x474>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	609a      	str	r2, [r3, #8]

	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3740      	adds	r7, #64	; 0x40
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	00000000 	.word	0x00000000
 800268c:	40240000 	.word	0x40240000
 8002690:	20000128 	.word	0x20000128
 8002694:	68db8bad 	.word	0x68db8bad
 8002698:	20000134 	.word	0x20000134
 800269c:	51eb851f 	.word	0x51eb851f
 80026a0:	20000138 	.word	0x20000138
 80026a4:	2000013c 	.word	0x2000013c
 80026a8:	20000140 	.word	0x20000140

080026ac <decToBcd>:
extern TIME_Handle time;
extern union Transmission trans1;

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <decToBcd+0x48>)
 80026b8:	fb82 1203 	smull	r1, r2, r2, r3
 80026bc:	1092      	asrs	r2, r2, #2
 80026be:	17db      	asrs	r3, r3, #31
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	b2d8      	uxtb	r0, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <decToBcd+0x48>)
 80026cc:	fb83 1302 	smull	r1, r3, r3, r2
 80026d0:	1099      	asrs	r1, r3, #2
 80026d2:	17d3      	asrs	r3, r2, #31
 80026d4:	1ac9      	subs	r1, r1, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	1ad1      	subs	r1, r2, r3
 80026e0:	b2cb      	uxtb	r3, r1
 80026e2:	4403      	add	r3, r0
 80026e4:	b2db      	uxtb	r3, r3
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	66666667 	.word	0x66666667

080026f8 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4413      	add	r3, r2
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <Set_Time>:

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af04      	add	r7, sp, #16
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	4603      	mov	r3, r0
 800273c:	71bb      	strb	r3, [r7, #6]
 800273e:	460b      	mov	r3, r1
 8002740:	717b      	strb	r3, [r7, #5]
 8002742:	4613      	mov	r3, r2
 8002744:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ffaf 	bl	80026ac <decToBcd>
 800274e:	4603      	mov	r3, r0
 8002750:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8002752:	79bb      	ldrb	r3, [r7, #6]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffa9 	bl	80026ac <decToBcd>
 800275a:	4603      	mov	r3, r0
 800275c:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 800275e:	797b      	ldrb	r3, [r7, #5]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ffa3 	bl	80026ac <decToBcd>
 8002766:	4603      	mov	r3, r0
 8002768:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 800276a:	793b      	ldrb	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff9d 	bl	80026ac <decToBcd>
 8002772:	4603      	mov	r3, r0
 8002774:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8002776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff96 	bl	80026ac <decToBcd>
 8002780:	4603      	mov	r3, r0
 8002782:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8002784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff8f 	bl	80026ac <decToBcd>
 800278e:	4603      	mov	r3, r0
 8002790:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8002792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff88 	bl	80026ac <decToBcd>
 800279c:	4603      	mov	r3, r0
 800279e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80027a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2307      	movs	r3, #7
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	2200      	movs	r2, #0
 80027b4:	21d0      	movs	r1, #208	; 0xd0
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <Set_Time+0x9c>)
 80027b8:	f004 f8d8 	bl	800696c <HAL_I2C_Mem_Write>
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	20000298 	.word	0x20000298

080027c8 <Get_Time>:
void Get_Time (void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	2307      	movs	r3, #7
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	463b      	mov	r3, r7
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	2200      	movs	r2, #0
 80027e0:	21d0      	movs	r1, #208	; 0xd0
 80027e2:	481f      	ldr	r0, [pc, #124]	; (8002860 <Get_Time+0x98>)
 80027e4:	f004 f9bc 	bl	8006b60 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80027e8:	783b      	ldrb	r3, [r7, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff84 	bl	80026f8 <bcdToDec>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <Get_Time+0x9c>)
 80027f6:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff7c 	bl	80026f8 <bcdToDec>
 8002800:	4603      	mov	r3, r0
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <Get_Time+0x9c>)
 8002806:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8002808:	78bb      	ldrb	r3, [r7, #2]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff74 	bl	80026f8 <bcdToDec>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <Get_Time+0x9c>)
 8002816:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff6c 	bl	80026f8 <bcdToDec>
 8002820:	4603      	mov	r3, r0
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <Get_Time+0x9c>)
 8002826:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8002828:	793b      	ldrb	r3, [r7, #4]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff64 	bl	80026f8 <bcdToDec>
 8002830:	4603      	mov	r3, r0
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <Get_Time+0x9c>)
 8002836:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8002838:	797b      	ldrb	r3, [r7, #5]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff5c 	bl	80026f8 <bcdToDec>
 8002840:	4603      	mov	r3, r0
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <Get_Time+0x9c>)
 8002846:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff54 	bl	80026f8 <bcdToDec>
 8002850:	4603      	mov	r3, r0
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <Get_Time+0x9c>)
 8002856:	719a      	strb	r2, [r3, #6]

}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000298 	.word	0x20000298
 8002864:	20000570 	.word	0x20000570

08002868 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002872:	4804      	ldr	r0, [pc, #16]	; (8002884 <SELECT+0x1c>)
 8002874:	f003 ff1c 	bl	80066b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002878:	2001      	movs	r0, #1
 800287a:	f002 fc13 	bl	80050a4 <HAL_Delay>
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40020400 	.word	0x40020400

08002888 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <DESELECT+0x1c>)
 8002894:	f003 ff0c 	bl	80066b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002898:	2001      	movs	r0, #1
 800289a:	f002 fc03 	bl	80050a4 <HAL_Delay>
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40020400 	.word	0x40020400

080028a8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80028b2:	bf00      	nop
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SPI_TxByte+0x30>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d1f8      	bne.n	80028b4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80028c2:	1df9      	adds	r1, r7, #7
 80028c4:	2364      	movs	r3, #100	; 0x64
 80028c6:	2201      	movs	r2, #1
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <SPI_TxByte+0x30>)
 80028ca:	f005 fd8c 	bl	80083e6 <HAL_SPI_Transmit>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000344 	.word	0x20000344

080028dc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80028e8:	bf00      	nop
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <SPI_TxBuffer+0x30>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d1f8      	bne.n	80028ea <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	2364      	movs	r3, #100	; 0x64
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <SPI_TxBuffer+0x30>)
 8002900:	f005 fd71 	bl	80083e6 <HAL_SPI_Transmit>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000344 	.word	0x20000344

08002910 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002916:	23ff      	movs	r3, #255	; 0xff
 8002918:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800291a:	bf00      	nop
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <SPI_RxByte+0x34>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d1f8      	bne.n	800291c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800292a:	1dba      	adds	r2, r7, #6
 800292c:	1df9      	adds	r1, r7, #7
 800292e:	2364      	movs	r3, #100	; 0x64
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2301      	movs	r3, #1
 8002934:	4803      	ldr	r0, [pc, #12]	; (8002944 <SPI_RxByte+0x34>)
 8002936:	f005 ffa3 	bl	8008880 <HAL_SPI_TransmitReceive>

	return data;
 800293a:	79bb      	ldrb	r3, [r7, #6]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000344 	.word	0x20000344

08002948 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002950:	f7ff ffde 	bl	8002910 <SPI_RxByte>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	701a      	strb	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <SD_ReadyWait+0x30>)
 800296c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002970:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002972:	f7ff ffcd 	bl	8002910 <SPI_RxByte>
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2bff      	cmp	r3, #255	; 0xff
 800297e:	d004      	beq.n	800298a <SD_ReadyWait+0x26>
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SD_ReadyWait+0x30>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f3      	bne.n	8002972 <SD_ReadyWait+0xe>

	return res;
 800298a:	79fb      	ldrb	r3, [r7, #7]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200026ee 	.word	0x200026ee

08002998 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800299e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80029a2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80029a4:	f7ff ff70 	bl	8002888 <DESELECT>
	for(int i = 0; i < 10; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e005      	b.n	80029ba <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80029ae:	20ff      	movs	r0, #255	; 0xff
 80029b0:	f7ff ff7a 	bl	80028a8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	ddf6      	ble.n	80029ae <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80029c0:	f7ff ff52 	bl	8002868 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80029d8:	2395      	movs	r3, #149	; 0x95
 80029da:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80029dc:	463b      	mov	r3, r7
 80029de:	2106      	movs	r1, #6
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff7b 	bl	80028dc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80029e6:	e002      	b.n	80029ee <SD_PowerOn+0x56>
	{
		cnt--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80029ee:	f7ff ff8f 	bl	8002910 <SPI_RxByte>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d002      	beq.n	80029fe <SD_PowerOn+0x66>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f4      	bne.n	80029e8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80029fe:	f7ff ff43 	bl	8002888 <DESELECT>
	SPI_TxByte(0XFF);
 8002a02:	20ff      	movs	r0, #255	; 0xff
 8002a04:	f7ff ff50 	bl	80028a8 <SPI_TxByte>

	PowerFlag = 1;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <SD_PowerOn+0x80>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000145 	.word	0x20000145

08002a1c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <SD_PowerOff+0x14>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	20000145 	.word	0x20000145

08002a34 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <SD_CheckPower+0x14>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000145 	.word	0x20000145

08002a4c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <SD_RxDataBlock+0x5c>)
 8002a58:	22c8      	movs	r2, #200	; 0xc8
 8002a5a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002a5c:	f7ff ff58 	bl	8002910 <SPI_RxByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d104      	bne.n	8002a74 <SD_RxDataBlock+0x28>
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <SD_RxDataBlock+0x5c>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f3      	bne.n	8002a5c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2bfe      	cmp	r3, #254	; 0xfe
 8002a78:	d001      	beq.n	8002a7e <SD_RxDataBlock+0x32>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e00f      	b.n	8002a9e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <SPI_RxBytePtr>
	} while(len--);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	603a      	str	r2, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f4      	bne.n	8002a7e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002a94:	f7ff ff3c 	bl	8002910 <SPI_RxByte>
	SPI_RxByte();
 8002a98:	f7ff ff3a 	bl	8002910 <SPI_RxByte>

	return TRUE;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200026ec 	.word	0x200026ec

08002aac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002abc:	f7ff ff52 	bl	8002964 <SD_ReadyWait>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d001      	beq.n	8002aca <SD_TxDataBlock+0x1e>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e02f      	b.n	8002b2a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff feeb 	bl	80028a8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	2bfd      	cmp	r3, #253	; 0xfd
 8002ad6:	d020      	beq.n	8002b1a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fefd 	bl	80028dc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002ae2:	f7ff ff15 	bl	8002910 <SPI_RxByte>
		SPI_RxByte();
 8002ae6:	f7ff ff13 	bl	8002910 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002aea:	e00b      	b.n	8002b04 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002aec:	f7ff ff10 	bl	8002910 <SPI_RxByte>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d006      	beq.n	8002b0c <SD_TxDataBlock+0x60>
			i++;
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d9f0      	bls.n	8002aec <SD_TxDataBlock+0x40>
 8002b0a:	e000      	b.n	8002b0e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002b0c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002b0e:	bf00      	nop
 8002b10:	f7ff fefe 	bl	8002910 <SPI_RxByte>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0fa      	beq.n	8002b10 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d101      	bne.n	8002b28 <SD_TxDataBlock+0x7c>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <SD_TxDataBlock+0x7e>

	return FALSE;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	6039      	str	r1, [r7, #0]
 8002b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002b3e:	f7ff ff11 	bl	8002964 <SD_ReadyWait>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2bff      	cmp	r3, #255	; 0xff
 8002b46:	d001      	beq.n	8002b4c <SD_SendCmd+0x1a>
 8002b48:	23ff      	movs	r3, #255	; 0xff
 8002b4a:	e042      	b.n	8002bd2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff feaa 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	0e1b      	lsrs	r3, r3, #24
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fea4 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fe9e 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fe98 	bl	80028a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fe93 	bl	80028a8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d102      	bne.n	8002b8e <SD_SendCmd+0x5c>
 8002b88:	2395      	movs	r3, #149	; 0x95
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e007      	b.n	8002b9e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b48      	cmp	r3, #72	; 0x48
 8002b92:	d102      	bne.n	8002b9a <SD_SendCmd+0x68>
 8002b94:	2387      	movs	r3, #135	; 0x87
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e001      	b.n	8002b9e <SD_SendCmd+0x6c>
	else crc = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe81 	bl	80028a8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b4c      	cmp	r3, #76	; 0x4c
 8002baa:	d101      	bne.n	8002bb0 <SD_SendCmd+0x7e>
 8002bac:	f7ff feb0 	bl	8002910 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002bb4:	f7ff feac 	bl	8002910 <SPI_RxByte>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002bbc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da05      	bge.n	8002bd0 <SD_SendCmd+0x9e>
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	73bb      	strb	r3, [r7, #14]
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f1      	bne.n	8002bb4 <SD_SendCmd+0x82>

	return res;
 8002bd0:	7b7b      	ldrb	r3, [r7, #13]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <SD_disk_initialize+0x14>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0d6      	b.n	8002d9e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002bf0:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <SD_disk_initialize+0x2a>
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e0cb      	b.n	8002d9e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8002c06:	f7ff fec7 	bl	8002998 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002c0a:	f7ff fe2d 	bl	8002868 <SELECT>

	/* check disk type */
	type = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002c12:	2100      	movs	r1, #0
 8002c14:	2040      	movs	r0, #64	; 0x40
 8002c16:	f7ff ff8c 	bl	8002b32 <SD_SendCmd>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 80a6 	bne.w	8002d6e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002c22:	4b62      	ldr	r3, [pc, #392]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c28:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002c2a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002c2e:	2048      	movs	r0, #72	; 0x48
 8002c30:	f7ff ff7f 	bl	8002b32 <SD_SendCmd>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d158      	bne.n	8002cec <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e00c      	b.n	8002c5a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002c40:	7bfc      	ldrb	r4, [r7, #15]
 8002c42:	f7ff fe65 	bl	8002910 <SPI_RxByte>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f104 0310 	add.w	r3, r4, #16
 8002c4e:	443b      	add	r3, r7
 8002c50:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3301      	adds	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d9ef      	bls.n	8002c40 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f040 8083 	bne.w	8002d6e <SD_disk_initialize+0x192>
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	2baa      	cmp	r3, #170	; 0xaa
 8002c6c:	d17f      	bne.n	8002d6e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2077      	movs	r0, #119	; 0x77
 8002c72:	f7ff ff5e 	bl	8002b32 <SD_SendCmd>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d807      	bhi.n	8002c8c <SD_disk_initialize+0xb0>
 8002c7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c80:	2069      	movs	r0, #105	; 0x69
 8002c82:	f7ff ff56 	bl	8002b32 <SD_SendCmd>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002c8c:	4b47      	ldr	r3, [pc, #284]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1eb      	bne.n	8002c6e <SD_disk_initialize+0x92>
 8002c96:	e000      	b.n	8002c9a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002c98:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002c9a:	4b44      	ldr	r3, [pc, #272]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d064      	beq.n	8002d6e <SD_disk_initialize+0x192>
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	207a      	movs	r0, #122	; 0x7a
 8002ca8:	f7ff ff43 	bl	8002b32 <SD_SendCmd>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d15d      	bne.n	8002d6e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e00c      	b.n	8002cd2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002cb8:	7bfc      	ldrb	r4, [r7, #15]
 8002cba:	f7ff fe29 	bl	8002910 <SPI_RxByte>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f104 0310 	add.w	r3, r4, #16
 8002cc6:	443b      	add	r3, r7
 8002cc8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d9ef      	bls.n	8002cb8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002cd8:	7a3b      	ldrb	r3, [r7, #8]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <SD_disk_initialize+0x10a>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	e000      	b.n	8002ce8 <SD_disk_initialize+0x10c>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	73bb      	strb	r3, [r7, #14]
 8002cea:	e040      	b.n	8002d6e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002cec:	2100      	movs	r1, #0
 8002cee:	2077      	movs	r0, #119	; 0x77
 8002cf0:	f7ff ff1f 	bl	8002b32 <SD_SendCmd>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d808      	bhi.n	8002d0c <SD_disk_initialize+0x130>
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2069      	movs	r0, #105	; 0x69
 8002cfe:	f7ff ff18 	bl	8002b32 <SD_SendCmd>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d801      	bhi.n	8002d0c <SD_disk_initialize+0x130>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e000      	b.n	8002d0e <SD_disk_initialize+0x132>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002d10:	7bbb      	ldrb	r3, [r7, #14]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d10e      	bne.n	8002d34 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002d16:	2100      	movs	r1, #0
 8002d18:	2077      	movs	r0, #119	; 0x77
 8002d1a:	f7ff ff0a 	bl	8002b32 <SD_SendCmd>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d80e      	bhi.n	8002d42 <SD_disk_initialize+0x166>
 8002d24:	2100      	movs	r1, #0
 8002d26:	2069      	movs	r0, #105	; 0x69
 8002d28:	f7ff ff03 	bl	8002b32 <SD_SendCmd>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <SD_disk_initialize+0x166>
 8002d32:	e00d      	b.n	8002d50 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002d34:	2100      	movs	r1, #0
 8002d36:	2041      	movs	r0, #65	; 0x41
 8002d38:	f7ff fefb 	bl	8002b32 <SD_SendCmd>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e1      	bne.n	8002d10 <SD_disk_initialize+0x134>
 8002d4c:	e000      	b.n	8002d50 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002d4e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002d50:	4b16      	ldr	r3, [pc, #88]	; (8002dac <SD_disk_initialize+0x1d0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <SD_disk_initialize+0x18e>
 8002d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d5e:	2050      	movs	r0, #80	; 0x50
 8002d60:	f7ff fee7 	bl	8002b32 <SD_SendCmd>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <SD_disk_initialize+0x192>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <SD_disk_initialize+0x1d4>)
 8002d70:	7bbb      	ldrb	r3, [r7, #14]
 8002d72:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002d74:	f7ff fd88 	bl	8002888 <DESELECT>
	SPI_RxByte();
 8002d78:	f7ff fdca 	bl	8002910 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e001      	b.n	8002d98 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002d94:	f7ff fe42 	bl	8002a1c <SD_PowerOff>
	}

	return Stat;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <SD_disk_initialize+0x1cc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000004 	.word	0x20000004
 8002dac:	200026ec 	.word	0x200026ec
 8002db0:	20000144 	.word	0x20000144

08002db4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_status+0x14>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e002      	b.n	8002dce <SD_disk_status+0x1a>
	return Stat;
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SD_disk_status+0x28>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000004 	.word	0x20000004

08002de0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <SD_disk_read+0x1c>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <SD_disk_read+0x20>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e051      	b.n	8002ea4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <SD_disk_read+0xcc>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <SD_disk_read+0x32>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e048      	b.n	8002ea4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <SD_disk_read+0xd0>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <SD_disk_read+0x44>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	025b      	lsls	r3, r3, #9
 8002e22:	607b      	str	r3, [r7, #4]

	SELECT();
 8002e24:	f7ff fd20 	bl	8002868 <SELECT>

	if (count == 1)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d111      	bne.n	8002e52 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	2051      	movs	r0, #81	; 0x51
 8002e32:	f7ff fe7e 	bl	8002b32 <SD_SendCmd>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d129      	bne.n	8002e90 <SD_disk_read+0xb0>
 8002e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e40:	68b8      	ldr	r0, [r7, #8]
 8002e42:	f7ff fe03 	bl	8002a4c <SD_RxDataBlock>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <SD_disk_read+0xb0>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	e01e      	b.n	8002e90 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	2052      	movs	r0, #82	; 0x52
 8002e56:	f7ff fe6c 	bl	8002b32 <SD_SendCmd>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d117      	bne.n	8002e90 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e64:	68b8      	ldr	r0, [r7, #8]
 8002e66:	f7ff fdf1 	bl	8002a4c <SD_RxDataBlock>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <SD_disk_read+0xa6>
				buff += 512;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e76:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ed      	bne.n	8002e60 <SD_disk_read+0x80>
 8002e84:	e000      	b.n	8002e88 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002e86:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002e88:	2100      	movs	r1, #0
 8002e8a:	204c      	movs	r0, #76	; 0x4c
 8002e8c:	f7ff fe51 	bl	8002b32 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002e90:	f7ff fcfa 	bl	8002888 <DESELECT>
	SPI_RxByte();
 8002e94:	f7ff fd3c 	bl	8002910 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	20000144 	.word	0x20000144

08002eb4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <SD_disk_write+0x1c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <SD_disk_write+0x20>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	e06b      	b.n	8002fac <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <SD_disk_write+0x100>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <SD_disk_write+0x32>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e062      	b.n	8002fac <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <SD_disk_write+0x100>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <SD_disk_write+0x44>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e059      	b.n	8002fac <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <SD_disk_write+0x104>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <SD_disk_write+0x56>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	025b      	lsls	r3, r3, #9
 8002f08:	607b      	str	r3, [r7, #4]

	SELECT();
 8002f0a:	f7ff fcad 	bl	8002868 <SELECT>

	if (count == 1)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d110      	bne.n	8002f36 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	2058      	movs	r0, #88	; 0x58
 8002f18:	f7ff fe0b 	bl	8002b32 <SD_SendCmd>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d13a      	bne.n	8002f98 <SD_disk_write+0xe4>
 8002f22:	21fe      	movs	r1, #254	; 0xfe
 8002f24:	68b8      	ldr	r0, [r7, #8]
 8002f26:	f7ff fdc1 	bl	8002aac <SD_TxDataBlock>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d033      	beq.n	8002f98 <SD_disk_write+0xe4>
			count = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	e030      	b.n	8002f98 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <SD_disk_write+0x104>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002f42:	2100      	movs	r1, #0
 8002f44:	2077      	movs	r0, #119	; 0x77
 8002f46:	f7ff fdf4 	bl	8002b32 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	2057      	movs	r0, #87	; 0x57
 8002f4e:	f7ff fdf0 	bl	8002b32 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	2059      	movs	r0, #89	; 0x59
 8002f56:	f7ff fdec 	bl	8002b32 <SD_SendCmd>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11b      	bne.n	8002f98 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002f60:	21fc      	movs	r1, #252	; 0xfc
 8002f62:	68b8      	ldr	r0, [r7, #8]
 8002f64:	f7ff fda2 	bl	8002aac <SD_TxDataBlock>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <SD_disk_write+0xd0>
				buff += 512;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f74:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ee      	bne.n	8002f60 <SD_disk_write+0xac>
 8002f82:	e000      	b.n	8002f86 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002f84:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002f86:	21fd      	movs	r1, #253	; 0xfd
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff fd8f 	bl	8002aac <SD_TxDataBlock>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <SD_disk_write+0xe4>
			{
				count = 1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002f98:	f7ff fc76 	bl	8002888 <DESELECT>
	SPI_RxByte();
 8002f9c:	f7ff fcb8 	bl	8002910 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000144 	.word	0x20000144

08002fbc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b08b      	sub	sp, #44	; 0x2c
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	603a      	str	r2, [r7, #0]
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <SD_disk_ioctl+0x1e>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e115      	b.n	8003206 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002fe0:	79bb      	ldrb	r3, [r7, #6]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d124      	bne.n	8003030 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d012      	beq.n	8003014 <SD_disk_ioctl+0x58>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	dc1a      	bgt.n	8003028 <SD_disk_ioctl+0x6c>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <SD_disk_ioctl+0x40>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d006      	beq.n	8003008 <SD_disk_ioctl+0x4c>
 8002ffa:	e015      	b.n	8003028 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002ffc:	f7ff fd0e 	bl	8002a1c <SD_PowerOff>
			res = RES_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003006:	e0fc      	b.n	8003202 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003008:	f7ff fcc6 	bl	8002998 <SD_PowerOn>
			res = RES_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003012:	e0f6      	b.n	8003202 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	1c5c      	adds	r4, r3, #1
 8003018:	f7ff fd0c 	bl	8002a34 <SD_CheckPower>
 800301c:	4603      	mov	r3, r0
 800301e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003026:	e0ec      	b.n	8003202 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800302e:	e0e8      	b.n	8003202 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <SD_disk_ioctl+0x254>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SD_disk_ioctl+0x86>
 800303e:	2303      	movs	r3, #3
 8003040:	e0e1      	b.n	8003206 <SD_disk_ioctl+0x24a>

		SELECT();
 8003042:	f7ff fc11 	bl	8002868 <SELECT>

		switch (ctrl)
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	2b0d      	cmp	r3, #13
 800304a:	f200 80cb 	bhi.w	80031e4 <SD_disk_ioctl+0x228>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <SD_disk_ioctl+0x98>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	0800314f 	.word	0x0800314f
 8003058:	0800308d 	.word	0x0800308d
 800305c:	0800313f 	.word	0x0800313f
 8003060:	080031e5 	.word	0x080031e5
 8003064:	080031e5 	.word	0x080031e5
 8003068:	080031e5 	.word	0x080031e5
 800306c:	080031e5 	.word	0x080031e5
 8003070:	080031e5 	.word	0x080031e5
 8003074:	080031e5 	.word	0x080031e5
 8003078:	080031e5 	.word	0x080031e5
 800307c:	080031e5 	.word	0x080031e5
 8003080:	08003161 	.word	0x08003161
 8003084:	08003185 	.word	0x08003185
 8003088:	080031a9 	.word	0x080031a9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800308c:	2100      	movs	r1, #0
 800308e:	2049      	movs	r0, #73	; 0x49
 8003090:	f7ff fd4f 	bl	8002b32 <SD_SendCmd>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80a8 	bne.w	80031ec <SD_disk_ioctl+0x230>
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2110      	movs	r1, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fcd2 	bl	8002a4c <SD_RxDataBlock>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 809e 	beq.w	80031ec <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80030b0:	7b3b      	ldrb	r3, [r7, #12]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10e      	bne.n	80030d8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80030ba:	7d7b      	ldrb	r3, [r7, #21]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	7d3b      	ldrb	r3, [r7, #20]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80030ce:	8bfb      	ldrh	r3, [r7, #30]
 80030d0:	029a      	lsls	r2, r3, #10
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e02e      	b.n	8003136 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80030d8:	7c7b      	ldrb	r3, [r7, #17]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	09db      	lsrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	7d7b      	ldrb	r3, [r7, #21]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0306 	and.w	r3, r3, #6
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3302      	adds	r3, #2
 80030fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003100:	7d3b      	ldrb	r3, [r7, #20]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	b2db      	uxtb	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	b29b      	uxth	r3, r3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	b29b      	uxth	r3, r3
 8003110:	4413      	add	r3, r2
 8003112:	b29a      	uxth	r2, r3
 8003114:	7cbb      	ldrb	r3, [r7, #18]
 8003116:	029b      	lsls	r3, r3, #10
 8003118:	b29b      	uxth	r3, r3
 800311a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800311e:	b29b      	uxth	r3, r3
 8003120:	4413      	add	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003128:	8bfa      	ldrh	r2, [r7, #30]
 800312a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312e:	3b09      	subs	r3, #9
 8003130:	409a      	lsls	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800313c:	e056      	b.n	80031ec <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003144:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800314c:	e055      	b.n	80031fa <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800314e:	f7ff fc09 	bl	8002964 <SD_ReadyWait>
 8003152:	4603      	mov	r3, r0
 8003154:	2bff      	cmp	r3, #255	; 0xff
 8003156:	d14b      	bne.n	80031f0 <SD_disk_ioctl+0x234>
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800315e:	e047      	b.n	80031f0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003160:	2100      	movs	r1, #0
 8003162:	2049      	movs	r0, #73	; 0x49
 8003164:	f7ff fce5 	bl	8002b32 <SD_SendCmd>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d142      	bne.n	80031f4 <SD_disk_ioctl+0x238>
 800316e:	2110      	movs	r1, #16
 8003170:	6a38      	ldr	r0, [r7, #32]
 8003172:	f7ff fc6b 	bl	8002a4c <SD_RxDataBlock>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03b      	beq.n	80031f4 <SD_disk_ioctl+0x238>
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003182:	e037      	b.n	80031f4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003184:	2100      	movs	r1, #0
 8003186:	204a      	movs	r0, #74	; 0x4a
 8003188:	f7ff fcd3 	bl	8002b32 <SD_SendCmd>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d132      	bne.n	80031f8 <SD_disk_ioctl+0x23c>
 8003192:	2110      	movs	r1, #16
 8003194:	6a38      	ldr	r0, [r7, #32]
 8003196:	f7ff fc59 	bl	8002a4c <SD_RxDataBlock>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02b      	beq.n	80031f8 <SD_disk_ioctl+0x23c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80031a6:	e027      	b.n	80031f8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80031a8:	2100      	movs	r1, #0
 80031aa:	207a      	movs	r0, #122	; 0x7a
 80031ac:	f7ff fcc1 	bl	8002b32 <SD_SendCmd>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031bc:	e00b      	b.n	80031d6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80031be:	6a3c      	ldr	r4, [r7, #32]
 80031c0:	1c63      	adds	r3, r4, #1
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	f7ff fba4 	bl	8002910 <SPI_RxByte>
 80031c8:	4603      	mov	r3, r0
 80031ca:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80031cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031d0:	3301      	adds	r3, #1
 80031d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d9ef      	bls.n	80031be <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80031e4:	2304      	movs	r3, #4
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031ea:	e006      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031ec:	bf00      	nop
 80031ee:	e004      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031f0:	bf00      	nop
 80031f2:	e002      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <SD_disk_ioctl+0x23e>
			break;
 80031f8:	bf00      	nop
		}

		DESELECT();
 80031fa:	f7ff fb45 	bl	8002888 <DESELECT>
		SPI_RxByte();
 80031fe:	f7ff fb87 	bl	8002910 <SPI_RxByte>
	}

	return res;
 8003202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003206:	4618      	mov	r0, r3
 8003208:	372c      	adds	r7, #44	; 0x2c
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000004 	.word	0x20000004

08003214 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800321c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003220:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800322c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003230:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003234:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800323c:	e000      	b.n	8003240 <ITM_SendChar+0x2c>
    {
      __NOP();
 800323e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f9      	beq.n	800323e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800324a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003254:	687b      	ldr	r3, [r7, #4]
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <bufsize>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int i=0;

int bufsize (char *buf)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
	int i=0;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 800326e:	e002      	b.n	8003276 <bufsize+0x14>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f6      	bne.n	8003270 <bufsize+0xe>
	return i;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <clear_buffer>:

void clear_buffer (void)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8003296:	2300      	movs	r3, #0
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	e007      	b.n	80032ac <clear_buffer+0x1c>
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <clear_buffer+0x30>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3301      	adds	r3, #1
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b7f      	cmp	r3, #127	; 0x7f
 80032b0:	ddf4      	ble.n	800329c <clear_buffer+0xc>
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	2000265c 	.word	0x2000265c
 80032c4:	00000000 	.word	0x00000000

080032c8 <current_sensor5.1>:

  if(settime==1)
      Set_Time(timein.seconds, timein.minutes, timein.hour , timein.dayofweek, timein.dayofmonth, timein.month, timein.year);

  void current_sensor5()
  {
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 80032d2:	4b27      	ldr	r3, [pc, #156]	; (8003370 <current_sensor5.1+0xa8>)
 80032d4:	885a      	ldrh	r2, [r3, #2]
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <current_sensor5.1+0xac>)
 80032d8:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <current_sensor5.1+0xac>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	ee17 0a90 	vmov	r0, s15
 80032ea:	f7fd f94d 	bl	8000588 <__aeabi_f2d>
 80032ee:	a31c      	add	r3, pc, #112	; (adr r3, 8003360 <current_sensor5.1+0x98>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd f9a0 	bl	8000638 <__aeabi_dmul>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	a319      	add	r3, pc, #100	; (adr r3, 8003368 <current_sensor5.1+0xa0>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f7fd fac1 	bl	800088c <__aeabi_ddiv>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4614      	mov	r4, r2
 8003310:	461d      	mov	r5, r3
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <current_sensor5.1+0xb0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f936 	bl	8000588 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fd f988 	bl	8000638 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fc7a 	bl	8000c28 <__aeabi_d2f>
 8003334:	4603      	mov	r3, r0
 8003336:	4a11      	ldr	r2, [pc, #68]	; (800337c <current_sensor5.1+0xb4>)
 8003338:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.CPM_Current =(1 - rawVoltage5)/sensitivity5;
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <current_sensor5.1+0xb4>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003344:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <current_sensor5.1+0xb8>)
 800334a:	ed93 7a00 	vldr	s14, [r3]
 800334e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <current_sensor5.1+0xbc>)
 8003354:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  }
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bdb0      	pop	{r4, r5, r7, pc}
 8003360:	66666666 	.word	0x66666666
 8003364:	400a6666 	.word	0x400a6666
 8003368:	00000000 	.word	0x00000000
 800336c:	40affe00 	.word	0x40affe00
 8003370:	20000444 	.word	0x20000444
 8003374:	20000454 	.word	0x20000454
 8003378:	2000000c 	.word	0x2000000c
 800337c:	20000458 	.word	0x20000458
 8003380:	20000008 	.word	0x20000008
 8003384:	20000588 	.word	0x20000588

08003388 <main>:
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b087      	sub	sp, #28
 800338c:	af04      	add	r7, sp, #16
int main(void)
 800338e:	f107 0320 	add.w	r3, r7, #32
 8003392:	603b      	str	r3, [r7, #0]
	timein.seconds = 0;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <main+0x34>)
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
	fresult = f_mount(&fs, "/", 1);
 800339a:	2201      	movs	r2, #1
 800339c:	4908      	ldr	r1, [pc, #32]	; (80033c0 <main+0x38>)
 800339e:	4809      	ldr	r0, [pc, #36]	; (80033c4 <main+0x3c>)
 80033a0:	f009 fad4 	bl	800c94c <f_mount>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <main+0x40>)
 80033aa:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <main+0x40>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <main+0x48>
 80033b4:	4805      	ldr	r0, [pc, #20]	; (80033cc <main+0x44>)
 80033b6:	f00a fa87 	bl	800d8c8 <puts>
 80033ba:	e00c      	b.n	80033d6 <main+0x4e>
 80033bc:	20000578 	.word	0x20000578
 80033c0:	08010f20 	.word	0x08010f20
 80033c4:	200005e8 	.word	0x200005e8
 80033c8:	20002650 	.word	0x20002650
 80033cc:	08010f24 	.word	0x08010f24
	    	else printf("SD CARD mounted successfully...\n\n");
 80033d0:	48b7      	ldr	r0, [pc, #732]	; (80036b0 <main+0x328>)
 80033d2:	f00a fa79 	bl	800d8c8 <puts>
	    	  	fresult = f_open(&fil, "file5.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80033d6:	220a      	movs	r2, #10
 80033d8:	49b6      	ldr	r1, [pc, #728]	; (80036b4 <main+0x32c>)
 80033da:	48b7      	ldr	r0, [pc, #732]	; (80036b8 <main+0x330>)
 80033dc:	f009 fafc 	bl	800c9d8 <f_open>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	4bb5      	ldr	r3, [pc, #724]	; (80036bc <main+0x334>)
 80033e6:	701a      	strb	r2, [r3, #0]
	    	  	strcpy (buffer, "This is TestFile.txt, written using ...f_write... and it says Hello from Dutah\n");
 80033e8:	4ab5      	ldr	r2, [pc, #724]	; (80036c0 <main+0x338>)
 80033ea:	4bb6      	ldr	r3, [pc, #728]	; (80036c4 <main+0x33c>)
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	2350      	movs	r3, #80	; 0x50
 80033f2:	461a      	mov	r2, r3
 80033f4:	f00a f9cc 	bl	800d790 <memcpy>
	    	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80033f8:	48b1      	ldr	r0, [pc, #708]	; (80036c0 <main+0x338>)
 80033fa:	f7ff ff32 	bl	8003262 <bufsize>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	4bb1      	ldr	r3, [pc, #708]	; (80036c8 <main+0x340>)
 8003404:	49ae      	ldr	r1, [pc, #696]	; (80036c0 <main+0x338>)
 8003406:	48ac      	ldr	r0, [pc, #688]	; (80036b8 <main+0x330>)
 8003408:	f009 fe11 	bl	800d02e <f_write>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	4baa      	ldr	r3, [pc, #680]	; (80036bc <main+0x334>)
 8003412:	701a      	strb	r2, [r3, #0]
	    	  	printf ("File5.txt created and data is written\n");
 8003414:	48ad      	ldr	r0, [pc, #692]	; (80036cc <main+0x344>)
 8003416:	f00a fa57 	bl	800d8c8 <puts>
	    	  	f_close(&fil);
 800341a:	48a7      	ldr	r0, [pc, #668]	; (80036b8 <main+0x330>)
 800341c:	f00a f819 	bl	800d452 <f_close>
	    	  	clear_buffer();
 8003420:	f7ff ff36 	bl	8003290 <clear_buffer>
	    	  	fresult = f_open(&fil, "file3.txt", FA_READ);
 8003424:	2201      	movs	r2, #1
 8003426:	49aa      	ldr	r1, [pc, #680]	; (80036d0 <main+0x348>)
 8003428:	48a3      	ldr	r0, [pc, #652]	; (80036b8 <main+0x330>)
 800342a:	f009 fad5 	bl	800c9d8 <f_open>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	4ba2      	ldr	r3, [pc, #648]	; (80036bc <main+0x334>)
 8003434:	701a      	strb	r2, [r3, #0]
	    	  	if (fresult == FR_OK)printf ("file2.txt is open and the data is shown below\n");
 8003436:	4ba1      	ldr	r3, [pc, #644]	; (80036bc <main+0x334>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <main+0xbc>
 800343e:	48a5      	ldr	r0, [pc, #660]	; (80036d4 <main+0x34c>)
 8003440:	f00a fa42 	bl	800d8c8 <puts>
	    	  	f_read (&fil, buffer, f_size(&fil), &br);
 8003444:	4b9c      	ldr	r3, [pc, #624]	; (80036b8 <main+0x330>)
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	4ba3      	ldr	r3, [pc, #652]	; (80036d8 <main+0x350>)
 800344a:	499d      	ldr	r1, [pc, #628]	; (80036c0 <main+0x338>)
 800344c:	489a      	ldr	r0, [pc, #616]	; (80036b8 <main+0x330>)
 800344e:	f009 fc8f 	bl	800cd70 <f_read>
	    	  	printf(buffer);
 8003452:	489b      	ldr	r0, [pc, #620]	; (80036c0 <main+0x338>)
 8003454:	f00a f9b2 	bl	800d7bc <iprintf>
	    	  	printf("\n\n");
 8003458:	48a0      	ldr	r0, [pc, #640]	; (80036dc <main+0x354>)
 800345a:	f00a fa35 	bl	800d8c8 <puts>
	    	  	f_close(&fil);
 800345e:	4896      	ldr	r0, [pc, #600]	; (80036b8 <main+0x330>)
 8003460:	f009 fff7 	bl	800d452 <f_close>
	    	  	clear_buffer();
 8003464:	f7ff ff14 	bl	8003290 <clear_buffer>
  HAL_Init();
 8003468:	f001 fdaa 	bl	8004fc0 <HAL_Init>
  SystemClock_Config();
 800346c:	f000 fa2e 	bl	80038cc <SystemClock_Config>
  MX_GPIO_Init();
 8003470:	f000 fcd8 	bl	8003e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8003474:	f000 fcb6 	bl	8003de4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003478:	f000 fa9a 	bl	80039b0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800347c:	f000 fb9e 	bl	8003bbc <MX_SPI1_Init>
  MX_TIM1_Init();
 8003480:	f000 fc0a 	bl	8003c98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003484:	f000 fc84 	bl	8003d90 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003488:	f000 fb0e 	bl	8003aa8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800348c:	f000 fb3a 	bl	8003b04 <MX_I2C2_Init>
  MX_UART4_Init();
 8003490:	f000 fc54 	bl	8003d3c <MX_UART4_Init>
  MX_I2C3_Init();
 8003494:	f000 fb64 	bl	8003b60 <MX_I2C3_Init>
  MX_SPI2_Init();
 8003498:	f000 fbc8 	bl	8003c2c <MX_SPI2_Init>
  MX_FATFS_Init();
 800349c:	f007 f80c 	bl	800a4b8 <MX_FATFS_Init>
  HAL_ADC_Init(&hadc1);
 80034a0:	488f      	ldr	r0, [pc, #572]	; (80036e0 <main+0x358>)
 80034a2:	f001 fe23 	bl	80050ec <HAL_ADC_Init>
  MPU6050_Init();
 80034a6:	f000 fd71 	bl	8003f8c <MPU6050_Init>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 4);
 80034aa:	2204      	movs	r2, #4
 80034ac:	498d      	ldr	r1, [pc, #564]	; (80036e4 <main+0x35c>)
 80034ae:	488c      	ldr	r0, [pc, #560]	; (80036e0 <main+0x358>)
 80034b0:	f001 fe60 	bl	8005174 <HAL_ADC_Start_DMA>
  BMP180_Start();
 80034b4:	f7fe f9de 	bl	8001874 <BMP180_Start>
  Ringbuf_init();
 80034b8:	f001 fb42 	bl	8004b40 <Ringbuf_init>
  HAL_Delay(500);
 80034bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034c0:	f001 fdf0 	bl	80050a4 <HAL_Delay>
  if(settime==1)
 80034c4:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <main+0x360>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d11b      	bne.n	8003504 <main+0x17c>
      Set_Time(timein.seconds, timein.minutes, timein.hour , timein.dayofweek, timein.dayofmonth, timein.month, timein.year);
 80034cc:	4b87      	ldr	r3, [pc, #540]	; (80036ec <main+0x364>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	4b86      	ldr	r3, [pc, #536]	; (80036ec <main+0x364>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	461c      	mov	r4, r3
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <main+0x364>)
 80034da:	789b      	ldrb	r3, [r3, #2]
 80034dc:	461d      	mov	r5, r3
 80034de:	4b83      	ldr	r3, [pc, #524]	; (80036ec <main+0x364>)
 80034e0:	78db      	ldrb	r3, [r3, #3]
 80034e2:	461e      	mov	r6, r3
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <main+0x364>)
 80034e6:	791b      	ldrb	r3, [r3, #4]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b80      	ldr	r3, [pc, #512]	; (80036ec <main+0x364>)
 80034ec:	795b      	ldrb	r3, [r3, #5]
 80034ee:	4619      	mov	r1, r3
 80034f0:	4b7e      	ldr	r3, [pc, #504]	; (80036ec <main+0x364>)
 80034f2:	799b      	ldrb	r3, [r3, #6]
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	9101      	str	r1, [sp, #4]
 80034f8:	9200      	str	r2, [sp, #0]
 80034fa:	4633      	mov	r3, r6
 80034fc:	462a      	mov	r2, r5
 80034fe:	4621      	mov	r1, r4
 8003500:	f7ff f912 	bl	8002728 <Set_Time>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   HAL_Delay(5);
 8003504:	2005      	movs	r0, #5
 8003506:	f001 fdcd 	bl	80050a4 <HAL_Delay>
	  if(Wait_for("GGA")==1)
 800350a:	4879      	ldr	r0, [pc, #484]	; (80036f0 <main+0x368>)
 800350c:	f001 fc48 	bl	8004da0 <Wait_for>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <main+0x19e>
	  {
		  Copy_upto("*", GGA);
 8003516:	4977      	ldr	r1, [pc, #476]	; (80036f4 <main+0x36c>)
 8003518:	4877      	ldr	r0, [pc, #476]	; (80036f8 <main+0x370>)
 800351a:	f001 fbc1 	bl	8004ca0 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 800351e:	4977      	ldr	r1, [pc, #476]	; (80036fc <main+0x374>)
 8003520:	4874      	ldr	r0, [pc, #464]	; (80036f4 <main+0x36c>)
 8003522:	f7fe fad9 	bl	8001ad8 <decodeGGA>
	  }
	  if (Wait_for("RMC")==1)
 8003526:	4876      	ldr	r0, [pc, #472]	; (8003700 <main+0x378>)
 8003528:	f001 fc3a 	bl	8004da0 <Wait_for>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d107      	bne.n	8003542 <main+0x1ba>
	  {
		  Copy_upto("*",RMC);
 8003532:	4974      	ldr	r1, [pc, #464]	; (8003704 <main+0x37c>)
 8003534:	4870      	ldr	r0, [pc, #448]	; (80036f8 <main+0x370>)
 8003536:	f001 fbb3 	bl	8004ca0 <Copy_upto>
		  decodeRMC(RMC, &gpsData.rmcstruct);
 800353a:	4973      	ldr	r1, [pc, #460]	; (8003708 <main+0x380>)
 800353c:	4871      	ldr	r0, [pc, #452]	; (8003704 <main+0x37c>)
 800353e:	f7fe fe77 	bl	8002230 <decodeRMC>
	  }
	  
	  trans1.tlm1.M_Temp=Max6675_Read_Temp();
 8003542:	f7fe fa45 	bl	80019d0 <Max6675_Read_Temp>
 8003546:	eef0 7a40 	vmov.f32	s15, s0
 800354a:	4b70      	ldr	r3, [pc, #448]	; (800370c <main+0x384>)
 800354c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  barometer_sensor();
 8003550:	463b      	mov	r3, r7
 8003552:	469c      	mov	ip, r3
 8003554:	f000 f994 	bl	8003880 <barometer_sensor.0>
	  trans1.tlm1.NC_Press =readHX();
 8003558:	f7fe f9e0 	bl	800191c <readHX>
 800355c:	ee07 0a90 	vmov	s15, r0
 8003560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003564:	4b69      	ldr	r3, [pc, #420]	; (800370c <main+0x384>)
 8003566:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	  current_sensor5();
 800356a:	463b      	mov	r3, r7
 800356c:	469c      	mov	ip, r3
 800356e:	f7ff feab 	bl	80032c8 <current_sensor5.1>
	  current_sensor20();
 8003572:	463b      	mov	r3, r7
 8003574:	469c      	mov	ip, r3
 8003576:	f000 f923 	bl	80037c0 <current_sensor20.2>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 800357a:	4a65      	ldr	r2, [pc, #404]	; (8003710 <main+0x388>)
 800357c:	4965      	ldr	r1, [pc, #404]	; (8003714 <main+0x38c>)
 800357e:	4866      	ldr	r0, [pc, #408]	; (8003718 <main+0x390>)
 8003580:	f000 fd6c 	bl	800405c <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 8003584:	4a65      	ldr	r2, [pc, #404]	; (800371c <main+0x394>)
 8003586:	4966      	ldr	r1, [pc, #408]	; (8003720 <main+0x398>)
 8003588:	4866      	ldr	r0, [pc, #408]	; (8003724 <main+0x39c>)
 800358a:	f000 fde9 	bl	8004160 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);
	  trans1.tlm1.Ax=Ax;
 800358e:	4b62      	ldr	r3, [pc, #392]	; (8003718 <main+0x390>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5e      	ldr	r2, [pc, #376]	; (800370c <main+0x384>)
 8003594:	6053      	str	r3, [r2, #4]
	  trans1.tlm1.Ay=Ay;
 8003596:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <main+0x38c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <main+0x384>)
 800359c:	6093      	str	r3, [r2, #8]
	  trans1.tlm1.Az=Az;
 800359e:	4b5c      	ldr	r3, [pc, #368]	; (8003710 <main+0x388>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5a      	ldr	r2, [pc, #360]	; (800370c <main+0x384>)
 80035a4:	60d3      	str	r3, [r2, #12]
	  trans1.tlm1.Gx=Gx;
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <main+0x39c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a58      	ldr	r2, [pc, #352]	; (800370c <main+0x384>)
 80035ac:	6113      	str	r3, [r2, #16]
	  trans1.tlm1.Gy=Gy;
 80035ae:	4b5c      	ldr	r3, [pc, #368]	; (8003720 <main+0x398>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a56      	ldr	r2, [pc, #344]	; (800370c <main+0x384>)
 80035b4:	6153      	str	r3, [r2, #20]
	  trans1.tlm1.Gz=Gz;
 80035b6:	4b59      	ldr	r3, [pc, #356]	; (800371c <main+0x394>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a54      	ldr	r2, [pc, #336]	; (800370c <main+0x384>)
 80035bc:	6193      	str	r3, [r2, #24]


	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, En_Voltage_ui);
 80035be:	4b5a      	ldr	r3, [pc, #360]	; (8003728 <main+0x3a0>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	2140      	movs	r1, #64	; 0x40
 80035c6:	4859      	ldr	r0, [pc, #356]	; (800372c <main+0x3a4>)
 80035c8:	f003 f872 	bl	80066b0 <HAL_GPIO_WritePin>
	  trans1.tlm1.CPM_Voltage = dmaOut[0]*(5.0/4096.0);
 80035cc:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <main+0x35c>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffc7 	bl	8000564 <__aeabi_i2d>
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	4b55      	ldr	r3, [pc, #340]	; (8003730 <main+0x3a8>)
 80035dc:	f7fd f82c 	bl	8000638 <__aeabi_dmul>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fd fb1e 	bl	8000c28 <__aeabi_d2f>
 80035ec:	4603      	mov	r3, r0
 80035ee:	4a47      	ldr	r2, [pc, #284]	; (800370c <main+0x384>)
 80035f0:	61d3      	str	r3, [r2, #28]
	  HAL_GPIO_WritePin(HV_En_GPIO_Port, HV_En_Pin, En_Voltage_ui);
 80035f2:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <main+0x3a0>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	2120      	movs	r1, #32
 80035fa:	484e      	ldr	r0, [pc, #312]	; (8003734 <main+0x3ac>)
 80035fc:	f003 f858 	bl	80066b0 <HAL_GPIO_WritePin>
	  trans1.tlm1.H_Voltage=dmaOut[3]*(9.36/4096);
 8003600:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <main+0x35c>)
 8003602:	88db      	ldrh	r3, [r3, #6]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ffad 	bl	8000564 <__aeabi_i2d>
 800360a:	a327      	add	r3, pc, #156	; (adr r3, 80036a8 <main+0x320>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd f812 	bl	8000638 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	f7fd fb04 	bl	8000c28 <__aeabi_d2f>
 8003620:	4603      	mov	r3, r0
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <main+0x384>)
 8003624:	6213      	str	r3, [r2, #32]

	  HAL_Delay(100);
 8003626:	2064      	movs	r0, #100	; 0x64
 8003628:	f001 fd3c 	bl	80050a4 <HAL_Delay>
	  Get_Time();
 800362c:	f7ff f8cc 	bl	80027c8 <Get_Time>
		trans1.tlm1.seconds=time.seconds;
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <main+0x3b0>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363c:	4b33      	ldr	r3, [pc, #204]	; (800370c <main+0x384>)
 800363e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		trans1.tlm1.minutes=time.minutes;
 8003642:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <main+0x3b0>)
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	4b2f      	ldr	r3, [pc, #188]	; (800370c <main+0x384>)
 8003650:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		trans1.tlm1.hour=time.hour;
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <main+0x3b0>)
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <main+0x384>)
 8003662:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		trans1.tlm1.dayofmonth=time.dayofmonth;
 8003666:	4b34      	ldr	r3, [pc, #208]	; (8003738 <main+0x3b0>)
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <main+0x384>)
 8003674:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		trans1.tlm1.month=time.month;
 8003678:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <main+0x3b0>)
 800367a:	795b      	ldrb	r3, [r3, #5]
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <main+0x384>)
 8003686:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		trans1.tlm1.year=time.year;
 800368a:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <main+0x3b0>)
 800368c:	799b      	ldrb	r3, [r3, #6]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <main+0x384>)
 8003698:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


//	  memset(TxBuff,"\0",150);
	  for(int i=0; i<23; i++)
 800369c:	2300      	movs	r3, #0
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	e07a      	b.n	8003798 <main+0x410>
 80036a2:	bf00      	nop
 80036a4:	f3af 8000 	nop.w
 80036a8:	eb851eb8 	.word	0xeb851eb8
 80036ac:	3f62b851 	.word	0x3f62b851
 80036b0:	08010f48 	.word	0x08010f48
 80036b4:	08010f6c 	.word	0x08010f6c
 80036b8:	20001620 	.word	0x20001620
 80036bc:	20002650 	.word	0x20002650
 80036c0:	2000265c 	.word	0x2000265c
 80036c4:	08010f78 	.word	0x08010f78
 80036c8:	20002658 	.word	0x20002658
 80036cc:	08010fc8 	.word	0x08010fc8
 80036d0:	08010ff0 	.word	0x08010ff0
 80036d4:	08010ffc 	.word	0x08010ffc
 80036d8:	20002654 	.word	0x20002654
 80036dc:	0801102c 	.word	0x0801102c
 80036e0:	20000148 	.word	0x20000148
 80036e4:	20000444 	.word	0x20000444
 80036e8:	2000057f 	.word	0x2000057f
 80036ec:	20000578 	.word	0x20000578
 80036f0:	08011030 	.word	0x08011030
 80036f4:	20000464 	.word	0x20000464
 80036f8:	08011034 	.word	0x08011034
 80036fc:	2000052c 	.word	0x2000052c
 8003700:	08011038 	.word	0x08011038
 8003704:	200004c8 	.word	0x200004c8
 8003708:	20000558 	.word	0x20000558
 800370c:	20000588 	.word	0x20000588
 8003710:	20000430 	.word	0x20000430
 8003714:	2000042c 	.word	0x2000042c
 8003718:	20000428 	.word	0x20000428
 800371c:	2000043c 	.word	0x2000043c
 8003720:	20000438 	.word	0x20000438
 8003724:	20000434 	.word	0x20000434
 8003728:	20000440 	.word	0x20000440
 800372c:	40020000 	.word	0x40020000
 8003730:	3f540000 	.word	0x3f540000
 8003734:	40020400 	.word	0x40020400
 8003738:	20000570 	.word	0x20000570
	  {
		  memset(tempbuff,'\0',6);
 800373c:	2206      	movs	r2, #6
 800373e:	2100      	movs	r1, #0
 8003740:	481a      	ldr	r0, [pc, #104]	; (80037ac <main+0x424>)
 8003742:	f00a f833 	bl	800d7ac <memset>
		  gcvt(trans1.dataframe[i],4,tempbuff);
 8003746:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <main+0x428>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc ff19 	bl	8000588 <__aeabi_f2d>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4914      	ldr	r1, [pc, #80]	; (80037ac <main+0x424>)
 800375c:	2004      	movs	r0, #4
 800375e:	ec43 2b10 	vmov	d0, r2, r3
 8003762:	f009 ffc7 	bl	800d6f4 <gcvt>
		  //strcat(TxBuff,tempbuff);
		  strcat(tempbuff,",");
 8003766:	4811      	ldr	r0, [pc, #68]	; (80037ac <main+0x424>)
 8003768:	f7fc fd52 	bl	8000210 <strlen>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <main+0x424>)
 8003772:	4413      	add	r3, r2
 8003774:	490f      	ldr	r1, [pc, #60]	; (80037b4 <main+0x42c>)
 8003776:	461a      	mov	r2, r3
 8003778:	460b      	mov	r3, r1
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	8013      	strh	r3, [r2, #0]
		  HAL_UART_Transmit(&huart4, tempbuff, strlen(tempbuff), 100);
 800377e:	480b      	ldr	r0, [pc, #44]	; (80037ac <main+0x424>)
 8003780:	f7fc fd46 	bl	8000210 <strlen>
 8003784:	4603      	mov	r3, r0
 8003786:	b29a      	uxth	r2, r3
 8003788:	2364      	movs	r3, #100	; 0x64
 800378a:	4908      	ldr	r1, [pc, #32]	; (80037ac <main+0x424>)
 800378c:	480a      	ldr	r0, [pc, #40]	; (80037b8 <main+0x430>)
 800378e:	f005 fecc 	bl	800952a <HAL_UART_Transmit>
	  for(int i=0; i<23; i++)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b16      	cmp	r3, #22
 800379c:	ddce      	ble.n	800373c <main+0x3b4>
		  strcat(tempbuff,",");
		  HAL_UART_Transmit(&huart4, tempbuff, strlen(tempbuff), 100);
	  }*/

//	  strcat(TxBuff,"\n");
	  HAL_UART_Transmit(&huart4, "\n", 1, 100);
 800379e:	2364      	movs	r3, #100	; 0x64
 80037a0:	2201      	movs	r2, #1
 80037a2:	4906      	ldr	r1, [pc, #24]	; (80037bc <main+0x434>)
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <main+0x430>)
 80037a6:	f005 fec0 	bl	800952a <HAL_UART_Transmit>
  {
 80037aa:	e6ab      	b.n	8003504 <main+0x17c>
 80037ac:	20000580 	.word	0x20000580
 80037b0:	20000588 	.word	0x20000588
 80037b4:	0801103c 	.word	0x0801103c
 80037b8:	200003e4 	.word	0x200003e4
 80037bc:	0801102c 	.word	0x0801102c

080037c0 <current_sensor20.2>:
  {
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 80037ca:	4b27      	ldr	r3, [pc, #156]	; (8003868 <current_sensor20.2+0xa8>)
 80037cc:	889a      	ldrh	r2, [r3, #4]
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <current_sensor20.2+0xac>)
 80037d0:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <current_sensor20.2+0xac>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	ee17 0a90 	vmov	r0, s15
 80037e2:	f7fc fed1 	bl	8000588 <__aeabi_f2d>
 80037e6:	a31c      	add	r3, pc, #112	; (adr r3, 8003858 <current_sensor20.2+0x98>)
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f7fc ff24 	bl	8000638 <__aeabi_dmul>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	a319      	add	r3, pc, #100	; (adr r3, 8003860 <current_sensor20.2+0xa0>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fd f845 	bl	800088c <__aeabi_ddiv>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4614      	mov	r4, r2
 8003808:	461d      	mov	r5, r3
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <current_sensor20.2+0xb0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fc feba 	bl	8000588 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fc ff0c 	bl	8000638 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fd f9fe 	bl	8000c28 <__aeabi_d2f>
 800382c:	4603      	mov	r3, r0
 800382e:	4a11      	ldr	r2, [pc, #68]	; (8003874 <current_sensor20.2+0xb4>)
 8003830:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.H_Current =(1 - rawVoltage20)/sensitivity20;
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <current_sensor20.2+0xb4>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <current_sensor20.2+0xb8>)
 8003842:	ed93 7a00 	vldr	s14, [r3]
 8003846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <current_sensor20.2+0xbc>)
 800384c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  }
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bdb0      	pop	{r4, r5, r7, pc}
 8003858:	66666666 	.word	0x66666666
 800385c:	400a6666 	.word	0x400a6666
 8003860:	00000000 	.word	0x00000000
 8003864:	40affe00 	.word	0x40affe00
 8003868:	20000444 	.word	0x20000444
 800386c:	2000045c 	.word	0x2000045c
 8003870:	20000014 	.word	0x20000014
 8003874:	20000460 	.word	0x20000460
 8003878:	20000010 	.word	0x20000010
 800387c:	20000588 	.word	0x20000588

08003880 <barometer_sensor.0>:
  {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 800388a:	f7fd fc7f 	bl	800118c <BMP180_GetTemp>
 800388e:	eef0 7a40 	vmov.f32	s15, s0
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <barometer_sensor.0+0x40>)
 8003894:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 8003898:	2000      	movs	r0, #0
 800389a:	f7fd fd71 	bl	8001380 <BMP180_GetPress>
 800389e:	eef0 7a40 	vmov.f32	s15, s0
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <barometer_sensor.0+0x44>)
 80038a4:	edc3 7a00 	vstr	s15, [r3]
  	  trans1.tlm1.Altitude = BMP180_GetAlt(0);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fd ff99 	bl	80017e0 <BMP180_GetAlt>
 80038ae:	eef0 7a40 	vmov.f32	s15, s0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <barometer_sensor.0+0x48>)
 80038b4:	edc3 7a00 	vstr	s15, [r3]
  }
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	2000044c 	.word	0x2000044c
 80038c4:	20000450 	.word	0x20000450
 80038c8:	20000588 	.word	0x20000588

080038cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b094      	sub	sp, #80	; 0x50
 80038d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038d2:	f107 031c 	add.w	r3, r7, #28
 80038d6:	2234      	movs	r2, #52	; 0x34
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f009 ff66 	bl	800d7ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <SystemClock_Config+0xdc>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <SystemClock_Config+0xdc>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <SystemClock_Config+0xdc>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800390c:	2300      	movs	r3, #0
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4b26      	ldr	r3, [pc, #152]	; (80039ac <SystemClock_Config+0xe0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <SystemClock_Config+0xe0>)
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b23      	ldr	r3, [pc, #140]	; (80039ac <SystemClock_Config+0xe0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003928:	2302      	movs	r3, #2
 800392a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800392c:	2301      	movs	r3, #1
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003930:	2310      	movs	r3, #16
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003934:	2302      	movs	r3, #2
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003938:	2300      	movs	r3, #0
 800393a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800393c:	2308      	movs	r3, #8
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003940:	23b4      	movs	r3, #180	; 0xb4
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003944:	2302      	movs	r3, #2
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003948:	2302      	movs	r3, #2
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800394c:	2302      	movs	r3, #2
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	4618      	mov	r0, r3
 8003956:	f004 fa1f 	bl	8007d98 <HAL_RCC_OscConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003960:	f000 fb0e 	bl	8003f80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003964:	f003 fe7e 	bl	8007664 <HAL_PWREx_EnableOverDrive>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800396e:	f000 fb07 	bl	8003f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003972:	230f      	movs	r3, #15
 8003974:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003976:	2302      	movs	r3, #2
 8003978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800397e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003988:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	2105      	movs	r1, #5
 8003990:	4618      	mov	r0, r3
 8003992:	f003 feb7 	bl	8007704 <HAL_RCC_ClockConfig>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800399c:	f000 faf0 	bl	8003f80 <Error_Handler>
  }
}
 80039a0:	bf00      	nop
 80039a2:	3750      	adds	r7, #80	; 0x50
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000

080039b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039b6:	463b      	mov	r3, r7
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039c4:	4a36      	ldr	r2, [pc, #216]	; (8003aa0 <MX_ADC1_Init+0xf0>)
 80039c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80039d6:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039d8:	2201      	movs	r2, #1
 80039da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039dc:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039de:	2201      	movs	r2, #1
 80039e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <MX_ADC1_Init+0xf4>)
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <MX_ADC1_Init+0xec>)
 80039fe:	2204      	movs	r2, #4
 8003a00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a10:	4822      	ldr	r0, [pc, #136]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a12:	f001 fb6b 	bl	80050ec <HAL_ADC_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003a1c:	f000 fab0 	bl	8003f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a24:	2301      	movs	r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4619      	mov	r1, r3
 8003a30:	481a      	ldr	r0, [pc, #104]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a32:	f001 fccd 	bl	80053d0 <HAL_ADC_ConfigChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a3c:	f000 faa0 	bl	8003f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003a40:	2301      	movs	r3, #1
 8003a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a44:	2302      	movs	r3, #2
 8003a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a48:	463b      	mov	r3, r7
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4813      	ldr	r0, [pc, #76]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a4e:	f001 fcbf 	bl	80053d0 <HAL_ADC_ConfigChannel>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003a58:	f000 fa92 	bl	8003f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003a60:	2303      	movs	r3, #3
 8003a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a64:	463b      	mov	r3, r7
 8003a66:	4619      	mov	r1, r3
 8003a68:	480c      	ldr	r0, [pc, #48]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a6a:	f001 fcb1 	bl	80053d0 <HAL_ADC_ConfigChannel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003a74:	f000 fa84 	bl	8003f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003a78:	2308      	movs	r3, #8
 8003a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a80:	463b      	mov	r3, r7
 8003a82:	4619      	mov	r1, r3
 8003a84:	4805      	ldr	r0, [pc, #20]	; (8003a9c <MX_ADC1_Init+0xec>)
 8003a86:	f001 fca3 	bl	80053d0 <HAL_ADC_ConfigChannel>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003a90:	f000 fa76 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000148 	.word	0x20000148
 8003aa0:	40012000 	.word	0x40012000
 8003aa4:	0f000001 	.word	0x0f000001

08003aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <MX_I2C1_Init+0x54>)
 8003ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ab4:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <MX_I2C1_Init+0x58>)
 8003ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ae4:	4804      	ldr	r0, [pc, #16]	; (8003af8 <MX_I2C1_Init+0x50>)
 8003ae6:	f002 fdfd 	bl	80066e4 <HAL_I2C_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003af0:	f000 fa46 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200001f0 	.word	0x200001f0
 8003afc:	40005400 	.word	0x40005400
 8003b00:	000186a0 	.word	0x000186a0

08003b04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b0a:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <MX_I2C2_Init+0x54>)
 8003b0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <MX_I2C2_Init+0x58>)
 8003b12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b40:	4804      	ldr	r0, [pc, #16]	; (8003b54 <MX_I2C2_Init+0x50>)
 8003b42:	f002 fdcf 	bl	80066e4 <HAL_I2C_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b4c:	f000 fa18 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000244 	.word	0x20000244
 8003b58:	40005800 	.word	0x40005800
 8003b5c:	000186a0 	.word	0x000186a0

08003b60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <MX_I2C3_Init+0x54>)
 8003b68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b6c:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <MX_I2C3_Init+0x58>)
 8003b6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b82:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b9c:	4804      	ldr	r0, [pc, #16]	; (8003bb0 <MX_I2C3_Init+0x50>)
 8003b9e:	f002 fda1 	bl	80066e4 <HAL_I2C_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003ba8:	f000 f9ea 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000298 	.word	0x20000298
 8003bb4:	40005c00 	.word	0x40005c00
 8003bb8:	000186a0 	.word	0x000186a0

08003bbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bc2:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <MX_SPI1_Init+0x6c>)
 8003bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bd4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003c0a:	220a      	movs	r2, #10
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c0e:	4805      	ldr	r0, [pc, #20]	; (8003c24 <MX_SPI1_Init+0x68>)
 8003c10:	f004 fb60 	bl	80082d4 <HAL_SPI_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003c1a:	f000 f9b1 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200002ec 	.word	0x200002ec
 8003c28:	40013000 	.word	0x40013000

08003c2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c30:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <MX_SPI2_Init+0x68>)
 8003c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c60:	2230      	movs	r2, #48	; 0x30
 8003c62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c78:	220a      	movs	r2, #10
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c7c:	4804      	ldr	r0, [pc, #16]	; (8003c90 <MX_SPI2_Init+0x64>)
 8003c7e:	f004 fb29 	bl	80082d4 <HAL_SPI_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c88:	f000 f97a 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000344 	.word	0x20000344
 8003c94:	40003800 	.word	0x40003800

08003c98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c9e:	f107 0308 	add.w	r3, r7, #8
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cac:	463b      	mov	r3, r7
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cb6:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <MX_TIM1_Init+0xa0>)
 8003cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cbc:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8003cc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ce2:	4814      	ldr	r0, [pc, #80]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003ce4:	f005 f89e 	bl	8008e24 <HAL_TIM_Base_Init>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003cee:	f000 f947 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	480d      	ldr	r0, [pc, #52]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003d00:	f005 f948 	bl	8008f94 <HAL_TIM_ConfigClockSource>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003d0a:	f000 f939 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d16:	463b      	mov	r3, r7
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4806      	ldr	r0, [pc, #24]	; (8003d34 <MX_TIM1_Init+0x9c>)
 8003d1c:	f005 fb3c 	bl	8009398 <HAL_TIMEx_MasterConfigSynchronization>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003d26:	f000 f92b 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	2000039c 	.word	0x2000039c
 8003d38:	40010000 	.word	0x40010000

08003d3c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <MX_UART4_Init+0x50>)
 8003d44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d62:	220c      	movs	r2, #12
 8003d64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d72:	4805      	ldr	r0, [pc, #20]	; (8003d88 <MX_UART4_Init+0x4c>)
 8003d74:	f005 fb8c 	bl	8009490 <HAL_UART_Init>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003d7e:	f000 f8ff 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200003e4 	.word	0x200003e4
 8003d8c:	40004c00 	.word	0x40004c00

08003d90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <MX_USART1_UART_Init+0x50>)
 8003d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003d9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003db6:	220c      	movs	r2, #12
 8003db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dc6:	4805      	ldr	r0, [pc, #20]	; (8003ddc <MX_USART1_UART_Init+0x4c>)
 8003dc8:	f005 fb62 	bl	8009490 <HAL_UART_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003dd2:	f000 f8d5 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200026f4 	.word	0x200026f4
 8003de0:	40011000 	.word	0x40011000

08003de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <MX_DMA_Init+0x3c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <MX_DMA_Init+0x3c>)
 8003df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <MX_DMA_Init+0x3c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2038      	movs	r0, #56	; 0x38
 8003e0c:	f001 fe6b 	bl	8005ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e10:	2038      	movs	r0, #56	; 0x38
 8003e12:	f001 fe84 	bl	8005b1e <HAL_NVIC_EnableIRQ>

}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a3e      	ldr	r2, [pc, #248]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a37      	ldr	r2, [pc, #220]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003e98:	f043 0302 	orr.w	r3, r3, #2
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <MX_GPIO_Init+0x118>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin|NCP_SCK_Pin, GPIO_PIN_RESET);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003eb0:	4823      	ldr	r0, [pc, #140]	; (8003f40 <MX_GPIO_Init+0x11c>)
 8003eb2:	f002 fbfd 	bl	80066b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DS_CS_Pin|HV_En_Pin, GPIO_PIN_RESET);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003ebc:	4821      	ldr	r0, [pc, #132]	; (8003f44 <MX_GPIO_Init+0x120>)
 8003ebe:	f002 fbf7 	bl	80066b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 8003ec2:	2340      	movs	r3, #64	; 0x40
 8003ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	f107 0314 	add.w	r3, r7, #20
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4819      	ldr	r0, [pc, #100]	; (8003f40 <MX_GPIO_Init+0x11c>)
 8003eda:	f002 fa3d 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : MT_CS_Pin NCP_SCK_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin|NCP_SCK_Pin;
 8003ede:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8003ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eec:	2300      	movs	r3, #0
 8003eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4812      	ldr	r0, [pc, #72]	; (8003f40 <MX_GPIO_Init+0x11c>)
 8003ef8:	f002 fa2e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DS_CS_Pin HV_En_Pin */
  GPIO_InitStruct.Pin = DS_CS_Pin|HV_En_Pin;
 8003efc:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8003f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	4619      	mov	r1, r3
 8003f14:	480b      	ldr	r0, [pc, #44]	; (8003f44 <MX_GPIO_Init+0x120>)
 8003f16:	f002 fa1f 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCP_DAT_Pin */
  GPIO_InitStruct.Pin = NCP_DAT_Pin;
 8003f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NCP_DAT_GPIO_Port, &GPIO_InitStruct);
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4804      	ldr	r0, [pc, #16]	; (8003f40 <MX_GPIO_Init+0x11c>)
 8003f30:	f002 fa12 	bl	8006358 <HAL_GPIO_Init>

}
 8003f34:	bf00      	nop
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020000 	.word	0x40020000
 8003f44:	40020400 	.word	0x40020400

08003f48 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e009      	b.n	8003f6e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	60ba      	str	r2, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f956 	bl	8003214 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	dbf1      	blt.n	8003f5a <_write+0x12>
	}
	return len;
 8003f76:	687b      	ldr	r3, [r7, #4]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f84:	b672      	cpsid	i
}
 8003f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <Error_Handler+0x8>
	...

08003f8c <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8003f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f96:	9302      	str	r3, [sp, #8]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <MPU6050_Init+0xc0>)
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	2275      	movs	r2, #117	; 0x75
 8003fa4:	21d0      	movs	r1, #208	; 0xd0
 8003fa6:	482a      	ldr	r0, [pc, #168]	; (8004050 <MPU6050_Init+0xc4>)
 8003fa8:	f002 fdda 	bl	8006b60 <HAL_I2C_Mem_Read>
 8003fac:	4603      	mov	r3, r0
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	4b28      	ldr	r3, [pc, #160]	; (8004054 <MPU6050_Init+0xc8>)
 8003fb2:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <MPU6050_Init+0xc0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b68      	cmp	r3, #104	; 0x68
 8003fba:	d140      	bne.n	800403e <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <MPU6050_Init+0xcc>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc6:	9302      	str	r3, [sp, #8]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	4b22      	ldr	r3, [pc, #136]	; (8004058 <MPU6050_Init+0xcc>)
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	226b      	movs	r2, #107	; 0x6b
 8003fd4:	21d0      	movs	r1, #208	; 0xd0
 8003fd6:	481e      	ldr	r0, [pc, #120]	; (8004050 <MPU6050_Init+0xc4>)
 8003fd8:	f002 fcc8 	bl	800696c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <MPU6050_Init+0xcc>)
 8003fde:	2207      	movs	r2, #7
 8003fe0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe6:	9302      	str	r3, [sp, #8]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <MPU6050_Init+0xcc>)
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	2219      	movs	r2, #25
 8003ff4:	21d0      	movs	r1, #208	; 0xd0
 8003ff6:	4816      	ldr	r0, [pc, #88]	; (8004050 <MPU6050_Init+0xc4>)
 8003ff8:	f002 fcb8 	bl	800696c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <MPU6050_Init+0xcc>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8004002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004006:	9302      	str	r3, [sp, #8]
 8004008:	2301      	movs	r3, #1
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <MPU6050_Init+0xcc>)
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2301      	movs	r3, #1
 8004012:	221c      	movs	r2, #28
 8004014:	21d0      	movs	r1, #208	; 0xd0
 8004016:	480e      	ldr	r0, [pc, #56]	; (8004050 <MPU6050_Init+0xc4>)
 8004018:	f002 fca8 	bl	800696c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <MPU6050_Init+0xcc>)
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8004022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004026:	9302      	str	r3, [sp, #8]
 8004028:	2301      	movs	r3, #1
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <MPU6050_Init+0xcc>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2301      	movs	r3, #1
 8004032:	221b      	movs	r2, #27
 8004034:	21d0      	movs	r1, #208	; 0xd0
 8004036:	4806      	ldr	r0, [pc, #24]	; (8004050 <MPU6050_Init+0xc4>)
 8004038:	f002 fc98 	bl	800696c <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 800403c:	e002      	b.n	8004044 <MPU6050_Init+0xb8>
	else check=-1;
 800403e:	4b03      	ldr	r3, [pc, #12]	; (800404c <MPU6050_Init+0xc0>)
 8004040:	22ff      	movs	r2, #255	; 0xff
 8004042:	701a      	strb	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200026e8 	.word	0x200026e8
 8004050:	200001f0 	.word	0x200001f0
 8004054:	20000018 	.word	0x20000018
 8004058:	200026e9 	.word	0x200026e9

0800405c <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af04      	add	r7, sp, #16
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8004068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800406c:	9302      	str	r3, [sp, #8]
 800406e:	2306      	movs	r3, #6
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	f107 0310 	add.w	r3, r7, #16
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2301      	movs	r3, #1
 800407a:	223b      	movs	r2, #59	; 0x3b
 800407c:	21d0      	movs	r1, #208	; 0xd0
 800407e:	4832      	ldr	r0, [pc, #200]	; (8004148 <MPU6050_Read_Accel+0xec>)
 8004080:	f002 fd6e 	bl	8006b60 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8004084:	7c3b      	ldrb	r3, [r7, #16]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	b21a      	sxth	r2, r3
 800408a:	7c7b      	ldrb	r3, [r7, #17]
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21a      	sxth	r2, r3
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <MPU6050_Read_Accel+0xf0>)
 8004094:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8004096:	7cbb      	ldrb	r3, [r7, #18]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	b21a      	sxth	r2, r3
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	b21b      	sxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <MPU6050_Read_Accel+0xf4>)
 80040a6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80040a8:	7d3b      	ldrb	r3, [r7, #20]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	b21a      	sxth	r2, r3
 80040ae:	7d7b      	ldrb	r3, [r7, #21]
 80040b0:	b21b      	sxth	r3, r3
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b21a      	sxth	r2, r3
 80040b6:	4b27      	ldr	r3, [pc, #156]	; (8004154 <MPU6050_Read_Accel+0xf8>)
 80040b8:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 80040ba:	7c7b      	ldrb	r3, [r7, #17]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <MPU6050_Read_Accel+0xfc>)
 80040c6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <MPU6050_Read_Accel+0xf0>)
 80040ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fa48 	bl	8000564 <__aeabi_i2d>
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	4b20      	ldr	r3, [pc, #128]	; (800415c <MPU6050_Read_Accel+0x100>)
 80040da:	f7fc fbd7 	bl	800088c <__aeabi_ddiv>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	f7fc fd9f 	bl	8000c28 <__aeabi_d2f>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <MPU6050_Read_Accel+0xf4>)
 80040f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa34 	bl	8000564 <__aeabi_i2d>
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <MPU6050_Read_Accel+0x100>)
 8004102:	f7fc fbc3 	bl	800088c <__aeabi_ddiv>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f7fc fd8b 	bl	8000c28 <__aeabi_d2f>
 8004112:	4602      	mov	r2, r0
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <MPU6050_Read_Accel+0xf8>)
 800411a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fa20 	bl	8000564 <__aeabi_i2d>
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <MPU6050_Read_Accel+0x100>)
 800412a:	f7fc fbaf 	bl	800088c <__aeabi_ddiv>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	f7fc fd77 	bl	8000c28 <__aeabi_d2f>
 800413a:	4602      	mov	r2, r0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]

}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200001f0 	.word	0x200001f0
 800414c:	200026dc 	.word	0x200026dc
 8004150:	200026de 	.word	0x200026de
 8004154:	200026e0 	.word	0x200026e0
 8004158:	20000018 	.word	0x20000018
 800415c:	40d00000 	.word	0x40d00000

08004160 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af04      	add	r7, sp, #16
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800416c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	2306      	movs	r3, #6
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	f107 0310 	add.w	r3, r7, #16
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2301      	movs	r3, #1
 800417e:	2243      	movs	r2, #67	; 0x43
 8004180:	21d0      	movs	r1, #208	; 0xd0
 8004182:	4831      	ldr	r0, [pc, #196]	; (8004248 <MPU6050_Read_Gyro+0xe8>)
 8004184:	f002 fcec 	bl	8006b60 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8004188:	7c3b      	ldrb	r3, [r7, #16]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	b21a      	sxth	r2, r3
 800418e:	7c7b      	ldrb	r3, [r7, #17]
 8004190:	b21b      	sxth	r3, r3
 8004192:	4313      	orrs	r3, r2
 8004194:	b21a      	sxth	r2, r3
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <MPU6050_Read_Gyro+0xec>)
 8004198:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800419a:	7cbb      	ldrb	r3, [r7, #18]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	b21a      	sxth	r2, r3
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	4b29      	ldr	r3, [pc, #164]	; (8004250 <MPU6050_Read_Gyro+0xf0>)
 80041aa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80041ac:	7d3b      	ldrb	r3, [r7, #20]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	b21a      	sxth	r2, r3
 80041b2:	7d7b      	ldrb	r3, [r7, #21]
 80041b4:	b21b      	sxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b21a      	sxth	r2, r3
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <MPU6050_Read_Gyro+0xf4>)
 80041bc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <MPU6050_Read_Gyro+0xec>)
 80041c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc f9cd 	bl	8000564 <__aeabi_i2d>
 80041ca:	a31d      	add	r3, pc, #116	; (adr r3, 8004240 <MPU6050_Read_Gyro+0xe0>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc fb5c 	bl	800088c <__aeabi_ddiv>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f7fc fd24 	bl	8000c28 <__aeabi_d2f>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <MPU6050_Read_Gyro+0xf0>)
 80041e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f9b9 	bl	8000564 <__aeabi_i2d>
 80041f2:	a313      	add	r3, pc, #76	; (adr r3, 8004240 <MPU6050_Read_Gyro+0xe0>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc fb48 	bl	800088c <__aeabi_ddiv>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fd10 	bl	8000c28 <__aeabi_d2f>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <MPU6050_Read_Gyro+0xf4>)
 8004210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc f9a5 	bl	8000564 <__aeabi_i2d>
 800421a:	a309      	add	r3, pc, #36	; (adr r3, 8004240 <MPU6050_Read_Gyro+0xe0>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f7fc fb34 	bl	800088c <__aeabi_ddiv>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f7fc fcfc 	bl	8000c28 <__aeabi_d2f>
 8004230:	4602      	mov	r2, r0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	00000000 	.word	0x00000000
 8004244:	40606000 	.word	0x40606000
 8004248:	200001f0 	.word	0x200001f0
 800424c:	200026e2 	.word	0x200026e2
 8004250:	200026e4 	.word	0x200026e4
 8004254:	200026e6 	.word	0x200026e6

08004258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <HAL_MspInit+0x58>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <HAL_MspInit+0x58>)
 8004268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426c:	6453      	str	r3, [r2, #68]	; 0x44
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_MspInit+0x58>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <HAL_MspInit+0x58>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <HAL_MspInit+0x58>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_MspInit+0x58>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	2005      	movs	r0, #5
 800429c:	f001 fc23 	bl	8005ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80042a0:	2005      	movs	r0, #5
 80042a2:	f001 fc3c 	bl	8005b1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3c      	ldr	r2, [pc, #240]	; (80043c4 <HAL_ADC_MspInit+0x110>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d171      	bne.n	80043ba <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6453      	str	r3, [r2, #68]	; 0x44
 80042e6:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <HAL_ADC_MspInit+0x114>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800432a:	2313      	movs	r3, #19
 800432c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800432e:	2303      	movs	r3, #3
 8004330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	4619      	mov	r1, r3
 800433c:	4823      	ldr	r0, [pc, #140]	; (80043cc <HAL_ADC_MspInit+0x118>)
 800433e:	f002 f80b 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004342:	2301      	movs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004346:	2303      	movs	r3, #3
 8004348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	4619      	mov	r1, r3
 8004354:	481e      	ldr	r0, [pc, #120]	; (80043d0 <HAL_ADC_MspInit+0x11c>)
 8004356:	f001 ffff 	bl	8006358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 800435c:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <HAL_ADC_MspInit+0x124>)
 800435e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004360:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 8004368:	2200      	movs	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 800436e:	2200      	movs	r2, #0
 8004370:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 8004374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004378:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 800437c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004380:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 8004384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004388:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 800438c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004390:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 8004394:	2200      	movs	r2, #0
 8004396:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 800439a:	2200      	movs	r2, #0
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800439e:	480d      	ldr	r0, [pc, #52]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 80043a0:	f001 fbd8 	bl	8005b54 <HAL_DMA_Init>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80043aa:	f7ff fde9 	bl	8003f80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
 80043b4:	4a07      	ldr	r2, [pc, #28]	; (80043d4 <HAL_ADC_MspInit+0x120>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043ba:	bf00      	nop
 80043bc:	3728      	adds	r7, #40	; 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40012000 	.word	0x40012000
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40020000 	.word	0x40020000
 80043d0:	40020400 	.word	0x40020400
 80043d4:	20000190 	.word	0x20000190
 80043d8:	40026410 	.word	0x40026410

080043dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b090      	sub	sp, #64	; 0x40
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6b      	ldr	r2, [pc, #428]	; (80045a8 <HAL_I2C_MspInit+0x1cc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d12c      	bne.n	8004458 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
 8004402:	4b6a      	ldr	r3, [pc, #424]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a69      	ldr	r2, [pc, #420]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b67      	ldr	r3, [pc, #412]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800441a:	23c0      	movs	r3, #192	; 0xc0
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800441e:	2312      	movs	r3, #18
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800442a:	2304      	movs	r3, #4
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004432:	4619      	mov	r1, r3
 8004434:	485e      	ldr	r0, [pc, #376]	; (80045b0 <HAL_I2C_MspInit+0x1d4>)
 8004436:	f001 ff8f 	bl	8006358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a5a      	ldr	r2, [pc, #360]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b58      	ldr	r3, [pc, #352]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004456:	e0a2      	b.n	800459e <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a55      	ldr	r2, [pc, #340]	; (80045b4 <HAL_I2C_MspInit+0x1d8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d14c      	bne.n	80044fc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	4b51      	ldr	r3, [pc, #324]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a50      	ldr	r2, [pc, #320]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b4e      	ldr	r3, [pc, #312]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	4b4a      	ldr	r3, [pc, #296]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a49      	ldr	r2, [pc, #292]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800449a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a0:	2312      	movs	r3, #18
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044ac:	2304      	movs	r3, #4
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044b4:	4619      	mov	r1, r3
 80044b6:	483e      	ldr	r0, [pc, #248]	; (80045b0 <HAL_I2C_MspInit+0x1d4>)
 80044b8:	f001 ff4e 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80044bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044c2:	2312      	movs	r3, #18
 80044c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ca:	2303      	movs	r3, #3
 80044cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044ce:	2304      	movs	r3, #4
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d6:	4619      	mov	r1, r3
 80044d8:	4837      	ldr	r0, [pc, #220]	; (80045b8 <HAL_I2C_MspInit+0x1dc>)
 80044da:	f001 ff3d 	bl	8006358 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4a31      	ldr	r2, [pc, #196]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 80044e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044ec:	6413      	str	r3, [r2, #64]	; 0x40
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	69bb      	ldr	r3, [r7, #24]
}
 80044fa:	e050      	b.n	800459e <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C3)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <HAL_I2C_MspInit+0x1e0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d14b      	bne.n	800459e <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a27      	ldr	r2, [pc, #156]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800453e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004544:	2312      	movs	r3, #18
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004550:	2304      	movs	r3, #4
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004558:	4619      	mov	r1, r3
 800455a:	4817      	ldr	r0, [pc, #92]	; (80045b8 <HAL_I2C_MspInit+0x1dc>)
 800455c:	f001 fefc 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004566:	2312      	movs	r3, #18
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456e:	2303      	movs	r3, #3
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004572:	2304      	movs	r3, #4
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800457a:	4619      	mov	r1, r3
 800457c:	4810      	ldr	r0, [pc, #64]	; (80045c0 <HAL_I2C_MspInit+0x1e4>)
 800457e:	f001 feeb 	bl	8006358 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 800458c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_I2C_MspInit+0x1d0>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	3740      	adds	r7, #64	; 0x40
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40005400 	.word	0x40005400
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40020400 	.word	0x40020400
 80045b4:	40005800 	.word	0x40005800
 80045b8:	40020800 	.word	0x40020800
 80045bc:	40005c00 	.word	0x40005c00
 80045c0:	40020000 	.word	0x40020000

080045c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	; 0x38
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a58      	ldr	r2, [pc, #352]	; (8004744 <HAL_SPI_MspInit+0x180>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d14a      	bne.n	800467c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	4b57      	ldr	r3, [pc, #348]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	4a56      	ldr	r2, [pc, #344]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80045f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045f4:	6453      	str	r3, [r2, #68]	; 0x44
 80045f6:	4b54      	ldr	r3, [pc, #336]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a4f      	ldr	r2, [pc, #316]	; (8004748 <HAL_SPI_MspInit+0x184>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b4d      	ldr	r3, [pc, #308]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	4b49      	ldr	r3, [pc, #292]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a48      	ldr	r2, [pc, #288]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b46      	ldr	r3, [pc, #280]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800463a:	2320      	movs	r3, #32
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004646:	2303      	movs	r3, #3
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800464a:	2305      	movs	r3, #5
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004652:	4619      	mov	r1, r3
 8004654:	483d      	ldr	r0, [pc, #244]	; (800474c <HAL_SPI_MspInit+0x188>)
 8004656:	f001 fe7f 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800465a:	2310      	movs	r3, #16
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465e:	2302      	movs	r3, #2
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004666:	2303      	movs	r3, #3
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800466a:	2305      	movs	r3, #5
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004672:	4619      	mov	r1, r3
 8004674:	4836      	ldr	r0, [pc, #216]	; (8004750 <HAL_SPI_MspInit+0x18c>)
 8004676:	f001 fe6f 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800467a:	e05f      	b.n	800473c <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a34      	ldr	r2, [pc, #208]	; (8004754 <HAL_SPI_MspInit+0x190>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d15a      	bne.n	800473c <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <HAL_SPI_MspInit+0x184>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a2e      	ldr	r2, [pc, #184]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <HAL_SPI_MspInit+0x184>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b21      	ldr	r3, [pc, #132]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4a20      	ldr	r2, [pc, #128]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30
 80046ce:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_SPI_MspInit+0x184>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046da:	2302      	movs	r3, #2
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e6:	2303      	movs	r3, #3
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80046ea:	2307      	movs	r3, #7
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f2:	4619      	mov	r1, r3
 80046f4:	4818      	ldr	r0, [pc, #96]	; (8004758 <HAL_SPI_MspInit+0x194>)
 80046f6:	f001 fe2f 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046fa:	2304      	movs	r3, #4
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004706:	2303      	movs	r3, #3
 8004708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800470a:	2305      	movs	r3, #5
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004712:	4619      	mov	r1, r3
 8004714:	4810      	ldr	r0, [pc, #64]	; (8004758 <HAL_SPI_MspInit+0x194>)
 8004716:	f001 fe1f 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800471a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004728:	2303      	movs	r3, #3
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800472c:	2305      	movs	r3, #5
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004734:	4619      	mov	r1, r3
 8004736:	4806      	ldr	r0, [pc, #24]	; (8004750 <HAL_SPI_MspInit+0x18c>)
 8004738:	f001 fe0e 	bl	8006358 <HAL_GPIO_Init>
}
 800473c:	bf00      	nop
 800473e:	3738      	adds	r7, #56	; 0x38
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40013000 	.word	0x40013000
 8004748:	40023800 	.word	0x40023800
 800474c:	40020000 	.word	0x40020000
 8004750:	40020400 	.word	0x40020400
 8004754:	40003800 	.word	0x40003800
 8004758:	40020800 	.word	0x40020800

0800475c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <HAL_TIM_Base_MspInit+0x3c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10d      	bne.n	800478a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_TIM_Base_MspInit+0x40>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <HAL_TIM_Base_MspInit+0x40>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6453      	str	r3, [r2, #68]	; 0x44
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_TIM_Base_MspInit+0x40>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40023800 	.word	0x40023800

080047a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	; 0x30
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 031c 	add.w	r3, r7, #28
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a37      	ldr	r2, [pc, #220]	; (800489c <HAL_UART_MspInit+0xfc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d12d      	bne.n	800481e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_UART_MspInit+0x100>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a35      	ldr	r2, [pc, #212]	; (80048a0 <HAL_UART_MspInit+0x100>)
 80047cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <HAL_UART_MspInit+0x100>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	4b2f      	ldr	r3, [pc, #188]	; (80048a0 <HAL_UART_MspInit+0x100>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <HAL_UART_MspInit+0x100>)
 80047e8:	f043 0304 	orr.w	r3, r3, #4
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <HAL_UART_MspInit+0x100>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80047fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004808:	2303      	movs	r3, #3
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800480c:	2308      	movs	r3, #8
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	4619      	mov	r1, r3
 8004816:	4823      	ldr	r0, [pc, #140]	; (80048a4 <HAL_UART_MspInit+0x104>)
 8004818:	f001 fd9e 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800481c:	e039      	b.n	8004892 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_UART_MspInit+0x108>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d134      	bne.n	8004892 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <HAL_UART_MspInit+0x100>)
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_UART_MspInit+0x100>)
 8004832:	f043 0310 	orr.w	r3, r3, #16
 8004836:	6453      	str	r3, [r2, #68]	; 0x44
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_UART_MspInit+0x100>)
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_UART_MspInit+0x100>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_UART_MspInit+0x100>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6313      	str	r3, [r2, #48]	; 0x30
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_UART_MspInit+0x100>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004860:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800486e:	2303      	movs	r3, #3
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004872:	2307      	movs	r3, #7
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	4619      	mov	r1, r3
 800487c:	480b      	ldr	r0, [pc, #44]	; (80048ac <HAL_UART_MspInit+0x10c>)
 800487e:	f001 fd6b 	bl	8006358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2100      	movs	r1, #0
 8004886:	2025      	movs	r0, #37	; 0x25
 8004888:	f001 f92d 	bl	8005ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800488c:	2025      	movs	r0, #37	; 0x25
 800488e:	f001 f946 	bl	8005b1e <HAL_NVIC_EnableIRQ>
}
 8004892:	bf00      	nop
 8004894:	3730      	adds	r7, #48	; 0x30
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40004c00 	.word	0x40004c00
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40020800 	.word	0x40020800
 80048a8:	40011000 	.word	0x40011000
 80048ac:	40020000 	.word	0x40020000

080048b0 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <SDTimer_Handler+0x40>)
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <SDTimer_Handler+0x1c>
    Timer1--;
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <SDTimer_Handler+0x40>)
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <SDTimer_Handler+0x40>)
 80048ca:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <SDTimer_Handler+0x44>)
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <SDTimer_Handler+0x34>
    Timer2--;
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <SDTimer_Handler+0x44>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <SDTimer_Handler+0x44>)
 80048e2:	801a      	strh	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200026ec 	.word	0x200026ec
 80048f4:	200026ee 	.word	0x200026ee

080048f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048fc:	e7fe      	b.n	80048fc <NMI_Handler+0x4>

080048fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004902:	e7fe      	b.n	8004902 <HardFault_Handler+0x4>

08004904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004908:	e7fe      	b.n	8004908 <MemManage_Handler+0x4>

0800490a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800490e:	e7fe      	b.n	800490e <BusFault_Handler+0x4>

08004910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004914:	e7fe      	b.n	8004914 <UsageFault_Handler+0x4>

08004916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004916:	b480      	push	{r7}
 8004918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004932:	b480      	push	{r7}
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(timeout >0) timeout--;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <SysTick_Handler+0x44>)
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <SysTick_Handler+0x18>
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <SysTick_Handler+0x44>)
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <SysTick_Handler+0x44>)
 8004956:	801a      	strh	r2, [r3, #0]

FatFsCnt++;
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <SysTick_Handler+0x48>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	3301      	adds	r3, #1
 8004960:	b2da      	uxtb	r2, r3
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <SysTick_Handler+0x48>)
 8004964:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <SysTick_Handler+0x48>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b09      	cmp	r3, #9
 800496e:	d904      	bls.n	800497a <SysTick_Handler+0x3a>
	  {
	    FatFsCnt = 0;
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <SysTick_Handler+0x48>)
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8004976:	f7ff ff9b 	bl	80048b0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800497a:	f000 fb73 	bl	8005064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20002738 	.word	0x20002738
 8004988:	200026ea 	.word	0x200026ea

0800498c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80049a0:	4803      	ldr	r0, [pc, #12]	; (80049b0 <USART1_IRQHandler+0x14>)
 80049a2:	f000 fa85 	bl	8004eb0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049a6:	4802      	ldr	r0, [pc, #8]	; (80049b0 <USART1_IRQHandler+0x14>)
 80049a8:	f004 fe52 	bl	8009650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	200026f4 	.word	0x200026f4

080049b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049b8:	4802      	ldr	r0, [pc, #8]	; (80049c4 <DMA2_Stream0_IRQHandler+0x10>)
 80049ba:	f001 fa63 	bl	8005e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000190 	.word	0x20000190

080049c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
	return 1;
 80049cc:	2301      	movs	r3, #1
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <_kill>:

int _kill(int pid, int sig)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049e2:	f008 feab 	bl	800d73c <__errno>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2216      	movs	r2, #22
 80049ea:	601a      	str	r2, [r3, #0]
	return -1;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_exit>:

void _exit (int status)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a00:	f04f 31ff 	mov.w	r1, #4294967295
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ffe7 	bl	80049d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a0a:	e7fe      	b.n	8004a0a <_exit+0x12>

08004a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e00a      	b.n	8004a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a1e:	f3af 8000 	nop.w
 8004a22:	4601      	mov	r1, r0
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	60ba      	str	r2, [r7, #8]
 8004a2a:	b2ca      	uxtb	r2, r1
 8004a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	3301      	adds	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dbf0      	blt.n	8004a1e <_read+0x12>
	}

return len;
 8004a3c:	687b      	ldr	r3, [r7, #4]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <_isatty>:

int _isatty(int file)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
	return 1;
 8004a86:	2301      	movs	r3, #1
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <_sbrk+0x5c>)
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <_sbrk+0x60>)
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <_sbrk+0x64>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <_sbrk+0x64>)
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <_sbrk+0x68>)
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <_sbrk+0x64>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d207      	bcs.n	8004af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ae0:	f008 fe2c 	bl	800d73c <__errno>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	220c      	movs	r2, #12
 8004ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
 8004aee:	e009      	b.n	8004b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <_sbrk+0x64>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <_sbrk+0x64>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <_sbrk+0x64>)
 8004b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b02:	68fb      	ldr	r3, [r7, #12]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20020000 	.word	0x20020000
 8004b10:	00000800 	.word	0x00000800
 8004b14:	200026f0 	.word	0x200026f0
 8004b18:	20002da8 	.word	0x20002da8

08004b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <SystemInit+0x20>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <SystemInit+0x20>)
 8004b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <Ringbuf_init+0x3c>)
 8004b46:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <Ringbuf_init+0x40>)
 8004b48:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <Ringbuf_init+0x44>)
 8004b4c:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <Ringbuf_init+0x48>)
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <Ringbuf_init+0x4c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <Ringbuf_init+0x4c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <Ringbuf_init+0x4c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <Ringbuf_init+0x4c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0220 	orr.w	r2, r2, #32
 8004b6e:	60da      	str	r2, [r3, #12]
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20002b4c 	.word	0x20002b4c
 8004b80:	2000273c 	.word	0x2000273c
 8004b84:	20002b50 	.word	0x20002b50
 8004b88:	20002944 	.word	0x20002944
 8004b8c:	200026f4 	.word	0x200026f4

08004b90 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d009      	beq.n	8004bca <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	79f9      	ldrb	r1, [r7, #7]
 8004bc0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <Uart_read+0x54>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <Uart_read+0x54>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d102      	bne.n	8004bf8 <Uart_read+0x20>
  {
    return -1;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	e013      	b.n	8004c20 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <Uart_read+0x54>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <Uart_read+0x54>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c04:	5cd3      	ldrb	r3, [r2, r3]
 8004c06:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <Uart_read+0x54>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <Uart_read+0x54>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20002b4c 	.word	0x20002b4c

08004c30 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <IsDataAvailable+0x30>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <IsDataAvailable+0x30>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	20002b4c 	.word	0x20002b4c

08004c64 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <Uart_peek+0x38>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <Uart_peek+0x38>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d102      	bne.n	8004c82 <Uart_peek+0x1e>
  {
    return -1;
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c80:	e006      	b.n	8004c90 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <Uart_peek+0x38>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <Uart_peek+0x38>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20002b4c 	.word	0x20002b4c

08004ca0 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fb faae 	bl	8000210 <strlen>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8004cbc:	e01e      	b.n	8004cfc <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <Copy_upto+0xf8>)
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <Copy_upto+0xf8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	4403      	add	r3, r0
 8004cd0:	5c8a      	ldrb	r2, [r1, r2]
 8004cd2:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004cd4:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <Copy_upto+0xf8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <Copy_upto+0xf8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3301      	adds	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8004cf0:	bf00      	nop
 8004cf2:	f7ff ff9d 	bl	8004c30 <IsDataAvailable>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0fa      	beq.n	8004cf2 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8004cfc:	f7ff ffb2 	bl	8004c64 <Uart_peek>
 8004d00:	4601      	mov	r1, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	d1d7      	bne.n	8004cbe <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8004d0e:	e027      	b.n	8004d60 <Copy_upto+0xc0>
	{
		so_far++;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3301      	adds	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8004d16:	f7ff ff5f 	bl	8004bd8 <Uart_read>
 8004d1a:	4601      	mov	r1, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	613a      	str	r2, [r7, #16]
 8004d22:	461a      	mov	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	b2ca      	uxtb	r2, r1
 8004d2a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d101      	bne.n	8004d38 <Copy_upto+0x98>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e02a      	b.n	8004d8e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <Copy_upto+0xfc>)
 8004d3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d3e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8004d40:	bf00      	nop
 8004d42:	f7ff ff75 	bl	8004c30 <IsDataAvailable>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <Copy_upto+0xb4>
 8004d4c:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <Copy_upto+0xfc>)
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f6      	bne.n	8004d42 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <Copy_upto+0xfc>)
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <Copy_upto+0xc0>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e016      	b.n	8004d8e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8004d60:	f7ff ff80 	bl	8004c64 <Uart_peek>
 8004d64:	4601      	mov	r1, r0
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	d0ce      	beq.n	8004d10 <Copy_upto+0x70>
	}

	if (so_far != len)
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d002      	beq.n	8004d80 <Copy_upto+0xe0>
	{
		so_far = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
		goto again;
 8004d7e:	e79d      	b.n	8004cbc <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d101      	bne.n	8004d8c <Copy_upto+0xec>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <Copy_upto+0xee>
	else return 0;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20002b4c 	.word	0x20002b4c
 8004d9c:	20002738 	.word	0x20002738

08004da0 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fb fa2f 	bl	8000210 <strlen>
 8004db2:	4603      	mov	r3, r0
 8004db4:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8004db6:	4b3c      	ldr	r3, [pc, #240]	; (8004ea8 <Wait_for+0x108>)
 8004db8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004dbc:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8004dbe:	bf00      	nop
 8004dc0:	f7ff ff36 	bl	8004c30 <IsDataAvailable>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <Wait_for+0x32>
 8004dca:	4b37      	ldr	r3, [pc, #220]	; (8004ea8 <Wait_for+0x108>)
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f6      	bne.n	8004dc0 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8004dd2:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <Wait_for+0x108>)
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d119      	bne.n	8004e0e <Wait_for+0x6e>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e060      	b.n	8004ea0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8004dde:	4b33      	ldr	r3, [pc, #204]	; (8004eac <Wait_for+0x10c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004de6:	4b31      	ldr	r3, [pc, #196]	; (8004eac <Wait_for+0x10c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d00b      	beq.n	8004e0a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8004df2:	4b2e      	ldr	r3, [pc, #184]	; (8004eac <Wait_for+0x10c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <Wait_for+0x10c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e08:	e001      	b.n	8004e0e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e048      	b.n	8004ea0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8004e0e:	f7ff ff29 	bl	8004c64 <Uart_peek>
 8004e12:	4601      	mov	r1, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	d1de      	bne.n	8004dde <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8004e20:	e027      	b.n	8004e72 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8004e28:	4b20      	ldr	r3, [pc, #128]	; (8004eac <Wait_for+0x10c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <Wait_for+0x10c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d101      	bne.n	8004e4a <Wait_for+0xaa>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e02a      	b.n	8004ea0 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8004e4a:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <Wait_for+0x108>)
 8004e4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e50:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8004e52:	bf00      	nop
 8004e54:	f7ff feec 	bl	8004c30 <IsDataAvailable>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <Wait_for+0xc6>
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <Wait_for+0x108>)
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f6      	bne.n	8004e54 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <Wait_for+0x108>)
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <Wait_for+0xd2>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e016      	b.n	8004ea0 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8004e72:	f7ff fef7 	bl	8004c64 <Uart_peek>
 8004e76:	4601      	mov	r1, r0
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d0ce      	beq.n	8004e22 <Wait_for+0x82>
	}

	if (so_far != len)
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d002      	beq.n	8004e92 <Wait_for+0xf2>
	{
		so_far = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
		goto again;
 8004e90:	e791      	b.n	8004db6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d101      	bne.n	8004e9e <Wait_for+0xfe>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <Wait_for+0x100>
	else return 0;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20002738 	.word	0x20002738
 8004eac:	20002b4c 	.word	0x20002b4c

08004eb0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <Uart_isr+0x4a>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <Uart_isr+0xb4>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fe4c 	bl	8004b90 <store_char>
        return;
 8004ef8:	e031      	b.n	8004f5e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d02c      	beq.n	8004f5e <Uart_isr+0xae>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d027      	beq.n	8004f5e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <Uart_isr+0xb8>)
 8004f10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f14:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <Uart_isr+0xb8>)
 8004f16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d108      	bne.n	8004f30 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8004f2e:	e015      	b.n	8004f5c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <Uart_isr+0xb8>)
 8004f32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <Uart_isr+0xb8>)
 8004f38:	5cd3      	ldrb	r3, [r2, r3]
 8004f3a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <Uart_isr+0xb8>)
 8004f3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f42:	3301      	adds	r3, #1
 8004f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f48:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <Uart_isr+0xb8>)
 8004f4a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	7bba      	ldrb	r2, [r7, #14]
 8004f5a:	605a      	str	r2, [r3, #4]
    	return;
 8004f5c:	bf00      	nop
    }
}
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20002b4c 	.word	0x20002b4c
 8004f68:	20002944 	.word	0x20002944

08004f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f70:	480d      	ldr	r0, [pc, #52]	; (8004fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f72:	490e      	ldr	r1, [pc, #56]	; (8004fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f74:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f78:	e002      	b.n	8004f80 <LoopCopyDataInit>

08004f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f7e:	3304      	adds	r3, #4

08004f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f84:	d3f9      	bcc.n	8004f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f88:	4c0b      	ldr	r4, [pc, #44]	; (8004fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f8c:	e001      	b.n	8004f92 <LoopFillZerobss>

08004f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f90:	3204      	adds	r2, #4

08004f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f94:	d3fb      	bcc.n	8004f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f96:	f7ff fdc1 	bl	8004b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f9a:	f008 fbd5 	bl	800d748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f9e:	f7fe f9f3 	bl	8003388 <main>
  bx  lr    
 8004fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fac:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004fb0:	080118f0 	.word	0x080118f0
  ldr r2, =_sbss
 8004fb4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004fb8:	20002da4 	.word	0x20002da4

08004fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <ADC_IRQHandler>
	...

08004fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <HAL_Init+0x40>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <HAL_Init+0x40>)
 8004fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_Init+0x40>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <HAL_Init+0x40>)
 8004fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_Init+0x40>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a07      	ldr	r2, [pc, #28]	; (8005000 <HAL_Init+0x40>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fe8:	2003      	movs	r0, #3
 8004fea:	f000 fd71 	bl	8005ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fee:	200f      	movs	r0, #15
 8004ff0:	f000 f808 	bl	8005004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ff4:	f7ff f930 	bl	8004258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40023c00 	.word	0x40023c00

08005004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <HAL_InitTick+0x54>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_InitTick+0x58>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800501a:	fbb3 f3f1 	udiv	r3, r3, r1
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fd89 	bl	8005b3a <HAL_SYSTICK_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e00e      	b.n	8005050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b0f      	cmp	r3, #15
 8005036:	d80a      	bhi.n	800504e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005038:	2200      	movs	r2, #0
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	f000 fd51 	bl	8005ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005044:	4a06      	ldr	r2, [pc, #24]	; (8005060 <HAL_InitTick+0x5c>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	2000001c 	.word	0x2000001c
 800505c:	20000024 	.word	0x20000024
 8005060:	20000020 	.word	0x20000020

08005064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_IncTick+0x20>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_IncTick+0x24>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4413      	add	r3, r2
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <HAL_IncTick+0x24>)
 8005076:	6013      	str	r3, [r2, #0]
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000024 	.word	0x20000024
 8005088:	20002b54 	.word	0x20002b54

0800508c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return uwTick;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_GetTick+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20002b54 	.word	0x20002b54

080050a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7ff ffee 	bl	800508c <HAL_GetTick>
 80050b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d005      	beq.n	80050ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_Delay+0x44>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050ca:	bf00      	nop
 80050cc:	f7ff ffde 	bl	800508c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d8f7      	bhi.n	80050cc <HAL_Delay+0x28>
  {
  }
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000024 	.word	0x20000024

080050ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e033      	b.n	800516a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff f8d2 	bl	80042b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	d118      	bne.n	800515c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005132:	f023 0302 	bic.w	r3, r3, #2
 8005136:	f043 0202 	orr.w	r2, r3, #2
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa78 	bl	8005634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40
 800515a:	e001      	b.n	8005160 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_ADC_Start_DMA+0x1e>
 800518e:	2302      	movs	r3, #2
 8005190:	e0e9      	b.n	8005366 <HAL_ADC_Start_DMA+0x1f2>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d018      	beq.n	80051da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051b8:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <HAL_ADC_Start_DMA+0x1fc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <HAL_ADC_Start_DMA+0x200>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0c9a      	lsrs	r2, r3, #18
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80051cc:	e002      	b.n	80051d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f9      	bne.n	80051ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e8:	d107      	bne.n	80051fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 80a1 	bne.w	800534c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005234:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005248:	d106      	bne.n	8005258 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f023 0206 	bic.w	r2, r3, #6
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
 8005256:	e002      	b.n	800525e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005266:	4b44      	ldr	r3, [pc, #272]	; (8005378 <HAL_ADC_Start_DMA+0x204>)
 8005268:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	4a43      	ldr	r2, [pc, #268]	; (800537c <HAL_ADC_Start_DMA+0x208>)
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	4a42      	ldr	r2, [pc, #264]	; (8005380 <HAL_ADC_Start_DMA+0x20c>)
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	4a41      	ldr	r2, [pc, #260]	; (8005384 <HAL_ADC_Start_DMA+0x210>)
 8005280:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800528a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800529a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	334c      	adds	r3, #76	; 0x4c
 80052b6:	4619      	mov	r1, r3
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f000 fcf8 	bl	8005cb0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d12a      	bne.n	8005322 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <HAL_ADC_Start_DMA+0x214>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d015      	beq.n	8005302 <HAL_ADC_Start_DMA+0x18e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <HAL_ADC_Start_DMA+0x218>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d105      	bne.n	80052ec <HAL_ADC_Start_DMA+0x178>
 80052e0:	4b25      	ldr	r3, [pc, #148]	; (8005378 <HAL_ADC_Start_DMA+0x204>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_ADC_Start_DMA+0x21c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d136      	bne.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
 80052f6:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_ADC_Start_DMA+0x204>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d130      	bne.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d129      	bne.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	e020      	b.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_ADC_Start_DMA+0x214>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d11b      	bne.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d114      	bne.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	e00b      	b.n	8005364 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	f043 0201 	orr.w	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2000001c 	.word	0x2000001c
 8005374:	431bde83 	.word	0x431bde83
 8005378:	40012300 	.word	0x40012300
 800537c:	0800582d 	.word	0x0800582d
 8005380:	080058e7 	.word	0x080058e7
 8005384:	08005903 	.word	0x08005903
 8005388:	40012000 	.word	0x40012000
 800538c:	40012100 	.word	0x40012100
 8005390:	40012200 	.word	0x40012200

08005394 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x1c>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e113      	b.n	8005614 <HAL_ADC_ConfigChannel+0x244>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b09      	cmp	r3, #9
 80053fa:	d925      	bls.n	8005448 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68d9      	ldr	r1, [r3, #12]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	3b1e      	subs	r3, #30
 8005412:	2207      	movs	r2, #7
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43da      	mvns	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	400a      	ands	r2, r1
 8005420:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68d9      	ldr	r1, [r3, #12]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	4618      	mov	r0, r3
 8005434:	4603      	mov	r3, r0
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4403      	add	r3, r0
 800543a:	3b1e      	subs	r3, #30
 800543c:	409a      	lsls	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	e022      	b.n	800548e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6919      	ldr	r1, [r3, #16]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	2207      	movs	r2, #7
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43da      	mvns	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	400a      	ands	r2, r1
 800546a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6919      	ldr	r1, [r3, #16]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	4618      	mov	r0, r3
 800547e:	4603      	mov	r3, r0
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	4403      	add	r3, r0
 8005484:	409a      	lsls	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b06      	cmp	r3, #6
 8005494:	d824      	bhi.n	80054e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	3b05      	subs	r3, #5
 80054a8:	221f      	movs	r2, #31
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	400a      	ands	r2, r1
 80054b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4618      	mov	r0, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	3b05      	subs	r3, #5
 80054d2:	fa00 f203 	lsl.w	r2, r0, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	635a      	str	r2, [r3, #52]	; 0x34
 80054de:	e04c      	b.n	800557a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d824      	bhi.n	8005532 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	3b23      	subs	r3, #35	; 0x23
 80054fa:	221f      	movs	r2, #31
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43da      	mvns	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	400a      	ands	r2, r1
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	4618      	mov	r0, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	3b23      	subs	r3, #35	; 0x23
 8005524:	fa00 f203 	lsl.w	r2, r0, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
 8005530:	e023      	b.n	800557a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	3b41      	subs	r3, #65	; 0x41
 8005544:	221f      	movs	r2, #31
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43da      	mvns	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	400a      	ands	r2, r1
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	4618      	mov	r0, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	3b41      	subs	r3, #65	; 0x41
 800556e:	fa00 f203 	lsl.w	r2, r0, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800557a:	4b29      	ldr	r3, [pc, #164]	; (8005620 <HAL_ADC_ConfigChannel+0x250>)
 800557c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a28      	ldr	r2, [pc, #160]	; (8005624 <HAL_ADC_ConfigChannel+0x254>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10f      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x1d8>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b12      	cmp	r3, #18
 800558e:	d10b      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <HAL_ADC_ConfigChannel+0x254>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d12b      	bne.n	800560a <HAL_ADC_ConfigChannel+0x23a>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <HAL_ADC_ConfigChannel+0x258>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <HAL_ADC_ConfigChannel+0x1f4>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b11      	cmp	r3, #17
 80055c2:	d122      	bne.n	800560a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a11      	ldr	r2, [pc, #68]	; (8005628 <HAL_ADC_ConfigChannel+0x258>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_ADC_ConfigChannel+0x25c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a11      	ldr	r2, [pc, #68]	; (8005630 <HAL_ADC_ConfigChannel+0x260>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	0c9a      	lsrs	r2, r3, #18
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055fc:	e002      	b.n	8005604 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3b01      	subs	r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f9      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012300 	.word	0x40012300
 8005624:	40012000 	.word	0x40012000
 8005628:	10000012 	.word	0x10000012
 800562c:	2000001c 	.word	0x2000001c
 8005630:	431bde83 	.word	0x431bde83

08005634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800563c:	4b79      	ldr	r3, [pc, #484]	; (8005824 <ADC_Init+0x1f0>)
 800563e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	431a      	orrs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	021a      	lsls	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800568c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6899      	ldr	r1, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	4a58      	ldr	r2, [pc, #352]	; (8005828 <ADC_Init+0x1f4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6899      	ldr	r1, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6899      	ldr	r1, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	e00f      	b.n	8005732 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0202 	bic.w	r2, r2, #2
 8005740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6899      	ldr	r1, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	7e1b      	ldrb	r3, [r3, #24]
 800574c:	005a      	lsls	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800576e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800577e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6859      	ldr	r1, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	3b01      	subs	r3, #1
 800578c:	035a      	lsls	r2, r3, #13
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e007      	b.n	80057a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	051a      	lsls	r2, r3, #20
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6899      	ldr	r1, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ea:	025a      	lsls	r2, r3, #9
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6899      	ldr	r1, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	029a      	lsls	r2, r3, #10
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012300 	.word	0x40012300
 8005828:	0f000001 	.word	0x0f000001

0800582c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005842:	2b00      	cmp	r3, #0
 8005844:	d13c      	bne.n	80058c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d12b      	bne.n	80058b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005864:	2b00      	cmp	r3, #0
 8005866:	d127      	bne.n	80058b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005872:	2b00      	cmp	r3, #0
 8005874:	d006      	beq.n	8005884 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005880:	2b00      	cmp	r3, #0
 8005882:	d119      	bne.n	80058b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0220 	bic.w	r2, r2, #32
 8005892:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f043 0201 	orr.w	r2, r3, #1
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fd6b 	bl	8005394 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058be:	e00e      	b.n	80058de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fd75 	bl	80053bc <HAL_ADC_ErrorCallback>
}
 80058d2:	e004      	b.n	80058de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fd57 	bl	80053a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2240      	movs	r2, #64	; 0x40
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	f043 0204 	orr.w	r2, r3, #4
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fd4a 	bl	80053bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <__NVIC_SetPriorityGrouping>:
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <__NVIC_SetPriorityGrouping+0x44>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800594c:	4013      	ands	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800595c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005962:	4a04      	ldr	r2, [pc, #16]	; (8005974 <__NVIC_SetPriorityGrouping+0x44>)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	60d3      	str	r3, [r2, #12]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <__NVIC_GetPriorityGrouping>:
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <__NVIC_GetPriorityGrouping+0x18>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	f003 0307 	and.w	r3, r3, #7
}
 8005986:	4618      	mov	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <__NVIC_EnableIRQ>:
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800599e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	db0b      	blt.n	80059be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	f003 021f 	and.w	r2, r3, #31
 80059ac:	4907      	ldr	r1, [pc, #28]	; (80059cc <__NVIC_EnableIRQ+0x38>)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2001      	movs	r0, #1
 80059b6:	fa00 f202 	lsl.w	r2, r0, r2
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	e000e100 	.word	0xe000e100

080059d0 <__NVIC_SetPriority>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	6039      	str	r1, [r7, #0]
 80059da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db0a      	blt.n	80059fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	490c      	ldr	r1, [pc, #48]	; (8005a1c <__NVIC_SetPriority+0x4c>)
 80059ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ee:	0112      	lsls	r2, r2, #4
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	440b      	add	r3, r1
 80059f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059f8:	e00a      	b.n	8005a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4908      	ldr	r1, [pc, #32]	; (8005a20 <__NVIC_SetPriority+0x50>)
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	3b04      	subs	r3, #4
 8005a08:	0112      	lsls	r2, r2, #4
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	761a      	strb	r2, [r3, #24]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	e000e100 	.word	0xe000e100
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <NVIC_EncodePriority>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f1c3 0307 	rsb	r3, r3, #7
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	bf28      	it	cs
 8005a42:	2304      	movcs	r3, #4
 8005a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	2b06      	cmp	r3, #6
 8005a4c:	d902      	bls.n	8005a54 <NVIC_EncodePriority+0x30>
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3b03      	subs	r3, #3
 8005a52:	e000      	b.n	8005a56 <NVIC_EncodePriority+0x32>
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43da      	mvns	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	401a      	ands	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	43d9      	mvns	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a7c:	4313      	orrs	r3, r2
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3724      	adds	r7, #36	; 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <SysTick_Config>:
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a9c:	d301      	bcc.n	8005aa2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e00f      	b.n	8005ac2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aa2:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <SysTick_Config+0x40>)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005aaa:	210f      	movs	r1, #15
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	f7ff ff8e 	bl	80059d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <SysTick_Config+0x40>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <SysTick_Config+0x40>)
 8005abc:	2207      	movs	r2, #7
 8005abe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	e000e010 	.word	0xe000e010

08005ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ff29 	bl	8005930 <__NVIC_SetPriorityGrouping>
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b086      	sub	sp, #24
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	4603      	mov	r3, r0
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005af8:	f7ff ff3e 	bl	8005978 <__NVIC_GetPriorityGrouping>
 8005afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	6978      	ldr	r0, [r7, #20]
 8005b04:	f7ff ff8e 	bl	8005a24 <NVIC_EncodePriority>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff ff5d 	bl	80059d0 <__NVIC_SetPriority>
}
 8005b16:	bf00      	nop
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	4603      	mov	r3, r0
 8005b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff ff31 	bl	8005994 <__NVIC_EnableIRQ>
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ffa2 	bl	8005a8c <SysTick_Config>
 8005b48:	4603      	mov	r3, r0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b60:	f7ff fa94 	bl	800508c <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e099      	b.n	8005ca4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b90:	e00f      	b.n	8005bb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b92:	f7ff fa7b 	bl	800508c <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d908      	bls.n	8005bb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e078      	b.n	8005ca4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e8      	bne.n	8005b92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4b38      	ldr	r3, [pc, #224]	; (8005cac <HAL_DMA_Init+0x158>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d107      	bne.n	8005c1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	4313      	orrs	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0307 	bic.w	r3, r3, #7
 8005c32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d117      	bne.n	8005c76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00e      	beq.n	8005c76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb01 	bl	8006260 <DMA_CheckFifoParam>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2240      	movs	r2, #64	; 0x40
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c72:	2301      	movs	r3, #1
 8005c74:	e016      	b.n	8005ca4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fab8 	bl	80061f4 <DMA_CalcBaseAndBitshift>
 8005c84:	4603      	mov	r3, r0
 8005c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8c:	223f      	movs	r2, #63	; 0x3f
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	f010803f 	.word	0xf010803f

08005cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_DMA_Start_IT+0x26>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e040      	b.n	8005d58 <HAL_DMA_Start_IT+0xa8>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d12f      	bne.n	8005d4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fa4a 	bl	8006198 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d08:	223f      	movs	r2, #63	; 0x3f
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0216 	orr.w	r2, r2, #22
 8005d1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e005      	b.n	8005d56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d52:	2302      	movs	r3, #2
 8005d54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d6e:	f7ff f98d 	bl	800508c <HAL_GetTick>
 8005d72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d008      	beq.n	8005d92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e052      	b.n	8005e38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0216 	bic.w	r2, r2, #22
 8005da0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d103      	bne.n	8005dc2 <HAL_DMA_Abort+0x62>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0208 	bic.w	r2, r2, #8
 8005dd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005de2:	e013      	b.n	8005e0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005de4:	f7ff f952 	bl	800508c <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d90c      	bls.n	8005e0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e015      	b.n	8005e38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e4      	bne.n	8005de4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	223f      	movs	r2, #63	; 0x3f
 8005e20:	409a      	lsls	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d004      	beq.n	8005e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e00c      	b.n	8005e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2205      	movs	r2, #5
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e90:	4b8e      	ldr	r3, [pc, #568]	; (80060cc <HAL_DMA_IRQHandler+0x248>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a8e      	ldr	r2, [pc, #568]	; (80060d0 <HAL_DMA_IRQHandler+0x24c>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0a9b      	lsrs	r3, r3, #10
 8005e9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eae:	2208      	movs	r2, #8
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01a      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0204 	bic.w	r2, r2, #4
 8005ed6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	2208      	movs	r2, #8
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f043 0201 	orr.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	2201      	movs	r2, #1
 8005f14:	409a      	lsls	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f043 0202 	orr.w	r2, r3, #2
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d012      	beq.n	8005f5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	2204      	movs	r2, #4
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	2210      	movs	r2, #16
 8005f62:	409a      	lsls	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d043      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d03c      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7e:	2210      	movs	r2, #16
 8005f80:	409a      	lsls	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d024      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
 8005fb2:	e01f      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	e016      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0208 	bic.w	r2, r2, #8
 8005fe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 808f 	beq.w	8006124 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8087 	beq.w	8006124 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601a:	2220      	movs	r2, #32
 800601c:	409a      	lsls	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b05      	cmp	r3, #5
 800602c:	d136      	bne.n	800609c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0216 	bic.w	r2, r2, #22
 800603c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800604c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <HAL_DMA_IRQHandler+0x1da>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0208 	bic.w	r2, r2, #8
 800606c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	223f      	movs	r2, #63	; 0x3f
 8006074:	409a      	lsls	r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	2b00      	cmp	r3, #0
 8006090:	d07e      	beq.n	8006190 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
        }
        return;
 800609a:	e079      	b.n	8006190 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01d      	beq.n	80060e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10d      	bne.n	80060d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d031      	beq.n	8006124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
 80060c8:	e02c      	b.n	8006124 <HAL_DMA_IRQHandler+0x2a0>
 80060ca:	bf00      	nop
 80060cc:	2000001c 	.word	0x2000001c
 80060d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d023      	beq.n	8006124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
 80060e4:	e01e      	b.n	8006124 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10f      	bne.n	8006114 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0210 	bic.w	r2, r2, #16
 8006102:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	2b00      	cmp	r3, #0
 800612a:	d032      	beq.n	8006192 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d022      	beq.n	800617e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2205      	movs	r2, #5
 800613c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3301      	adds	r3, #1
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	429a      	cmp	r2, r3
 800615a:	d307      	bcc.n	800616c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f2      	bne.n	8006150 <HAL_DMA_IRQHandler+0x2cc>
 800616a:	e000      	b.n	800616e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800616c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
 800618e:	e000      	b.n	8006192 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006190:	bf00      	nop
    }
  }
}
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d108      	bne.n	80061d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061d6:	e007      	b.n	80061e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	3b10      	subs	r3, #16
 8006204:	4a14      	ldr	r2, [pc, #80]	; (8006258 <DMA_CalcBaseAndBitshift+0x64>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800620e:	4a13      	ldr	r2, [pc, #76]	; (800625c <DMA_CalcBaseAndBitshift+0x68>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b03      	cmp	r3, #3
 8006220:	d909      	bls.n	8006236 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	659a      	str	r2, [r3, #88]	; 0x58
 8006234:	e007      	b.n	8006246 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	aaaaaaab 	.word	0xaaaaaaab
 800625c:	080110a0 	.word	0x080110a0

08006260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11f      	bne.n	80062ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d856      	bhi.n	800632e <DMA_CheckFifoParam+0xce>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <DMA_CheckFifoParam+0x28>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	08006299 	.word	0x08006299
 800628c:	080062ab 	.word	0x080062ab
 8006290:	08006299 	.word	0x08006299
 8006294:	0800632f 	.word	0x0800632f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d046      	beq.n	8006332 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a8:	e043      	b.n	8006332 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062b2:	d140      	bne.n	8006336 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b8:	e03d      	b.n	8006336 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c2:	d121      	bne.n	8006308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d837      	bhi.n	800633a <DMA_CheckFifoParam+0xda>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <DMA_CheckFifoParam+0x70>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	080062e7 	.word	0x080062e7
 80062d8:	080062e1 	.word	0x080062e1
 80062dc:	080062f9 	.word	0x080062f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	e030      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d025      	beq.n	800633e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f6:	e022      	b.n	800633e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006300:	d11f      	bne.n	8006342 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006306:	e01c      	b.n	8006342 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d903      	bls.n	8006316 <DMA_CheckFifoParam+0xb6>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d003      	beq.n	800631c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006314:	e018      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
      break;
 800631a:	e015      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00e      	beq.n	8006346 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	e00b      	b.n	8006346 <DMA_CheckFifoParam+0xe6>
      break;
 800632e:	bf00      	nop
 8006330:	e00a      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 8006332:	bf00      	nop
 8006334:	e008      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 8006336:	bf00      	nop
 8006338:	e006      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 800633a:	bf00      	nop
 800633c:	e004      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;   
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 8006346:	bf00      	nop
    }
  } 
  
  return status; 
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop

08006358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e165      	b.n	8006640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006374:	2201      	movs	r2, #1
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4013      	ands	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	429a      	cmp	r2, r3
 800638e:	f040 8154 	bne.w	800663a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d005      	beq.n	80063aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d130      	bne.n	800640c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	2203      	movs	r2, #3
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063e0:	2201      	movs	r2, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4013      	ands	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 0201 	and.w	r2, r3, #1
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d017      	beq.n	8006448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	2203      	movs	r2, #3
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4313      	orrs	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d123      	bne.n	800649c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	08da      	lsrs	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3208      	adds	r2, #8
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	220f      	movs	r2, #15
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	08da      	lsrs	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3208      	adds	r2, #8
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2203      	movs	r2, #3
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0203 	and.w	r2, r3, #3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80ae 	beq.w	800663a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	4b5d      	ldr	r3, [pc, #372]	; (8006658 <HAL_GPIO_Init+0x300>)
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	4a5c      	ldr	r2, [pc, #368]	; (8006658 <HAL_GPIO_Init+0x300>)
 80064e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ec:	6453      	str	r3, [r2, #68]	; 0x44
 80064ee:	4b5a      	ldr	r3, [pc, #360]	; (8006658 <HAL_GPIO_Init+0x300>)
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064fa:	4a58      	ldr	r2, [pc, #352]	; (800665c <HAL_GPIO_Init+0x304>)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	3302      	adds	r3, #2
 8006502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	220f      	movs	r2, #15
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a4f      	ldr	r2, [pc, #316]	; (8006660 <HAL_GPIO_Init+0x308>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d025      	beq.n	8006572 <HAL_GPIO_Init+0x21a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4e      	ldr	r2, [pc, #312]	; (8006664 <HAL_GPIO_Init+0x30c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01f      	beq.n	800656e <HAL_GPIO_Init+0x216>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a4d      	ldr	r2, [pc, #308]	; (8006668 <HAL_GPIO_Init+0x310>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d019      	beq.n	800656a <HAL_GPIO_Init+0x212>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a4c      	ldr	r2, [pc, #304]	; (800666c <HAL_GPIO_Init+0x314>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_GPIO_Init+0x20e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a4b      	ldr	r2, [pc, #300]	; (8006670 <HAL_GPIO_Init+0x318>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00d      	beq.n	8006562 <HAL_GPIO_Init+0x20a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a4a      	ldr	r2, [pc, #296]	; (8006674 <HAL_GPIO_Init+0x31c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <HAL_GPIO_Init+0x206>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a49      	ldr	r2, [pc, #292]	; (8006678 <HAL_GPIO_Init+0x320>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <HAL_GPIO_Init+0x202>
 8006556:	2306      	movs	r3, #6
 8006558:	e00c      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 800655a:	2307      	movs	r3, #7
 800655c:	e00a      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 800655e:	2305      	movs	r3, #5
 8006560:	e008      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 8006562:	2304      	movs	r3, #4
 8006564:	e006      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 8006566:	2303      	movs	r3, #3
 8006568:	e004      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 800656a:	2302      	movs	r3, #2
 800656c:	e002      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_GPIO_Init+0x21c>
 8006572:	2300      	movs	r3, #0
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	f002 0203 	and.w	r2, r2, #3
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	4093      	lsls	r3, r2
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006584:	4935      	ldr	r1, [pc, #212]	; (800665c <HAL_GPIO_Init+0x304>)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	089b      	lsrs	r3, r3, #2
 800658a:	3302      	adds	r3, #2
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006592:	4b3a      	ldr	r3, [pc, #232]	; (800667c <HAL_GPIO_Init+0x324>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065b6:	4a31      	ldr	r2, [pc, #196]	; (800667c <HAL_GPIO_Init+0x324>)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065bc:	4b2f      	ldr	r3, [pc, #188]	; (800667c <HAL_GPIO_Init+0x324>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <HAL_GPIO_Init+0x324>)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065e6:	4b25      	ldr	r3, [pc, #148]	; (800667c <HAL_GPIO_Init+0x324>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800660a:	4a1c      	ldr	r2, [pc, #112]	; (800667c <HAL_GPIO_Init+0x324>)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006610:	4b1a      	ldr	r3, [pc, #104]	; (800667c <HAL_GPIO_Init+0x324>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006634:	4a11      	ldr	r2, [pc, #68]	; (800667c <HAL_GPIO_Init+0x324>)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3301      	adds	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	f67f ae96 	bls.w	8006374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3724      	adds	r7, #36	; 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40023800 	.word	0x40023800
 800665c:	40013800 	.word	0x40013800
 8006660:	40020000 	.word	0x40020000
 8006664:	40020400 	.word	0x40020400
 8006668:	40020800 	.word	0x40020800
 800666c:	40020c00 	.word	0x40020c00
 8006670:	40021000 	.word	0x40021000
 8006674:	40021400 	.word	0x40021400
 8006678:	40021800 	.word	0x40021800
 800667c:	40013c00 	.word	0x40013c00

08006680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
 800669c:	e001      	b.n	80066a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	807b      	strh	r3, [r7, #2]
 80066bc:	4613      	mov	r3, r2
 80066be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066c0:	787b      	ldrb	r3, [r7, #1]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066c6:	887a      	ldrh	r2, [r7, #2]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066cc:	e003      	b.n	80066d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066ce:	887b      	ldrh	r3, [r7, #2]
 80066d0:	041a      	lsls	r2, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	619a      	str	r2, [r3, #24]
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e12b      	b.n	800694e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fd fe66 	bl	80043dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	; 0x24
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006748:	f001 f8ce 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800674c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4a81      	ldr	r2, [pc, #516]	; (8006958 <HAL_I2C_Init+0x274>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d807      	bhi.n	8006768 <HAL_I2C_Init+0x84>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a80      	ldr	r2, [pc, #512]	; (800695c <HAL_I2C_Init+0x278>)
 800675c:	4293      	cmp	r3, r2
 800675e:	bf94      	ite	ls
 8006760:	2301      	movls	r3, #1
 8006762:	2300      	movhi	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	e006      	b.n	8006776 <HAL_I2C_Init+0x92>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a7d      	ldr	r2, [pc, #500]	; (8006960 <HAL_I2C_Init+0x27c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	bf94      	ite	ls
 8006770:	2301      	movls	r3, #1
 8006772:	2300      	movhi	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e0e7      	b.n	800694e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a78      	ldr	r2, [pc, #480]	; (8006964 <HAL_I2C_Init+0x280>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	0c9b      	lsrs	r3, r3, #18
 8006788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <HAL_I2C_Init+0x274>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d802      	bhi.n	80067b8 <HAL_I2C_Init+0xd4>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	3301      	adds	r3, #1
 80067b6:	e009      	b.n	80067cc <HAL_I2C_Init+0xe8>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067be:	fb02 f303 	mul.w	r3, r2, r3
 80067c2:	4a69      	ldr	r2, [pc, #420]	; (8006968 <HAL_I2C_Init+0x284>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	099b      	lsrs	r3, r3, #6
 80067ca:	3301      	adds	r3, #1
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	495c      	ldr	r1, [pc, #368]	; (8006958 <HAL_I2C_Init+0x274>)
 80067e8:	428b      	cmp	r3, r1
 80067ea:	d819      	bhi.n	8006820 <HAL_I2C_Init+0x13c>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1e59      	subs	r1, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067fa:	1c59      	adds	r1, r3, #1
 80067fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006800:	400b      	ands	r3, r1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_I2C_Init+0x138>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1e59      	subs	r1, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	fbb1 f3f3 	udiv	r3, r1, r3
 8006814:	3301      	adds	r3, #1
 8006816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681a:	e051      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 800681c:	2304      	movs	r3, #4
 800681e:	e04f      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d111      	bne.n	800684c <HAL_I2C_Init+0x168>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1e58      	subs	r0, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6859      	ldr	r1, [r3, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	440b      	add	r3, r1
 8006836:	fbb0 f3f3 	udiv	r3, r0, r3
 800683a:	3301      	adds	r3, #1
 800683c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	e012      	b.n	8006872 <HAL_I2C_Init+0x18e>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1e58      	subs	r0, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	0099      	lsls	r1, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006862:	3301      	adds	r3, #1
 8006864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_I2C_Init+0x196>
 8006876:	2301      	movs	r3, #1
 8006878:	e022      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_I2C_Init+0x1bc>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1e58      	subs	r0, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	440b      	add	r3, r1
 8006890:	fbb0 f3f3 	udiv	r3, r0, r3
 8006894:	3301      	adds	r3, #1
 8006896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	e00f      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1e58      	subs	r0, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6859      	ldr	r1, [r3, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	0099      	lsls	r1, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	6809      	ldr	r1, [r1, #0]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6911      	ldr	r1, [r2, #16]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68d2      	ldr	r2, [r2, #12]
 80068fa:	4311      	orrs	r1, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	430b      	orrs	r3, r1
 8006902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	000186a0 	.word	0x000186a0
 800695c:	001e847f 	.word	0x001e847f
 8006960:	003d08ff 	.word	0x003d08ff
 8006964:	431bde83 	.word	0x431bde83
 8006968:	10624dd3 	.word	0x10624dd3

0800696c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	4608      	mov	r0, r1
 8006976:	4611      	mov	r1, r2
 8006978:	461a      	mov	r2, r3
 800697a:	4603      	mov	r3, r0
 800697c:	817b      	strh	r3, [r7, #10]
 800697e:	460b      	mov	r3, r1
 8006980:	813b      	strh	r3, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006986:	f7fe fb81 	bl	800508c <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b20      	cmp	r3, #32
 8006996:	f040 80d9 	bne.w	8006b4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2319      	movs	r3, #25
 80069a0:	2201      	movs	r2, #1
 80069a2:	496d      	ldr	r1, [pc, #436]	; (8006b58 <HAL_I2C_Mem_Write+0x1ec>)
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fc7f 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069b0:	2302      	movs	r3, #2
 80069b2:	e0cc      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_I2C_Mem_Write+0x56>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0c5      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d007      	beq.n	80069e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2221      	movs	r2, #33	; 0x21
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a4d      	ldr	r2, [pc, #308]	; (8006b5c <HAL_I2C_Mem_Write+0x1f0>)
 8006a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a2a:	88f8      	ldrh	r0, [r7, #6]
 8006a2c:	893a      	ldrh	r2, [r7, #8]
 8006a2e:	8979      	ldrh	r1, [r7, #10]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	4603      	mov	r3, r0
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fab6 	bl	8006fac <I2C_RequestMemoryWrite>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d052      	beq.n	8006aec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e081      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fd00 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d107      	bne.n	8006a72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e06b      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d11b      	bne.n	8006aec <HAL_I2C_Mem_Write+0x180>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d017      	beq.n	8006aec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1aa      	bne.n	8006a4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fcec 	bl	80074d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d107      	bne.n	8006b1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e016      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	00100002 	.word	0x00100002
 8006b5c:	ffff0000 	.word	0xffff0000

08006b60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	; 0x30
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	817b      	strh	r3, [r7, #10]
 8006b72:	460b      	mov	r3, r1
 8006b74:	813b      	strh	r3, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b7a:	f7fe fa87 	bl	800508c <HAL_GetTick>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	f040 8208 	bne.w	8006f9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2319      	movs	r3, #25
 8006b94:	2201      	movs	r2, #1
 8006b96:	497b      	ldr	r1, [pc, #492]	; (8006d84 <HAL_I2C_Mem_Read+0x224>)
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fb85 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e1fb      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_I2C_Mem_Read+0x56>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e1f4      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d007      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2222      	movs	r2, #34	; 0x22
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a5b      	ldr	r2, [pc, #364]	; (8006d88 <HAL_I2C_Mem_Read+0x228>)
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c1e:	88f8      	ldrh	r0, [r7, #6]
 8006c20:	893a      	ldrh	r2, [r7, #8]
 8006c22:	8979      	ldrh	r1, [r7, #10]
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fa52 	bl	80070d8 <I2C_RequestMemoryRead>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e1b0      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d113      	bne.n	8006c6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c46:	2300      	movs	r3, #0
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e184      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d11b      	bne.n	8006cae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e164      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d11b      	bne.n	8006cee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	e144      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d04:	e138      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f200 80f1 	bhi.w	8006ef2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d123      	bne.n	8006d60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fc1b 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e139      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d5e:	e10b      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d14e      	bne.n	8006e06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4906      	ldr	r1, [pc, #24]	; (8006d8c <HAL_I2C_Mem_Read+0x22c>)
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 fa98 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d008      	beq.n	8006d90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e10e      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
 8006d82:	bf00      	nop
 8006d84:	00100002 	.word	0x00100002
 8006d88:	ffff0000 	.word	0xffff0000
 8006d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e04:	e0b8      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4966      	ldr	r1, [pc, #408]	; (8006fa8 <HAL_I2C_Mem_Read+0x448>)
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fa49 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0bf      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2200      	movs	r2, #0
 8006e6a:	494f      	ldr	r1, [pc, #316]	; (8006fa8 <HAL_I2C_Mem_Read+0x448>)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa1b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e091      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ef0:	e042      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fb2e 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e04c      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d118      	bne.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f47f aec2 	bne.w	8006d06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	; 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	00010004 	.word	0x00010004

08006fac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	817b      	strh	r3, [r7, #10]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	813b      	strh	r3, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f960 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d103      	bne.n	8007006 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e05f      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007018:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	492d      	ldr	r1, [pc, #180]	; (80070d4 <I2C_RequestMemoryWrite+0x128>)
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f998 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e04c      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007048:	6a39      	ldr	r1, [r7, #32]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fa02 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	2b04      	cmp	r3, #4
 800705c:	d107      	bne.n	800706e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e02b      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d105      	bne.n	8007084 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007078:	893b      	ldrh	r3, [r7, #8]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	611a      	str	r2, [r3, #16]
 8007082:	e021      	b.n	80070c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b29b      	uxth	r3, r3
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007094:	6a39      	ldr	r1, [r7, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f9dc 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00d      	beq.n	80070be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d107      	bne.n	80070ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e005      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070be:	893b      	ldrh	r3, [r7, #8]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	00010002 	.word	0x00010002

080070d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	817b      	strh	r3, [r7, #10]
 80070ea:	460b      	mov	r3, r1
 80070ec:	813b      	strh	r3, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007100:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2200      	movs	r2, #0
 800711a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f8c2 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00d      	beq.n	8007146 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007138:	d103      	bne.n	8007142 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0aa      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	4952      	ldr	r1, [pc, #328]	; (80072a4 <I2C_RequestMemoryRead+0x1cc>)
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f8fa 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e097      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	6a39      	ldr	r1, [r7, #32]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f964 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	2b04      	cmp	r3, #4
 8007198:	d107      	bne.n	80071aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e076      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	611a      	str	r2, [r3, #16]
 80071be:	e021      	b.n	8007204 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071c0:	893b      	ldrh	r3, [r7, #8]
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d0:	6a39      	ldr	r1, [r7, #32]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 f93e 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d107      	bne.n	80071f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e050      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	6a39      	ldr	r1, [r7, #32]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f923 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	2b04      	cmp	r3, #4
 800721a:	d107      	bne.n	800722c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800722a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e035      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	2200      	movs	r2, #0
 8007248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f82b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00d      	beq.n	8007274 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007266:	d103      	bne.n	8007270 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e013      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007274:	897b      	ldrh	r3, [r7, #10]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	6a3a      	ldr	r2, [r7, #32]
 8007288:	4906      	ldr	r1, [pc, #24]	; (80072a4 <I2C_RequestMemoryRead+0x1cc>)
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f863 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	00010002 	.word	0x00010002

080072a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072b8:	e025      	b.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d021      	beq.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fd fee3 	bl	800508c <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e023      	b.n	800734e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10d      	bne.n	800732c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	43da      	mvns	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	e00c      	b.n	8007346 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	43da      	mvns	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf0c      	ite	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	2300      	movne	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d0b6      	beq.n	80072ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007364:	e051      	b.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007374:	d123      	bne.n	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007384:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800738e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f043 0204 	orr.w	r2, r3, #4
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e046      	b.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d021      	beq.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fd fe61 	bl	800508c <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d116      	bne.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e020      	b.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10c      	bne.n	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	43da      	mvns	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4013      	ands	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e00b      	b.n	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	43da      	mvns	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4013      	ands	r3, r2
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d18d      	bne.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007460:	e02d      	b.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f8ce 	bl	8007604 <I2C_IsAcknowledgeFailed>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e02d      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d021      	beq.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747a:	f7fd fe07 	bl	800508c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d116      	bne.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e007      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b80      	cmp	r3, #128	; 0x80
 80074ca:	d1ca      	bne.n	8007462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074e2:	e02d      	b.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f88d 	bl	8007604 <I2C_IsAcknowledgeFailed>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e02d      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d021      	beq.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fc:	f7fd fdc6 	bl	800508c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d116      	bne.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	f043 0220 	orr.w	r2, r3, #32
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e007      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b04      	cmp	r3, #4
 800754c:	d1ca      	bne.n	80074e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007564:	e042      	b.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b10      	cmp	r3, #16
 8007572:	d119      	bne.n	80075a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0210 	mvn.w	r2, #16
 800757c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e029      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a8:	f7fd fd70 	bl	800508c <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d302      	bcc.n	80075be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d116      	bne.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e007      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d1b5      	bne.n	8007566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761a:	d11b      	bne.n	8007654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4b20      	ldr	r3, [pc, #128]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767c:	6413      	str	r3, [r2, #64]	; 0x40
 800767e:	4b1d      	ldr	r3, [pc, #116]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800768a:	4b1b      	ldr	r3, [pc, #108]	; (80076f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800768c:	2201      	movs	r2, #1
 800768e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007690:	f7fd fcfc 	bl	800508c <HAL_GetTick>
 8007694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007696:	e009      	b.n	80076ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007698:	f7fd fcf8 	bl	800508c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a6:	d901      	bls.n	80076ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e01f      	b.n	80076ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076ac:	4b13      	ldr	r3, [pc, #76]	; (80076fc <HAL_PWREx_EnableOverDrive+0x98>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d1ee      	bne.n	8007698 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076c0:	f7fd fce4 	bl	800508c <HAL_GetTick>
 80076c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076c6:	e009      	b.n	80076dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076c8:	f7fd fce0 	bl	800508c <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076d6:	d901      	bls.n	80076dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e007      	b.n	80076ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076dc:	4b07      	ldr	r3, [pc, #28]	; (80076fc <HAL_PWREx_EnableOverDrive+0x98>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e8:	d1ee      	bne.n	80076c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40023800 	.word	0x40023800
 80076f8:	420e0040 	.word	0x420e0040
 80076fc:	40007000 	.word	0x40007000
 8007700:	420e0044 	.word	0x420e0044

08007704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e0cc      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007718:	4b68      	ldr	r3, [pc, #416]	; (80078bc <HAL_RCC_ClockConfig+0x1b8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d90c      	bls.n	8007740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b65      	ldr	r3, [pc, #404]	; (80078bc <HAL_RCC_ClockConfig+0x1b8>)
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800772e:	4b63      	ldr	r3, [pc, #396]	; (80078bc <HAL_RCC_ClockConfig+0x1b8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d001      	beq.n	8007740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e0b8      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d020      	beq.n	800778e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007758:	4b59      	ldr	r3, [pc, #356]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4a58      	ldr	r2, [pc, #352]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007770:	4b53      	ldr	r3, [pc, #332]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	4a52      	ldr	r2, [pc, #328]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800777a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800777c:	4b50      	ldr	r3, [pc, #320]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	494d      	ldr	r1, [pc, #308]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	4313      	orrs	r3, r2
 800778c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d044      	beq.n	8007824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d107      	bne.n	80077b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a2:	4b47      	ldr	r3, [pc, #284]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d119      	bne.n	80077e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e07f      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d003      	beq.n	80077c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d107      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077c2:	4b3f      	ldr	r3, [pc, #252]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e06f      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d2:	4b3b      	ldr	r3, [pc, #236]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e067      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077e2:	4b37      	ldr	r3, [pc, #220]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f023 0203 	bic.w	r2, r3, #3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	4934      	ldr	r1, [pc, #208]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077f4:	f7fd fc4a 	bl	800508c <HAL_GetTick>
 80077f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fa:	e00a      	b.n	8007812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077fc:	f7fd fc46 	bl	800508c <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	f241 3288 	movw	r2, #5000	; 0x1388
 800780a:	4293      	cmp	r3, r2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e04f      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007812:	4b2b      	ldr	r3, [pc, #172]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 020c 	and.w	r2, r3, #12
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	429a      	cmp	r2, r3
 8007822:	d1eb      	bne.n	80077fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007824:	4b25      	ldr	r3, [pc, #148]	; (80078bc <HAL_RCC_ClockConfig+0x1b8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d20c      	bcs.n	800784c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007832:	4b22      	ldr	r3, [pc, #136]	; (80078bc <HAL_RCC_ClockConfig+0x1b8>)
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800783a:	4b20      	ldr	r3, [pc, #128]	; (80078bc <HAL_RCC_ClockConfig+0x1b8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d001      	beq.n	800784c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e032      	b.n	80078b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007858:	4b19      	ldr	r3, [pc, #100]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	4916      	ldr	r1, [pc, #88]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007876:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	490e      	ldr	r1, [pc, #56]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007886:	4313      	orrs	r3, r2
 8007888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800788a:	f000 f855 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 800788e:	4602      	mov	r2, r0
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	490a      	ldr	r1, [pc, #40]	; (80078c4 <HAL_RCC_ClockConfig+0x1c0>)
 800789c:	5ccb      	ldrb	r3, [r1, r3]
 800789e:	fa22 f303 	lsr.w	r3, r2, r3
 80078a2:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <HAL_RCC_ClockConfig+0x1c4>)
 80078a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078a6:	4b09      	ldr	r3, [pc, #36]	; (80078cc <HAL_RCC_ClockConfig+0x1c8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fd fbaa 	bl	8005004 <HAL_InitTick>

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40023c00 	.word	0x40023c00
 80078c0:	40023800 	.word	0x40023800
 80078c4:	08011088 	.word	0x08011088
 80078c8:	2000001c 	.word	0x2000001c
 80078cc:	20000020 	.word	0x20000020

080078d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d4:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	2000001c 	.word	0x2000001c

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078ec:	f7ff fff0 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0a9b      	lsrs	r3, r3, #10
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4903      	ldr	r1, [pc, #12]	; (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40023800 	.word	0x40023800
 800790c:	08011098 	.word	0x08011098

08007910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007914:	f7ff ffdc 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 8007918:	4602      	mov	r2, r0
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	0b5b      	lsrs	r3, r3, #13
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	4903      	ldr	r1, [pc, #12]	; (8007934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007926:	5ccb      	ldrb	r3, [r1, r3]
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40023800 	.word	0x40023800
 8007934:	08011098 	.word	0x08011098

08007938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800793c:	b0ae      	sub	sp, #184	; 0xb8
 800793e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800795e:	4bcb      	ldr	r3, [pc, #812]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 030c 	and.w	r3, r3, #12
 8007966:	2b0c      	cmp	r3, #12
 8007968:	f200 8206 	bhi.w	8007d78 <HAL_RCC_GetSysClockFreq+0x440>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <HAL_RCC_GetSysClockFreq+0x3c>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	080079a9 	.word	0x080079a9
 8007978:	08007d79 	.word	0x08007d79
 800797c:	08007d79 	.word	0x08007d79
 8007980:	08007d79 	.word	0x08007d79
 8007984:	080079b1 	.word	0x080079b1
 8007988:	08007d79 	.word	0x08007d79
 800798c:	08007d79 	.word	0x08007d79
 8007990:	08007d79 	.word	0x08007d79
 8007994:	080079b9 	.word	0x080079b9
 8007998:	08007d79 	.word	0x08007d79
 800799c:	08007d79 	.word	0x08007d79
 80079a0:	08007d79 	.word	0x08007d79
 80079a4:	08007ba9 	.word	0x08007ba9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079a8:	4bb9      	ldr	r3, [pc, #740]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x358>)
 80079aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80079ae:	e1e7      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079b0:	4bb8      	ldr	r3, [pc, #736]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x35c>)
 80079b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80079b6:	e1e3      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079b8:	4bb4      	ldr	r3, [pc, #720]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079c4:	4bb1      	ldr	r3, [pc, #708]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d071      	beq.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079d0:	4bae      	ldr	r3, [pc, #696]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	099b      	lsrs	r3, r3, #6
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80079e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	f04f 0000 	mov.w	r0, #0
 80079fe:	f04f 0100 	mov.w	r1, #0
 8007a02:	0159      	lsls	r1, r3, #5
 8007a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a08:	0150      	lsls	r0, r2, #5
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4621      	mov	r1, r4
 8007a10:	1a51      	subs	r1, r2, r1
 8007a12:	6439      	str	r1, [r7, #64]	; 0x40
 8007a14:	4629      	mov	r1, r5
 8007a16:	eb63 0301 	sbc.w	r3, r3, r1
 8007a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007a28:	4649      	mov	r1, r9
 8007a2a:	018b      	lsls	r3, r1, #6
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a32:	4641      	mov	r1, r8
 8007a34:	018a      	lsls	r2, r1, #6
 8007a36:	4641      	mov	r1, r8
 8007a38:	1a51      	subs	r1, r2, r1
 8007a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	f04f 0300 	mov.w	r3, #0
 8007a4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007a50:	4649      	mov	r1, r9
 8007a52:	00cb      	lsls	r3, r1, #3
 8007a54:	4641      	mov	r1, r8
 8007a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	00ca      	lsls	r2, r1, #3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4619      	mov	r1, r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	4622      	mov	r2, r4
 8007a66:	189b      	adds	r3, r3, r2
 8007a68:	633b      	str	r3, [r7, #48]	; 0x30
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	460a      	mov	r2, r1
 8007a6e:	eb42 0303 	adc.w	r3, r2, r3
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a80:	4629      	mov	r1, r5
 8007a82:	024b      	lsls	r3, r1, #9
 8007a84:	4621      	mov	r1, r4
 8007a86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	024a      	lsls	r2, r1, #9
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4619      	mov	r1, r3
 8007a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007aa0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007aa4:	f7f9 f910 	bl	8000cc8 <__aeabi_uldivmod>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4613      	mov	r3, r2
 8007aae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ab2:	e067      	b.n	8007b84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ab4:	4b75      	ldr	r3, [pc, #468]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	099b      	lsrs	r3, r3, #6
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ac0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ace:	2300      	movs	r3, #0
 8007ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ad2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	f04f 0000 	mov.w	r0, #0
 8007ade:	f04f 0100 	mov.w	r1, #0
 8007ae2:	0159      	lsls	r1, r3, #5
 8007ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae8:	0150      	lsls	r0, r2, #5
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4621      	mov	r1, r4
 8007af0:	1a51      	subs	r1, r2, r1
 8007af2:	62b9      	str	r1, [r7, #40]	; 0x28
 8007af4:	4629      	mov	r1, r5
 8007af6:	eb63 0301 	sbc.w	r3, r3, r1
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007b08:	4649      	mov	r1, r9
 8007b0a:	018b      	lsls	r3, r1, #6
 8007b0c:	4641      	mov	r1, r8
 8007b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b12:	4641      	mov	r1, r8
 8007b14:	018a      	lsls	r2, r1, #6
 8007b16:	4641      	mov	r1, r8
 8007b18:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b36:	4692      	mov	sl, r2
 8007b38:	469b      	mov	fp, r3
 8007b3a:	4623      	mov	r3, r4
 8007b3c:	eb1a 0303 	adds.w	r3, sl, r3
 8007b40:	623b      	str	r3, [r7, #32]
 8007b42:	462b      	mov	r3, r5
 8007b44:	eb4b 0303 	adc.w	r3, fp, r3
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007b56:	4629      	mov	r1, r5
 8007b58:	028b      	lsls	r3, r1, #10
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b60:	4621      	mov	r1, r4
 8007b62:	028a      	lsls	r2, r1, #10
 8007b64:	4610      	mov	r0, r2
 8007b66:	4619      	mov	r1, r3
 8007b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b70:	677a      	str	r2, [r7, #116]	; 0x74
 8007b72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007b76:	f7f9 f8a7 	bl	8000cc8 <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4613      	mov	r3, r2
 8007b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b84:	4b41      	ldr	r3, [pc, #260]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	0c1b      	lsrs	r3, r3, #16
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	3301      	adds	r3, #1
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007ba6:	e0eb      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ba8:	4b38      	ldr	r3, [pc, #224]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bb4:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d06b      	beq.n	8007c98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bc0:	4b32      	ldr	r3, [pc, #200]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	099b      	lsrs	r3, r3, #6
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8007bd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f04f 0000 	mov.w	r0, #0
 8007be4:	f04f 0100 	mov.w	r1, #0
 8007be8:	0159      	lsls	r1, r3, #5
 8007bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bee:	0150      	lsls	r0, r2, #5
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	1a51      	subs	r1, r2, r1
 8007bf8:	61b9      	str	r1, [r7, #24]
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007c0e:	4659      	mov	r1, fp
 8007c10:	018b      	lsls	r3, r1, #6
 8007c12:	4651      	mov	r1, sl
 8007c14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c18:	4651      	mov	r1, sl
 8007c1a:	018a      	lsls	r2, r1, #6
 8007c1c:	4651      	mov	r1, sl
 8007c1e:	ebb2 0801 	subs.w	r8, r2, r1
 8007c22:	4659      	mov	r1, fp
 8007c24:	eb63 0901 	sbc.w	r9, r3, r1
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c3c:	4690      	mov	r8, r2
 8007c3e:	4699      	mov	r9, r3
 8007c40:	4623      	mov	r3, r4
 8007c42:	eb18 0303 	adds.w	r3, r8, r3
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	462b      	mov	r3, r5
 8007c4a:	eb49 0303 	adc.w	r3, r9, r3
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	f04f 0200 	mov.w	r2, #0
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	024b      	lsls	r3, r1, #9
 8007c60:	4621      	mov	r1, r4
 8007c62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c66:	4621      	mov	r1, r4
 8007c68:	024a      	lsls	r2, r1, #9
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c72:	2200      	movs	r2, #0
 8007c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007c78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c7c:	f7f9 f824 	bl	8000cc8 <__aeabi_uldivmod>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4613      	mov	r3, r2
 8007c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c8a:	e065      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x420>
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	00f42400 	.word	0x00f42400
 8007c94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c98:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	099b      	lsrs	r3, r3, #6
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8007caa:	2300      	movs	r3, #0
 8007cac:	657b      	str	r3, [r7, #84]	; 0x54
 8007cae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007cb2:	4642      	mov	r2, r8
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	f04f 0000 	mov.w	r0, #0
 8007cba:	f04f 0100 	mov.w	r1, #0
 8007cbe:	0159      	lsls	r1, r3, #5
 8007cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cc4:	0150      	lsls	r0, r2, #5
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4641      	mov	r1, r8
 8007ccc:	1a51      	subs	r1, r2, r1
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	018b      	lsls	r3, r1, #6
 8007ce8:	4651      	mov	r1, sl
 8007cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007cee:	4651      	mov	r1, sl
 8007cf0:	018a      	lsls	r2, r1, #6
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	1a54      	subs	r4, r2, r1
 8007cf6:	4659      	mov	r1, fp
 8007cf8:	eb63 0501 	sbc.w	r5, r3, r1
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	00eb      	lsls	r3, r5, #3
 8007d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d0a:	00e2      	lsls	r2, r4, #3
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	461d      	mov	r5, r3
 8007d10:	4643      	mov	r3, r8
 8007d12:	18e3      	adds	r3, r4, r3
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	464b      	mov	r3, r9
 8007d18:	eb45 0303 	adc.w	r3, r5, r3
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	028b      	lsls	r3, r1, #10
 8007d2e:	4621      	mov	r1, r4
 8007d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d34:	4621      	mov	r1, r4
 8007d36:	028a      	lsls	r2, r1, #10
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d40:	2200      	movs	r2, #0
 8007d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d44:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007d46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d4a:	f7f8 ffbd 	bl	8000cc8 <__aeabi_uldivmod>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4613      	mov	r3, r2
 8007d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007d58:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x458>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	0f1b      	lsrs	r3, r3, #28
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d76:	e003      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	37b8      	adds	r7, #184	; 0xb8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d8e:	bf00      	nop
 8007d90:	40023800 	.word	0x40023800
 8007d94:	00f42400 	.word	0x00f42400

08007d98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e28d      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 8083 	beq.w	8007ebe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007db8:	4b94      	ldr	r3, [pc, #592]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 030c 	and.w	r3, r3, #12
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d019      	beq.n	8007df8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007dc4:	4b91      	ldr	r3, [pc, #580]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d106      	bne.n	8007dde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007dd0:	4b8e      	ldr	r3, [pc, #568]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ddc:	d00c      	beq.n	8007df8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dde:	4b8b      	ldr	r3, [pc, #556]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007de6:	2b0c      	cmp	r3, #12
 8007de8:	d112      	bne.n	8007e10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dea:	4b88      	ldr	r3, [pc, #544]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007df6:	d10b      	bne.n	8007e10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df8:	4b84      	ldr	r3, [pc, #528]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d05b      	beq.n	8007ebc <HAL_RCC_OscConfig+0x124>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d157      	bne.n	8007ebc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e25a      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e18:	d106      	bne.n	8007e28 <HAL_RCC_OscConfig+0x90>
 8007e1a:	4b7c      	ldr	r3, [pc, #496]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a7b      	ldr	r2, [pc, #492]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	e01d      	b.n	8007e64 <HAL_RCC_OscConfig+0xcc>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e30:	d10c      	bne.n	8007e4c <HAL_RCC_OscConfig+0xb4>
 8007e32:	4b76      	ldr	r3, [pc, #472]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a75      	ldr	r2, [pc, #468]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	4b73      	ldr	r3, [pc, #460]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a72      	ldr	r2, [pc, #456]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	e00b      	b.n	8007e64 <HAL_RCC_OscConfig+0xcc>
 8007e4c:	4b6f      	ldr	r3, [pc, #444]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a6e      	ldr	r2, [pc, #440]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	4b6c      	ldr	r3, [pc, #432]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a6b      	ldr	r2, [pc, #428]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d013      	beq.n	8007e94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6c:	f7fd f90e 	bl	800508c <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e74:	f7fd f90a 	bl	800508c <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b64      	cmp	r3, #100	; 0x64
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e21f      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e86:	4b61      	ldr	r3, [pc, #388]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <HAL_RCC_OscConfig+0xdc>
 8007e92:	e014      	b.n	8007ebe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fd f8fa 	bl	800508c <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e9c:	f7fd f8f6 	bl	800508c <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b64      	cmp	r3, #100	; 0x64
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e20b      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eae:	4b57      	ldr	r3, [pc, #348]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f0      	bne.n	8007e9c <HAL_RCC_OscConfig+0x104>
 8007eba:	e000      	b.n	8007ebe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d06f      	beq.n	8007faa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007eca:	4b50      	ldr	r3, [pc, #320]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d017      	beq.n	8007f06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ed6:	4b4d      	ldr	r3, [pc, #308]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ede:	2b08      	cmp	r3, #8
 8007ee0:	d105      	bne.n	8007eee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ee2:	4b4a      	ldr	r3, [pc, #296]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eee:	4b47      	ldr	r3, [pc, #284]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ef6:	2b0c      	cmp	r3, #12
 8007ef8:	d11c      	bne.n	8007f34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007efa:	4b44      	ldr	r3, [pc, #272]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d116      	bne.n	8007f34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f06:	4b41      	ldr	r3, [pc, #260]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_RCC_OscConfig+0x186>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d001      	beq.n	8007f1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e1d3      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1e:	4b3b      	ldr	r3, [pc, #236]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	4937      	ldr	r1, [pc, #220]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f32:	e03a      	b.n	8007faa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f3c:	4b34      	ldr	r3, [pc, #208]	; (8008010 <HAL_RCC_OscConfig+0x278>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f42:	f7fd f8a3 	bl	800508c <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f4a:	f7fd f89f 	bl	800508c <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e1b4      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f5c:	4b2b      	ldr	r3, [pc, #172]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f68:	4b28      	ldr	r3, [pc, #160]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4925      	ldr	r1, [pc, #148]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	600b      	str	r3, [r1, #0]
 8007f7c:	e015      	b.n	8007faa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7e:	4b24      	ldr	r3, [pc, #144]	; (8008010 <HAL_RCC_OscConfig+0x278>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f84:	f7fd f882 	bl	800508c <HAL_GetTick>
 8007f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f8c:	f7fd f87e 	bl	800508c <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e193      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f9e:	4b1b      	ldr	r3, [pc, #108]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d036      	beq.n	8008024 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d016      	beq.n	8007fec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fbe:	4b15      	ldr	r3, [pc, #84]	; (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc4:	f7fd f862 	bl	800508c <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fcc:	f7fd f85e 	bl	800508c <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e173      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <HAL_RCC_OscConfig+0x274>)
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCC_OscConfig+0x234>
 8007fea:	e01b      	b.n	8008024 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff2:	f7fd f84b 	bl	800508c <HAL_GetTick>
 8007ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ff8:	e00e      	b.n	8008018 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ffa:	f7fd f847 	bl	800508c <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d907      	bls.n	8008018 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e15c      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
 800800c:	40023800 	.word	0x40023800
 8008010:	42470000 	.word	0x42470000
 8008014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008018:	4b8a      	ldr	r3, [pc, #552]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 800801a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ea      	bne.n	8007ffa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8097 	beq.w	8008160 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008036:	4b83      	ldr	r3, [pc, #524]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10f      	bne.n	8008062 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	4b7f      	ldr	r3, [pc, #508]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	4a7e      	ldr	r2, [pc, #504]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 800804c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008050:	6413      	str	r3, [r2, #64]	; 0x40
 8008052:	4b7c      	ldr	r3, [pc, #496]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805a:	60bb      	str	r3, [r7, #8]
 800805c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800805e:	2301      	movs	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008062:	4b79      	ldr	r3, [pc, #484]	; (8008248 <HAL_RCC_OscConfig+0x4b0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d118      	bne.n	80080a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800806e:	4b76      	ldr	r3, [pc, #472]	; (8008248 <HAL_RCC_OscConfig+0x4b0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a75      	ldr	r2, [pc, #468]	; (8008248 <HAL_RCC_OscConfig+0x4b0>)
 8008074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800807a:	f7fd f807 	bl	800508c <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008082:	f7fd f803 	bl	800508c <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e118      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008094:	4b6c      	ldr	r3, [pc, #432]	; (8008248 <HAL_RCC_OscConfig+0x4b0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f0      	beq.n	8008082 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d106      	bne.n	80080b6 <HAL_RCC_OscConfig+0x31e>
 80080a8:	4b66      	ldr	r3, [pc, #408]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ac:	4a65      	ldr	r2, [pc, #404]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	6713      	str	r3, [r2, #112]	; 0x70
 80080b4:	e01c      	b.n	80080f0 <HAL_RCC_OscConfig+0x358>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d10c      	bne.n	80080d8 <HAL_RCC_OscConfig+0x340>
 80080be:	4b61      	ldr	r3, [pc, #388]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c2:	4a60      	ldr	r2, [pc, #384]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080c4:	f043 0304 	orr.w	r3, r3, #4
 80080c8:	6713      	str	r3, [r2, #112]	; 0x70
 80080ca:	4b5e      	ldr	r3, [pc, #376]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	4a5d      	ldr	r2, [pc, #372]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080d0:	f043 0301 	orr.w	r3, r3, #1
 80080d4:	6713      	str	r3, [r2, #112]	; 0x70
 80080d6:	e00b      	b.n	80080f0 <HAL_RCC_OscConfig+0x358>
 80080d8:	4b5a      	ldr	r3, [pc, #360]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	4a59      	ldr	r2, [pc, #356]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080de:	f023 0301 	bic.w	r3, r3, #1
 80080e2:	6713      	str	r3, [r2, #112]	; 0x70
 80080e4:	4b57      	ldr	r3, [pc, #348]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e8:	4a56      	ldr	r2, [pc, #344]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80080ea:	f023 0304 	bic.w	r3, r3, #4
 80080ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d015      	beq.n	8008124 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f8:	f7fc ffc8 	bl	800508c <HAL_GetTick>
 80080fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fe:	e00a      	b.n	8008116 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008100:	f7fc ffc4 	bl	800508c <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	f241 3288 	movw	r2, #5000	; 0x1388
 800810e:	4293      	cmp	r3, r2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e0d7      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008116:	4b4b      	ldr	r3, [pc, #300]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 8008118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0ee      	beq.n	8008100 <HAL_RCC_OscConfig+0x368>
 8008122:	e014      	b.n	800814e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008124:	f7fc ffb2 	bl	800508c <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800812a:	e00a      	b.n	8008142 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800812c:	f7fc ffae 	bl	800508c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	f241 3288 	movw	r2, #5000	; 0x1388
 800813a:	4293      	cmp	r3, r2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e0c1      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008142:	4b40      	ldr	r3, [pc, #256]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1ee      	bne.n	800812c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d105      	bne.n	8008160 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008154:	4b3b      	ldr	r3, [pc, #236]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	4a3a      	ldr	r2, [pc, #232]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 800815a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 80ad 	beq.w	80082c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800816a:	4b36      	ldr	r3, [pc, #216]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 030c 	and.w	r3, r3, #12
 8008172:	2b08      	cmp	r3, #8
 8008174:	d060      	beq.n	8008238 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d145      	bne.n	800820a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817e:	4b33      	ldr	r3, [pc, #204]	; (800824c <HAL_RCC_OscConfig+0x4b4>)
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fc ff82 	bl	800508c <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800818c:	f7fc ff7e 	bl	800508c <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e093      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819e:	4b29      	ldr	r3, [pc, #164]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69da      	ldr	r2, [r3, #28]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	019b      	lsls	r3, r3, #6
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	3b01      	subs	r3, #1
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	061b      	lsls	r3, r3, #24
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	071b      	lsls	r3, r3, #28
 80081d6:	491b      	ldr	r1, [pc, #108]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <HAL_RCC_OscConfig+0x4b4>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e2:	f7fc ff53 	bl	800508c <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ea:	f7fc ff4f 	bl	800508c <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e064      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0f0      	beq.n	80081ea <HAL_RCC_OscConfig+0x452>
 8008208:	e05c      	b.n	80082c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800820a:	4b10      	ldr	r3, [pc, #64]	; (800824c <HAL_RCC_OscConfig+0x4b4>)
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fc ff3c 	bl	800508c <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008218:	f7fc ff38 	bl	800508c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e04d      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <HAL_RCC_OscConfig+0x4ac>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x480>
 8008236:	e045      	b.n	80082c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d107      	bne.n	8008250 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e040      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
 8008244:	40023800 	.word	0x40023800
 8008248:	40007000 	.word	0x40007000
 800824c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008250:	4b1f      	ldr	r3, [pc, #124]	; (80082d0 <HAL_RCC_OscConfig+0x538>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d030      	beq.n	80082c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008268:	429a      	cmp	r2, r3
 800826a:	d129      	bne.n	80082c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d122      	bne.n	80082c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008280:	4013      	ands	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008288:	4293      	cmp	r3, r2
 800828a:	d119      	bne.n	80082c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	3b01      	subs	r3, #1
 800829a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800829c:	429a      	cmp	r2, r3
 800829e:	d10f      	bne.n	80082c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d107      	bne.n	80082c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082bc:	429a      	cmp	r2, r3
 80082be:	d001      	beq.n	80082c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40023800 	.word	0x40023800

080082d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e07b      	b.n	80083de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d108      	bne.n	8008300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f6:	d009      	beq.n	800830c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	61da      	str	r2, [r3, #28]
 80082fe:	e005      	b.n	800830c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fc f94c 	bl	80045c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008390:	ea42 0103 	orr.w	r1, r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	f003 0104 	and.w	r1, r3, #4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	f003 0210 	and.w	r2, r3, #16
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b088      	sub	sp, #32
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	603b      	str	r3, [r7, #0]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_SPI_Transmit+0x22>
 8008404:	2302      	movs	r3, #2
 8008406:	e126      	b.n	8008656 <HAL_SPI_Transmit+0x270>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008410:	f7fc fe3c 	bl	800508c <HAL_GetTick>
 8008414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008416:	88fb      	ldrh	r3, [r7, #6]
 8008418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b01      	cmp	r3, #1
 8008424:	d002      	beq.n	800842c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008426:	2302      	movs	r3, #2
 8008428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800842a:	e10b      	b.n	8008644 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <HAL_SPI_Transmit+0x52>
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800843c:	e102      	b.n	8008644 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2203      	movs	r2, #3
 8008442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008484:	d10f      	bne.n	80084a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d007      	beq.n	80084c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084cc:	d14b      	bne.n	8008566 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_SPI_Transmit+0xf6>
 80084d6:	8afb      	ldrh	r3, [r7, #22]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d13e      	bne.n	800855a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008500:	e02b      	b.n	800855a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d112      	bne.n	8008536 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008514:	881a      	ldrh	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	86da      	strh	r2, [r3, #54]	; 0x36
 8008534:	e011      	b.n	800855a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008536:	f7fc fda9 	bl	800508c <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d803      	bhi.n	800854e <HAL_SPI_Transmit+0x168>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d102      	bne.n	8008554 <HAL_SPI_Transmit+0x16e>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008558:	e074      	b.n	8008644 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1ce      	bne.n	8008502 <HAL_SPI_Transmit+0x11c>
 8008564:	e04c      	b.n	8008600 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_SPI_Transmit+0x18e>
 800856e:	8afb      	ldrh	r3, [r7, #22]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d140      	bne.n	80085f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	330c      	adds	r3, #12
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800859a:	e02c      	b.n	80085f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d113      	bne.n	80085d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	330c      	adds	r3, #12
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80085d0:	e011      	b.n	80085f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085d2:	f7fc fd5b 	bl	800508c <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d803      	bhi.n	80085ea <HAL_SPI_Transmit+0x204>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d102      	bne.n	80085f0 <HAL_SPI_Transmit+0x20a>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085f4:	e026      	b.n	8008644 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1cd      	bne.n	800859c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fbcb 	bl	8008da0 <SPI_EndRxTxTransaction>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800861e:	2300      	movs	r3, #0
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	77fb      	strb	r3, [r7, #31]
 8008640:	e000      	b.n	8008644 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008654:	7ffb      	ldrb	r3, [r7, #31]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b088      	sub	sp, #32
 8008662:	af02      	add	r7, sp, #8
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4613      	mov	r3, r2
 800866c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800867a:	d112      	bne.n	80086a2 <HAL_SPI_Receive+0x44>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10e      	bne.n	80086a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2204      	movs	r2, #4
 8008688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800868c:	88fa      	ldrh	r2, [r7, #6]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f8f1 	bl	8008880 <HAL_SPI_TransmitReceive>
 800869e:	4603      	mov	r3, r0
 80086a0:	e0ea      	b.n	8008878 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_SPI_Receive+0x52>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e0e3      	b.n	8008878 <HAL_SPI_Receive+0x21a>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086b8:	f7fc fce8 	bl	800508c <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d002      	beq.n	80086d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80086ca:	2302      	movs	r3, #2
 80086cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086ce:	e0ca      	b.n	8008866 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <HAL_SPI_Receive+0x7e>
 80086d6:	88fb      	ldrh	r3, [r7, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086e0:	e0c1      	b.n	8008866 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2204      	movs	r2, #4
 80086e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008728:	d10f      	bne.n	800874a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008748:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b40      	cmp	r3, #64	; 0x40
 8008756:	d007      	beq.n	8008768 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008766:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d162      	bne.n	8008836 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008770:	e02e      	b.n	80087d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d115      	bne.n	80087ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f103 020c 	add.w	r2, r3, #12
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087aa:	e011      	b.n	80087d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087ac:	f7fc fc6e 	bl	800508c <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d803      	bhi.n	80087c4 <HAL_SPI_Receive+0x166>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d102      	bne.n	80087ca <HAL_SPI_Receive+0x16c>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087ce:	e04a      	b.n	8008866 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1cb      	bne.n	8008772 <HAL_SPI_Receive+0x114>
 80087da:	e031      	b.n	8008840 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d113      	bne.n	8008812 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	b292      	uxth	r2, r2
 80087f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	1c9a      	adds	r2, r3, #2
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29a      	uxth	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008810:	e011      	b.n	8008836 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008812:	f7fc fc3b 	bl	800508c <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d803      	bhi.n	800882a <HAL_SPI_Receive+0x1cc>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d102      	bne.n	8008830 <HAL_SPI_Receive+0x1d2>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008834:	e017      	b.n	8008866 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800883a:	b29b      	uxth	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1cd      	bne.n	80087dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fa45 	bl	8008cd4 <SPI_EndRxTransaction>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]
 8008862:	e000      	b.n	8008866 <HAL_SPI_Receive+0x208>
  }

error :
 8008864:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08c      	sub	sp, #48	; 0x30
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800888e:	2301      	movs	r3, #1
 8008890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x26>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e18a      	b.n	8008bbc <HAL_SPI_TransmitReceive+0x33c>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088ae:	f7fc fbed 	bl	800508c <HAL_GetTick>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80088c4:	887b      	ldrh	r3, [r7, #2]
 80088c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d00f      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x70>
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088d6:	d107      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x68>
 80088e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d003      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80088e8:	2302      	movs	r3, #2
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088ee:	e15b      	b.n	8008ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x82>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x82>
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008908:	e14e      	b.n	8008ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b04      	cmp	r3, #4
 8008914:	d003      	beq.n	800891e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2205      	movs	r2, #5
 800891a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	887a      	ldrh	r2, [r7, #2]
 800892e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	887a      	ldrh	r2, [r7, #2]
 8008934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	887a      	ldrh	r2, [r7, #2]
 8008940:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	887a      	ldrh	r2, [r7, #2]
 8008946:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895e:	2b40      	cmp	r3, #64	; 0x40
 8008960:	d007      	beq.n	8008972 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897a:	d178      	bne.n	8008a6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <HAL_SPI_TransmitReceive+0x10a>
 8008984:	8b7b      	ldrh	r3, [r7, #26]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d166      	bne.n	8008a58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	881a      	ldrh	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	1c9a      	adds	r2, r3, #2
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ae:	e053      	b.n	8008a58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d11b      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x176>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d016      	beq.n	80089f6 <HAL_SPI_TransmitReceive+0x176>
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d113      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	881a      	ldrh	r2, [r3, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d119      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x1b8>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d014      	beq.n	8008a38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	1c9a      	adds	r2, r3, #2
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a34:	2301      	movs	r3, #1
 8008a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a38:	f7fc fb28 	bl	800508c <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d807      	bhi.n	8008a58 <HAL_SPI_TransmitReceive+0x1d8>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d003      	beq.n	8008a58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a56:	e0a7      	b.n	8008ba8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1a6      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x130>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1a1      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x130>
 8008a6c:	e07c      	b.n	8008b68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_SPI_TransmitReceive+0x1fc>
 8008a76:	8b7b      	ldrh	r3, [r7, #26]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d16b      	bne.n	8008b54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	330c      	adds	r3, #12
 8008a86:	7812      	ldrb	r2, [r2, #0]
 8008a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aa2:	e057      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d11c      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x26c>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d017      	beq.n	8008aec <HAL_SPI_TransmitReceive+0x26c>
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d114      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	330c      	adds	r3, #12
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d119      	bne.n	8008b2e <HAL_SPI_TransmitReceive+0x2ae>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d014      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b2e:	f7fc faad 	bl	800508c <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d803      	bhi.n	8008b46 <HAL_SPI_TransmitReceive+0x2c6>
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d102      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x2cc>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d103      	bne.n	8008b54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b52:	e029      	b.n	8008ba8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1a2      	bne.n	8008aa4 <HAL_SPI_TransmitReceive+0x224>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d19d      	bne.n	8008aa4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 f917 	bl	8008da0 <SPI_EndRxTxTransaction>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b84:	e010      	b.n	8008ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10b      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	e000      	b.n	8008ba8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3730      	adds	r7, #48	; 0x30
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008bd4:	f7fc fa5a 	bl	800508c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	4413      	add	r3, r2
 8008be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008be4:	f7fc fa52 	bl	800508c <HAL_GetTick>
 8008be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008bea:	4b39      	ldr	r3, [pc, #228]	; (8008cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	015b      	lsls	r3, r3, #5
 8008bf0:	0d1b      	lsrs	r3, r3, #20
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
 8008bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bfa:	e054      	b.n	8008ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d050      	beq.n	8008ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c04:	f7fc fa42 	bl	800508c <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d902      	bls.n	8008c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d13d      	bne.n	8008c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c32:	d111      	bne.n	8008c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c3c:	d004      	beq.n	8008c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c46:	d107      	bne.n	8008c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c60:	d10f      	bne.n	8008c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e017      	b.n	8008cc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	bf0c      	ite	eq
 8008cb6:	2301      	moveq	r3, #1
 8008cb8:	2300      	movne	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d19b      	bne.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2000001c 	.word	0x2000001c

08008cd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ce8:	d111      	bne.n	8008d0e <SPI_EndRxTransaction+0x3a>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf2:	d004      	beq.n	8008cfe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cfc:	d107      	bne.n	8008d0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d0c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d16:	d12a      	bne.n	8008d6e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d20:	d012      	beq.n	8008d48 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff ff49 	bl	8008bc4 <SPI_WaitFlagStateUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d02d      	beq.n	8008d94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3c:	f043 0220 	orr.w	r2, r3, #32
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e026      	b.n	8008d96 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2101      	movs	r1, #1
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff ff36 	bl	8008bc4 <SPI_WaitFlagStateUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01a      	beq.n	8008d94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f043 0220 	orr.w	r2, r3, #32
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e013      	b.n	8008d96 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	2101      	movs	r1, #1
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff ff23 	bl	8008bc4 <SPI_WaitFlagStateUntilTimeout>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d88:	f043 0220 	orr.w	r2, r3, #32
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e000      	b.n	8008d96 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008dac:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <SPI_EndRxTxTransaction+0x7c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <SPI_EndRxTxTransaction+0x80>)
 8008db2:	fba2 2303 	umull	r2, r3, r2, r3
 8008db6:	0d5b      	lsrs	r3, r3, #21
 8008db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dbc:	fb02 f303 	mul.w	r3, r2, r3
 8008dc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dca:	d112      	bne.n	8008df2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7ff fef4 	bl	8008bc4 <SPI_WaitFlagStateUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d016      	beq.n	8008e10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de6:	f043 0220 	orr.w	r2, r3, #32
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e00f      	b.n	8008e12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	2b80      	cmp	r3, #128	; 0x80
 8008e0a:	d0f2      	beq.n	8008df2 <SPI_EndRxTxTransaction+0x52>
 8008e0c:	e000      	b.n	8008e10 <SPI_EndRxTxTransaction+0x70>
        break;
 8008e0e:	bf00      	nop
  }

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	2000001c 	.word	0x2000001c
 8008e20:	165e9f81 	.word	0x165e9f81

08008e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e041      	b.n	8008eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7fb fc86 	bl	800475c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f000 f95e 	bl	8009124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d001      	beq.n	8008edc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e046      	b.n	8008f6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a23      	ldr	r2, [pc, #140]	; (8008f78 <HAL_TIM_Base_Start+0xb4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d022      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d01d      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <HAL_TIM_Base_Start+0xb8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d018      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <HAL_TIM_Base_Start+0xbc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <HAL_TIM_Base_Start+0xc0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00e      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <HAL_TIM_Base_Start+0xc4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d009      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <HAL_TIM_Base_Start+0xc8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d004      	beq.n	8008f34 <HAL_TIM_Base_Start+0x70>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <HAL_TIM_Base_Start+0xcc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d111      	bne.n	8008f58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b06      	cmp	r3, #6
 8008f44:	d010      	beq.n	8008f68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f56:	e007      	b.n	8008f68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40010000 	.word	0x40010000
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	40010400 	.word	0x40010400
 8008f8c:	40014000 	.word	0x40014000
 8008f90:	40001800 	.word	0x40001800

08008f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e0b4      	b.n	800911a <HAL_TIM_ConfigClockSource+0x186>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe8:	d03e      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0xd4>
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fee:	f200 8087 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff6:	f000 8086 	beq.w	8009106 <HAL_TIM_ConfigClockSource+0x172>
 8008ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffe:	d87f      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009000:	2b70      	cmp	r3, #112	; 0x70
 8009002:	d01a      	beq.n	800903a <HAL_TIM_ConfigClockSource+0xa6>
 8009004:	2b70      	cmp	r3, #112	; 0x70
 8009006:	d87b      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009008:	2b60      	cmp	r3, #96	; 0x60
 800900a:	d050      	beq.n	80090ae <HAL_TIM_ConfigClockSource+0x11a>
 800900c:	2b60      	cmp	r3, #96	; 0x60
 800900e:	d877      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009010:	2b50      	cmp	r3, #80	; 0x50
 8009012:	d03c      	beq.n	800908e <HAL_TIM_ConfigClockSource+0xfa>
 8009014:	2b50      	cmp	r3, #80	; 0x50
 8009016:	d873      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d058      	beq.n	80090ce <HAL_TIM_ConfigClockSource+0x13a>
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d86f      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009020:	2b30      	cmp	r3, #48	; 0x30
 8009022:	d064      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 8009024:	2b30      	cmp	r3, #48	; 0x30
 8009026:	d86b      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009028:	2b20      	cmp	r3, #32
 800902a:	d060      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 800902c:	2b20      	cmp	r3, #32
 800902e:	d867      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d05c      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 8009034:	2b10      	cmp	r3, #16
 8009036:	d05a      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 8009038:	e062      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6899      	ldr	r1, [r3, #8]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f000 f985 	bl	8009358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800905c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	609a      	str	r2, [r3, #8]
      break;
 8009066:	e04f      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	6899      	ldr	r1, [r3, #8]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f000 f96e 	bl	8009358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800908a:	609a      	str	r2, [r3, #8]
      break;
 800908c:	e03c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6859      	ldr	r1, [r3, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	461a      	mov	r2, r3
 800909c:	f000 f8e2 	bl	8009264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2150      	movs	r1, #80	; 0x50
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f93b 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 80090ac:	e02c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6859      	ldr	r1, [r3, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	461a      	mov	r2, r3
 80090bc:	f000 f901 	bl	80092c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2160      	movs	r1, #96	; 0x60
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f92b 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 80090cc:	e01c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	6859      	ldr	r1, [r3, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	461a      	mov	r2, r3
 80090dc:	f000 f8c2 	bl	8009264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2140      	movs	r1, #64	; 0x40
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 f91b 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 80090ec:	e00c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f000 f912 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 80090fe:	e003      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
      break;
 8009104:	e000      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a40      	ldr	r2, [pc, #256]	; (8009238 <TIM_Base_SetConfig+0x114>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d013      	beq.n	8009164 <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009142:	d00f      	beq.n	8009164 <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a3d      	ldr	r2, [pc, #244]	; (800923c <TIM_Base_SetConfig+0x118>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00b      	beq.n	8009164 <TIM_Base_SetConfig+0x40>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a3c      	ldr	r2, [pc, #240]	; (8009240 <TIM_Base_SetConfig+0x11c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d007      	beq.n	8009164 <TIM_Base_SetConfig+0x40>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a3b      	ldr	r2, [pc, #236]	; (8009244 <TIM_Base_SetConfig+0x120>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d003      	beq.n	8009164 <TIM_Base_SetConfig+0x40>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a3a      	ldr	r2, [pc, #232]	; (8009248 <TIM_Base_SetConfig+0x124>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d108      	bne.n	8009176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a2f      	ldr	r2, [pc, #188]	; (8009238 <TIM_Base_SetConfig+0x114>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d02b      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009184:	d027      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2c      	ldr	r2, [pc, #176]	; (800923c <TIM_Base_SetConfig+0x118>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d023      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a2b      	ldr	r2, [pc, #172]	; (8009240 <TIM_Base_SetConfig+0x11c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d01f      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2a      	ldr	r2, [pc, #168]	; (8009244 <TIM_Base_SetConfig+0x120>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01b      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a29      	ldr	r2, [pc, #164]	; (8009248 <TIM_Base_SetConfig+0x124>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d017      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a28      	ldr	r2, [pc, #160]	; (800924c <TIM_Base_SetConfig+0x128>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d013      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a27      	ldr	r2, [pc, #156]	; (8009250 <TIM_Base_SetConfig+0x12c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00f      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a26      	ldr	r2, [pc, #152]	; (8009254 <TIM_Base_SetConfig+0x130>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00b      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a25      	ldr	r2, [pc, #148]	; (8009258 <TIM_Base_SetConfig+0x134>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d007      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a24      	ldr	r2, [pc, #144]	; (800925c <TIM_Base_SetConfig+0x138>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d003      	beq.n	80091d6 <TIM_Base_SetConfig+0xb2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a23      	ldr	r2, [pc, #140]	; (8009260 <TIM_Base_SetConfig+0x13c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d108      	bne.n	80091e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a0a      	ldr	r2, [pc, #40]	; (8009238 <TIM_Base_SetConfig+0x114>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <TIM_Base_SetConfig+0xf8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a0c      	ldr	r2, [pc, #48]	; (8009248 <TIM_Base_SetConfig+0x124>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d103      	bne.n	8009224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	615a      	str	r2, [r3, #20]
}
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40010000 	.word	0x40010000
 800923c:	40000400 	.word	0x40000400
 8009240:	40000800 	.word	0x40000800
 8009244:	40000c00 	.word	0x40000c00
 8009248:	40010400 	.word	0x40010400
 800924c:	40014000 	.word	0x40014000
 8009250:	40014400 	.word	0x40014400
 8009254:	40014800 	.word	0x40014800
 8009258:	40001800 	.word	0x40001800
 800925c:	40001c00 	.word	0x40001c00
 8009260:	40002000 	.word	0x40002000

08009264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f023 0201 	bic.w	r2, r3, #1
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800928e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	4313      	orrs	r3, r2
 8009298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f023 030a 	bic.w	r3, r3, #10
 80092a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	621a      	str	r2, [r3, #32]
}
 80092b6:	bf00      	nop
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b087      	sub	sp, #28
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f023 0210 	bic.w	r2, r3, #16
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	031b      	lsls	r3, r3, #12
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4313      	orrs	r3, r2
 8009308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	621a      	str	r2, [r3, #32]
}
 8009316:	bf00      	nop
 8009318:	371c      	adds	r7, #28
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	f043 0307 	orr.w	r3, r3, #7
 8009344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	431a      	orrs	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4313      	orrs	r3, r2
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	609a      	str	r2, [r3, #8]
}
 800938c:	bf00      	nop
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e05a      	b.n	8009466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a21      	ldr	r2, [pc, #132]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d022      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d01d      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1d      	ldr	r2, [pc, #116]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d018      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1b      	ldr	r2, [pc, #108]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1a      	ldr	r2, [pc, #104]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00e      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a18      	ldr	r2, [pc, #96]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d009      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a17      	ldr	r2, [pc, #92]	; (8009488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a15      	ldr	r2, [pc, #84]	; (800948c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d10c      	bne.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	4313      	orrs	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40010000 	.word	0x40010000
 8009478:	40000400 	.word	0x40000400
 800947c:	40000800 	.word	0x40000800
 8009480:	40000c00 	.word	0x40000c00
 8009484:	40010400 	.word	0x40010400
 8009488:	40014000 	.word	0x40014000
 800948c:	40001800 	.word	0x40001800

08009490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e03f      	b.n	8009522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d106      	bne.n	80094bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7fb f972 	bl	80047a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2224      	movs	r2, #36	; 0x24
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fd7b 	bl	8009fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	695a      	ldr	r2, [r3, #20]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2220      	movs	r2, #32
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b08a      	sub	sp, #40	; 0x28
 800952e:	af02      	add	r7, sp, #8
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	603b      	str	r3, [r7, #0]
 8009536:	4613      	mov	r3, r2
 8009538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b20      	cmp	r3, #32
 8009548:	d17c      	bne.n	8009644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <HAL_UART_Transmit+0x2c>
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e075      	b.n	8009646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009560:	2b01      	cmp	r3, #1
 8009562:	d101      	bne.n	8009568 <HAL_UART_Transmit+0x3e>
 8009564:	2302      	movs	r3, #2
 8009566:	e06e      	b.n	8009646 <HAL_UART_Transmit+0x11c>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2221      	movs	r2, #33	; 0x21
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800957e:	f7fb fd85 	bl	800508c <HAL_GetTick>
 8009582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	88fa      	ldrh	r2, [r7, #6]
 800958e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009598:	d108      	bne.n	80095ac <HAL_UART_Transmit+0x82>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	61bb      	str	r3, [r7, #24]
 80095aa:	e003      	b.n	80095b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80095bc:	e02a      	b.n	8009614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2200      	movs	r2, #0
 80095c6:	2180      	movs	r1, #128	; 0x80
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 faf9 	bl	8009bc0 <UART_WaitOnFlagUntilTimeout>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e036      	b.n	8009646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	3302      	adds	r3, #2
 80095f2:	61bb      	str	r3, [r7, #24]
 80095f4:	e007      	b.n	8009606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	781a      	ldrb	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	3301      	adds	r3, #1
 8009604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800960a:	b29b      	uxth	r3, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009618:	b29b      	uxth	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1cf      	bne.n	80095be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	2140      	movs	r1, #64	; 0x40
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fac9 	bl	8009bc0 <UART_WaitOnFlagUntilTimeout>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e006      	b.n	8009646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e000      	b.n	8009646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009644:	2302      	movs	r3, #2
  }
}
 8009646:	4618      	mov	r0, r3
 8009648:	3720      	adds	r7, #32
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b0ba      	sub	sp, #232	; 0xe8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009676:	2300      	movs	r3, #0
 8009678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800967c:	2300      	movs	r3, #0
 800967e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009686:	f003 030f 	and.w	r3, r3, #15
 800968a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800968e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10f      	bne.n	80096b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d009      	beq.n	80096b6 <HAL_UART_IRQHandler+0x66>
 80096a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a6:	f003 0320 	and.w	r3, r3, #32
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fbd3 	bl	8009e5a <UART_Receive_IT>
      return;
 80096b4:	e256      	b.n	8009b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80096b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 80de 	beq.w	800987c <HAL_UART_IRQHandler+0x22c>
 80096c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d106      	bne.n	80096da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 80d1 	beq.w	800987c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00b      	beq.n	80096fe <HAL_UART_IRQHandler+0xae>
 80096e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	f043 0201 	orr.w	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00b      	beq.n	8009722 <HAL_UART_IRQHandler+0xd2>
 800970a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	f043 0202 	orr.w	r2, r3, #2
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00b      	beq.n	8009746 <HAL_UART_IRQHandler+0xf6>
 800972e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d005      	beq.n	8009746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f043 0204 	orr.w	r2, r3, #4
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <HAL_UART_IRQHandler+0x126>
 8009752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d105      	bne.n	800976a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800975e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	f043 0208 	orr.w	r2, r3, #8
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 81ed 	beq.w	8009b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009784:	f003 0320 	and.w	r3, r3, #32
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <HAL_UART_IRQHandler+0x14e>
 800978c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009790:	f003 0320 	and.w	r3, r3, #32
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fb5e 	bl	8009e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a8:	2b40      	cmp	r3, #64	; 0x40
 80097aa:	bf0c      	ite	eq
 80097ac:	2301      	moveq	r3, #1
 80097ae:	2300      	movne	r3, #0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d103      	bne.n	80097ca <HAL_UART_IRQHandler+0x17a>
 80097c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d04f      	beq.n	800986a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa66 	bl	8009c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d141      	bne.n	8009862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3314      	adds	r3, #20
 80097e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3314      	adds	r3, #20
 8009806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800980a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800980e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1d9      	bne.n	80097de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	2b00      	cmp	r3, #0
 8009830:	d013      	beq.n	800985a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	4a7d      	ldr	r2, [pc, #500]	; (8009a2c <HAL_UART_IRQHandler+0x3dc>)
 8009838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	4618      	mov	r0, r3
 8009840:	f7fc fafe 	bl	8005e40 <HAL_DMA_Abort_IT>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d016      	beq.n	8009878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009858:	e00e      	b.n	8009878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f99a 	bl	8009b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009860:	e00a      	b.n	8009878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f996 	bl	8009b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009868:	e006      	b.n	8009878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f992 	bl	8009b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009876:	e170      	b.n	8009b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009878:	bf00      	nop
    return;
 800987a:	e16e      	b.n	8009b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	2b01      	cmp	r3, #1
 8009882:	f040 814a 	bne.w	8009b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 8143 	beq.w	8009b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 813c 	beq.w	8009b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098a2:	2300      	movs	r3, #0
 80098a4:	60bb      	str	r3, [r7, #8]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b40      	cmp	r3, #64	; 0x40
 80098c4:	f040 80b4 	bne.w	8009a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 8140 	beq.w	8009b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098e6:	429a      	cmp	r2, r3
 80098e8:	f080 8139 	bcs.w	8009b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098fe:	f000 8088 	beq.w	8009a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	330c      	adds	r3, #12
 8009908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800991c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330c      	adds	r3, #12
 800992a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800992e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800993a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1d9      	bne.n	8009902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3314      	adds	r3, #20
 8009954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800995e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3314      	adds	r3, #20
 800996e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800997a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e1      	bne.n	800994e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3314      	adds	r3, #20
 8009990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800999a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3314      	adds	r3, #20
 80099aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e3      	bne.n	800998a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	330c      	adds	r3, #12
 80099d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e2:	f023 0310 	bic.w	r3, r3, #16
 80099e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	330c      	adds	r3, #12
 80099f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80099f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099fc:	e841 2300 	strex	r3, r2, [r1]
 8009a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e3      	bne.n	80099d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fc f9a7 	bl	8005d60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f8c0 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a28:	e099      	b.n	8009b5e <HAL_UART_IRQHandler+0x50e>
 8009a2a:	bf00      	nop
 8009a2c:	08009d63 	.word	0x08009d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 808b 	beq.w	8009b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8086 	beq.w	8009b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	330c      	adds	r3, #12
 8009a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8009a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a82:	e841 2300 	strex	r3, r2, [r1]
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1e3      	bne.n	8009a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3314      	adds	r3, #20
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3314      	adds	r3, #20
 8009aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e3      	bne.n	8009a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	330c      	adds	r3, #12
 8009ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0310 	bic.w	r3, r3, #16
 8009aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009af8:	61fa      	str	r2, [r7, #28]
 8009afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	69b9      	ldr	r1, [r7, #24]
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	617b      	str	r3, [r7, #20]
   return(result);
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e3      	bne.n	8009ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f848 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b18:	e023      	b.n	8009b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d009      	beq.n	8009b3a <HAL_UART_IRQHandler+0x4ea>
 8009b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f929 	bl	8009d8a <UART_Transmit_IT>
    return;
 8009b38:	e014      	b.n	8009b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00e      	beq.n	8009b64 <HAL_UART_IRQHandler+0x514>
 8009b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d008      	beq.n	8009b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f969 	bl	8009e2a <UART_EndTransmit_IT>
    return;
 8009b58:	e004      	b.n	8009b64 <HAL_UART_IRQHandler+0x514>
    return;
 8009b5a:	bf00      	nop
 8009b5c:	e002      	b.n	8009b64 <HAL_UART_IRQHandler+0x514>
      return;
 8009b5e:	bf00      	nop
 8009b60:	e000      	b.n	8009b64 <HAL_UART_IRQHandler+0x514>
      return;
 8009b62:	bf00      	nop
  }
}
 8009b64:	37e8      	adds	r7, #232	; 0xe8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop

08009b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b090      	sub	sp, #64	; 0x40
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bd0:	e050      	b.n	8009c74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d04c      	beq.n	8009c74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009be0:	f7fb fa54 	bl	800508c <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d241      	bcs.n	8009c74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c10:	637a      	str	r2, [r7, #52]	; 0x34
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e5      	bne.n	8009bf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	613b      	str	r3, [r7, #16]
   return(result);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f023 0301 	bic.w	r3, r3, #1
 8009c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3314      	adds	r3, #20
 8009c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c44:	623a      	str	r2, [r7, #32]
 8009c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	69f9      	ldr	r1, [r7, #28]
 8009c4a:	6a3a      	ldr	r2, [r7, #32]
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e5      	bne.n	8009c24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e00f      	b.n	8009c94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	bf0c      	ite	eq
 8009c84:	2301      	moveq	r3, #1
 8009c86:	2300      	movne	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d09f      	beq.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3740      	adds	r7, #64	; 0x40
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b095      	sub	sp, #84	; 0x54
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	330c      	adds	r3, #12
 8009caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8009cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e5      	bne.n	8009ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	f023 0301 	bic.w	r3, r3, #1
 8009cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3314      	adds	r3, #20
 8009cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e5      	bne.n	8009cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d119      	bne.n	8009d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	330c      	adds	r3, #12
 8009d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f023 0310 	bic.w	r3, r3, #16
 8009d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d34:	61ba      	str	r2, [r7, #24]
 8009d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	6979      	ldr	r1, [r7, #20]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	613b      	str	r3, [r7, #16]
   return(result);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e5      	bne.n	8009d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d56:	bf00      	nop
 8009d58:	3754      	adds	r7, #84	; 0x54
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff ff09 	bl	8009b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b21      	cmp	r3, #33	; 0x21
 8009d9c:	d13e      	bne.n	8009e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da6:	d114      	bne.n	8009dd2 <UART_Transmit_IT+0x48>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d110      	bne.n	8009dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	1c9a      	adds	r2, r3, #2
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	621a      	str	r2, [r3, #32]
 8009dd0:	e008      	b.n	8009de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	1c59      	adds	r1, r3, #1
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6211      	str	r1, [r2, #32]
 8009ddc:	781a      	ldrb	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	4619      	mov	r1, r3
 8009df2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10f      	bne.n	8009e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68da      	ldr	r2, [r3, #12]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e000      	b.n	8009e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e1c:	2302      	movs	r3, #2
  }
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68da      	ldr	r2, [r3, #12]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fe8e 	bl	8009b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b08c      	sub	sp, #48	; 0x30
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b22      	cmp	r3, #34	; 0x22
 8009e6c:	f040 80ab 	bne.w	8009fc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e78:	d117      	bne.n	8009eaa <UART_Receive_IT+0x50>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d113      	bne.n	8009eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea2:	1c9a      	adds	r2, r3, #2
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ea8:	e026      	b.n	8009ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ebc:	d007      	beq.n	8009ece <UART_Receive_IT+0x74>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <UART_Receive_IT+0x82>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	e008      	b.n	8009eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	3b01      	subs	r3, #1
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	4619      	mov	r1, r3
 8009f06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d15a      	bne.n	8009fc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0220 	bic.w	r2, r2, #32
 8009f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	695a      	ldr	r2, [r3, #20]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0201 	bic.w	r2, r2, #1
 8009f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d135      	bne.n	8009fb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	613b      	str	r3, [r7, #16]
   return(result);
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f023 0310 	bic.w	r3, r3, #16
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	330c      	adds	r3, #12
 8009f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f72:	623a      	str	r2, [r7, #32]
 8009f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	69f9      	ldr	r1, [r7, #28]
 8009f78:	6a3a      	ldr	r2, [r7, #32]
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e5      	bne.n	8009f52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0310 	and.w	r3, r3, #16
 8009f90:	2b10      	cmp	r3, #16
 8009f92:	d10a      	bne.n	8009faa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff fdf9 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
 8009fb6:	e002      	b.n	8009fbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7ff fde1 	bl	8009b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e002      	b.n	8009fc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e000      	b.n	8009fc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009fc6:	2302      	movs	r3, #2
  }
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3730      	adds	r7, #48	; 0x30
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fd4:	b0c0      	sub	sp, #256	; 0x100
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fec:	68d9      	ldr	r1, [r3, #12]
 8009fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	ea40 0301 	orr.w	r3, r0, r1
 8009ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	431a      	orrs	r2, r3
 800a008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	431a      	orrs	r2, r3
 800a010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	4313      	orrs	r3, r2
 800a018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a028:	f021 010c 	bic.w	r1, r1, #12
 800a02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a036:	430b      	orrs	r3, r1
 800a038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04a:	6999      	ldr	r1, [r3, #24]
 800a04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	ea40 0301 	orr.w	r3, r0, r1
 800a056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b8f      	ldr	r3, [pc, #572]	; (800a29c <UART_SetConfig+0x2cc>)
 800a060:	429a      	cmp	r2, r3
 800a062:	d005      	beq.n	800a070 <UART_SetConfig+0xa0>
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	4b8d      	ldr	r3, [pc, #564]	; (800a2a0 <UART_SetConfig+0x2d0>)
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d104      	bne.n	800a07a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a070:	f7fd fc4e 	bl	8007910 <HAL_RCC_GetPCLK2Freq>
 800a074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a078:	e003      	b.n	800a082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a07a:	f7fd fc35 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800a07e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a08c:	f040 810c 	bne.w	800a2a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a094:	2200      	movs	r2, #0
 800a096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a09a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a09e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	1891      	adds	r1, r2, r2
 800a0a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a0aa:	415b      	adcs	r3, r3
 800a0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	eb12 0801 	adds.w	r8, r2, r1
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	eb43 0901 	adc.w	r9, r3, r1
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	f04f 0300 	mov.w	r3, #0
 800a0c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0d2:	4690      	mov	r8, r2
 800a0d4:	4699      	mov	r9, r3
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	eb18 0303 	adds.w	r3, r8, r3
 800a0dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	eb49 0303 	adc.w	r3, r9, r3
 800a0e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a0fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a0fe:	460b      	mov	r3, r1
 800a100:	18db      	adds	r3, r3, r3
 800a102:	653b      	str	r3, [r7, #80]	; 0x50
 800a104:	4613      	mov	r3, r2
 800a106:	eb42 0303 	adc.w	r3, r2, r3
 800a10a:	657b      	str	r3, [r7, #84]	; 0x54
 800a10c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a114:	f7f6 fdd8 	bl	8000cc8 <__aeabi_uldivmod>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4b61      	ldr	r3, [pc, #388]	; (800a2a4 <UART_SetConfig+0x2d4>)
 800a11e:	fba3 2302 	umull	r2, r3, r3, r2
 800a122:	095b      	lsrs	r3, r3, #5
 800a124:	011c      	lsls	r4, r3, #4
 800a126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a138:	4642      	mov	r2, r8
 800a13a:	464b      	mov	r3, r9
 800a13c:	1891      	adds	r1, r2, r2
 800a13e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a140:	415b      	adcs	r3, r3
 800a142:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a148:	4641      	mov	r1, r8
 800a14a:	eb12 0a01 	adds.w	sl, r2, r1
 800a14e:	4649      	mov	r1, r9
 800a150:	eb43 0b01 	adc.w	fp, r3, r1
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a168:	4692      	mov	sl, r2
 800a16a:	469b      	mov	fp, r3
 800a16c:	4643      	mov	r3, r8
 800a16e:	eb1a 0303 	adds.w	r3, sl, r3
 800a172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a176:	464b      	mov	r3, r9
 800a178:	eb4b 0303 	adc.w	r3, fp, r3
 800a17c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a18c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a194:	460b      	mov	r3, r1
 800a196:	18db      	adds	r3, r3, r3
 800a198:	643b      	str	r3, [r7, #64]	; 0x40
 800a19a:	4613      	mov	r3, r2
 800a19c:	eb42 0303 	adc.w	r3, r2, r3
 800a1a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a1aa:	f7f6 fd8d 	bl	8000cc8 <__aeabi_uldivmod>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4b3b      	ldr	r3, [pc, #236]	; (800a2a4 <UART_SetConfig+0x2d4>)
 800a1b6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1ba:	095b      	lsrs	r3, r3, #5
 800a1bc:	2264      	movs	r2, #100	; 0x64
 800a1be:	fb02 f303 	mul.w	r3, r2, r3
 800a1c2:	1acb      	subs	r3, r1, r3
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a1ca:	4b36      	ldr	r3, [pc, #216]	; (800a2a4 <UART_SetConfig+0x2d4>)
 800a1cc:	fba3 2302 	umull	r2, r3, r3, r2
 800a1d0:	095b      	lsrs	r3, r3, #5
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a1d8:	441c      	add	r4, r3
 800a1da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a1e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	1891      	adds	r1, r2, r2
 800a1f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1f4:	415b      	adcs	r3, r3
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	1851      	adds	r1, r2, r1
 800a200:	6339      	str	r1, [r7, #48]	; 0x30
 800a202:	4649      	mov	r1, r9
 800a204:	414b      	adcs	r3, r1
 800a206:	637b      	str	r3, [r7, #52]	; 0x34
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a214:	4659      	mov	r1, fp
 800a216:	00cb      	lsls	r3, r1, #3
 800a218:	4651      	mov	r1, sl
 800a21a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a21e:	4651      	mov	r1, sl
 800a220:	00ca      	lsls	r2, r1, #3
 800a222:	4610      	mov	r0, r2
 800a224:	4619      	mov	r1, r3
 800a226:	4603      	mov	r3, r0
 800a228:	4642      	mov	r2, r8
 800a22a:	189b      	adds	r3, r3, r2
 800a22c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a230:	464b      	mov	r3, r9
 800a232:	460a      	mov	r2, r1
 800a234:	eb42 0303 	adc.w	r3, r2, r3
 800a238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a24c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a250:	460b      	mov	r3, r1
 800a252:	18db      	adds	r3, r3, r3
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28
 800a256:	4613      	mov	r3, r2
 800a258:	eb42 0303 	adc.w	r3, r2, r3
 800a25c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a25e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a266:	f7f6 fd2f 	bl	8000cc8 <__aeabi_uldivmod>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <UART_SetConfig+0x2d4>)
 800a270:	fba3 1302 	umull	r1, r3, r3, r2
 800a274:	095b      	lsrs	r3, r3, #5
 800a276:	2164      	movs	r1, #100	; 0x64
 800a278:	fb01 f303 	mul.w	r3, r1, r3
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	3332      	adds	r3, #50	; 0x32
 800a282:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <UART_SetConfig+0x2d4>)
 800a284:	fba2 2303 	umull	r2, r3, r2, r3
 800a288:	095b      	lsrs	r3, r3, #5
 800a28a:	f003 0207 	and.w	r2, r3, #7
 800a28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4422      	add	r2, r4
 800a296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a298:	e105      	b.n	800a4a6 <UART_SetConfig+0x4d6>
 800a29a:	bf00      	nop
 800a29c:	40011000 	.word	0x40011000
 800a2a0:	40011400 	.word	0x40011400
 800a2a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a2b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a2ba:	4642      	mov	r2, r8
 800a2bc:	464b      	mov	r3, r9
 800a2be:	1891      	adds	r1, r2, r2
 800a2c0:	6239      	str	r1, [r7, #32]
 800a2c2:	415b      	adcs	r3, r3
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2ca:	4641      	mov	r1, r8
 800a2cc:	1854      	adds	r4, r2, r1
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	eb43 0501 	adc.w	r5, r3, r1
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	00eb      	lsls	r3, r5, #3
 800a2de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2e2:	00e2      	lsls	r2, r4, #3
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	461d      	mov	r5, r3
 800a2e8:	4643      	mov	r3, r8
 800a2ea:	18e3      	adds	r3, r4, r3
 800a2ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	eb45 0303 	adc.w	r3, r5, r3
 800a2f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a30a:	f04f 0200 	mov.w	r2, #0
 800a30e:	f04f 0300 	mov.w	r3, #0
 800a312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a316:	4629      	mov	r1, r5
 800a318:	008b      	lsls	r3, r1, #2
 800a31a:	4621      	mov	r1, r4
 800a31c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a320:	4621      	mov	r1, r4
 800a322:	008a      	lsls	r2, r1, #2
 800a324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a328:	f7f6 fcce 	bl	8000cc8 <__aeabi_uldivmod>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4b60      	ldr	r3, [pc, #384]	; (800a4b4 <UART_SetConfig+0x4e4>)
 800a332:	fba3 2302 	umull	r2, r3, r3, r2
 800a336:	095b      	lsrs	r3, r3, #5
 800a338:	011c      	lsls	r4, r3, #4
 800a33a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a34c:	4642      	mov	r2, r8
 800a34e:	464b      	mov	r3, r9
 800a350:	1891      	adds	r1, r2, r2
 800a352:	61b9      	str	r1, [r7, #24]
 800a354:	415b      	adcs	r3, r3
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a35c:	4641      	mov	r1, r8
 800a35e:	1851      	adds	r1, r2, r1
 800a360:	6139      	str	r1, [r7, #16]
 800a362:	4649      	mov	r1, r9
 800a364:	414b      	adcs	r3, r1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a374:	4659      	mov	r1, fp
 800a376:	00cb      	lsls	r3, r1, #3
 800a378:	4651      	mov	r1, sl
 800a37a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a37e:	4651      	mov	r1, sl
 800a380:	00ca      	lsls	r2, r1, #3
 800a382:	4610      	mov	r0, r2
 800a384:	4619      	mov	r1, r3
 800a386:	4603      	mov	r3, r0
 800a388:	4642      	mov	r2, r8
 800a38a:	189b      	adds	r3, r3, r2
 800a38c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a390:	464b      	mov	r3, r9
 800a392:	460a      	mov	r2, r1
 800a394:	eb42 0303 	adc.w	r3, r2, r3
 800a398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	008b      	lsls	r3, r1, #2
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3be:	4641      	mov	r1, r8
 800a3c0:	008a      	lsls	r2, r1, #2
 800a3c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a3c6:	f7f6 fc7f 	bl	8000cc8 <__aeabi_uldivmod>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4b39      	ldr	r3, [pc, #228]	; (800a4b4 <UART_SetConfig+0x4e4>)
 800a3d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a3d4:	095b      	lsrs	r3, r3, #5
 800a3d6:	2164      	movs	r1, #100	; 0x64
 800a3d8:	fb01 f303 	mul.w	r3, r1, r3
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	011b      	lsls	r3, r3, #4
 800a3e0:	3332      	adds	r3, #50	; 0x32
 800a3e2:	4a34      	ldr	r2, [pc, #208]	; (800a4b4 <UART_SetConfig+0x4e4>)
 800a3e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e8:	095b      	lsrs	r3, r3, #5
 800a3ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3ee:	441c      	add	r4, r3
 800a3f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	673b      	str	r3, [r7, #112]	; 0x70
 800a3f8:	677a      	str	r2, [r7, #116]	; 0x74
 800a3fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a3fe:	4642      	mov	r2, r8
 800a400:	464b      	mov	r3, r9
 800a402:	1891      	adds	r1, r2, r2
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	415b      	adcs	r3, r3
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a40e:	4641      	mov	r1, r8
 800a410:	1851      	adds	r1, r2, r1
 800a412:	6039      	str	r1, [r7, #0]
 800a414:	4649      	mov	r1, r9
 800a416:	414b      	adcs	r3, r1
 800a418:	607b      	str	r3, [r7, #4]
 800a41a:	f04f 0200 	mov.w	r2, #0
 800a41e:	f04f 0300 	mov.w	r3, #0
 800a422:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a426:	4659      	mov	r1, fp
 800a428:	00cb      	lsls	r3, r1, #3
 800a42a:	4651      	mov	r1, sl
 800a42c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a430:	4651      	mov	r1, sl
 800a432:	00ca      	lsls	r2, r1, #3
 800a434:	4610      	mov	r0, r2
 800a436:	4619      	mov	r1, r3
 800a438:	4603      	mov	r3, r0
 800a43a:	4642      	mov	r2, r8
 800a43c:	189b      	adds	r3, r3, r2
 800a43e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a440:	464b      	mov	r3, r9
 800a442:	460a      	mov	r2, r1
 800a444:	eb42 0303 	adc.w	r3, r2, r3
 800a448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	663b      	str	r3, [r7, #96]	; 0x60
 800a454:	667a      	str	r2, [r7, #100]	; 0x64
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	f04f 0300 	mov.w	r3, #0
 800a45e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a462:	4649      	mov	r1, r9
 800a464:	008b      	lsls	r3, r1, #2
 800a466:	4641      	mov	r1, r8
 800a468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a46c:	4641      	mov	r1, r8
 800a46e:	008a      	lsls	r2, r1, #2
 800a470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a474:	f7f6 fc28 	bl	8000cc8 <__aeabi_uldivmod>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <UART_SetConfig+0x4e4>)
 800a47e:	fba3 1302 	umull	r1, r3, r3, r2
 800a482:	095b      	lsrs	r3, r3, #5
 800a484:	2164      	movs	r1, #100	; 0x64
 800a486:	fb01 f303 	mul.w	r3, r1, r3
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	3332      	adds	r3, #50	; 0x32
 800a490:	4a08      	ldr	r2, [pc, #32]	; (800a4b4 <UART_SetConfig+0x4e4>)
 800a492:	fba2 2303 	umull	r2, r3, r2, r3
 800a496:	095b      	lsrs	r3, r3, #5
 800a498:	f003 020f 	and.w	r2, r3, #15
 800a49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4422      	add	r2, r4
 800a4a4:	609a      	str	r2, [r3, #8]
}
 800a4a6:	bf00      	nop
 800a4a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4b2:	bf00      	nop
 800a4b4:	51eb851f 	.word	0x51eb851f

0800a4b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a4bc:	4904      	ldr	r1, [pc, #16]	; (800a4d0 <MX_FATFS_Init+0x18>)
 800a4be:	4805      	ldr	r0, [pc, #20]	; (800a4d4 <MX_FATFS_Init+0x1c>)
 800a4c0:	f003 f83e 	bl	800d540 <FATFS_LinkDriver>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <MX_FATFS_Init+0x20>)
 800a4ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a4cc:	bf00      	nop
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20002b5c 	.word	0x20002b5c
 800a4d4:	20000028 	.word	0x20000028
 800a4d8:	20002b58 	.word	0x20002b58

0800a4dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7f8 fb6f 	bl	8002bdc <SD_disk_initialize>
 800a4fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a500:	4618      	mov	r0, r3
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	4618      	mov	r0, r3
 800a516:	f7f8 fc4d 	bl	8002db4 <SD_disk_status>
 800a51a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	607a      	str	r2, [r7, #4]
 800a52e:	603b      	str	r3, [r7, #0]
 800a530:	4603      	mov	r3, r0
 800a532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a534:	7bf8      	ldrb	r0, [r7, #15]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	f7f8 fc50 	bl	8002de0 <SD_disk_read>
 800a540:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
 800a556:	4603      	mov	r3, r0
 800a558:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800a55a:	7bf8      	ldrb	r0, [r7, #15]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	f7f8 fca7 	bl	8002eb4 <SD_disk_write>
 800a566:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	603a      	str	r2, [r7, #0]
 800a57a:	71fb      	strb	r3, [r7, #7]
 800a57c:	460b      	mov	r3, r1
 800a57e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 800a580:	79b9      	ldrb	r1, [r7, #6]
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	4618      	mov	r0, r3
 800a588:	f7f8 fd18 	bl	8002fbc <SD_disk_ioctl>
 800a58c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	4a08      	ldr	r2, [pc, #32]	; (800a5c8 <disk_status+0x30>)
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	79fa      	ldrb	r2, [r7, #7]
 800a5b0:	4905      	ldr	r1, [pc, #20]	; (800a5c8 <disk_status+0x30>)
 800a5b2:	440a      	add	r2, r1
 800a5b4:	7a12      	ldrb	r2, [r2, #8]
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4798      	blx	r3
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20002d88 	.word	0x20002d88

0800a5cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	4a0d      	ldr	r2, [pc, #52]	; (800a614 <disk_initialize+0x48>)
 800a5de:	5cd3      	ldrb	r3, [r2, r3]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d111      	bne.n	800a608 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	4a0b      	ldr	r2, [pc, #44]	; (800a614 <disk_initialize+0x48>)
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	4a09      	ldr	r2, [pc, #36]	; (800a614 <disk_initialize+0x48>)
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	79fa      	ldrb	r2, [r7, #7]
 800a5fa:	4906      	ldr	r1, [pc, #24]	; (800a614 <disk_initialize+0x48>)
 800a5fc:	440a      	add	r2, r1
 800a5fe:	7a12      	ldrb	r2, [r2, #8]
 800a600:	4610      	mov	r0, r2
 800a602:	4798      	blx	r3
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a608:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20002d88 	.word	0x20002d88

0800a618 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	4a0a      	ldr	r2, [pc, #40]	; (800a654 <disk_read+0x3c>)
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	689c      	ldr	r4, [r3, #8]
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	4a07      	ldr	r2, [pc, #28]	; (800a654 <disk_read+0x3c>)
 800a638:	4413      	add	r3, r2
 800a63a:	7a18      	ldrb	r0, [r3, #8]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	47a0      	blx	r4
 800a644:	4603      	mov	r3, r0
 800a646:	75fb      	strb	r3, [r7, #23]
  return res;
 800a648:	7dfb      	ldrb	r3, [r7, #23]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd90      	pop	{r4, r7, pc}
 800a652:	bf00      	nop
 800a654:	20002d88 	.word	0x20002d88

0800a658 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a658:	b590      	push	{r4, r7, lr}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	607a      	str	r2, [r7, #4]
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	4603      	mov	r3, r0
 800a666:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	4a0a      	ldr	r2, [pc, #40]	; (800a694 <disk_write+0x3c>)
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68dc      	ldr	r4, [r3, #12]
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4a07      	ldr	r2, [pc, #28]	; (800a694 <disk_write+0x3c>)
 800a678:	4413      	add	r3, r2
 800a67a:	7a18      	ldrb	r0, [r3, #8]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	47a0      	blx	r4
 800a684:	4603      	mov	r3, r0
 800a686:	75fb      	strb	r3, [r7, #23]
  return res;
 800a688:	7dfb      	ldrb	r3, [r7, #23]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd90      	pop	{r4, r7, pc}
 800a692:	bf00      	nop
 800a694:	20002d88 	.word	0x20002d88

0800a698 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	603a      	str	r2, [r7, #0]
 800a6a2:	71fb      	strb	r3, [r7, #7]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <disk_ioctl+0x38>)
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	79fa      	ldrb	r2, [r7, #7]
 800a6b6:	4906      	ldr	r1, [pc, #24]	; (800a6d0 <disk_ioctl+0x38>)
 800a6b8:	440a      	add	r2, r1
 800a6ba:	7a10      	ldrb	r0, [r2, #8]
 800a6bc:	79b9      	ldrb	r1, [r7, #6]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20002d88 	.word	0x20002d88

0800a6d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a6e4:	89fb      	ldrh	r3, [r7, #14]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	b21a      	sxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b21b      	sxth	r3, r3
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	b21b      	sxth	r3, r3
 800a6f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a6f6:	89fb      	ldrh	r3, [r7, #14]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3303      	adds	r3, #3
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	3202      	adds	r2, #2
 800a71c:	7812      	ldrb	r2, [r2, #0]
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	021b      	lsls	r3, r3, #8
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	3201      	adds	r2, #1
 800a72a:	7812      	ldrb	r2, [r2, #0]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	7812      	ldrb	r2, [r2, #0]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a73c:	68fb      	ldr	r3, [r7, #12]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	887a      	ldrh	r2, [r7, #2]
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	701a      	strb	r2, [r3, #0]
 800a762:	887b      	ldrh	r3, [r7, #2]
 800a764:	0a1b      	lsrs	r3, r3, #8
 800a766:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	607a      	str	r2, [r7, #4]
 800a76e:	887a      	ldrh	r2, [r7, #2]
 800a770:	b2d2      	uxtb	r2, r2
 800a772:	701a      	strb	r2, [r3, #0]
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	0a1b      	lsrs	r3, r3, #8
 800a79a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	607a      	str	r2, [r7, #4]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	b2d2      	uxtb	r2, r2
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	b2d2      	uxtb	r2, r2
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	0a1b      	lsrs	r3, r3, #8
 800a7be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	607a      	str	r2, [r7, #4]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	b2d2      	uxtb	r2, r2
 800a7ca:	701a      	strb	r2, [r3, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00d      	beq.n	800a80e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	1c53      	adds	r3, r2, #1
 800a7f6:	613b      	str	r3, [r7, #16]
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	1c59      	adds	r1, r3, #1
 800a7fc:	6179      	str	r1, [r7, #20]
 800a7fe:	7812      	ldrb	r2, [r2, #0]
 800a800:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3b01      	subs	r3, #1
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1f1      	bne.n	800a7f2 <mem_cpy+0x1a>
	}
}
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a81a:	b480      	push	{r7}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	617a      	str	r2, [r7, #20]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3b01      	subs	r3, #1
 800a83a:	607b      	str	r3, [r7, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f3      	bne.n	800a82a <mem_set+0x10>
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a850:	b480      	push	{r7}
 800a852:	b089      	sub	sp, #36	; 0x24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	61fb      	str	r3, [r7, #28]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	61fa      	str	r2, [r7, #28]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	4619      	mov	r1, r3
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	61ba      	str	r2, [r7, #24]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	1acb      	subs	r3, r1, r3
 800a87c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3b01      	subs	r3, #1
 800a882:	607b      	str	r3, [r7, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <mem_cmp+0x40>
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0eb      	beq.n	800a868 <mem_cmp+0x18>

	return r;
 800a890:	697b      	ldr	r3, [r7, #20]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3724      	adds	r7, #36	; 0x24
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a8a8:	e002      	b.n	800a8b0 <chk_chr+0x12>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	607b      	str	r3, [r7, #4]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <chk_chr+0x26>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d1f2      	bne.n	800a8aa <chk_chr+0xc>
	return *str;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	e029      	b.n	800a93c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a8e8:	4a27      	ldr	r2, [pc, #156]	; (800a988 <chk_lock+0xb4>)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	4413      	add	r3, r2
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d01d      	beq.n	800a932 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a8f6:	4a24      	ldr	r2, [pc, #144]	; (800a988 <chk_lock+0xb4>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	4413      	add	r3, r2
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	429a      	cmp	r2, r3
 800a906:	d116      	bne.n	800a936 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a908:	4a1f      	ldr	r2, [pc, #124]	; (800a988 <chk_lock+0xb4>)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	4413      	add	r3, r2
 800a910:	3304      	adds	r3, #4
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a918:	429a      	cmp	r2, r3
 800a91a:	d10c      	bne.n	800a936 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a91c:	4a1a      	ldr	r2, [pc, #104]	; (800a988 <chk_lock+0xb4>)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	011b      	lsls	r3, r3, #4
 800a922:	4413      	add	r3, r2
 800a924:	3308      	adds	r3, #8
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d102      	bne.n	800a936 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a930:	e007      	b.n	800a942 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a932:	2301      	movs	r3, #1
 800a934:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d9d2      	bls.n	800a8e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d109      	bne.n	800a95c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d102      	bne.n	800a954 <chk_lock+0x80>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d101      	bne.n	800a958 <chk_lock+0x84>
 800a954:	2300      	movs	r3, #0
 800a956:	e010      	b.n	800a97a <chk_lock+0xa6>
 800a958:	2312      	movs	r3, #18
 800a95a:	e00e      	b.n	800a97a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d108      	bne.n	800a974 <chk_lock+0xa0>
 800a962:	4a09      	ldr	r2, [pc, #36]	; (800a988 <chk_lock+0xb4>)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	4413      	add	r3, r2
 800a96a:	330c      	adds	r3, #12
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a972:	d101      	bne.n	800a978 <chk_lock+0xa4>
 800a974:	2310      	movs	r3, #16
 800a976:	e000      	b.n	800a97a <chk_lock+0xa6>
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20002b68 	.word	0x20002b68

0800a98c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a992:	2300      	movs	r3, #0
 800a994:	607b      	str	r3, [r7, #4]
 800a996:	e002      	b.n	800a99e <enq_lock+0x12>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3301      	adds	r3, #1
 800a99c:	607b      	str	r3, [r7, #4]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d806      	bhi.n	800a9b2 <enq_lock+0x26>
 800a9a4:	4a09      	ldr	r2, [pc, #36]	; (800a9cc <enq_lock+0x40>)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	011b      	lsls	r3, r3, #4
 800a9aa:	4413      	add	r3, r2
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f2      	bne.n	800a998 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20002b68 	.word	0x20002b68

0800a9d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	e01f      	b.n	800aa20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a9e0:	4a41      	ldr	r2, [pc, #260]	; (800aae8 <inc_lock+0x118>)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	4413      	add	r3, r2
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d113      	bne.n	800aa1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a9f2:	4a3d      	ldr	r2, [pc, #244]	; (800aae8 <inc_lock+0x118>)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d109      	bne.n	800aa1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aa06:	4a38      	ldr	r2, [pc, #224]	; (800aae8 <inc_lock+0x118>)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	4413      	add	r3, r2
 800aa0e:	3308      	adds	r3, #8
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d006      	beq.n	800aa28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d9dc      	bls.n	800a9e0 <inc_lock+0x10>
 800aa26:	e000      	b.n	800aa2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aa28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d132      	bne.n	800aa96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e002      	b.n	800aa3c <inc_lock+0x6c>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d806      	bhi.n	800aa50 <inc_lock+0x80>
 800aa42:	4a29      	ldr	r2, [pc, #164]	; (800aae8 <inc_lock+0x118>)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	011b      	lsls	r3, r3, #4
 800aa48:	4413      	add	r3, r2
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f2      	bne.n	800aa36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d101      	bne.n	800aa5a <inc_lock+0x8a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	e040      	b.n	800aadc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	4922      	ldr	r1, [pc, #136]	; (800aae8 <inc_lock+0x118>)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	440b      	add	r3, r1
 800aa66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	491e      	ldr	r1, [pc, #120]	; (800aae8 <inc_lock+0x118>)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	440b      	add	r3, r1
 800aa74:	3304      	adds	r3, #4
 800aa76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695a      	ldr	r2, [r3, #20]
 800aa7c:	491a      	ldr	r1, [pc, #104]	; (800aae8 <inc_lock+0x118>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	011b      	lsls	r3, r3, #4
 800aa82:	440b      	add	r3, r1
 800aa84:	3308      	adds	r3, #8
 800aa86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aa88:	4a17      	ldr	r2, [pc, #92]	; (800aae8 <inc_lock+0x118>)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	4413      	add	r3, r2
 800aa90:	330c      	adds	r3, #12
 800aa92:	2200      	movs	r2, #0
 800aa94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d009      	beq.n	800aab0 <inc_lock+0xe0>
 800aa9c:	4a12      	ldr	r2, [pc, #72]	; (800aae8 <inc_lock+0x118>)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	011b      	lsls	r3, r3, #4
 800aaa2:	4413      	add	r3, r2
 800aaa4:	330c      	adds	r3, #12
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <inc_lock+0xe0>
 800aaac:	2300      	movs	r3, #0
 800aaae:	e015      	b.n	800aadc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d108      	bne.n	800aac8 <inc_lock+0xf8>
 800aab6:	4a0c      	ldr	r2, [pc, #48]	; (800aae8 <inc_lock+0x118>)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	4413      	add	r3, r2
 800aabe:	330c      	adds	r3, #12
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	e001      	b.n	800aacc <inc_lock+0xfc>
 800aac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aacc:	4906      	ldr	r1, [pc, #24]	; (800aae8 <inc_lock+0x118>)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	440b      	add	r3, r1
 800aad4:	330c      	adds	r3, #12
 800aad6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3301      	adds	r3, #1
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	20002b68 	.word	0x20002b68

0800aaec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	607b      	str	r3, [r7, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d825      	bhi.n	800ab4c <dec_lock+0x60>
		n = Files[i].ctr;
 800ab00:	4a17      	ldr	r2, [pc, #92]	; (800ab60 <dec_lock+0x74>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4413      	add	r3, r2
 800ab08:	330c      	adds	r3, #12
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ab0e:	89fb      	ldrh	r3, [r7, #14]
 800ab10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab14:	d101      	bne.n	800ab1a <dec_lock+0x2e>
 800ab16:	2300      	movs	r3, #0
 800ab18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ab1a:	89fb      	ldrh	r3, [r7, #14]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <dec_lock+0x3a>
 800ab20:	89fb      	ldrh	r3, [r7, #14]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ab26:	4a0e      	ldr	r2, [pc, #56]	; (800ab60 <dec_lock+0x74>)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	4413      	add	r3, r2
 800ab2e:	330c      	adds	r3, #12
 800ab30:	89fa      	ldrh	r2, [r7, #14]
 800ab32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ab34:	89fb      	ldrh	r3, [r7, #14]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d105      	bne.n	800ab46 <dec_lock+0x5a>
 800ab3a:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <dec_lock+0x74>)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	011b      	lsls	r3, r3, #4
 800ab40:	4413      	add	r3, r2
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	737b      	strb	r3, [r7, #13]
 800ab4a:	e001      	b.n	800ab50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ab50:	7b7b      	ldrb	r3, [r7, #13]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	20002b68 	.word	0x20002b68

0800ab64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e010      	b.n	800ab94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ab72:	4a0d      	ldr	r2, [pc, #52]	; (800aba8 <clear_lock+0x44>)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	4413      	add	r3, r2
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d105      	bne.n	800ab8e <clear_lock+0x2a>
 800ab82:	4a09      	ldr	r2, [pc, #36]	; (800aba8 <clear_lock+0x44>)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	4413      	add	r3, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3301      	adds	r3, #1
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d9eb      	bls.n	800ab72 <clear_lock+0xe>
	}
}
 800ab9a:	bf00      	nop
 800ab9c:	bf00      	nop
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	20002b68 	.word	0x20002b68

0800abac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	78db      	ldrb	r3, [r3, #3]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d034      	beq.n	800ac2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	7858      	ldrb	r0, [r3, #1]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abd0:	2301      	movs	r3, #1
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	f7ff fd40 	bl	800a658 <disk_write>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800abde:	2301      	movs	r3, #1
 800abe0:	73fb      	strb	r3, [r7, #15]
 800abe2:	e022      	b.n	800ac2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	1ad2      	subs	r2, r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d217      	bcs.n	800ac2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	789b      	ldrb	r3, [r3, #2]
 800abfe:	613b      	str	r3, [r7, #16]
 800ac00:	e010      	b.n	800ac24 <sync_window+0x78>
					wsect += fs->fsize;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4413      	add	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	7858      	ldrb	r0, [r3, #1]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac16:	2301      	movs	r3, #1
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	f7ff fd1d 	bl	800a658 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	613b      	str	r3, [r7, #16]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d8eb      	bhi.n	800ac02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3718      	adds	r7, #24
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d01b      	beq.n	800ac84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff ffad 	bl	800abac <sync_window>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d113      	bne.n	800ac84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	7858      	ldrb	r0, [r3, #1]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac66:	2301      	movs	r3, #1
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	f7ff fcd5 	bl	800a618 <disk_read>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff ff87 	bl	800abac <sync_window>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d159      	bne.n	800ad5c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b03      	cmp	r3, #3
 800acae:	d149      	bne.n	800ad44 <sync_fs+0xb4>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	791b      	ldrb	r3, [r3, #4]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d145      	bne.n	800ad44 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	899b      	ldrh	r3, [r3, #12]
 800acc2:	461a      	mov	r2, r3
 800acc4:	2100      	movs	r1, #0
 800acc6:	f7ff fda8 	bl	800a81a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3338      	adds	r3, #56	; 0x38
 800acce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acd2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff fd37 	bl	800a74a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3338      	adds	r3, #56	; 0x38
 800ace0:	4921      	ldr	r1, [pc, #132]	; (800ad68 <sync_fs+0xd8>)
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff fd4c 	bl	800a780 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3338      	adds	r3, #56	; 0x38
 800acec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800acf0:	491e      	ldr	r1, [pc, #120]	; (800ad6c <sync_fs+0xdc>)
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7ff fd44 	bl	800a780 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3338      	adds	r3, #56	; 0x38
 800acfc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7ff fd3a 	bl	800a780 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3338      	adds	r3, #56	; 0x38
 800ad10:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7ff fd30 	bl	800a780 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7858      	ldrb	r0, [r3, #1]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f7ff fc8d 	bl	800a658 <disk_write>
			fs->fsi_flag = 0;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7ff fca3 	bl	800a698 <disk_ioctl>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <sync_fs+0xcc>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	41615252 	.word	0x41615252
 800ad6c:	61417272 	.word	0x61417272

0800ad70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3b02      	subs	r3, #2
 800ad7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	3b02      	subs	r3, #2
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d301      	bcc.n	800ad90 <clust2sect+0x20>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e008      	b.n	800ada2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	895b      	ldrh	r3, [r3, #10]
 800ad94:	461a      	mov	r2, r3
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	fb03 f202 	mul.w	r2, r3, r2
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	4413      	add	r3, r2
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	370c      	adds	r7, #12
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b086      	sub	sp, #24
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d904      	bls.n	800adce <get_fat+0x20>
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d302      	bcc.n	800add4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800adce:	2301      	movs	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	e0bb      	b.n	800af4c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800add4:	f04f 33ff 	mov.w	r3, #4294967295
 800add8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	f000 8083 	beq.w	800aeea <get_fat+0x13c>
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	f300 80a7 	bgt.w	800af38 <get_fat+0x18a>
 800adea:	2b01      	cmp	r3, #1
 800adec:	d002      	beq.n	800adf4 <get_fat+0x46>
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d056      	beq.n	800aea0 <get_fat+0xf2>
 800adf2:	e0a1      	b.n	800af38 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	899b      	ldrh	r3, [r3, #12]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae12:	4413      	add	r3, r2
 800ae14:	4619      	mov	r1, r3
 800ae16:	6938      	ldr	r0, [r7, #16]
 800ae18:	f7ff ff0c 	bl	800ac34 <move_window>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f040 808d 	bne.w	800af3e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	60fa      	str	r2, [r7, #12]
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	8992      	ldrh	r2, [r2, #12]
 800ae2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae32:	fb01 f202 	mul.w	r2, r1, r2
 800ae36:	1a9b      	subs	r3, r3, r2
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	899b      	ldrh	r3, [r3, #12]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae52:	4413      	add	r3, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	6938      	ldr	r0, [r7, #16]
 800ae58:	f7ff feec 	bl	800ac34 <move_window>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d16f      	bne.n	800af42 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	899b      	ldrh	r3, [r3, #12]
 800ae66:	461a      	mov	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae6e:	fb01 f202 	mul.w	r2, r1, r2
 800ae72:	1a9b      	subs	r3, r3, r2
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4413      	add	r3, r2
 800ae78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	461a      	mov	r2, r3
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <get_fat+0xe8>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	091b      	lsrs	r3, r3, #4
 800ae94:	e002      	b.n	800ae9c <get_fat+0xee>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae9c:	617b      	str	r3, [r7, #20]
			break;
 800ae9e:	e055      	b.n	800af4c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	899b      	ldrh	r3, [r3, #12]
 800aea8:	085b      	lsrs	r3, r3, #1
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	4619      	mov	r1, r3
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeb4:	4413      	add	r3, r2
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6938      	ldr	r0, [r7, #16]
 800aeba:	f7ff febb 	bl	800ac34 <move_window>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d140      	bne.n	800af46 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	8992      	ldrh	r2, [r2, #12]
 800aed2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aed6:	fb00 f202 	mul.w	r2, r0, r2
 800aeda:	1a9b      	subs	r3, r3, r2
 800aedc:	440b      	add	r3, r1
 800aede:	4618      	mov	r0, r3
 800aee0:	f7ff fbf8 	bl	800a6d4 <ld_word>
 800aee4:	4603      	mov	r3, r0
 800aee6:	617b      	str	r3, [r7, #20]
			break;
 800aee8:	e030      	b.n	800af4c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	899b      	ldrh	r3, [r3, #12]
 800aef2:	089b      	lsrs	r3, r3, #2
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	4619      	mov	r1, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	fbb3 f3f1 	udiv	r3, r3, r1
 800aefe:	4413      	add	r3, r2
 800af00:	4619      	mov	r1, r3
 800af02:	6938      	ldr	r0, [r7, #16]
 800af04:	f7ff fe96 	bl	800ac34 <move_window>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d11d      	bne.n	800af4a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	8992      	ldrh	r2, [r2, #12]
 800af1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800af20:	fb00 f202 	mul.w	r2, r0, r2
 800af24:	1a9b      	subs	r3, r3, r2
 800af26:	440b      	add	r3, r1
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fbeb 	bl	800a704 <ld_dword>
 800af2e:	4603      	mov	r3, r0
 800af30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800af34:	617b      	str	r3, [r7, #20]
			break;
 800af36:	e009      	b.n	800af4c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800af38:	2301      	movs	r3, #1
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	e006      	b.n	800af4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af3e:	bf00      	nop
 800af40:	e004      	b.n	800af4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af42:	bf00      	nop
 800af44:	e002      	b.n	800af4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af46:	bf00      	nop
 800af48:	e000      	b.n	800af4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af4a:	bf00      	nop
		}
	}

	return val;
 800af4c:	697b      	ldr	r3, [r7, #20]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800af56:	b590      	push	{r4, r7, lr}
 800af58:	b089      	sub	sp, #36	; 0x24
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800af62:	2302      	movs	r3, #2
 800af64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	f240 8102 	bls.w	800b172 <put_fat+0x21c>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	429a      	cmp	r2, r3
 800af76:	f080 80fc 	bcs.w	800b172 <put_fat+0x21c>
		switch (fs->fs_type) {
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b03      	cmp	r3, #3
 800af80:	f000 80b6 	beq.w	800b0f0 <put_fat+0x19a>
 800af84:	2b03      	cmp	r3, #3
 800af86:	f300 80fd 	bgt.w	800b184 <put_fat+0x22e>
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d003      	beq.n	800af96 <put_fat+0x40>
 800af8e:	2b02      	cmp	r3, #2
 800af90:	f000 8083 	beq.w	800b09a <put_fat+0x144>
 800af94:	e0f6      	b.n	800b184 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	61bb      	str	r3, [r7, #24]
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	4413      	add	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	899b      	ldrh	r3, [r3, #12]
 800afac:	4619      	mov	r1, r3
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800afb4:	4413      	add	r3, r2
 800afb6:	4619      	mov	r1, r3
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff fe3b 	bl	800ac34 <move_window>
 800afbe:	4603      	mov	r3, r0
 800afc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afc2:	7ffb      	ldrb	r3, [r7, #31]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f040 80d6 	bne.w	800b176 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	61ba      	str	r2, [r7, #24]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	8992      	ldrh	r2, [r2, #12]
 800afda:	fbb3 f0f2 	udiv	r0, r3, r2
 800afde:	fb00 f202 	mul.w	r2, r0, r2
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	440b      	add	r3, r1
 800afe6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00d      	beq.n	800b00e <put_fat+0xb8>
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	b25b      	sxtb	r3, r3
 800aff8:	f003 030f 	and.w	r3, r3, #15
 800affc:	b25a      	sxtb	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	b25b      	sxtb	r3, r3
 800b006:	4313      	orrs	r3, r2
 800b008:	b25b      	sxtb	r3, r3
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	e001      	b.n	800b012 <put_fat+0xbc>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	899b      	ldrh	r3, [r3, #12]
 800b024:	4619      	mov	r1, r3
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	fbb3 f3f1 	udiv	r3, r3, r1
 800b02c:	4413      	add	r3, r2
 800b02e:	4619      	mov	r1, r3
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fdff 	bl	800ac34 <move_window>
 800b036:	4603      	mov	r3, r0
 800b038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b03a:	7ffb      	ldrb	r3, [r7, #31]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f040 809c 	bne.w	800b17a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	899b      	ldrh	r3, [r3, #12]
 800b04c:	461a      	mov	r2, r3
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	fbb3 f0f2 	udiv	r0, r3, r2
 800b054:	fb00 f202 	mul.w	r2, r0, r2
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	440b      	add	r3, r1
 800b05c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <put_fat+0x11a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	091b      	lsrs	r3, r3, #4
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	e00e      	b.n	800b08e <put_fat+0x138>
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	b25b      	sxtb	r3, r3
 800b076:	f023 030f 	bic.w	r3, r3, #15
 800b07a:	b25a      	sxtb	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	b25b      	sxtb	r3, r3
 800b082:	f003 030f 	and.w	r3, r3, #15
 800b086:	b25b      	sxtb	r3, r3
 800b088:	4313      	orrs	r3, r2
 800b08a:	b25b      	sxtb	r3, r3
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	70da      	strb	r2, [r3, #3]
			break;
 800b098:	e074      	b.n	800b184 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	899b      	ldrh	r3, [r3, #12]
 800b0a2:	085b      	lsrs	r3, r3, #1
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff fdbe 	bl	800ac34 <move_window>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0bc:	7ffb      	ldrb	r3, [r7, #31]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d15d      	bne.n	800b17e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	005b      	lsls	r3, r3, #1
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	8992      	ldrh	r2, [r2, #12]
 800b0d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0d4:	fb00 f202 	mul.w	r2, r0, r2
 800b0d8:	1a9b      	subs	r3, r3, r2
 800b0da:	440b      	add	r3, r1
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	b292      	uxth	r2, r2
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fb31 	bl	800a74a <st_word>
			fs->wflag = 1;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	70da      	strb	r2, [r3, #3]
			break;
 800b0ee:	e049      	b.n	800b184 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	899b      	ldrh	r3, [r3, #12]
 800b0f8:	089b      	lsrs	r3, r3, #2
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	fbb3 f3f1 	udiv	r3, r3, r1
 800b104:	4413      	add	r3, r2
 800b106:	4619      	mov	r1, r3
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff fd93 	bl	800ac34 <move_window>
 800b10e:	4603      	mov	r3, r0
 800b110:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b112:	7ffb      	ldrb	r3, [r7, #31]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d134      	bne.n	800b182 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	8992      	ldrh	r2, [r2, #12]
 800b12c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b130:	fb00 f202 	mul.w	r2, r0, r2
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	440b      	add	r3, r1
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fae3 	bl	800a704 <ld_dword>
 800b13e:	4603      	mov	r3, r0
 800b140:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b144:	4323      	orrs	r3, r4
 800b146:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	8992      	ldrh	r2, [r2, #12]
 800b156:	fbb3 f0f2 	udiv	r0, r3, r2
 800b15a:	fb00 f202 	mul.w	r2, r0, r2
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	440b      	add	r3, r1
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fb0b 	bl	800a780 <st_dword>
			fs->wflag = 1;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2201      	movs	r2, #1
 800b16e:	70da      	strb	r2, [r3, #3]
			break;
 800b170:	e008      	b.n	800b184 <put_fat+0x22e>
		}
	}
 800b172:	bf00      	nop
 800b174:	e006      	b.n	800b184 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b176:	bf00      	nop
 800b178:	e004      	b.n	800b184 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b17a:	bf00      	nop
 800b17c:	e002      	b.n	800b184 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b17e:	bf00      	nop
 800b180:	e000      	b.n	800b184 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b182:	bf00      	nop
	return res;
 800b184:	7ffb      	ldrb	r3, [r7, #31]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3724      	adds	r7, #36	; 0x24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd90      	pop	{r4, r7, pc}

0800b18e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b088      	sub	sp, #32
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d904      	bls.n	800b1b4 <remove_chain+0x26>
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d301      	bcc.n	800b1b8 <remove_chain+0x2a>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e04b      	b.n	800b250 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00c      	beq.n	800b1d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b1be:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	69b8      	ldr	r0, [r7, #24]
 800b1c6:	f7ff fec6 	bl	800af56 <put_fat>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b1ce:	7ffb      	ldrb	r3, [r7, #31]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <remove_chain+0x4a>
 800b1d4:	7ffb      	ldrb	r3, [r7, #31]
 800b1d6:	e03b      	b.n	800b250 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f7ff fde7 	bl	800adae <get_fat>
 800b1e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d031      	beq.n	800b24c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <remove_chain+0x64>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e02e      	b.n	800b250 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f8:	d101      	bne.n	800b1fe <remove_chain+0x70>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e028      	b.n	800b250 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b1fe:	2200      	movs	r2, #0
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	69b8      	ldr	r0, [r7, #24]
 800b204:	f7ff fea7 	bl	800af56 <put_fat>
 800b208:	4603      	mov	r3, r0
 800b20a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b20c:	7ffb      	ldrb	r3, [r7, #31]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d001      	beq.n	800b216 <remove_chain+0x88>
 800b212:	7ffb      	ldrb	r3, [r7, #31]
 800b214:	e01c      	b.n	800b250 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	3b02      	subs	r3, #2
 800b220:	429a      	cmp	r2, r3
 800b222:	d20b      	bcs.n	800b23c <remove_chain+0xae>
			fs->free_clst++;
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	791b      	ldrb	r3, [r3, #4]
 800b232:	f043 0301 	orr.w	r3, r3, #1
 800b236:	b2da      	uxtb	r2, r3
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	429a      	cmp	r2, r3
 800b248:	d3c6      	bcc.n	800b1d8 <remove_chain+0x4a>
 800b24a:	e000      	b.n	800b24e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b24c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3720      	adds	r7, #32
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10d      	bne.n	800b28a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d004      	beq.n	800b284 <create_chain+0x2c>
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	69ba      	ldr	r2, [r7, #24]
 800b280:	429a      	cmp	r2, r3
 800b282:	d31b      	bcc.n	800b2bc <create_chain+0x64>
 800b284:	2301      	movs	r3, #1
 800b286:	61bb      	str	r3, [r7, #24]
 800b288:	e018      	b.n	800b2bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff fd8e 	bl	800adae <get_fat>
 800b292:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d801      	bhi.n	800b29e <create_chain+0x46>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e070      	b.n	800b380 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a4:	d101      	bne.n	800b2aa <create_chain+0x52>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	e06a      	b.n	800b380 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d201      	bcs.n	800b2b8 <create_chain+0x60>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	e063      	b.n	800b380 <create_chain+0x128>
		scl = clst;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	69fa      	ldr	r2, [r7, #28]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d307      	bcc.n	800b2e0 <create_chain+0x88>
				ncl = 2;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b2d4:	69fa      	ldr	r2, [r7, #28]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d901      	bls.n	800b2e0 <create_chain+0x88>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e04f      	b.n	800b380 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b2e0:	69f9      	ldr	r1, [r7, #28]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7ff fd63 	bl	800adae <get_fat>
 800b2e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00e      	beq.n	800b30e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d003      	beq.n	800b2fe <create_chain+0xa6>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d101      	bne.n	800b302 <create_chain+0xaa>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	e03e      	b.n	800b380 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	429a      	cmp	r2, r3
 800b308:	d1da      	bne.n	800b2c0 <create_chain+0x68>
 800b30a:	2300      	movs	r3, #0
 800b30c:	e038      	b.n	800b380 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b30e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b310:	f04f 32ff 	mov.w	r2, #4294967295
 800b314:	69f9      	ldr	r1, [r7, #28]
 800b316:	6938      	ldr	r0, [r7, #16]
 800b318:	f7ff fe1d 	bl	800af56 <put_fat>
 800b31c:	4603      	mov	r3, r0
 800b31e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b320:	7dfb      	ldrb	r3, [r7, #23]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d109      	bne.n	800b33a <create_chain+0xe2>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d006      	beq.n	800b33a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b32c:	69fa      	ldr	r2, [r7, #28]
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6938      	ldr	r0, [r7, #16]
 800b332:	f7ff fe10 	bl	800af56 <put_fat>
 800b336:	4603      	mov	r3, r0
 800b338:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b33a:	7dfb      	ldrb	r3, [r7, #23]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d116      	bne.n	800b36e <create_chain+0x116>
		fs->last_clst = ncl;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	3b02      	subs	r3, #2
 800b350:	429a      	cmp	r2, r3
 800b352:	d804      	bhi.n	800b35e <create_chain+0x106>
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	1e5a      	subs	r2, r3, #1
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	791b      	ldrb	r3, [r3, #4]
 800b362:	f043 0301 	orr.w	r3, r3, #1
 800b366:	b2da      	uxtb	r2, r3
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	711a      	strb	r2, [r3, #4]
 800b36c:	e007      	b.n	800b37e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d102      	bne.n	800b37a <create_chain+0x122>
 800b374:	f04f 33ff 	mov.w	r3, #4294967295
 800b378:	e000      	b.n	800b37c <create_chain+0x124>
 800b37a:	2301      	movs	r3, #1
 800b37c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b37e:	69fb      	ldr	r3, [r7, #28]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	3304      	adds	r3, #4
 800b39e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	899b      	ldrh	r3, [r3, #12]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	8952      	ldrh	r2, [r2, #10]
 800b3b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1d1a      	adds	r2, r3, #4
 800b3ba:	613a      	str	r2, [r7, #16]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <clmt_clust+0x42>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e010      	b.n	800b3ec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d307      	bcc.n	800b3e2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3e0:	e7e9      	b.n	800b3b6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b3e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	4413      	add	r3, r2
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	371c      	adds	r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b40e:	d204      	bcs.n	800b41a <dir_sdi+0x22>
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f003 031f 	and.w	r3, r3, #31
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <dir_sdi+0x26>
		return FR_INT_ERR;
 800b41a:	2302      	movs	r3, #2
 800b41c:	e071      	b.n	800b502 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d106      	bne.n	800b43e <dir_sdi+0x46>
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b02      	cmp	r3, #2
 800b436:	d902      	bls.n	800b43e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10c      	bne.n	800b45e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	095b      	lsrs	r3, r3, #5
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	8912      	ldrh	r2, [r2, #8]
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d301      	bcc.n	800b454 <dir_sdi+0x5c>
 800b450:	2302      	movs	r3, #2
 800b452:	e056      	b.n	800b502 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	61da      	str	r2, [r3, #28]
 800b45c:	e02d      	b.n	800b4ba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	895b      	ldrh	r3, [r3, #10]
 800b462:	461a      	mov	r2, r3
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	899b      	ldrh	r3, [r3, #12]
 800b468:	fb02 f303 	mul.w	r3, r2, r3
 800b46c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b46e:	e019      	b.n	800b4a4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6979      	ldr	r1, [r7, #20]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fc9a 	bl	800adae <get_fat>
 800b47a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b482:	d101      	bne.n	800b488 <dir_sdi+0x90>
 800b484:	2301      	movs	r3, #1
 800b486:	e03c      	b.n	800b502 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d904      	bls.n	800b498 <dir_sdi+0xa0>
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	429a      	cmp	r2, r3
 800b496:	d301      	bcc.n	800b49c <dir_sdi+0xa4>
 800b498:	2302      	movs	r3, #2
 800b49a:	e032      	b.n	800b502 <dir_sdi+0x10a>
			ofs -= csz;
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d2e1      	bcs.n	800b470 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b4ac:	6979      	ldr	r1, [r7, #20]
 800b4ae:	6938      	ldr	r0, [r7, #16]
 800b4b0:	f7ff fc5e 	bl	800ad70 <clust2sect>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	69db      	ldr	r3, [r3, #28]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <dir_sdi+0xd4>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e01a      	b.n	800b502 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	69da      	ldr	r2, [r3, #28]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	899b      	ldrh	r3, [r3, #12]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4dc:	441a      	add	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	899b      	ldrh	r3, [r3, #12]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4f4:	fb00 f202 	mul.w	r2, r0, r2
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	18ca      	adds	r2, r1, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b086      	sub	sp, #24
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	3320      	adds	r3, #32
 800b520:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <dir_next+0x28>
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b530:	d301      	bcc.n	800b536 <dir_next+0x2c>
 800b532:	2304      	movs	r3, #4
 800b534:	e0bb      	b.n	800b6ae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	899b      	ldrh	r3, [r3, #12]
 800b53a:	461a      	mov	r2, r3
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b542:	fb01 f202 	mul.w	r2, r1, r2
 800b546:	1a9b      	subs	r3, r3, r2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f040 809d 	bne.w	800b688 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10b      	bne.n	800b578 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	095b      	lsrs	r3, r3, #5
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	8912      	ldrh	r2, [r2, #8]
 800b568:	4293      	cmp	r3, r2
 800b56a:	f0c0 808d 	bcc.w	800b688 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	61da      	str	r2, [r3, #28]
 800b574:	2304      	movs	r3, #4
 800b576:	e09a      	b.n	800b6ae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	899b      	ldrh	r3, [r3, #12]
 800b57c:	461a      	mov	r2, r3
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	fbb3 f3f2 	udiv	r3, r3, r2
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	8952      	ldrh	r2, [r2, #10]
 800b588:	3a01      	subs	r2, #1
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d17b      	bne.n	800b688 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	4619      	mov	r1, r3
 800b598:	4610      	mov	r0, r2
 800b59a:	f7ff fc08 	bl	800adae <get_fat>
 800b59e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d801      	bhi.n	800b5aa <dir_next+0xa0>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e081      	b.n	800b6ae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b0:	d101      	bne.n	800b5b6 <dir_next+0xac>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e07b      	b.n	800b6ae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d359      	bcc.n	800b674 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d104      	bne.n	800b5d0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	61da      	str	r2, [r3, #28]
 800b5cc:	2304      	movs	r3, #4
 800b5ce:	e06e      	b.n	800b6ae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f7ff fe3d 	bl	800b258 <create_chain>
 800b5de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <dir_next+0xe0>
 800b5e6:	2307      	movs	r3, #7
 800b5e8:	e061      	b.n	800b6ae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d101      	bne.n	800b5f4 <dir_next+0xea>
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	e05c      	b.n	800b6ae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fa:	d101      	bne.n	800b600 <dir_next+0xf6>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e056      	b.n	800b6ae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f7ff fad3 	bl	800abac <sync_window>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <dir_next+0x106>
 800b60c:	2301      	movs	r3, #1
 800b60e:	e04e      	b.n	800b6ae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	899b      	ldrh	r3, [r3, #12]
 800b61a:	461a      	mov	r2, r3
 800b61c:	2100      	movs	r1, #0
 800b61e:	f7ff f8fc 	bl	800a81a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b622:	2300      	movs	r3, #0
 800b624:	613b      	str	r3, [r7, #16]
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff fba1 	bl	800ad70 <clust2sect>
 800b62e:	4602      	mov	r2, r0
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	635a      	str	r2, [r3, #52]	; 0x34
 800b634:	e012      	b.n	800b65c <dir_next+0x152>
						fs->wflag = 1;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f7ff fab5 	bl	800abac <sync_window>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <dir_next+0x142>
 800b648:	2301      	movs	r3, #1
 800b64a:	e030      	b.n	800b6ae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3301      	adds	r3, #1
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	635a      	str	r2, [r3, #52]	; 0x34
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	895b      	ldrh	r3, [r3, #10]
 800b660:	461a      	mov	r2, r3
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	4293      	cmp	r3, r2
 800b666:	d3e6      	bcc.n	800b636 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b67a:	6979      	ldr	r1, [r7, #20]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff fb77 	bl	800ad70 <clust2sect>
 800b682:	4602      	mov	r2, r0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	899b      	ldrh	r3, [r3, #12]
 800b698:	461a      	mov	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6a0:	fb00 f202 	mul.w	r2, r0, r2
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	18ca      	adds	r2, r1, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b086      	sub	sp, #24
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fe95 	bl	800b3f8 <dir_sdi>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d12b      	bne.n	800b730 <dir_alloc+0x7a>
		n = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7ff faa6 	bl	800ac34 <move_window>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d11d      	bne.n	800b72e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2be5      	cmp	r3, #229	; 0xe5
 800b6fa:	d004      	beq.n	800b706 <dir_alloc+0x50>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d107      	bne.n	800b716 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	3301      	adds	r3, #1
 800b70a:	613b      	str	r3, [r7, #16]
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d102      	bne.n	800b71a <dir_alloc+0x64>
 800b714:	e00c      	b.n	800b730 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b716:	2300      	movs	r3, #0
 800b718:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b71a:	2101      	movs	r1, #1
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff fef4 	bl	800b50a <dir_next>
 800b722:	4603      	mov	r3, r0
 800b724:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0d7      	beq.n	800b6dc <dir_alloc+0x26>
 800b72c:	e000      	b.n	800b730 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b72e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	2b04      	cmp	r3, #4
 800b734:	d101      	bne.n	800b73a <dir_alloc+0x84>
 800b736:	2307      	movs	r3, #7
 800b738:	75fb      	strb	r3, [r7, #23]
	return res;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3718      	adds	r7, #24
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	331a      	adds	r3, #26
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe ffbe 	bl	800a6d4 <ld_word>
 800b758:	4603      	mov	r3, r0
 800b75a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b03      	cmp	r3, #3
 800b762:	d109      	bne.n	800b778 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	3314      	adds	r3, #20
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe ffb3 	bl	800a6d4 <ld_word>
 800b76e:	4603      	mov	r3, r0
 800b770:	041b      	lsls	r3, r3, #16
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	4313      	orrs	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b778:	68fb      	ldr	r3, [r7, #12]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	331a      	adds	r3, #26
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	b292      	uxth	r2, r2
 800b796:	4611      	mov	r1, r2
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe ffd6 	bl	800a74a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d109      	bne.n	800b7ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f103 0214 	add.w	r2, r3, #20
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	0c1b      	lsrs	r3, r3, #16
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	f7fe ffc8 	bl	800a74a <st_word>
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b7c4:	b590      	push	{r4, r7, lr}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	331a      	adds	r3, #26
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fe ff7e 	bl	800a6d4 <ld_word>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <cmp_lfn+0x1e>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e059      	b.n	800b896 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ea:	1e5a      	subs	r2, r3, #1
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	81fb      	strh	r3, [r7, #14]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	613b      	str	r3, [r7, #16]
 800b800:	e033      	b.n	800b86a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b802:	4a27      	ldr	r2, [pc, #156]	; (800b8a0 <cmp_lfn+0xdc>)
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	4413      	add	r3, r2
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	4413      	add	r3, r2
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe ff5f 	bl	800a6d4 <ld_word>
 800b816:	4603      	mov	r3, r0
 800b818:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b81a:	89fb      	ldrh	r3, [r7, #14]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01a      	beq.n	800b856 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2bfe      	cmp	r3, #254	; 0xfe
 800b824:	d812      	bhi.n	800b84c <cmp_lfn+0x88>
 800b826:	89bb      	ldrh	r3, [r7, #12]
 800b828:	4618      	mov	r0, r3
 800b82a:	f001 fed5 	bl	800d5d8 <ff_wtoupper>
 800b82e:	4603      	mov	r3, r0
 800b830:	461c      	mov	r4, r3
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	617a      	str	r2, [r7, #20]
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	4413      	add	r3, r2
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f001 fec9 	bl	800d5d8 <ff_wtoupper>
 800b846:	4603      	mov	r3, r0
 800b848:	429c      	cmp	r4, r3
 800b84a:	d001      	beq.n	800b850 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b84c:	2300      	movs	r3, #0
 800b84e:	e022      	b.n	800b896 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b850:	89bb      	ldrh	r3, [r7, #12]
 800b852:	81fb      	strh	r3, [r7, #14]
 800b854:	e006      	b.n	800b864 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b856:	89bb      	ldrh	r3, [r7, #12]
 800b858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d001      	beq.n	800b864 <cmp_lfn+0xa0>
 800b860:	2300      	movs	r3, #0
 800b862:	e018      	b.n	800b896 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	3301      	adds	r3, #1
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b0c      	cmp	r3, #12
 800b86e:	d9c8      	bls.n	800b802 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <cmp_lfn+0xd0>
 800b87c:	89fb      	ldrh	r3, [r7, #14]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d008      	beq.n	800b894 <cmp_lfn+0xd0>
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <cmp_lfn+0xd0>
 800b890:	2300      	movs	r3, #0
 800b892:	e000      	b.n	800b896 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b894:	2301      	movs	r3, #1
}
 800b896:	4618      	mov	r0, r3
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd90      	pop	{r4, r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	08011128 	.word	0x08011128

0800b8a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	71fb      	strb	r3, [r7, #7]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	330d      	adds	r3, #13
 800b8be:	79ba      	ldrb	r2, [r7, #6]
 800b8c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	330b      	adds	r3, #11
 800b8c6:	220f      	movs	r2, #15
 800b8c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	331a      	adds	r3, #26
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe ff36 	bl	800a74a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	1e5a      	subs	r2, r3, #1
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	82fb      	strh	r3, [r7, #22]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b8f6:	8afb      	ldrh	r3, [r7, #22]
 800b8f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <put_lfn+0x6c>
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	61fa      	str	r2, [r7, #28]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	4413      	add	r3, r2
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b910:	4a17      	ldr	r2, [pc, #92]	; (800b970 <put_lfn+0xcc>)
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	4413      	add	r3, r2
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	8afa      	ldrh	r2, [r7, #22]
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe ff11 	bl	800a74a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b928:	8afb      	ldrh	r3, [r7, #22]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <put_lfn+0x90>
 800b92e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b932:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	3301      	adds	r3, #1
 800b938:	61bb      	str	r3, [r7, #24]
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	2b0c      	cmp	r3, #12
 800b93e:	d9da      	bls.n	800b8f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b940:	8afb      	ldrh	r3, [r7, #22]
 800b942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b946:	4293      	cmp	r3, r2
 800b948:	d006      	beq.n	800b958 <put_lfn+0xb4>
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	4413      	add	r3, r2
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <put_lfn+0xbc>
 800b958:	79fb      	ldrb	r3, [r7, #7]
 800b95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b95e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	79fa      	ldrb	r2, [r7, #7]
 800b964:	701a      	strb	r2, [r3, #0]
}
 800b966:	bf00      	nop
 800b968:	3720      	adds	r7, #32
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	08011128 	.word	0x08011128

0800b974 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08c      	sub	sp, #48	; 0x30
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b982:	220b      	movs	r2, #11
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7fe ff26 	bl	800a7d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b05      	cmp	r3, #5
 800b990:	d92b      	bls.n	800b9ea <gen_numname+0x76>
		sr = seq;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b996:	e022      	b.n	800b9de <gen_numname+0x6a>
			wc = *lfn++;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	1c9a      	adds	r2, r3, #2
 800b99c:	607a      	str	r2, [r7, #4]
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9a6:	e017      	b.n	800b9d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	005a      	lsls	r2, r3, #1
 800b9ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	4413      	add	r3, r2
 800b9b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b9b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d005      	beq.n	800b9d2 <gen_numname+0x5e>
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b9cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b9d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	2b0f      	cmp	r3, #15
 800b9dc:	d9e4      	bls.n	800b9a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	881b      	ldrh	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1d8      	bne.n	800b998 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b9ea:	2307      	movs	r3, #7
 800b9ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	f003 030f 	and.w	r3, r3, #15
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	3330      	adds	r3, #48	; 0x30
 800b9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba02:	2b39      	cmp	r3, #57	; 0x39
 800ba04:	d904      	bls.n	800ba10 <gen_numname+0x9c>
 800ba06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba0a:	3307      	adds	r3, #7
 800ba0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	1e5a      	subs	r2, r3, #1
 800ba14:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba16:	3330      	adds	r3, #48	; 0x30
 800ba18:	443b      	add	r3, r7
 800ba1a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ba1e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	091b      	lsrs	r3, r3, #4
 800ba26:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1df      	bne.n	800b9ee <gen_numname+0x7a>
	ns[i] = '~';
 800ba2e:	f107 0214 	add.w	r2, r7, #20
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	4413      	add	r3, r2
 800ba36:	227e      	movs	r2, #126	; 0x7e
 800ba38:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3e:	e002      	b.n	800ba46 <gen_numname+0xd2>
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	3301      	adds	r3, #1
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d205      	bcs.n	800ba5a <gen_numname+0xe6>
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	4413      	add	r3, r2
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	d1f2      	bne.n	800ba40 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	2b07      	cmp	r3, #7
 800ba5e:	d807      	bhi.n	800ba70 <gen_numname+0xfc>
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba66:	3330      	adds	r3, #48	; 0x30
 800ba68:	443b      	add	r3, r7
 800ba6a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ba6e:	e000      	b.n	800ba72 <gen_numname+0xfe>
 800ba70:	2120      	movs	r1, #32
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	627a      	str	r2, [r7, #36]	; 0x24
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	460a      	mov	r2, r1
 800ba7e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	2b07      	cmp	r3, #7
 800ba84:	d9e9      	bls.n	800ba5a <gen_numname+0xe6>
}
 800ba86:	bf00      	nop
 800ba88:	bf00      	nop
 800ba8a:	3730      	adds	r7, #48	; 0x30
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ba9c:	230b      	movs	r3, #11
 800ba9e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	0852      	lsrs	r2, r2, #1
 800baa6:	01db      	lsls	r3, r3, #7
 800baa8:	4313      	orrs	r3, r2
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	1c59      	adds	r1, r3, #1
 800bab0:	6079      	str	r1, [r7, #4]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	4413      	add	r3, r2
 800bab6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3b01      	subs	r3, #1
 800babc:	60bb      	str	r3, [r7, #8]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1ed      	bne.n	800baa0 <sum_sfn+0x10>
	return sum;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b086      	sub	sp, #24
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bae0:	2100      	movs	r1, #0
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff fc88 	bl	800b3f8 <dir_sdi>
 800bae8:	4603      	mov	r3, r0
 800baea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <dir_find+0x24>
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	e0a9      	b.n	800bc4a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800baf6:	23ff      	movs	r3, #255	; 0xff
 800baf8:	753b      	strb	r3, [r7, #20]
 800bafa:	7d3b      	ldrb	r3, [r7, #20]
 800bafc:	757b      	strb	r3, [r7, #21]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f04f 32ff 	mov.w	r2, #4294967295
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6938      	ldr	r0, [r7, #16]
 800bb0e:	f7ff f891 	bl	800ac34 <move_window>
 800bb12:	4603      	mov	r3, r0
 800bb14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f040 8090 	bne.w	800bc3e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bb26:	7dbb      	ldrb	r3, [r7, #22]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <dir_find+0x60>
 800bb2c:	2304      	movs	r3, #4
 800bb2e:	75fb      	strb	r3, [r7, #23]
 800bb30:	e08a      	b.n	800bc48 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	330b      	adds	r3, #11
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb3e:	73fb      	strb	r3, [r7, #15]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	7bfa      	ldrb	r2, [r7, #15]
 800bb44:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bb46:	7dbb      	ldrb	r3, [r7, #22]
 800bb48:	2be5      	cmp	r3, #229	; 0xe5
 800bb4a:	d007      	beq.n	800bb5c <dir_find+0x8a>
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <dir_find+0x98>
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2b0f      	cmp	r3, #15
 800bb5a:	d006      	beq.n	800bb6a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb5c:	23ff      	movs	r3, #255	; 0xff
 800bb5e:	757b      	strb	r3, [r7, #21]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f04f 32ff 	mov.w	r2, #4294967295
 800bb66:	631a      	str	r2, [r3, #48]	; 0x30
 800bb68:	e05e      	b.n	800bc28 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
 800bb6c:	2b0f      	cmp	r3, #15
 800bb6e:	d136      	bne.n	800bbde <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d154      	bne.n	800bc28 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bb7e:	7dbb      	ldrb	r3, [r7, #22]
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00d      	beq.n	800bba4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	7b5b      	ldrb	r3, [r3, #13]
 800bb8e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bb90:	7dbb      	ldrb	r3, [r7, #22]
 800bb92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb96:	75bb      	strb	r3, [r7, #22]
 800bb98:	7dbb      	ldrb	r3, [r7, #22]
 800bb9a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	695a      	ldr	r2, [r3, #20]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bba4:	7dba      	ldrb	r2, [r7, #22]
 800bba6:	7d7b      	ldrb	r3, [r7, #21]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d115      	bne.n	800bbd8 <dir_find+0x106>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	330d      	adds	r3, #13
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	7d3a      	ldrb	r2, [r7, #20]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d10e      	bne.n	800bbd8 <dir_find+0x106>
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	691a      	ldr	r2, [r3, #16]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7ff fdfd 	bl	800b7c4 <cmp_lfn>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <dir_find+0x106>
 800bbd0:	7d7b      	ldrb	r3, [r7, #21]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	e000      	b.n	800bbda <dir_find+0x108>
 800bbd8:	23ff      	movs	r3, #255	; 0xff
 800bbda:	757b      	strb	r3, [r7, #21]
 800bbdc:	e024      	b.n	800bc28 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bbde:	7d7b      	ldrb	r3, [r7, #21]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d109      	bne.n	800bbf8 <dir_find+0x126>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff ff51 	bl	800ba90 <sum_sfn>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	7d3b      	ldrb	r3, [r7, #20]
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d024      	beq.n	800bc42 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <dir_find+0x14a>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a18      	ldr	r0, [r3, #32]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	3324      	adds	r3, #36	; 0x24
 800bc0e:	220b      	movs	r2, #11
 800bc10:	4619      	mov	r1, r3
 800bc12:	f7fe fe1d 	bl	800a850 <mem_cmp>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d014      	beq.n	800bc46 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc1c:	23ff      	movs	r3, #255	; 0xff
 800bc1e:	757b      	strb	r3, [r7, #21]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f04f 32ff 	mov.w	r2, #4294967295
 800bc26:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bc28:	2100      	movs	r1, #0
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff fc6d 	bl	800b50a <dir_next>
 800bc30:	4603      	mov	r3, r0
 800bc32:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f43f af65 	beq.w	800bb06 <dir_find+0x34>
 800bc3c:	e004      	b.n	800bc48 <dir_find+0x176>
		if (res != FR_OK) break;
 800bc3e:	bf00      	nop
 800bc40:	e002      	b.n	800bc48 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc42:	bf00      	nop
 800bc44:	e000      	b.n	800bc48 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc46:	bf00      	nop

	return res;
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08c      	sub	sp, #48	; 0x30
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <dir_register+0x20>
 800bc70:	2306      	movs	r3, #6
 800bc72:	e0e0      	b.n	800be36 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bc74:	2300      	movs	r3, #0
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
 800bc78:	e002      	b.n	800bc80 <dir_register+0x2c>
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	4413      	add	r3, r2
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1f4      	bne.n	800bc7a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bc96:	f107 030c 	add.w	r3, r7, #12
 800bc9a:	220c      	movs	r2, #12
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fe fd9b 	bl	800a7d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d032      	beq.n	800bd12 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2240      	movs	r2, #64	; 0x40
 800bcb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcb8:	e016      	b.n	800bce8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	691a      	ldr	r2, [r3, #16]
 800bcc4:	f107 010c 	add.w	r1, r7, #12
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	f7ff fe53 	bl	800b974 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff feff 	bl	800bad2 <dir_find>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bcda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	3301      	adds	r3, #1
 800bce6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	2b63      	cmp	r3, #99	; 0x63
 800bcec:	d9e5      	bls.n	800bcba <dir_register+0x66>
 800bcee:	e000      	b.n	800bcf2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bcf0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	2b64      	cmp	r3, #100	; 0x64
 800bcf6:	d101      	bne.n	800bcfc <dir_register+0xa8>
 800bcf8:	2307      	movs	r3, #7
 800bcfa:	e09c      	b.n	800be36 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bcfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d002      	beq.n	800bd0a <dir_register+0xb6>
 800bd04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd08:	e095      	b.n	800be36 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bd0a:	7dfa      	ldrb	r2, [r7, #23]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d007      	beq.n	800bd2c <dir_register+0xd8>
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1e:	330c      	adds	r3, #12
 800bd20:	4a47      	ldr	r2, [pc, #284]	; (800be40 <dir_register+0x1ec>)
 800bd22:	fba2 2303 	umull	r2, r3, r2, r3
 800bd26:	089b      	lsrs	r3, r3, #2
 800bd28:	3301      	adds	r3, #1
 800bd2a:	e000      	b.n	800bd2e <dir_register+0xda>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bd30:	6a39      	ldr	r1, [r7, #32]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff fcbf 	bl	800b6b6 <dir_alloc>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bd3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d148      	bne.n	800bdd8 <dir_register+0x184>
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	623b      	str	r3, [r7, #32]
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d042      	beq.n	800bdd8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	695a      	ldr	r2, [r3, #20]
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	015b      	lsls	r3, r3, #5
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff fb4a 	bl	800b3f8 <dir_sdi>
 800bd64:	4603      	mov	r3, r0
 800bd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bd6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d132      	bne.n	800bdd8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3324      	adds	r3, #36	; 0x24
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff fe8a 	bl	800ba90 <sum_sfn>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	4619      	mov	r1, r3
 800bd86:	69f8      	ldr	r0, [r7, #28]
 800bd88:	f7fe ff54 	bl	800ac34 <move_window>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bd92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d11d      	bne.n	800bdd6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	6918      	ldr	r0, [r3, #16]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a19      	ldr	r1, [r3, #32]
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	7efb      	ldrb	r3, [r7, #27]
 800bda8:	f7ff fd7c 	bl	800b8a4 <put_lfn>
				fs->wflag = 1;
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff fba8 	bl	800b50a <dir_next>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bdc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d107      	bne.n	800bdd8 <dir_register+0x184>
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	623b      	str	r3, [r7, #32]
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1d5      	bne.n	800bd80 <dir_register+0x12c>
 800bdd4:	e000      	b.n	800bdd8 <dir_register+0x184>
				if (res != FR_OK) break;
 800bdd6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bdd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d128      	bne.n	800be32 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	69db      	ldr	r3, [r3, #28]
 800bde4:	4619      	mov	r1, r3
 800bde6:	69f8      	ldr	r0, [r7, #28]
 800bde8:	f7fe ff24 	bl	800ac34 <move_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d11b      	bne.n	800be32 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	2220      	movs	r2, #32
 800be00:	2100      	movs	r1, #0
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fd09 	bl	800a81a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a18      	ldr	r0, [r3, #32]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3324      	adds	r3, #36	; 0x24
 800be10:	220b      	movs	r2, #11
 800be12:	4619      	mov	r1, r3
 800be14:	f7fe fce0 	bl	800a7d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	330c      	adds	r3, #12
 800be24:	f002 0218 	and.w	r2, r2, #24
 800be28:	b2d2      	uxtb	r2, r2
 800be2a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2201      	movs	r2, #1
 800be30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800be32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be36:	4618      	mov	r0, r3
 800be38:	3730      	adds	r7, #48	; 0x30
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	4ec4ec4f 	.word	0x4ec4ec4f

0800be44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08a      	sub	sp, #40	; 0x28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	61ba      	str	r2, [r7, #24]
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	4413      	add	r3, r2
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800be72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be74:	2b1f      	cmp	r3, #31
 800be76:	d940      	bls.n	800befa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800be78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be7a:	2b2f      	cmp	r3, #47	; 0x2f
 800be7c:	d006      	beq.n	800be8c <create_name+0x48>
 800be7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be80:	2b5c      	cmp	r3, #92	; 0x5c
 800be82:	d110      	bne.n	800bea6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be84:	e002      	b.n	800be8c <create_name+0x48>
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	3301      	adds	r3, #1
 800be8a:	61bb      	str	r3, [r7, #24]
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	4413      	add	r3, r2
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b2f      	cmp	r3, #47	; 0x2f
 800be96:	d0f6      	beq.n	800be86 <create_name+0x42>
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	4413      	add	r3, r2
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b5c      	cmp	r3, #92	; 0x5c
 800bea2:	d0f0      	beq.n	800be86 <create_name+0x42>
			break;
 800bea4:	e02a      	b.n	800befc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2bfe      	cmp	r3, #254	; 0xfe
 800beaa:	d901      	bls.n	800beb0 <create_name+0x6c>
 800beac:	2306      	movs	r3, #6
 800beae:	e17d      	b.n	800c1ac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800beb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800beb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beb8:	2101      	movs	r1, #1
 800beba:	4618      	mov	r0, r3
 800bebc:	f001 fb50 	bl	800d560 <ff_convert>
 800bec0:	4603      	mov	r3, r0
 800bec2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d101      	bne.n	800bece <create_name+0x8a>
 800beca:	2306      	movs	r3, #6
 800becc:	e16e      	b.n	800c1ac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bed0:	2b7f      	cmp	r3, #127	; 0x7f
 800bed2:	d809      	bhi.n	800bee8 <create_name+0xa4>
 800bed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bed6:	4619      	mov	r1, r3
 800bed8:	488d      	ldr	r0, [pc, #564]	; (800c110 <create_name+0x2cc>)
 800beda:	f7fe fce0 	bl	800a89e <chk_chr>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <create_name+0xa4>
 800bee4:	2306      	movs	r3, #6
 800bee6:	e161      	b.n	800c1ac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	617a      	str	r2, [r7, #20]
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bef6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bef8:	e7b4      	b.n	800be64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800befa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	441a      	add	r2, r3
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf08:	2b1f      	cmp	r3, #31
 800bf0a:	d801      	bhi.n	800bf10 <create_name+0xcc>
 800bf0c:	2304      	movs	r3, #4
 800bf0e:	e000      	b.n	800bf12 <create_name+0xce>
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf16:	e011      	b.n	800bf3c <create_name+0xf8>
		w = lfn[di - 1];
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	4413      	add	r3, r2
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf2c:	2b20      	cmp	r3, #32
 800bf2e:	d002      	beq.n	800bf36 <create_name+0xf2>
 800bf30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf32:	2b2e      	cmp	r3, #46	; 0x2e
 800bf34:	d106      	bne.n	800bf44 <create_name+0x100>
		di--;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1ea      	bne.n	800bf18 <create_name+0xd4>
 800bf42:	e000      	b.n	800bf46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bf44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <create_name+0x118>
 800bf58:	2306      	movs	r3, #6
 800bf5a:	e127      	b.n	800c1ac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3324      	adds	r3, #36	; 0x24
 800bf60:	220b      	movs	r2, #11
 800bf62:	2120      	movs	r1, #32
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fc58 	bl	800a81a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	e002      	b.n	800bf76 <create_name+0x132>
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	3301      	adds	r3, #1
 800bf74:	61bb      	str	r3, [r7, #24]
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	2b20      	cmp	r3, #32
 800bf82:	d0f5      	beq.n	800bf70 <create_name+0x12c>
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	2b2e      	cmp	r3, #46	; 0x2e
 800bf90:	d0ee      	beq.n	800bf70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d009      	beq.n	800bfac <create_name+0x168>
 800bf98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf9c:	f043 0303 	orr.w	r3, r3, #3
 800bfa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bfa4:	e002      	b.n	800bfac <create_name+0x168>
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d009      	beq.n	800bfc6 <create_name+0x182>
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfc4:	d1ef      	bne.n	800bfa6 <create_name+0x162>

	i = b = 0; ni = 8;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfcc:	2300      	movs	r3, #0
 800bfce:	623b      	str	r3, [r7, #32]
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	61ba      	str	r2, [r7, #24]
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bfe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 8090 	beq.w	800c10c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bfec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d006      	beq.n	800c000 <create_name+0x1bc>
 800bff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bff4:	2b2e      	cmp	r3, #46	; 0x2e
 800bff6:	d10a      	bne.n	800c00e <create_name+0x1ca>
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d006      	beq.n	800c00e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c004:	f043 0303 	orr.w	r3, r3, #3
 800c008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c00c:	e07d      	b.n	800c10a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c00e:	6a3a      	ldr	r2, [r7, #32]
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	429a      	cmp	r2, r3
 800c014:	d203      	bcs.n	800c01e <create_name+0x1da>
 800c016:	69ba      	ldr	r2, [r7, #24]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d123      	bne.n	800c066 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	2b0b      	cmp	r3, #11
 800c022:	d106      	bne.n	800c032 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c028:	f043 0303 	orr.w	r3, r3, #3
 800c02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c030:	e075      	b.n	800c11e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	429a      	cmp	r2, r3
 800c038:	d005      	beq.n	800c046 <create_name+0x202>
 800c03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03e:	f043 0303 	orr.w	r3, r3, #3
 800c042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c046:	69ba      	ldr	r2, [r7, #24]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d866      	bhi.n	800c11c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	2308      	movs	r3, #8
 800c054:	623b      	str	r3, [r7, #32]
 800c056:	230b      	movs	r3, #11
 800c058:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c05a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c064:	e051      	b.n	800c10a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c068:	2b7f      	cmp	r3, #127	; 0x7f
 800c06a:	d914      	bls.n	800c096 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c06e:	2100      	movs	r1, #0
 800c070:	4618      	mov	r0, r3
 800c072:	f001 fa75 	bl	800d560 <ff_convert>
 800c076:	4603      	mov	r3, r0
 800c078:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <create_name+0x246>
 800c080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c082:	3b80      	subs	r3, #128	; 0x80
 800c084:	4a23      	ldr	r2, [pc, #140]	; (800c114 <create_name+0x2d0>)
 800c086:	5cd3      	ldrb	r3, [r2, r3]
 800c088:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c08a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c08e:	f043 0302 	orr.w	r3, r3, #2
 800c092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d007      	beq.n	800c0ac <create_name+0x268>
 800c09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c09e:	4619      	mov	r1, r3
 800c0a0:	481d      	ldr	r0, [pc, #116]	; (800c118 <create_name+0x2d4>)
 800c0a2:	f7fe fbfc 	bl	800a89e <chk_chr>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d008      	beq.n	800c0be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c0ac:	235f      	movs	r3, #95	; 0x5f
 800c0ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0b4:	f043 0303 	orr.w	r3, r3, #3
 800c0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0bc:	e01b      	b.n	800c0f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c0be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0c0:	2b40      	cmp	r3, #64	; 0x40
 800c0c2:	d909      	bls.n	800c0d8 <create_name+0x294>
 800c0c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0c6:	2b5a      	cmp	r3, #90	; 0x5a
 800c0c8:	d806      	bhi.n	800c0d8 <create_name+0x294>
					b |= 2;
 800c0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0ce:	f043 0302 	orr.w	r3, r3, #2
 800c0d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0d6:	e00e      	b.n	800c0f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0da:	2b60      	cmp	r3, #96	; 0x60
 800c0dc:	d90b      	bls.n	800c0f6 <create_name+0x2b2>
 800c0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0e0:	2b7a      	cmp	r3, #122	; 0x7a
 800c0e2:	d808      	bhi.n	800c0f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c0e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0e8:	f043 0301 	orr.w	r3, r3, #1
 800c0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0f2:	3b20      	subs	r3, #32
 800c0f4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	623a      	str	r2, [r7, #32]
 800c0fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0fe:	b2d1      	uxtb	r1, r2
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	4413      	add	r3, r2
 800c104:	460a      	mov	r2, r1
 800c106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c10a:	e763      	b.n	800bfd4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c10c:	bf00      	nop
 800c10e:	e006      	b.n	800c11e <create_name+0x2da>
 800c110:	08011040 	.word	0x08011040
 800c114:	080110a8 	.word	0x080110a8
 800c118:	0801104c 	.word	0x0801104c
			if (si > di) break;			/* No extension */
 800c11c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c124:	2be5      	cmp	r3, #229	; 0xe5
 800c126:	d103      	bne.n	800c130 <create_name+0x2ec>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2205      	movs	r2, #5
 800c12c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	2b08      	cmp	r3, #8
 800c134:	d104      	bne.n	800c140 <create_name+0x2fc>
 800c136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c144:	f003 030c 	and.w	r3, r3, #12
 800c148:	2b0c      	cmp	r3, #12
 800c14a:	d005      	beq.n	800c158 <create_name+0x314>
 800c14c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c150:	f003 0303 	and.w	r3, r3, #3
 800c154:	2b03      	cmp	r3, #3
 800c156:	d105      	bne.n	800c164 <create_name+0x320>
 800c158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c15c:	f043 0302 	orr.w	r3, r3, #2
 800c160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d117      	bne.n	800c1a0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c174:	f003 0303 	and.w	r3, r3, #3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d105      	bne.n	800c188 <create_name+0x344>
 800c17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c180:	f043 0310 	orr.w	r3, r3, #16
 800c184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c18c:	f003 030c 	and.w	r3, r3, #12
 800c190:	2b04      	cmp	r3, #4
 800c192:	d105      	bne.n	800c1a0 <create_name+0x35c>
 800c194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c198:	f043 0308 	orr.w	r3, r3, #8
 800c19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c1a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c1aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3728      	adds	r7, #40	; 0x28
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c1c8:	e002      	b.n	800c1d0 <follow_path+0x1c>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b2f      	cmp	r3, #47	; 0x2f
 800c1d6:	d0f8      	beq.n	800c1ca <follow_path+0x16>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b5c      	cmp	r3, #92	; 0x5c
 800c1de:	d0f4      	beq.n	800c1ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b1f      	cmp	r3, #31
 800c1ec:	d80a      	bhi.n	800c204 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2280      	movs	r2, #128	; 0x80
 800c1f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff f8fd 	bl	800b3f8 <dir_sdi>
 800c1fe:	4603      	mov	r3, r0
 800c200:	75fb      	strb	r3, [r7, #23]
 800c202:	e048      	b.n	800c296 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c204:	463b      	mov	r3, r7
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff fe1b 	bl	800be44 <create_name>
 800c20e:	4603      	mov	r3, r0
 800c210:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d139      	bne.n	800c28c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff fc5a 	bl	800bad2 <dir_find>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c228:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c230:	7dfb      	ldrb	r3, [r7, #23]
 800c232:	2b04      	cmp	r3, #4
 800c234:	d12c      	bne.n	800c290 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c236:	7afb      	ldrb	r3, [r7, #11]
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d127      	bne.n	800c290 <follow_path+0xdc>
 800c240:	2305      	movs	r3, #5
 800c242:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c244:	e024      	b.n	800c290 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c246:	7afb      	ldrb	r3, [r7, #11]
 800c248:	f003 0304 	and.w	r3, r3, #4
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d121      	bne.n	800c294 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	799b      	ldrb	r3, [r3, #6]
 800c254:	f003 0310 	and.w	r3, r3, #16
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c25c:	2305      	movs	r3, #5
 800c25e:	75fb      	strb	r3, [r7, #23]
 800c260:	e019      	b.n	800c296 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	8992      	ldrh	r2, [r2, #12]
 800c270:	fbb3 f0f2 	udiv	r0, r3, r2
 800c274:	fb00 f202 	mul.w	r2, r0, r2
 800c278:	1a9b      	subs	r3, r3, r2
 800c27a:	440b      	add	r3, r1
 800c27c:	4619      	mov	r1, r3
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fa60 	bl	800b744 <ld_clust>
 800c284:	4602      	mov	r2, r0
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c28a:	e7bb      	b.n	800c204 <follow_path+0x50>
			if (res != FR_OK) break;
 800c28c:	bf00      	nop
 800c28e:	e002      	b.n	800c296 <follow_path+0xe2>
				break;
 800c290:	bf00      	nop
 800c292:	e000      	b.n	800c296 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c294:	bf00      	nop
			}
		}
	}

	return res;
 800c296:	7dfb      	ldrb	r3, [r7, #23]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b087      	sub	sp, #28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d031      	beq.n	800c31a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	617b      	str	r3, [r7, #20]
 800c2bc:	e002      	b.n	800c2c4 <get_ldnumber+0x24>
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b1f      	cmp	r3, #31
 800c2ca:	d903      	bls.n	800c2d4 <get_ldnumber+0x34>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	2b3a      	cmp	r3, #58	; 0x3a
 800c2d2:	d1f4      	bne.n	800c2be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b3a      	cmp	r3, #58	; 0x3a
 800c2da:	d11c      	bne.n	800c316 <get_ldnumber+0x76>
			tp = *path;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	60fa      	str	r2, [r7, #12]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	3b30      	subs	r3, #48	; 0x30
 800c2ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b09      	cmp	r3, #9
 800c2f2:	d80e      	bhi.n	800c312 <get_ldnumber+0x72>
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d10a      	bne.n	800c312 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d107      	bne.n	800c312 <get_ldnumber+0x72>
					vol = (int)i;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	3301      	adds	r3, #1
 800c30a:	617b      	str	r3, [r7, #20]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	e002      	b.n	800c31c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c316:	2300      	movs	r3, #0
 800c318:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c31a:	693b      	ldr	r3, [r7, #16]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	371c      	adds	r7, #28
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	70da      	strb	r2, [r3, #3]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f04f 32ff 	mov.w	r2, #4294967295
 800c33e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7fe fc76 	bl	800ac34 <move_window>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <check_fs+0x2a>
 800c34e:	2304      	movs	r3, #4
 800c350:	e038      	b.n	800c3c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3338      	adds	r3, #56	; 0x38
 800c356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe f9ba 	bl	800a6d4 <ld_word>
 800c360:	4603      	mov	r3, r0
 800c362:	461a      	mov	r2, r3
 800c364:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c368:	429a      	cmp	r2, r3
 800c36a:	d001      	beq.n	800c370 <check_fs+0x48>
 800c36c:	2303      	movs	r3, #3
 800c36e:	e029      	b.n	800c3c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c376:	2be9      	cmp	r3, #233	; 0xe9
 800c378:	d009      	beq.n	800c38e <check_fs+0x66>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c380:	2beb      	cmp	r3, #235	; 0xeb
 800c382:	d11e      	bne.n	800c3c2 <check_fs+0x9a>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c38a:	2b90      	cmp	r3, #144	; 0x90
 800c38c:	d119      	bne.n	800c3c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3338      	adds	r3, #56	; 0x38
 800c392:	3336      	adds	r3, #54	; 0x36
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe f9b5 	bl	800a704 <ld_dword>
 800c39a:	4603      	mov	r3, r0
 800c39c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3a0:	4a0a      	ldr	r2, [pc, #40]	; (800c3cc <check_fs+0xa4>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d101      	bne.n	800c3aa <check_fs+0x82>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e00c      	b.n	800c3c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	3338      	adds	r3, #56	; 0x38
 800c3ae:	3352      	adds	r3, #82	; 0x52
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe f9a7 	bl	800a704 <ld_dword>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	4a05      	ldr	r2, [pc, #20]	; (800c3d0 <check_fs+0xa8>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d101      	bne.n	800c3c2 <check_fs+0x9a>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e000      	b.n	800c3c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c3c2:	2302      	movs	r3, #2
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	00544146 	.word	0x00544146
 800c3d0:	33544146 	.word	0x33544146

0800c3d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b096      	sub	sp, #88	; 0x58
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff ff59 	bl	800c2a0 <get_ldnumber>
 800c3ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	da01      	bge.n	800c3fa <find_volume+0x26>
 800c3f6:	230b      	movs	r3, #11
 800c3f8:	e265      	b.n	800c8c6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c3fa:	4a9f      	ldr	r2, [pc, #636]	; (800c678 <find_volume+0x2a4>)
 800c3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c402:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <find_volume+0x3a>
 800c40a:	230c      	movs	r3, #12
 800c40c:	e25b      	b.n	800c8c6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c412:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	f023 0301 	bic.w	r3, r3, #1
 800c41a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d01a      	beq.n	800c45a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fe f8b5 	bl	800a598 <disk_status>
 800c42e:	4603      	mov	r3, r0
 800c430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10c      	bne.n	800c45a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d007      	beq.n	800c456 <find_volume+0x82>
 800c446:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c44a:	f003 0304 	and.w	r3, r3, #4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c452:	230a      	movs	r3, #10
 800c454:	e237      	b.n	800c8c6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c456:	2300      	movs	r3, #0
 800c458:	e235      	b.n	800c8c6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45c:	2200      	movs	r2, #0
 800c45e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c462:	b2da      	uxtb	r2, r3
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	785b      	ldrb	r3, [r3, #1]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe f8ad 	bl	800a5cc <disk_initialize>
 800c472:	4603      	mov	r3, r0
 800c474:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c484:	2303      	movs	r3, #3
 800c486:	e21e      	b.n	800c8c6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d007      	beq.n	800c49e <find_volume+0xca>
 800c48e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c492:	f003 0304 	and.w	r3, r3, #4
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c49a:	230a      	movs	r3, #10
 800c49c:	e213      	b.n	800c8c6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	7858      	ldrb	r0, [r3, #1]
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	2102      	movs	r1, #2
 800c4aa:	f7fe f8f5 	bl	800a698 <disk_ioctl>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <find_volume+0xe4>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e206      	b.n	800c8c6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	899b      	ldrh	r3, [r3, #12]
 800c4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4c0:	d80d      	bhi.n	800c4de <find_volume+0x10a>
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c4:	899b      	ldrh	r3, [r3, #12]
 800c4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ca:	d308      	bcc.n	800c4de <find_volume+0x10a>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	899b      	ldrh	r3, [r3, #12]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d4:	899b      	ldrh	r3, [r3, #12]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	4013      	ands	r3, r2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <find_volume+0x10e>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e1f1      	b.n	800c8c6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c4e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4ea:	f7ff ff1d 	bl	800c328 <check_fs>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d149      	bne.n	800c590 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c500:	e01e      	b.n	800c540 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50a:	011b      	lsls	r3, r3, #4
 800c50c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c510:	4413      	add	r3, r2
 800c512:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	3304      	adds	r3, #4
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d006      	beq.n	800c52c <find_volume+0x158>
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	3308      	adds	r3, #8
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe f8ee 	bl	800a704 <ld_dword>
 800c528:	4602      	mov	r2, r0
 800c52a:	e000      	b.n	800c52e <find_volume+0x15a>
 800c52c:	2200      	movs	r2, #0
 800c52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	3358      	adds	r3, #88	; 0x58
 800c534:	443b      	add	r3, r7
 800c536:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c53c:	3301      	adds	r3, #1
 800c53e:	643b      	str	r3, [r7, #64]	; 0x40
 800c540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c542:	2b03      	cmp	r3, #3
 800c544:	d9dd      	bls.n	800c502 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c546:	2300      	movs	r3, #0
 800c548:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <find_volume+0x182>
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	3b01      	subs	r3, #1
 800c554:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	3358      	adds	r3, #88	; 0x58
 800c55c:	443b      	add	r3, r7
 800c55e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c562:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <find_volume+0x1a2>
 800c56a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c56c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c56e:	f7ff fedb 	bl	800c328 <check_fs>
 800c572:	4603      	mov	r3, r0
 800c574:	e000      	b.n	800c578 <find_volume+0x1a4>
 800c576:	2303      	movs	r3, #3
 800c578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c57c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c580:	2b01      	cmp	r3, #1
 800c582:	d905      	bls.n	800c590 <find_volume+0x1bc>
 800c584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c586:	3301      	adds	r3, #1
 800c588:	643b      	str	r3, [r7, #64]	; 0x40
 800c58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d9e2      	bls.n	800c556 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c594:	2b04      	cmp	r3, #4
 800c596:	d101      	bne.n	800c59c <find_volume+0x1c8>
 800c598:	2301      	movs	r3, #1
 800c59a:	e194      	b.n	800c8c6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d901      	bls.n	800c5a8 <find_volume+0x1d4>
 800c5a4:	230d      	movs	r3, #13
 800c5a6:	e18e      	b.n	800c8c6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	3338      	adds	r3, #56	; 0x38
 800c5ac:	330b      	adds	r3, #11
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe f890 	bl	800a6d4 <ld_word>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	899b      	ldrh	r3, [r3, #12]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d001      	beq.n	800c5c4 <find_volume+0x1f0>
 800c5c0:	230d      	movs	r3, #13
 800c5c2:	e180      	b.n	800c8c6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	3338      	adds	r3, #56	; 0x38
 800c5c8:	3316      	adds	r3, #22
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe f882 	bl	800a6d4 <ld_word>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <find_volume+0x214>
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	3338      	adds	r3, #56	; 0x38
 800c5de:	3324      	adds	r3, #36	; 0x24
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe f88f 	bl	800a704 <ld_dword>
 800c5e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	789b      	ldrb	r3, [r3, #2]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d005      	beq.n	800c60c <find_volume+0x238>
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	789b      	ldrb	r3, [r3, #2]
 800c604:	2b02      	cmp	r3, #2
 800c606:	d001      	beq.n	800c60c <find_volume+0x238>
 800c608:	230d      	movs	r3, #13
 800c60a:	e15c      	b.n	800c8c6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	789b      	ldrb	r3, [r3, #2]
 800c610:	461a      	mov	r2, r3
 800c612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c614:	fb02 f303 	mul.w	r3, r2, r3
 800c618:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c620:	b29a      	uxth	r2, r3
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	895b      	ldrh	r3, [r3, #10]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d008      	beq.n	800c640 <find_volume+0x26c>
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	895b      	ldrh	r3, [r3, #10]
 800c632:	461a      	mov	r2, r3
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	895b      	ldrh	r3, [r3, #10]
 800c638:	3b01      	subs	r3, #1
 800c63a:	4013      	ands	r3, r2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <find_volume+0x270>
 800c640:	230d      	movs	r3, #13
 800c642:	e140      	b.n	800c8c6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	3338      	adds	r3, #56	; 0x38
 800c648:	3311      	adds	r3, #17
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe f842 	bl	800a6d4 <ld_word>
 800c650:	4603      	mov	r3, r0
 800c652:	461a      	mov	r2, r3
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	891b      	ldrh	r3, [r3, #8]
 800c65c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c65e:	8992      	ldrh	r2, [r2, #12]
 800c660:	0952      	lsrs	r2, r2, #5
 800c662:	b292      	uxth	r2, r2
 800c664:	fbb3 f1f2 	udiv	r1, r3, r2
 800c668:	fb01 f202 	mul.w	r2, r1, r2
 800c66c:	1a9b      	subs	r3, r3, r2
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <find_volume+0x2a8>
 800c674:	230d      	movs	r3, #13
 800c676:	e126      	b.n	800c8c6 <find_volume+0x4f2>
 800c678:	20002b60 	.word	0x20002b60

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	3338      	adds	r3, #56	; 0x38
 800c680:	3313      	adds	r3, #19
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe f826 	bl	800a6d4 <ld_word>
 800c688:	4603      	mov	r3, r0
 800c68a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <find_volume+0x2cc>
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	3338      	adds	r3, #56	; 0x38
 800c696:	3320      	adds	r3, #32
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fe f833 	bl	800a704 <ld_dword>
 800c69e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	3338      	adds	r3, #56	; 0x38
 800c6a4:	330e      	adds	r3, #14
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe f814 	bl	800a6d4 <ld_word>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c6b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <find_volume+0x2e6>
 800c6b6:	230d      	movs	r3, #13
 800c6b8:	e105      	b.n	800c8c6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c6ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6be:	4413      	add	r3, r2
 800c6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c2:	8911      	ldrh	r1, [r2, #8]
 800c6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c6:	8992      	ldrh	r2, [r2, #12]
 800c6c8:	0952      	lsrs	r2, r2, #5
 800c6ca:	b292      	uxth	r2, r2
 800c6cc:	fbb1 f2f2 	udiv	r2, r1, r2
 800c6d0:	b292      	uxth	r2, r2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c6d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d201      	bcs.n	800c6e2 <find_volume+0x30e>
 800c6de:	230d      	movs	r3, #13
 800c6e0:	e0f1      	b.n	800c8c6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c6e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ea:	8952      	ldrh	r2, [r2, #10]
 800c6ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <find_volume+0x328>
 800c6f8:	230d      	movs	r3, #13
 800c6fa:	e0e4      	b.n	800c8c6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c708:	4293      	cmp	r3, r2
 800c70a:	d802      	bhi.n	800c712 <find_volume+0x33e>
 800c70c:	2302      	movs	r3, #2
 800c70e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c714:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c718:	4293      	cmp	r3, r2
 800c71a:	d802      	bhi.n	800c722 <find_volume+0x34e>
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	1c9a      	adds	r2, r3, #2
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c72e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c730:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c734:	441a      	add	r2, r3
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c73a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	441a      	add	r2, r3
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c748:	2b03      	cmp	r3, #3
 800c74a:	d11e      	bne.n	800c78a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	3338      	adds	r3, #56	; 0x38
 800c750:	332a      	adds	r3, #42	; 0x2a
 800c752:	4618      	mov	r0, r3
 800c754:	f7fd ffbe 	bl	800a6d4 <ld_word>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <find_volume+0x38e>
 800c75e:	230d      	movs	r3, #13
 800c760:	e0b1      	b.n	800c8c6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	891b      	ldrh	r3, [r3, #8]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <find_volume+0x39a>
 800c76a:	230d      	movs	r3, #13
 800c76c:	e0ab      	b.n	800c8c6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	3338      	adds	r3, #56	; 0x38
 800c772:	332c      	adds	r3, #44	; 0x2c
 800c774:	4618      	mov	r0, r3
 800c776:	f7fd ffc5 	bl	800a704 <ld_dword>
 800c77a:	4602      	mov	r2, r0
 800c77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	69db      	ldr	r3, [r3, #28]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	647b      	str	r3, [r7, #68]	; 0x44
 800c788:	e01f      	b.n	800c7ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	891b      	ldrh	r3, [r3, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <find_volume+0x3c2>
 800c792:	230d      	movs	r3, #13
 800c794:	e097      	b.n	800c8c6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c79c:	441a      	add	r2, r3
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d103      	bne.n	800c7b2 <find_volume+0x3de>
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	e00a      	b.n	800c7c8 <find_volume+0x3f4>
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	69da      	ldr	r2, [r3, #28]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	4413      	add	r3, r2
 800c7bc:	085a      	lsrs	r2, r3, #1
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c7c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	6a1a      	ldr	r2, [r3, #32]
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	899b      	ldrh	r3, [r3, #12]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7d6:	440b      	add	r3, r1
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7dc:	8989      	ldrh	r1, [r1, #12]
 800c7de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d201      	bcs.n	800c7ea <find_volume+0x416>
 800c7e6:	230d      	movs	r3, #13
 800c7e8:	e06d      	b.n	800c8c6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f0:	619a      	str	r2, [r3, #24]
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	699a      	ldr	r2, [r3, #24]
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	2280      	movs	r2, #128	; 0x80
 800c7fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c804:	2b03      	cmp	r3, #3
 800c806:	d149      	bne.n	800c89c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	3338      	adds	r3, #56	; 0x38
 800c80c:	3330      	adds	r3, #48	; 0x30
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fd ff60 	bl	800a6d4 <ld_word>
 800c814:	4603      	mov	r3, r0
 800c816:	2b01      	cmp	r3, #1
 800c818:	d140      	bne.n	800c89c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c81c:	3301      	adds	r3, #1
 800c81e:	4619      	mov	r1, r3
 800c820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c822:	f7fe fa07 	bl	800ac34 <move_window>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d137      	bne.n	800c89c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	2200      	movs	r2, #0
 800c830:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	3338      	adds	r3, #56	; 0x38
 800c836:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fd ff4a 	bl	800a6d4 <ld_word>
 800c840:	4603      	mov	r3, r0
 800c842:	461a      	mov	r2, r3
 800c844:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c848:	429a      	cmp	r2, r3
 800c84a:	d127      	bne.n	800c89c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	3338      	adds	r3, #56	; 0x38
 800c850:	4618      	mov	r0, r3
 800c852:	f7fd ff57 	bl	800a704 <ld_dword>
 800c856:	4603      	mov	r3, r0
 800c858:	4a1d      	ldr	r2, [pc, #116]	; (800c8d0 <find_volume+0x4fc>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d11e      	bne.n	800c89c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c860:	3338      	adds	r3, #56	; 0x38
 800c862:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c866:	4618      	mov	r0, r3
 800c868:	f7fd ff4c 	bl	800a704 <ld_dword>
 800c86c:	4603      	mov	r3, r0
 800c86e:	4a19      	ldr	r2, [pc, #100]	; (800c8d4 <find_volume+0x500>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d113      	bne.n	800c89c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	3338      	adds	r3, #56	; 0x38
 800c878:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fd ff41 	bl	800a704 <ld_dword>
 800c882:	4602      	mov	r2, r0
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	3338      	adds	r3, #56	; 0x38
 800c88c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c890:	4618      	mov	r0, r3
 800c892:	f7fd ff37 	bl	800a704 <ld_dword>
 800c896:	4602      	mov	r2, r0
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c8a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c8a4:	4b0c      	ldr	r3, [pc, #48]	; (800c8d8 <find_volume+0x504>)
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <find_volume+0x504>)
 800c8ae:	801a      	strh	r2, [r3, #0]
 800c8b0:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <find_volume+0x504>)
 800c8b2:	881a      	ldrh	r2, [r3, #0]
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ba:	4a08      	ldr	r2, [pc, #32]	; (800c8dc <find_volume+0x508>)
 800c8bc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c8be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8c0:	f7fe f950 	bl	800ab64 <clear_lock>
#endif
	return FR_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3758      	adds	r7, #88	; 0x58
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	41615252 	.word	0x41615252
 800c8d4:	61417272 	.word	0x61417272
 800c8d8:	20002b64 	.word	0x20002b64
 800c8dc:	20002b88 	.word	0x20002b88

0800c8e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c8ea:	2309      	movs	r3, #9
 800c8ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01c      	beq.n	800c92e <validate+0x4e>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d018      	beq.n	800c92e <validate+0x4e>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d013      	beq.n	800c92e <validate+0x4e>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	889a      	ldrh	r2, [r3, #4]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	88db      	ldrh	r3, [r3, #6]
 800c910:	429a      	cmp	r2, r3
 800c912:	d10c      	bne.n	800c92e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	785b      	ldrb	r3, [r3, #1]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd fe3c 	bl	800a598 <disk_status>
 800c920:	4603      	mov	r3, r0
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b00      	cmp	r3, #0
 800c928:	d101      	bne.n	800c92e <validate+0x4e>
			res = FR_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <validate+0x5a>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	e000      	b.n	800c93c <validate+0x5c>
 800c93a:	2300      	movs	r3, #0
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	6013      	str	r3, [r2, #0]
	return res;
 800c940:	7bfb      	ldrb	r3, [r7, #15]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
	...

0800c94c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	4613      	mov	r3, r2
 800c958:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c95e:	f107 0310 	add.w	r3, r7, #16
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff fc9c 	bl	800c2a0 <get_ldnumber>
 800c968:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	da01      	bge.n	800c974 <f_mount+0x28>
 800c970:	230b      	movs	r3, #11
 800c972:	e02b      	b.n	800c9cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c974:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <f_mount+0x88>)
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c97c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d005      	beq.n	800c990 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c984:	69b8      	ldr	r0, [r7, #24]
 800c986:	f7fe f8ed 	bl	800ab64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d002      	beq.n	800c99c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	490d      	ldr	r1, [pc, #52]	; (800c9d4 <f_mount+0x88>)
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <f_mount+0x66>
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d001      	beq.n	800c9b6 <f_mount+0x6a>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e00a      	b.n	800c9cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c9b6:	f107 010c 	add.w	r1, r7, #12
 800c9ba:	f107 0308 	add.w	r3, r7, #8
 800c9be:	2200      	movs	r2, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7ff fd07 	bl	800c3d4 <find_volume>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3720      	adds	r7, #32
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	20002b60 	.word	0x20002b60

0800c9d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b09a      	sub	sp, #104	; 0x68
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <f_open+0x18>
 800c9ec:	2309      	movs	r3, #9
 800c9ee:	e1bb      	b.n	800cd68 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c9f0:	79fb      	ldrb	r3, [r7, #7]
 800c9f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	f107 0114 	add.w	r1, r7, #20
 800c9fe:	f107 0308 	add.w	r3, r7, #8
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fce6 	bl	800c3d4 <find_volume>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ca0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f040 819f 	bne.w	800cd56 <f_open+0x37e>
		dj.obj.fs = fs;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	f107 0318 	add.w	r3, r7, #24
 800ca22:	4611      	mov	r1, r2
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7ff fbc5 	bl	800c1b4 <follow_path>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ca30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d11a      	bne.n	800ca6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca3c:	b25b      	sxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da03      	bge.n	800ca4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca42:	2306      	movs	r3, #6
 800ca44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ca48:	e011      	b.n	800ca6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	f023 0301 	bic.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bf14      	ite	ne
 800ca54:	2301      	movne	r3, #1
 800ca56:	2300      	moveq	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f107 0318 	add.w	r3, r7, #24
 800ca60:	4611      	mov	r1, r2
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fd ff36 	bl	800a8d4 <chk_lock>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca6e:	79fb      	ldrb	r3, [r7, #7]
 800ca70:	f003 031c 	and.w	r3, r3, #28
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d07f      	beq.n	800cb78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ca78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d017      	beq.n	800cab0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d10e      	bne.n	800caa6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca88:	f7fd ff80 	bl	800a98c <enq_lock>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d006      	beq.n	800caa0 <f_open+0xc8>
 800ca92:	f107 0318 	add.w	r3, r7, #24
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff f8dc 	bl	800bc54 <dir_register>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	e000      	b.n	800caa2 <f_open+0xca>
 800caa0:	2312      	movs	r3, #18
 800caa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	f043 0308 	orr.w	r3, r3, #8
 800caac:	71fb      	strb	r3, [r7, #7]
 800caae:	e010      	b.n	800cad2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cab0:	7fbb      	ldrb	r3, [r7, #30]
 800cab2:	f003 0311 	and.w	r3, r3, #17
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d003      	beq.n	800cac2 <f_open+0xea>
					res = FR_DENIED;
 800caba:	2307      	movs	r3, #7
 800cabc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cac0:	e007      	b.n	800cad2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	f003 0304 	and.w	r3, r3, #4
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <f_open+0xfa>
 800cacc:	2308      	movs	r3, #8
 800cace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d168      	bne.n	800cbac <f_open+0x1d4>
 800cada:	79fb      	ldrb	r3, [r7, #7]
 800cadc:	f003 0308 	and.w	r3, r3, #8
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d063      	beq.n	800cbac <f_open+0x1d4>
				dw = GET_FATTIME();
 800cae4:	f7fd fcfa 	bl	800a4dc <get_fattime>
 800cae8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	330e      	adds	r3, #14
 800caee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fd fe45 	bl	800a780 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	3316      	adds	r3, #22
 800cafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd fe3f 	bl	800a780 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	330b      	adds	r3, #11
 800cb06:	2220      	movs	r2, #32
 800cb08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe fe17 	bl	800b744 <ld_clust>
 800cb16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe fe2f 	bl	800b782 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	331c      	adds	r3, #28
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fd fe28 	bl	800a780 <st_dword>
					fs->wflag = 1;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2201      	movs	r2, #1
 800cb34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d037      	beq.n	800cbac <f_open+0x1d4>
						dw = fs->winsect;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cb42:	f107 0318 	add.w	r3, r7, #24
 800cb46:	2200      	movs	r2, #0
 800cb48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fb1f 	bl	800b18e <remove_chain>
 800cb50:	4603      	mov	r3, r0
 800cb52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cb56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d126      	bne.n	800cbac <f_open+0x1d4>
							res = move_window(fs, dw);
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe f866 	bl	800ac34 <move_window>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb72:	3a01      	subs	r2, #1
 800cb74:	615a      	str	r2, [r3, #20]
 800cb76:	e019      	b.n	800cbac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d115      	bne.n	800cbac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb80:	7fbb      	ldrb	r3, [r7, #30]
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d003      	beq.n	800cb92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cb8a:	2304      	movs	r3, #4
 800cb8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cb90:	e00c      	b.n	800cbac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	f003 0302 	and.w	r3, r3, #2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <f_open+0x1d4>
 800cb9c:	7fbb      	ldrb	r3, [r7, #30]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d002      	beq.n	800cbac <f_open+0x1d4>
						res = FR_DENIED;
 800cba6:	2307      	movs	r3, #7
 800cba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cbac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d128      	bne.n	800cc06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cbb4:	79fb      	ldrb	r3, [r7, #7]
 800cbb6:	f003 0308 	and.w	r3, r3, #8
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d003      	beq.n	800cbc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cbbe:	79fb      	ldrb	r3, [r7, #7]
 800cbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cbce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	f023 0301 	bic.w	r3, r3, #1
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	bf14      	ite	ne
 800cbde:	2301      	movne	r3, #1
 800cbe0:	2300      	moveq	r3, #0
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f107 0318 	add.w	r3, r7, #24
 800cbea:	4611      	mov	r1, r2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fd feef 	bl	800a9d0 <inc_lock>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d102      	bne.n	800cc06 <f_open+0x22e>
 800cc00:	2302      	movs	r3, #2
 800cc02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cc06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f040 80a3 	bne.w	800cd56 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fe fd94 	bl	800b744 <ld_clust>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	331c      	adds	r3, #28
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fd fd6c 	bl	800a704 <ld_dword>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	88da      	ldrh	r2, [r3, #6]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	79fa      	ldrb	r2, [r7, #7]
 800cc4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3330      	adds	r3, #48	; 0x30
 800cc62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc66:	2100      	movs	r1, #0
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fd fdd6 	bl	800a81a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc6e:	79fb      	ldrb	r3, [r7, #7]
 800cc70:	f003 0320 	and.w	r3, r3, #32
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d06e      	beq.n	800cd56 <f_open+0x37e>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d06a      	beq.n	800cd56 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68da      	ldr	r2, [r3, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	895b      	ldrh	r3, [r3, #10]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	899b      	ldrh	r3, [r3, #12]
 800cc92:	fb02 f303 	mul.w	r3, r2, r3
 800cc96:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cca4:	e016      	b.n	800ccd4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fe f87f 	bl	800adae <get_fat>
 800ccb0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ccb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d802      	bhi.n	800ccbe <f_open+0x2e6>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ccbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc4:	d102      	bne.n	800cccc <f_open+0x2f4>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d103      	bne.n	800cce4 <f_open+0x30c>
 800ccdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d8e0      	bhi.n	800cca6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cce8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ccea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d131      	bne.n	800cd56 <f_open+0x37e>
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	899b      	ldrh	r3, [r3, #12]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccfe:	fb01 f202 	mul.w	r2, r1, r2
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d026      	beq.n	800cd56 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe f82f 	bl	800ad70 <clust2sect>
 800cd12:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <f_open+0x34a>
						res = FR_INT_ERR;
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd20:	e019      	b.n	800cd56 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	461a      	mov	r2, r3
 800cd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd30:	441a      	add	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	7858      	ldrb	r0, [r3, #1]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6a1a      	ldr	r2, [r3, #32]
 800cd44:	2301      	movs	r3, #1
 800cd46:	f7fd fc67 	bl	800a618 <disk_read>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <f_open+0x37e>
 800cd50:	2301      	movs	r3, #1
 800cd52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <f_open+0x38c>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3768      	adds	r7, #104	; 0x68
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	; 0x38
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f107 0214 	add.w	r2, r7, #20
 800cd8e:	4611      	mov	r1, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff fda5 	bl	800c8e0 <validate>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d107      	bne.n	800cdb4 <f_read+0x44>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	7d5b      	ldrb	r3, [r3, #21]
 800cda8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cdac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d002      	beq.n	800cdba <f_read+0x4a>
 800cdb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdb8:	e135      	b.n	800d026 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	7d1b      	ldrb	r3, [r3, #20]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <f_read+0x5a>
 800cdc6:	2307      	movs	r3, #7
 800cdc8:	e12d      	b.n	800d026 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	6a3b      	ldr	r3, [r7, #32]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	f240 811e 	bls.w	800d01c <f_read+0x2ac>
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cde4:	e11a      	b.n	800d01c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	8992      	ldrh	r2, [r2, #12]
 800cdee:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdf2:	fb01 f202 	mul.w	r2, r1, r2
 800cdf6:	1a9b      	subs	r3, r3, r2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f040 80d5 	bne.w	800cfa8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	8992      	ldrh	r2, [r2, #12]
 800ce06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	8952      	ldrh	r2, [r2, #10]
 800ce0e:	3a01      	subs	r2, #1
 800ce10:	4013      	ands	r3, r2
 800ce12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d12f      	bne.n	800ce7a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d103      	bne.n	800ce2a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	633b      	str	r3, [r7, #48]	; 0x30
 800ce28:	e013      	b.n	800ce52 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d007      	beq.n	800ce42 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	4619      	mov	r1, r3
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f7fe faa5 	bl	800b388 <clmt_clust>
 800ce3e:	6338      	str	r0, [r7, #48]	; 0x30
 800ce40:	e007      	b.n	800ce52 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	f7fd ffaf 	bl	800adae <get_fat>
 800ce50:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ce52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d804      	bhi.n	800ce62 <f_read+0xf2>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	755a      	strb	r2, [r3, #21]
 800ce5e:	2302      	movs	r3, #2
 800ce60:	e0e1      	b.n	800d026 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce68:	d104      	bne.n	800ce74 <f_read+0x104>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	755a      	strb	r2, [r3, #21]
 800ce70:	2301      	movs	r3, #1
 800ce72:	e0d8      	b.n	800d026 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	4619      	mov	r1, r3
 800ce82:	4610      	mov	r0, r2
 800ce84:	f7fd ff74 	bl	800ad70 <clust2sect>
 800ce88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d104      	bne.n	800ce9a <f_read+0x12a>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2202      	movs	r2, #2
 800ce94:	755a      	strb	r2, [r3, #21]
 800ce96:	2302      	movs	r3, #2
 800ce98:	e0c5      	b.n	800d026 <f_read+0x2b6>
			sect += csect;
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	899b      	ldrh	r3, [r3, #12]
 800cea6:	461a      	mov	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800ceae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d041      	beq.n	800cf3a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ceb6:	69fa      	ldr	r2, [r7, #28]
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	4413      	add	r3, r2
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	8952      	ldrh	r2, [r2, #10]
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d905      	bls.n	800ced0 <f_read+0x160>
					cc = fs->csize - csect;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	895b      	ldrh	r3, [r3, #10]
 800cec8:	461a      	mov	r2, r3
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	7858      	ldrb	r0, [r3, #1]
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	69ba      	ldr	r2, [r7, #24]
 800ced8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ceda:	f7fd fb9d 	bl	800a618 <disk_read>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d004      	beq.n	800ceee <f_read+0x17e>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2201      	movs	r2, #1
 800cee8:	755a      	strb	r2, [r3, #21]
 800ceea:	2301      	movs	r3, #1
 800ceec:	e09b      	b.n	800d026 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	7d1b      	ldrb	r3, [r3, #20]
 800cef2:	b25b      	sxtb	r3, r3
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	da18      	bge.n	800cf2a <f_read+0x1ba>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6a1a      	ldr	r2, [r3, #32]
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d911      	bls.n	800cf2a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6a1a      	ldr	r2, [r3, #32]
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	8992      	ldrh	r2, [r2, #12]
 800cf12:	fb02 f303 	mul.w	r3, r2, r3
 800cf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf18:	18d0      	adds	r0, r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	899b      	ldrh	r3, [r3, #12]
 800cf24:	461a      	mov	r2, r3
 800cf26:	f7fd fc57 	bl	800a7d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	899b      	ldrh	r3, [r3, #12]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	fb02 f303 	mul.w	r3, r2, r3
 800cf36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cf38:	e05c      	b.n	800cff4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d02e      	beq.n	800cfa2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	7d1b      	ldrb	r3, [r3, #20]
 800cf48:	b25b      	sxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da18      	bge.n	800cf80 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	7858      	ldrb	r0, [r3, #1]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6a1a      	ldr	r2, [r3, #32]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	f7fd fb7b 	bl	800a658 <disk_write>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d004      	beq.n	800cf72 <f_read+0x202>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	755a      	strb	r2, [r3, #21]
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e059      	b.n	800d026 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	7d1b      	ldrb	r3, [r3, #20]
 800cf76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	7858      	ldrb	r0, [r3, #1]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	69ba      	ldr	r2, [r7, #24]
 800cf8e:	f7fd fb43 	bl	800a618 <disk_read>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <f_read+0x232>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	755a      	strb	r2, [r3, #21]
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e041      	b.n	800d026 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	899b      	ldrh	r3, [r3, #12]
 800cfac:	4618      	mov	r0, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	8992      	ldrh	r2, [r2, #12]
 800cfb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfba:	fb01 f202 	mul.w	r2, r1, r2
 800cfbe:	1a9b      	subs	r3, r3, r2
 800cfc0:	1ac3      	subs	r3, r0, r3
 800cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d901      	bls.n	800cfd0 <f_read+0x260>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	8992      	ldrh	r2, [r2, #12]
 800cfde:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfe2:	fb00 f202 	mul.w	r2, r0, r2
 800cfe6:	1a9b      	subs	r3, r3, r2
 800cfe8:	440b      	add	r3, r1
 800cfea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfec:	4619      	mov	r1, r3
 800cfee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cff0:	f7fd fbf2 	bl	800a7d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	4413      	add	r3, r2
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	699a      	ldr	r2, [r3, #24]
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d002:	441a      	add	r2, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	619a      	str	r2, [r3, #24]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	441a      	add	r2, r3
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f47f aee1 	bne.w	800cde6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3738      	adds	r7, #56	; 0x38
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b08c      	sub	sp, #48	; 0x30
 800d032:	af00      	add	r7, sp, #0
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2200      	movs	r2, #0
 800d044:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f107 0210 	add.w	r2, r7, #16
 800d04c:	4611      	mov	r1, r2
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fc46 	bl	800c8e0 <validate>
 800d054:	4603      	mov	r3, r0
 800d056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d05a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d107      	bne.n	800d072 <f_write+0x44>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	7d5b      	ldrb	r3, [r3, #21]
 800d066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d06a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <f_write+0x4a>
 800d072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d076:	e16a      	b.n	800d34e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	7d1b      	ldrb	r3, [r3, #20]
 800d07c:	f003 0302 	and.w	r3, r3, #2
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <f_write+0x5a>
 800d084:	2307      	movs	r3, #7
 800d086:	e162      	b.n	800d34e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	699a      	ldr	r2, [r3, #24]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	441a      	add	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	429a      	cmp	r2, r3
 800d096:	f080 814c 	bcs.w	800d332 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	43db      	mvns	r3, r3
 800d0a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d0a2:	e146      	b.n	800d332 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	8992      	ldrh	r2, [r2, #12]
 800d0ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0b0:	fb01 f202 	mul.w	r2, r1, r2
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f040 80f1 	bne.w	800d29e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	8992      	ldrh	r2, [r2, #12]
 800d0c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0c8:	693a      	ldr	r2, [r7, #16]
 800d0ca:	8952      	ldrh	r2, [r2, #10]
 800d0cc:	3a01      	subs	r2, #1
 800d0ce:	4013      	ands	r3, r2
 800d0d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d143      	bne.n	800d160 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10c      	bne.n	800d0fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d11a      	bne.n	800d122 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe f8b1 	bl	800b258 <create_chain>
 800d0f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800d0f8:	e013      	b.n	800d122 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d007      	beq.n	800d112 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	4619      	mov	r1, r3
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f7fe f93d 	bl	800b388 <clmt_clust>
 800d10e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d110:	e007      	b.n	800d122 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f7fe f89c 	bl	800b258 <create_chain>
 800d120:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	2b00      	cmp	r3, #0
 800d126:	f000 8109 	beq.w	800d33c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d104      	bne.n	800d13a <f_write+0x10c>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2202      	movs	r2, #2
 800d134:	755a      	strb	r2, [r3, #21]
 800d136:	2302      	movs	r3, #2
 800d138:	e109      	b.n	800d34e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d140:	d104      	bne.n	800d14c <f_write+0x11e>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	755a      	strb	r2, [r3, #21]
 800d148:	2301      	movs	r3, #1
 800d14a:	e100      	b.n	800d34e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d150:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d102      	bne.n	800d160 <f_write+0x132>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d15e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	7d1b      	ldrb	r3, [r3, #20]
 800d164:	b25b      	sxtb	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	da18      	bge.n	800d19c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	7858      	ldrb	r0, [r3, #1]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6a1a      	ldr	r2, [r3, #32]
 800d178:	2301      	movs	r3, #1
 800d17a:	f7fd fa6d 	bl	800a658 <disk_write>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d004      	beq.n	800d18e <f_write+0x160>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2201      	movs	r2, #1
 800d188:	755a      	strb	r2, [r3, #21]
 800d18a:	2301      	movs	r3, #1
 800d18c:	e0df      	b.n	800d34e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	7d1b      	ldrb	r3, [r3, #20]
 800d192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d196:	b2da      	uxtb	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	69db      	ldr	r3, [r3, #28]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f7fd fde3 	bl	800ad70 <clust2sect>
 800d1aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d104      	bne.n	800d1bc <f_write+0x18e>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2202      	movs	r2, #2
 800d1b6:	755a      	strb	r2, [r3, #21]
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	e0c8      	b.n	800d34e <f_write+0x320>
			sect += csect;
 800d1bc:	697a      	ldr	r2, [r7, #20]
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	899b      	ldrh	r3, [r3, #12]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d043      	beq.n	800d260 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d1d8:	69ba      	ldr	r2, [r7, #24]
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	4413      	add	r3, r2
 800d1de:	693a      	ldr	r2, [r7, #16]
 800d1e0:	8952      	ldrh	r2, [r2, #10]
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d905      	bls.n	800d1f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	895b      	ldrh	r3, [r3, #10]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	7858      	ldrb	r0, [r3, #1]
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	697a      	ldr	r2, [r7, #20]
 800d1fa:	69f9      	ldr	r1, [r7, #28]
 800d1fc:	f7fd fa2c 	bl	800a658 <disk_write>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d004      	beq.n	800d210 <f_write+0x1e2>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	755a      	strb	r2, [r3, #21]
 800d20c:	2301      	movs	r3, #1
 800d20e:	e09e      	b.n	800d34e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6a1a      	ldr	r2, [r3, #32]
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	6a3a      	ldr	r2, [r7, #32]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d918      	bls.n	800d250 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6a1a      	ldr	r2, [r3, #32]
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	8992      	ldrh	r2, [r2, #12]
 800d230:	fb02 f303 	mul.w	r3, r2, r3
 800d234:	69fa      	ldr	r2, [r7, #28]
 800d236:	18d1      	adds	r1, r2, r3
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	899b      	ldrh	r3, [r3, #12]
 800d23c:	461a      	mov	r2, r3
 800d23e:	f7fd facb 	bl	800a7d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	7d1b      	ldrb	r3, [r3, #20]
 800d246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	899b      	ldrh	r3, [r3, #12]
 800d254:	461a      	mov	r2, r3
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	fb02 f303 	mul.w	r3, r2, r3
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d25e:	e04b      	b.n	800d2f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a1b      	ldr	r3, [r3, #32]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	429a      	cmp	r2, r3
 800d268:	d016      	beq.n	800d298 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	699a      	ldr	r2, [r3, #24]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d272:	429a      	cmp	r2, r3
 800d274:	d210      	bcs.n	800d298 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	7858      	ldrb	r0, [r3, #1]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d280:	2301      	movs	r3, #1
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	f7fd f9c8 	bl	800a618 <disk_read>
 800d288:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2201      	movs	r2, #1
 800d292:	755a      	strb	r2, [r3, #21]
 800d294:	2301      	movs	r3, #1
 800d296:	e05a      	b.n	800d34e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	899b      	ldrh	r3, [r3, #12]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	8992      	ldrh	r2, [r2, #12]
 800d2ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2b0:	fb01 f202 	mul.w	r2, r1, r2
 800d2b4:	1a9b      	subs	r3, r3, r2
 800d2b6:	1ac3      	subs	r3, r0, r3
 800d2b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d901      	bls.n	800d2c6 <f_write+0x298>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	8992      	ldrh	r2, [r2, #12]
 800d2d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2d8:	fb00 f202 	mul.w	r2, r0, r2
 800d2dc:	1a9b      	subs	r3, r3, r2
 800d2de:	440b      	add	r3, r1
 800d2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e2:	69f9      	ldr	r1, [r7, #28]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fd fa77 	bl	800a7d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	7d1b      	ldrb	r3, [r3, #20]
 800d2ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d2f8:	69fa      	ldr	r2, [r7, #28]
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fc:	4413      	add	r3, r2
 800d2fe:	61fb      	str	r3, [r7, #28]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	699a      	ldr	r2, [r3, #24]
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	441a      	add	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	619a      	str	r2, [r3, #24]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	429a      	cmp	r2, r3
 800d316:	bf38      	it	cc
 800d318:	461a      	movcc	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	60da      	str	r2, [r3, #12]
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	441a      	add	r2, r3
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f47f aeb5 	bne.w	800d0a4 <f_write+0x76>
 800d33a:	e000      	b.n	800d33e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d33c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	7d1b      	ldrb	r3, [r3, #20]
 800d342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d346:	b2da      	uxtb	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3730      	adds	r7, #48	; 0x30
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f107 0208 	add.w	r2, r7, #8
 800d364:	4611      	mov	r1, r2
 800d366:	4618      	mov	r0, r3
 800d368:	f7ff faba 	bl	800c8e0 <validate>
 800d36c:	4603      	mov	r3, r0
 800d36e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d370:	7dfb      	ldrb	r3, [r7, #23]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d168      	bne.n	800d448 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7d1b      	ldrb	r3, [r3, #20]
 800d37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d062      	beq.n	800d448 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	7d1b      	ldrb	r3, [r3, #20]
 800d386:	b25b      	sxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	da15      	bge.n	800d3b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	7858      	ldrb	r0, [r3, #1]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1a      	ldr	r2, [r3, #32]
 800d39a:	2301      	movs	r3, #1
 800d39c:	f7fd f95c 	bl	800a658 <disk_write>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <f_sync+0x54>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e04f      	b.n	800d44a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	7d1b      	ldrb	r3, [r3, #20]
 800d3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d3b8:	f7fd f890 	bl	800a4dc <get_fattime>
 800d3bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fd fc34 	bl	800ac34 <move_window>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d3d0:	7dfb      	ldrb	r3, [r7, #23]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d138      	bne.n	800d448 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	330b      	adds	r3, #11
 800d3e0:	781a      	ldrb	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	330b      	adds	r3, #11
 800d3e6:	f042 0220 	orr.w	r2, r2, #32
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6818      	ldr	r0, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	68f9      	ldr	r1, [r7, #12]
 800d3fa:	f7fe f9c2 	bl	800b782 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f103 021c 	add.w	r2, r3, #28
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7fd f9b8 	bl	800a780 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3316      	adds	r3, #22
 800d414:	6939      	ldr	r1, [r7, #16]
 800d416:	4618      	mov	r0, r3
 800d418:	f7fd f9b2 	bl	800a780 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3312      	adds	r3, #18
 800d420:	2100      	movs	r1, #0
 800d422:	4618      	mov	r0, r3
 800d424:	f7fd f991 	bl	800a74a <st_word>
					fs->wflag = 1;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2201      	movs	r2, #1
 800d42c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	4618      	mov	r0, r3
 800d432:	f7fd fc2d 	bl	800ac90 <sync_fs>
 800d436:	4603      	mov	r3, r0
 800d438:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7d1b      	ldrb	r3, [r3, #20]
 800d43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d442:	b2da      	uxtb	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d448:	7dfb      	ldrb	r3, [r7, #23]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3718      	adds	r7, #24
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff ff7b 	bl	800d356 <f_sync>
 800d460:	4603      	mov	r3, r0
 800d462:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d464:	7bfb      	ldrb	r3, [r7, #15]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d118      	bne.n	800d49c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f107 0208 	add.w	r2, r7, #8
 800d470:	4611      	mov	r1, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fa34 	bl	800c8e0 <validate>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10c      	bne.n	800d49c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	4618      	mov	r0, r3
 800d488:	f7fd fb30 	bl	800aaec <dec_lock>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d102      	bne.n	800d49c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d4be:	4b1f      	ldr	r3, [pc, #124]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4c0:	7a5b      	ldrb	r3, [r3, #9]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d131      	bne.n	800d52c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d4c8:	4b1c      	ldr	r3, [pc, #112]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4ca:	7a5b      	ldrb	r3, [r3, #9]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	4b1a      	ldr	r3, [pc, #104]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4d6:	4b19      	ldr	r3, [pc, #100]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4d8:	7a5b      	ldrb	r3, [r3, #9]
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	4a17      	ldr	r2, [pc, #92]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4e6:	4b15      	ldr	r3, [pc, #84]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4e8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	4b13      	ldr	r3, [pc, #76]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4f0:	4413      	add	r3, r2
 800d4f2:	79fa      	ldrb	r2, [r7, #7]
 800d4f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4f6:	4b11      	ldr	r3, [pc, #68]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4f8:	7a5b      	ldrb	r3, [r3, #9]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	b2d1      	uxtb	r1, r2
 800d500:	4a0e      	ldr	r2, [pc, #56]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d502:	7251      	strb	r1, [r2, #9]
 800d504:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d506:	7dbb      	ldrb	r3, [r7, #22]
 800d508:	3330      	adds	r3, #48	; 0x30
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	3301      	adds	r3, #1
 800d514:	223a      	movs	r2, #58	; 0x3a
 800d516:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	3302      	adds	r3, #2
 800d51c:	222f      	movs	r2, #47	; 0x2f
 800d51e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	3303      	adds	r3, #3
 800d524:	2200      	movs	r2, #0
 800d526:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d528:	2300      	movs	r3, #0
 800d52a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	371c      	adds	r7, #28
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	20002d88 	.word	0x20002d88

0800d540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d54a:	2200      	movs	r2, #0
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff ffaa 	bl	800d4a8 <FATFS_LinkDriverEx>
 800d554:	4603      	mov	r3, r0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	6039      	str	r1, [r7, #0]
 800d56a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d56c:	88fb      	ldrh	r3, [r7, #6]
 800d56e:	2b7f      	cmp	r3, #127	; 0x7f
 800d570:	d802      	bhi.n	800d578 <ff_convert+0x18>
		c = chr;
 800d572:	88fb      	ldrh	r3, [r7, #6]
 800d574:	81fb      	strh	r3, [r7, #14]
 800d576:	e025      	b.n	800d5c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00b      	beq.n	800d596 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d57e:	88fb      	ldrh	r3, [r7, #6]
 800d580:	2bff      	cmp	r3, #255	; 0xff
 800d582:	d805      	bhi.n	800d590 <ff_convert+0x30>
 800d584:	88fb      	ldrh	r3, [r7, #6]
 800d586:	3b80      	subs	r3, #128	; 0x80
 800d588:	4a12      	ldr	r2, [pc, #72]	; (800d5d4 <ff_convert+0x74>)
 800d58a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d58e:	e000      	b.n	800d592 <ff_convert+0x32>
 800d590:	2300      	movs	r3, #0
 800d592:	81fb      	strh	r3, [r7, #14]
 800d594:	e016      	b.n	800d5c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d596:	2300      	movs	r3, #0
 800d598:	81fb      	strh	r3, [r7, #14]
 800d59a:	e009      	b.n	800d5b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d59c:	89fb      	ldrh	r3, [r7, #14]
 800d59e:	4a0d      	ldr	r2, [pc, #52]	; (800d5d4 <ff_convert+0x74>)
 800d5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a4:	88fa      	ldrh	r2, [r7, #6]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d006      	beq.n	800d5b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d5aa:	89fb      	ldrh	r3, [r7, #14]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	81fb      	strh	r3, [r7, #14]
 800d5b0:	89fb      	ldrh	r3, [r7, #14]
 800d5b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d5b4:	d9f2      	bls.n	800d59c <ff_convert+0x3c>
 800d5b6:	e000      	b.n	800d5ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d5b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d5ba:	89fb      	ldrh	r3, [r7, #14]
 800d5bc:	3380      	adds	r3, #128	; 0x80
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d5c4:	89fb      	ldrh	r3, [r7, #14]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	08011138 	.word	0x08011138

0800d5d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b087      	sub	sp, #28
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5e8:	d201      	bcs.n	800d5ee <ff_wtoupper+0x16>
 800d5ea:	4b3e      	ldr	r3, [pc, #248]	; (800d6e4 <ff_wtoupper+0x10c>)
 800d5ec:	e000      	b.n	800d5f0 <ff_wtoupper+0x18>
 800d5ee:	4b3e      	ldr	r3, [pc, #248]	; (800d6e8 <ff_wtoupper+0x110>)
 800d5f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	1c9a      	adds	r2, r3, #2
 800d5f6:	617a      	str	r2, [r7, #20]
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d5fc:	8a7b      	ldrh	r3, [r7, #18]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d068      	beq.n	800d6d4 <ff_wtoupper+0xfc>
 800d602:	88fa      	ldrh	r2, [r7, #6]
 800d604:	8a7b      	ldrh	r3, [r7, #18]
 800d606:	429a      	cmp	r2, r3
 800d608:	d364      	bcc.n	800d6d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	1c9a      	adds	r2, r3, #2
 800d60e:	617a      	str	r2, [r7, #20]
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	823b      	strh	r3, [r7, #16]
 800d614:	8a3b      	ldrh	r3, [r7, #16]
 800d616:	0a1b      	lsrs	r3, r3, #8
 800d618:	81fb      	strh	r3, [r7, #14]
 800d61a:	8a3b      	ldrh	r3, [r7, #16]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d620:	88fa      	ldrh	r2, [r7, #6]
 800d622:	8a79      	ldrh	r1, [r7, #18]
 800d624:	8a3b      	ldrh	r3, [r7, #16]
 800d626:	440b      	add	r3, r1
 800d628:	429a      	cmp	r2, r3
 800d62a:	da49      	bge.n	800d6c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d62c:	89fb      	ldrh	r3, [r7, #14]
 800d62e:	2b08      	cmp	r3, #8
 800d630:	d84f      	bhi.n	800d6d2 <ff_wtoupper+0xfa>
 800d632:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <ff_wtoupper+0x60>)
 800d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d638:	0800d65d 	.word	0x0800d65d
 800d63c:	0800d66f 	.word	0x0800d66f
 800d640:	0800d685 	.word	0x0800d685
 800d644:	0800d68d 	.word	0x0800d68d
 800d648:	0800d695 	.word	0x0800d695
 800d64c:	0800d69d 	.word	0x0800d69d
 800d650:	0800d6a5 	.word	0x0800d6a5
 800d654:	0800d6ad 	.word	0x0800d6ad
 800d658:	0800d6b5 	.word	0x0800d6b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d65c:	88fa      	ldrh	r2, [r7, #6]
 800d65e:	8a7b      	ldrh	r3, [r7, #18]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	4413      	add	r3, r2
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	80fb      	strh	r3, [r7, #6]
 800d66c:	e027      	b.n	800d6be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d66e:	88fa      	ldrh	r2, [r7, #6]
 800d670:	8a7b      	ldrh	r3, [r7, #18]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	b29b      	uxth	r3, r3
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	88fa      	ldrh	r2, [r7, #6]
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	80fb      	strh	r3, [r7, #6]
 800d682:	e01c      	b.n	800d6be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d684:	88fb      	ldrh	r3, [r7, #6]
 800d686:	3b10      	subs	r3, #16
 800d688:	80fb      	strh	r3, [r7, #6]
 800d68a:	e018      	b.n	800d6be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d68c:	88fb      	ldrh	r3, [r7, #6]
 800d68e:	3b20      	subs	r3, #32
 800d690:	80fb      	strh	r3, [r7, #6]
 800d692:	e014      	b.n	800d6be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d694:	88fb      	ldrh	r3, [r7, #6]
 800d696:	3b30      	subs	r3, #48	; 0x30
 800d698:	80fb      	strh	r3, [r7, #6]
 800d69a:	e010      	b.n	800d6be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d69c:	88fb      	ldrh	r3, [r7, #6]
 800d69e:	3b1a      	subs	r3, #26
 800d6a0:	80fb      	strh	r3, [r7, #6]
 800d6a2:	e00c      	b.n	800d6be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d6a4:	88fb      	ldrh	r3, [r7, #6]
 800d6a6:	3308      	adds	r3, #8
 800d6a8:	80fb      	strh	r3, [r7, #6]
 800d6aa:	e008      	b.n	800d6be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d6ac:	88fb      	ldrh	r3, [r7, #6]
 800d6ae:	3b50      	subs	r3, #80	; 0x50
 800d6b0:	80fb      	strh	r3, [r7, #6]
 800d6b2:	e004      	b.n	800d6be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d6b4:	88fb      	ldrh	r3, [r7, #6]
 800d6b6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d6ba:	80fb      	strh	r3, [r7, #6]
 800d6bc:	bf00      	nop
			}
			break;
 800d6be:	e008      	b.n	800d6d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d6c0:	89fb      	ldrh	r3, [r7, #14]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d195      	bne.n	800d5f2 <ff_wtoupper+0x1a>
 800d6c6:	8a3b      	ldrh	r3, [r7, #16]
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d6d0:	e78f      	b.n	800d5f2 <ff_wtoupper+0x1a>
			break;
 800d6d2:	bf00      	nop
	}

	return chr;
 800d6d4:	88fb      	ldrh	r3, [r7, #6]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	371c      	adds	r7, #28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	08011238 	.word	0x08011238
 800d6e8:	0801142c 	.word	0x0801142c

0800d6ec <atoi>:
 800d6ec:	220a      	movs	r2, #10
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	f000 b974 	b.w	800d9dc <strtol>

0800d6f4 <gcvt>:
 800d6f4:	b530      	push	{r4, r5, lr}
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	b085      	sub	sp, #20
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	2300      	movs	r3, #0
 800d700:	ec51 0b10 	vmov	r0, r1, d0
 800d704:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d708:	f7f3 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800d70c:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d710:	4622      	mov	r2, r4
 800d712:	b118      	cbz	r0, 800d71c <gcvt+0x28>
 800d714:	232d      	movs	r3, #45	; 0x2d
 800d716:	f802 3b01 	strb.w	r3, [r2], #1
 800d71a:	3d01      	subs	r5, #1
 800d71c:	2300      	movs	r3, #0
 800d71e:	4806      	ldr	r0, [pc, #24]	; (800d738 <gcvt+0x44>)
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	4629      	mov	r1, r5
 800d724:	2367      	movs	r3, #103	; 0x67
 800d726:	6800      	ldr	r0, [r0, #0]
 800d728:	f000 fa9a 	bl	800dc60 <_gcvt>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	bf14      	ite	ne
 800d730:	4620      	movne	r0, r4
 800d732:	2000      	moveq	r0, #0
 800d734:	b005      	add	sp, #20
 800d736:	bd30      	pop	{r4, r5, pc}
 800d738:	2000003c 	.word	0x2000003c

0800d73c <__errno>:
 800d73c:	4b01      	ldr	r3, [pc, #4]	; (800d744 <__errno+0x8>)
 800d73e:	6818      	ldr	r0, [r3, #0]
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	2000003c 	.word	0x2000003c

0800d748 <__libc_init_array>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	4d0d      	ldr	r5, [pc, #52]	; (800d780 <__libc_init_array+0x38>)
 800d74c:	4c0d      	ldr	r4, [pc, #52]	; (800d784 <__libc_init_array+0x3c>)
 800d74e:	1b64      	subs	r4, r4, r5
 800d750:	10a4      	asrs	r4, r4, #2
 800d752:	2600      	movs	r6, #0
 800d754:	42a6      	cmp	r6, r4
 800d756:	d109      	bne.n	800d76c <__libc_init_array+0x24>
 800d758:	4d0b      	ldr	r5, [pc, #44]	; (800d788 <__libc_init_array+0x40>)
 800d75a:	4c0c      	ldr	r4, [pc, #48]	; (800d78c <__libc_init_array+0x44>)
 800d75c:	f003 fbd2 	bl	8010f04 <_init>
 800d760:	1b64      	subs	r4, r4, r5
 800d762:	10a4      	asrs	r4, r4, #2
 800d764:	2600      	movs	r6, #0
 800d766:	42a6      	cmp	r6, r4
 800d768:	d105      	bne.n	800d776 <__libc_init_array+0x2e>
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d770:	4798      	blx	r3
 800d772:	3601      	adds	r6, #1
 800d774:	e7ee      	b.n	800d754 <__libc_init_array+0xc>
 800d776:	f855 3b04 	ldr.w	r3, [r5], #4
 800d77a:	4798      	blx	r3
 800d77c:	3601      	adds	r6, #1
 800d77e:	e7f2      	b.n	800d766 <__libc_init_array+0x1e>
 800d780:	080118e8 	.word	0x080118e8
 800d784:	080118e8 	.word	0x080118e8
 800d788:	080118e8 	.word	0x080118e8
 800d78c:	080118ec 	.word	0x080118ec

0800d790 <memcpy>:
 800d790:	440a      	add	r2, r1
 800d792:	4291      	cmp	r1, r2
 800d794:	f100 33ff 	add.w	r3, r0, #4294967295
 800d798:	d100      	bne.n	800d79c <memcpy+0xc>
 800d79a:	4770      	bx	lr
 800d79c:	b510      	push	{r4, lr}
 800d79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7a6:	4291      	cmp	r1, r2
 800d7a8:	d1f9      	bne.n	800d79e <memcpy+0xe>
 800d7aa:	bd10      	pop	{r4, pc}

0800d7ac <memset>:
 800d7ac:	4402      	add	r2, r0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d100      	bne.n	800d7b6 <memset+0xa>
 800d7b4:	4770      	bx	lr
 800d7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7ba:	e7f9      	b.n	800d7b0 <memset+0x4>

0800d7bc <iprintf>:
 800d7bc:	b40f      	push	{r0, r1, r2, r3}
 800d7be:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <iprintf+0x2c>)
 800d7c0:	b513      	push	{r0, r1, r4, lr}
 800d7c2:	681c      	ldr	r4, [r3, #0]
 800d7c4:	b124      	cbz	r4, 800d7d0 <iprintf+0x14>
 800d7c6:	69a3      	ldr	r3, [r4, #24]
 800d7c8:	b913      	cbnz	r3, 800d7d0 <iprintf+0x14>
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f000 fc22 	bl	800e014 <__sinit>
 800d7d0:	ab05      	add	r3, sp, #20
 800d7d2:	9a04      	ldr	r2, [sp, #16]
 800d7d4:	68a1      	ldr	r1, [r4, #8]
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 f9e3 	bl	800eba4 <_vfiprintf_r>
 800d7de:	b002      	add	sp, #8
 800d7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7e4:	b004      	add	sp, #16
 800d7e6:	4770      	bx	lr
 800d7e8:	2000003c 	.word	0x2000003c

0800d7ec <_puts_r>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	460e      	mov	r6, r1
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	b118      	cbz	r0, 800d7fc <_puts_r+0x10>
 800d7f4:	6983      	ldr	r3, [r0, #24]
 800d7f6:	b90b      	cbnz	r3, 800d7fc <_puts_r+0x10>
 800d7f8:	f000 fc0c 	bl	800e014 <__sinit>
 800d7fc:	69ab      	ldr	r3, [r5, #24]
 800d7fe:	68ac      	ldr	r4, [r5, #8]
 800d800:	b913      	cbnz	r3, 800d808 <_puts_r+0x1c>
 800d802:	4628      	mov	r0, r5
 800d804:	f000 fc06 	bl	800e014 <__sinit>
 800d808:	4b2c      	ldr	r3, [pc, #176]	; (800d8bc <_puts_r+0xd0>)
 800d80a:	429c      	cmp	r4, r3
 800d80c:	d120      	bne.n	800d850 <_puts_r+0x64>
 800d80e:	686c      	ldr	r4, [r5, #4]
 800d810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d812:	07db      	lsls	r3, r3, #31
 800d814:	d405      	bmi.n	800d822 <_puts_r+0x36>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	0598      	lsls	r0, r3, #22
 800d81a:	d402      	bmi.n	800d822 <_puts_r+0x36>
 800d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d81e:	f000 fc97 	bl	800e150 <__retarget_lock_acquire_recursive>
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	0719      	lsls	r1, r3, #28
 800d826:	d51d      	bpl.n	800d864 <_puts_r+0x78>
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	b1db      	cbz	r3, 800d864 <_puts_r+0x78>
 800d82c:	3e01      	subs	r6, #1
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d834:	3b01      	subs	r3, #1
 800d836:	60a3      	str	r3, [r4, #8]
 800d838:	bb39      	cbnz	r1, 800d88a <_puts_r+0x9e>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	da38      	bge.n	800d8b0 <_puts_r+0xc4>
 800d83e:	4622      	mov	r2, r4
 800d840:	210a      	movs	r1, #10
 800d842:	4628      	mov	r0, r5
 800d844:	f000 f8d4 	bl	800d9f0 <__swbuf_r>
 800d848:	3001      	adds	r0, #1
 800d84a:	d011      	beq.n	800d870 <_puts_r+0x84>
 800d84c:	250a      	movs	r5, #10
 800d84e:	e011      	b.n	800d874 <_puts_r+0x88>
 800d850:	4b1b      	ldr	r3, [pc, #108]	; (800d8c0 <_puts_r+0xd4>)
 800d852:	429c      	cmp	r4, r3
 800d854:	d101      	bne.n	800d85a <_puts_r+0x6e>
 800d856:	68ac      	ldr	r4, [r5, #8]
 800d858:	e7da      	b.n	800d810 <_puts_r+0x24>
 800d85a:	4b1a      	ldr	r3, [pc, #104]	; (800d8c4 <_puts_r+0xd8>)
 800d85c:	429c      	cmp	r4, r3
 800d85e:	bf08      	it	eq
 800d860:	68ec      	ldreq	r4, [r5, #12]
 800d862:	e7d5      	b.n	800d810 <_puts_r+0x24>
 800d864:	4621      	mov	r1, r4
 800d866:	4628      	mov	r0, r5
 800d868:	f000 f914 	bl	800da94 <__swsetup_r>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d0dd      	beq.n	800d82c <_puts_r+0x40>
 800d870:	f04f 35ff 	mov.w	r5, #4294967295
 800d874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d876:	07da      	lsls	r2, r3, #31
 800d878:	d405      	bmi.n	800d886 <_puts_r+0x9a>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	059b      	lsls	r3, r3, #22
 800d87e:	d402      	bmi.n	800d886 <_puts_r+0x9a>
 800d880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d882:	f000 fc66 	bl	800e152 <__retarget_lock_release_recursive>
 800d886:	4628      	mov	r0, r5
 800d888:	bd70      	pop	{r4, r5, r6, pc}
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	da04      	bge.n	800d898 <_puts_r+0xac>
 800d88e:	69a2      	ldr	r2, [r4, #24]
 800d890:	429a      	cmp	r2, r3
 800d892:	dc06      	bgt.n	800d8a2 <_puts_r+0xb6>
 800d894:	290a      	cmp	r1, #10
 800d896:	d004      	beq.n	800d8a2 <_puts_r+0xb6>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	6022      	str	r2, [r4, #0]
 800d89e:	7019      	strb	r1, [r3, #0]
 800d8a0:	e7c5      	b.n	800d82e <_puts_r+0x42>
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f000 f8a3 	bl	800d9f0 <__swbuf_r>
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d1bf      	bne.n	800d82e <_puts_r+0x42>
 800d8ae:	e7df      	b.n	800d870 <_puts_r+0x84>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	250a      	movs	r5, #10
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	6022      	str	r2, [r4, #0]
 800d8b8:	701d      	strb	r5, [r3, #0]
 800d8ba:	e7db      	b.n	800d874 <_puts_r+0x88>
 800d8bc:	08011610 	.word	0x08011610
 800d8c0:	08011630 	.word	0x08011630
 800d8c4:	080115f0 	.word	0x080115f0

0800d8c8 <puts>:
 800d8c8:	4b02      	ldr	r3, [pc, #8]	; (800d8d4 <puts+0xc>)
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	6818      	ldr	r0, [r3, #0]
 800d8ce:	f7ff bf8d 	b.w	800d7ec <_puts_r>
 800d8d2:	bf00      	nop
 800d8d4:	2000003c 	.word	0x2000003c

0800d8d8 <_strtol_l.constprop.0>:
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8de:	d001      	beq.n	800d8e4 <_strtol_l.constprop.0+0xc>
 800d8e0:	2b24      	cmp	r3, #36	; 0x24
 800d8e2:	d906      	bls.n	800d8f2 <_strtol_l.constprop.0+0x1a>
 800d8e4:	f7ff ff2a 	bl	800d73c <__errno>
 800d8e8:	2316      	movs	r3, #22
 800d8ea:	6003      	str	r3, [r0, #0]
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d9d8 <_strtol_l.constprop.0+0x100>
 800d8f6:	460d      	mov	r5, r1
 800d8f8:	462e      	mov	r6, r5
 800d8fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d902:	f017 0708 	ands.w	r7, r7, #8
 800d906:	d1f7      	bne.n	800d8f8 <_strtol_l.constprop.0+0x20>
 800d908:	2c2d      	cmp	r4, #45	; 0x2d
 800d90a:	d132      	bne.n	800d972 <_strtol_l.constprop.0+0x9a>
 800d90c:	782c      	ldrb	r4, [r5, #0]
 800d90e:	2701      	movs	r7, #1
 800d910:	1cb5      	adds	r5, r6, #2
 800d912:	2b00      	cmp	r3, #0
 800d914:	d05b      	beq.n	800d9ce <_strtol_l.constprop.0+0xf6>
 800d916:	2b10      	cmp	r3, #16
 800d918:	d109      	bne.n	800d92e <_strtol_l.constprop.0+0x56>
 800d91a:	2c30      	cmp	r4, #48	; 0x30
 800d91c:	d107      	bne.n	800d92e <_strtol_l.constprop.0+0x56>
 800d91e:	782c      	ldrb	r4, [r5, #0]
 800d920:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d924:	2c58      	cmp	r4, #88	; 0x58
 800d926:	d14d      	bne.n	800d9c4 <_strtol_l.constprop.0+0xec>
 800d928:	786c      	ldrb	r4, [r5, #1]
 800d92a:	2310      	movs	r3, #16
 800d92c:	3502      	adds	r5, #2
 800d92e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d932:	f108 38ff 	add.w	r8, r8, #4294967295
 800d936:	f04f 0c00 	mov.w	ip, #0
 800d93a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d93e:	4666      	mov	r6, ip
 800d940:	fb03 8a19 	mls	sl, r3, r9, r8
 800d944:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d948:	f1be 0f09 	cmp.w	lr, #9
 800d94c:	d816      	bhi.n	800d97c <_strtol_l.constprop.0+0xa4>
 800d94e:	4674      	mov	r4, lr
 800d950:	42a3      	cmp	r3, r4
 800d952:	dd24      	ble.n	800d99e <_strtol_l.constprop.0+0xc6>
 800d954:	f1bc 0f00 	cmp.w	ip, #0
 800d958:	db1e      	blt.n	800d998 <_strtol_l.constprop.0+0xc0>
 800d95a:	45b1      	cmp	r9, r6
 800d95c:	d31c      	bcc.n	800d998 <_strtol_l.constprop.0+0xc0>
 800d95e:	d101      	bne.n	800d964 <_strtol_l.constprop.0+0x8c>
 800d960:	45a2      	cmp	sl, r4
 800d962:	db19      	blt.n	800d998 <_strtol_l.constprop.0+0xc0>
 800d964:	fb06 4603 	mla	r6, r6, r3, r4
 800d968:	f04f 0c01 	mov.w	ip, #1
 800d96c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d970:	e7e8      	b.n	800d944 <_strtol_l.constprop.0+0x6c>
 800d972:	2c2b      	cmp	r4, #43	; 0x2b
 800d974:	bf04      	itt	eq
 800d976:	782c      	ldrbeq	r4, [r5, #0]
 800d978:	1cb5      	addeq	r5, r6, #2
 800d97a:	e7ca      	b.n	800d912 <_strtol_l.constprop.0+0x3a>
 800d97c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d980:	f1be 0f19 	cmp.w	lr, #25
 800d984:	d801      	bhi.n	800d98a <_strtol_l.constprop.0+0xb2>
 800d986:	3c37      	subs	r4, #55	; 0x37
 800d988:	e7e2      	b.n	800d950 <_strtol_l.constprop.0+0x78>
 800d98a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d98e:	f1be 0f19 	cmp.w	lr, #25
 800d992:	d804      	bhi.n	800d99e <_strtol_l.constprop.0+0xc6>
 800d994:	3c57      	subs	r4, #87	; 0x57
 800d996:	e7db      	b.n	800d950 <_strtol_l.constprop.0+0x78>
 800d998:	f04f 3cff 	mov.w	ip, #4294967295
 800d99c:	e7e6      	b.n	800d96c <_strtol_l.constprop.0+0x94>
 800d99e:	f1bc 0f00 	cmp.w	ip, #0
 800d9a2:	da05      	bge.n	800d9b0 <_strtol_l.constprop.0+0xd8>
 800d9a4:	2322      	movs	r3, #34	; 0x22
 800d9a6:	6003      	str	r3, [r0, #0]
 800d9a8:	4646      	mov	r6, r8
 800d9aa:	b942      	cbnz	r2, 800d9be <_strtol_l.constprop.0+0xe6>
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	e79e      	b.n	800d8ee <_strtol_l.constprop.0+0x16>
 800d9b0:	b107      	cbz	r7, 800d9b4 <_strtol_l.constprop.0+0xdc>
 800d9b2:	4276      	negs	r6, r6
 800d9b4:	2a00      	cmp	r2, #0
 800d9b6:	d0f9      	beq.n	800d9ac <_strtol_l.constprop.0+0xd4>
 800d9b8:	f1bc 0f00 	cmp.w	ip, #0
 800d9bc:	d000      	beq.n	800d9c0 <_strtol_l.constprop.0+0xe8>
 800d9be:	1e69      	subs	r1, r5, #1
 800d9c0:	6011      	str	r1, [r2, #0]
 800d9c2:	e7f3      	b.n	800d9ac <_strtol_l.constprop.0+0xd4>
 800d9c4:	2430      	movs	r4, #48	; 0x30
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1b1      	bne.n	800d92e <_strtol_l.constprop.0+0x56>
 800d9ca:	2308      	movs	r3, #8
 800d9cc:	e7af      	b.n	800d92e <_strtol_l.constprop.0+0x56>
 800d9ce:	2c30      	cmp	r4, #48	; 0x30
 800d9d0:	d0a5      	beq.n	800d91e <_strtol_l.constprop.0+0x46>
 800d9d2:	230a      	movs	r3, #10
 800d9d4:	e7ab      	b.n	800d92e <_strtol_l.constprop.0+0x56>
 800d9d6:	bf00      	nop
 800d9d8:	080114ed 	.word	0x080114ed

0800d9dc <strtol>:
 800d9dc:	4613      	mov	r3, r2
 800d9de:	460a      	mov	r2, r1
 800d9e0:	4601      	mov	r1, r0
 800d9e2:	4802      	ldr	r0, [pc, #8]	; (800d9ec <strtol+0x10>)
 800d9e4:	6800      	ldr	r0, [r0, #0]
 800d9e6:	f7ff bf77 	b.w	800d8d8 <_strtol_l.constprop.0>
 800d9ea:	bf00      	nop
 800d9ec:	2000003c 	.word	0x2000003c

0800d9f0 <__swbuf_r>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	460e      	mov	r6, r1
 800d9f4:	4614      	mov	r4, r2
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	b118      	cbz	r0, 800da02 <__swbuf_r+0x12>
 800d9fa:	6983      	ldr	r3, [r0, #24]
 800d9fc:	b90b      	cbnz	r3, 800da02 <__swbuf_r+0x12>
 800d9fe:	f000 fb09 	bl	800e014 <__sinit>
 800da02:	4b21      	ldr	r3, [pc, #132]	; (800da88 <__swbuf_r+0x98>)
 800da04:	429c      	cmp	r4, r3
 800da06:	d12b      	bne.n	800da60 <__swbuf_r+0x70>
 800da08:	686c      	ldr	r4, [r5, #4]
 800da0a:	69a3      	ldr	r3, [r4, #24]
 800da0c:	60a3      	str	r3, [r4, #8]
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	071a      	lsls	r2, r3, #28
 800da12:	d52f      	bpl.n	800da74 <__swbuf_r+0x84>
 800da14:	6923      	ldr	r3, [r4, #16]
 800da16:	b36b      	cbz	r3, 800da74 <__swbuf_r+0x84>
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	6820      	ldr	r0, [r4, #0]
 800da1c:	1ac0      	subs	r0, r0, r3
 800da1e:	6963      	ldr	r3, [r4, #20]
 800da20:	b2f6      	uxtb	r6, r6
 800da22:	4283      	cmp	r3, r0
 800da24:	4637      	mov	r7, r6
 800da26:	dc04      	bgt.n	800da32 <__swbuf_r+0x42>
 800da28:	4621      	mov	r1, r4
 800da2a:	4628      	mov	r0, r5
 800da2c:	f000 fa5e 	bl	800deec <_fflush_r>
 800da30:	bb30      	cbnz	r0, 800da80 <__swbuf_r+0x90>
 800da32:	68a3      	ldr	r3, [r4, #8]
 800da34:	3b01      	subs	r3, #1
 800da36:	60a3      	str	r3, [r4, #8]
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	6022      	str	r2, [r4, #0]
 800da3e:	701e      	strb	r6, [r3, #0]
 800da40:	6963      	ldr	r3, [r4, #20]
 800da42:	3001      	adds	r0, #1
 800da44:	4283      	cmp	r3, r0
 800da46:	d004      	beq.n	800da52 <__swbuf_r+0x62>
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	07db      	lsls	r3, r3, #31
 800da4c:	d506      	bpl.n	800da5c <__swbuf_r+0x6c>
 800da4e:	2e0a      	cmp	r6, #10
 800da50:	d104      	bne.n	800da5c <__swbuf_r+0x6c>
 800da52:	4621      	mov	r1, r4
 800da54:	4628      	mov	r0, r5
 800da56:	f000 fa49 	bl	800deec <_fflush_r>
 800da5a:	b988      	cbnz	r0, 800da80 <__swbuf_r+0x90>
 800da5c:	4638      	mov	r0, r7
 800da5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da60:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <__swbuf_r+0x9c>)
 800da62:	429c      	cmp	r4, r3
 800da64:	d101      	bne.n	800da6a <__swbuf_r+0x7a>
 800da66:	68ac      	ldr	r4, [r5, #8]
 800da68:	e7cf      	b.n	800da0a <__swbuf_r+0x1a>
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <__swbuf_r+0xa0>)
 800da6c:	429c      	cmp	r4, r3
 800da6e:	bf08      	it	eq
 800da70:	68ec      	ldreq	r4, [r5, #12]
 800da72:	e7ca      	b.n	800da0a <__swbuf_r+0x1a>
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f000 f80c 	bl	800da94 <__swsetup_r>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d0cb      	beq.n	800da18 <__swbuf_r+0x28>
 800da80:	f04f 37ff 	mov.w	r7, #4294967295
 800da84:	e7ea      	b.n	800da5c <__swbuf_r+0x6c>
 800da86:	bf00      	nop
 800da88:	08011610 	.word	0x08011610
 800da8c:	08011630 	.word	0x08011630
 800da90:	080115f0 	.word	0x080115f0

0800da94 <__swsetup_r>:
 800da94:	4b32      	ldr	r3, [pc, #200]	; (800db60 <__swsetup_r+0xcc>)
 800da96:	b570      	push	{r4, r5, r6, lr}
 800da98:	681d      	ldr	r5, [r3, #0]
 800da9a:	4606      	mov	r6, r0
 800da9c:	460c      	mov	r4, r1
 800da9e:	b125      	cbz	r5, 800daaa <__swsetup_r+0x16>
 800daa0:	69ab      	ldr	r3, [r5, #24]
 800daa2:	b913      	cbnz	r3, 800daaa <__swsetup_r+0x16>
 800daa4:	4628      	mov	r0, r5
 800daa6:	f000 fab5 	bl	800e014 <__sinit>
 800daaa:	4b2e      	ldr	r3, [pc, #184]	; (800db64 <__swsetup_r+0xd0>)
 800daac:	429c      	cmp	r4, r3
 800daae:	d10f      	bne.n	800dad0 <__swsetup_r+0x3c>
 800dab0:	686c      	ldr	r4, [r5, #4]
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dab8:	0719      	lsls	r1, r3, #28
 800daba:	d42c      	bmi.n	800db16 <__swsetup_r+0x82>
 800dabc:	06dd      	lsls	r5, r3, #27
 800dabe:	d411      	bmi.n	800dae4 <__swsetup_r+0x50>
 800dac0:	2309      	movs	r3, #9
 800dac2:	6033      	str	r3, [r6, #0]
 800dac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dac8:	81a3      	strh	r3, [r4, #12]
 800daca:	f04f 30ff 	mov.w	r0, #4294967295
 800dace:	e03e      	b.n	800db4e <__swsetup_r+0xba>
 800dad0:	4b25      	ldr	r3, [pc, #148]	; (800db68 <__swsetup_r+0xd4>)
 800dad2:	429c      	cmp	r4, r3
 800dad4:	d101      	bne.n	800dada <__swsetup_r+0x46>
 800dad6:	68ac      	ldr	r4, [r5, #8]
 800dad8:	e7eb      	b.n	800dab2 <__swsetup_r+0x1e>
 800dada:	4b24      	ldr	r3, [pc, #144]	; (800db6c <__swsetup_r+0xd8>)
 800dadc:	429c      	cmp	r4, r3
 800dade:	bf08      	it	eq
 800dae0:	68ec      	ldreq	r4, [r5, #12]
 800dae2:	e7e6      	b.n	800dab2 <__swsetup_r+0x1e>
 800dae4:	0758      	lsls	r0, r3, #29
 800dae6:	d512      	bpl.n	800db0e <__swsetup_r+0x7a>
 800dae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daea:	b141      	cbz	r1, 800dafe <__swsetup_r+0x6a>
 800daec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800daf0:	4299      	cmp	r1, r3
 800daf2:	d002      	beq.n	800dafa <__swsetup_r+0x66>
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 ff4b 	bl	800e990 <_free_r>
 800dafa:	2300      	movs	r3, #0
 800dafc:	6363      	str	r3, [r4, #52]	; 0x34
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db04:	81a3      	strh	r3, [r4, #12]
 800db06:	2300      	movs	r3, #0
 800db08:	6063      	str	r3, [r4, #4]
 800db0a:	6923      	ldr	r3, [r4, #16]
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	89a3      	ldrh	r3, [r4, #12]
 800db10:	f043 0308 	orr.w	r3, r3, #8
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	b94b      	cbnz	r3, 800db2e <__swsetup_r+0x9a>
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db24:	d003      	beq.n	800db2e <__swsetup_r+0x9a>
 800db26:	4621      	mov	r1, r4
 800db28:	4630      	mov	r0, r6
 800db2a:	f000 fb39 	bl	800e1a0 <__smakebuf_r>
 800db2e:	89a0      	ldrh	r0, [r4, #12]
 800db30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db34:	f010 0301 	ands.w	r3, r0, #1
 800db38:	d00a      	beq.n	800db50 <__swsetup_r+0xbc>
 800db3a:	2300      	movs	r3, #0
 800db3c:	60a3      	str	r3, [r4, #8]
 800db3e:	6963      	ldr	r3, [r4, #20]
 800db40:	425b      	negs	r3, r3
 800db42:	61a3      	str	r3, [r4, #24]
 800db44:	6923      	ldr	r3, [r4, #16]
 800db46:	b943      	cbnz	r3, 800db5a <__swsetup_r+0xc6>
 800db48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db4c:	d1ba      	bne.n	800dac4 <__swsetup_r+0x30>
 800db4e:	bd70      	pop	{r4, r5, r6, pc}
 800db50:	0781      	lsls	r1, r0, #30
 800db52:	bf58      	it	pl
 800db54:	6963      	ldrpl	r3, [r4, #20]
 800db56:	60a3      	str	r3, [r4, #8]
 800db58:	e7f4      	b.n	800db44 <__swsetup_r+0xb0>
 800db5a:	2000      	movs	r0, #0
 800db5c:	e7f7      	b.n	800db4e <__swsetup_r+0xba>
 800db5e:	bf00      	nop
 800db60:	2000003c 	.word	0x2000003c
 800db64:	08011610 	.word	0x08011610
 800db68:	08011630 	.word	0x08011630
 800db6c:	080115f0 	.word	0x080115f0

0800db70 <print_e>:
 800db70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db72:	b087      	sub	sp, #28
 800db74:	ec43 2b10 	vmov	d0, r2, r3
 800db78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800db7a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800db7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800db80:	ab04      	add	r3, sp, #16
 800db82:	9301      	str	r3, [sp, #4]
 800db84:	ab03      	add	r3, sp, #12
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	1c62      	adds	r2, r4, #1
 800db8a:	ab05      	add	r3, sp, #20
 800db8c:	460f      	mov	r7, r1
 800db8e:	2102      	movs	r1, #2
 800db90:	f001 fbf6 	bl	800f380 <_dtoa_r>
 800db94:	9a05      	ldr	r2, [sp, #20]
 800db96:	f242 730f 	movw	r3, #9999	; 0x270f
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d105      	bne.n	800dbaa <print_e+0x3a>
 800db9e:	4601      	mov	r1, r0
 800dba0:	4638      	mov	r0, r7
 800dba2:	f001 fb16 	bl	800f1d2 <strcpy>
 800dba6:	b007      	add	sp, #28
 800dba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbaa:	463b      	mov	r3, r7
 800dbac:	7801      	ldrb	r1, [r0, #0]
 800dbae:	f803 1b01 	strb.w	r1, [r3], #1
 800dbb2:	2c00      	cmp	r4, #0
 800dbb4:	bfc8      	it	gt
 800dbb6:	2501      	movgt	r5, #1
 800dbb8:	212e      	movs	r1, #46	; 0x2e
 800dbba:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800dbbe:	b10f      	cbz	r7, 800dbc4 <print_e+0x54>
 800dbc0:	2c00      	cmp	r4, #0
 800dbc2:	dc37      	bgt.n	800dc34 <print_e+0xc4>
 800dbc4:	2e67      	cmp	r6, #103	; 0x67
 800dbc6:	d046      	beq.n	800dc56 <print_e+0xe6>
 800dbc8:	2e47      	cmp	r6, #71	; 0x47
 800dbca:	d046      	beq.n	800dc5a <print_e+0xea>
 800dbcc:	212e      	movs	r1, #46	; 0x2e
 800dbce:	2030      	movs	r0, #48	; 0x30
 800dbd0:	2c00      	cmp	r4, #0
 800dbd2:	dc38      	bgt.n	800dc46 <print_e+0xd6>
 800dbd4:	1e51      	subs	r1, r2, #1
 800dbd6:	2900      	cmp	r1, #0
 800dbd8:	bfb8      	it	lt
 800dbda:	f1c2 0201 	rsblt	r2, r2, #1
 800dbde:	4618      	mov	r0, r3
 800dbe0:	9105      	str	r1, [sp, #20]
 800dbe2:	bfac      	ite	ge
 800dbe4:	222b      	movge	r2, #43	; 0x2b
 800dbe6:	9205      	strlt	r2, [sp, #20]
 800dbe8:	f800 6b02 	strb.w	r6, [r0], #2
 800dbec:	bfa8      	it	ge
 800dbee:	705a      	strbge	r2, [r3, #1]
 800dbf0:	9a05      	ldr	r2, [sp, #20]
 800dbf2:	bfbc      	itt	lt
 800dbf4:	212d      	movlt	r1, #45	; 0x2d
 800dbf6:	7059      	strblt	r1, [r3, #1]
 800dbf8:	2a63      	cmp	r2, #99	; 0x63
 800dbfa:	dd0b      	ble.n	800dc14 <print_e+0xa4>
 800dbfc:	2164      	movs	r1, #100	; 0x64
 800dbfe:	fb92 f1f1 	sdiv	r1, r2, r1
 800dc02:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800dc06:	1cd8      	adds	r0, r3, #3
 800dc08:	709c      	strb	r4, [r3, #2]
 800dc0a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800dc0e:	fb03 2201 	mla	r2, r3, r1, r2
 800dc12:	9205      	str	r2, [sp, #20]
 800dc14:	9b05      	ldr	r3, [sp, #20]
 800dc16:	220a      	movs	r2, #10
 800dc18:	fb93 f2f2 	sdiv	r2, r3, r2
 800dc1c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800dc20:	7001      	strb	r1, [r0, #0]
 800dc22:	f06f 0109 	mvn.w	r1, #9
 800dc26:	fb01 3302 	mla	r3, r1, r2, r3
 800dc2a:	3330      	adds	r3, #48	; 0x30
 800dc2c:	7043      	strb	r3, [r0, #1]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	7083      	strb	r3, [r0, #2]
 800dc32:	e7b8      	b.n	800dba6 <print_e+0x36>
 800dc34:	b10d      	cbz	r5, 800dc3a <print_e+0xca>
 800dc36:	f803 1b01 	strb.w	r1, [r3], #1
 800dc3a:	7805      	ldrb	r5, [r0, #0]
 800dc3c:	f803 5b01 	strb.w	r5, [r3], #1
 800dc40:	3c01      	subs	r4, #1
 800dc42:	2500      	movs	r5, #0
 800dc44:	e7b9      	b.n	800dbba <print_e+0x4a>
 800dc46:	b10d      	cbz	r5, 800dc4c <print_e+0xdc>
 800dc48:	f803 1b01 	strb.w	r1, [r3], #1
 800dc4c:	f803 0b01 	strb.w	r0, [r3], #1
 800dc50:	3c01      	subs	r4, #1
 800dc52:	2500      	movs	r5, #0
 800dc54:	e7bc      	b.n	800dbd0 <print_e+0x60>
 800dc56:	2665      	movs	r6, #101	; 0x65
 800dc58:	e7bc      	b.n	800dbd4 <print_e+0x64>
 800dc5a:	2645      	movs	r6, #69	; 0x45
 800dc5c:	e7ba      	b.n	800dbd4 <print_e+0x64>
	...

0800dc60 <_gcvt>:
 800dc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc64:	ec55 4b10 	vmov	r4, r5, d0
 800dc68:	b088      	sub	sp, #32
 800dc6a:	4681      	mov	r9, r0
 800dc6c:	4688      	mov	r8, r1
 800dc6e:	4616      	mov	r6, r2
 800dc70:	469a      	mov	sl, r3
 800dc72:	ee10 0a10 	vmov	r0, s0
 800dc76:	2200      	movs	r2, #0
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dc7e:	f7f2 ff4d 	bl	8000b1c <__aeabi_dcmplt>
 800dc82:	b110      	cbz	r0, 800dc8a <_gcvt+0x2a>
 800dc84:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dc88:	461d      	mov	r5, r3
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 ff39 	bl	8000b08 <__aeabi_dcmpeq>
 800dc96:	b138      	cbz	r0, 800dca8 <_gcvt+0x48>
 800dc98:	2330      	movs	r3, #48	; 0x30
 800dc9a:	7033      	strb	r3, [r6, #0]
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	7073      	strb	r3, [r6, #1]
 800dca0:	4630      	mov	r0, r6
 800dca2:	b008      	add	sp, #32
 800dca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca8:	a34b      	add	r3, pc, #300	; (adr r3, 800ddd8 <_gcvt+0x178>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 ff3d 	bl	8000b30 <__aeabi_dcmple>
 800dcb6:	b158      	cbz	r0, 800dcd0 <_gcvt+0x70>
 800dcb8:	f108 31ff 	add.w	r1, r8, #4294967295
 800dcbc:	9100      	str	r1, [sp, #0]
 800dcbe:	e9cd a701 	strd	sl, r7, [sp, #4]
 800dcc2:	4622      	mov	r2, r4
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	4631      	mov	r1, r6
 800dcc8:	4648      	mov	r0, r9
 800dcca:	f7ff ff51 	bl	800db70 <print_e>
 800dcce:	e7e7      	b.n	800dca0 <_gcvt+0x40>
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	f000 fe29 	bl	800e928 <_mprec_log10>
 800dcd6:	4622      	mov	r2, r4
 800dcd8:	ec51 0b10 	vmov	r0, r1, d0
 800dcdc:	462b      	mov	r3, r5
 800dcde:	f7f2 ff27 	bl	8000b30 <__aeabi_dcmple>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d1e8      	bne.n	800dcb8 <_gcvt+0x58>
 800dce6:	ab07      	add	r3, sp, #28
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	ab06      	add	r3, sp, #24
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	4642      	mov	r2, r8
 800dcf0:	ab05      	add	r3, sp, #20
 800dcf2:	ec45 4b10 	vmov	d0, r4, r5
 800dcf6:	2102      	movs	r1, #2
 800dcf8:	4648      	mov	r0, r9
 800dcfa:	f001 fb41 	bl	800f380 <_dtoa_r>
 800dcfe:	9a05      	ldr	r2, [sp, #20]
 800dd00:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d00e      	beq.n	800dd26 <_gcvt+0xc6>
 800dd08:	4633      	mov	r3, r6
 800dd0a:	44b0      	add	r8, r6
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	f810 1b01 	ldrb.w	r1, [r0], #1
 800dd12:	9c05      	ldr	r4, [sp, #20]
 800dd14:	eba8 0203 	sub.w	r2, r8, r3
 800dd18:	b109      	cbz	r1, 800dd1e <_gcvt+0xbe>
 800dd1a:	2c00      	cmp	r4, #0
 800dd1c:	dc08      	bgt.n	800dd30 <_gcvt+0xd0>
 800dd1e:	2100      	movs	r1, #0
 800dd20:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800dd24:	e00d      	b.n	800dd42 <_gcvt+0xe2>
 800dd26:	4601      	mov	r1, r0
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f001 fa52 	bl	800f1d2 <strcpy>
 800dd2e:	e7b7      	b.n	800dca0 <_gcvt+0x40>
 800dd30:	3c01      	subs	r4, #1
 800dd32:	f803 1b01 	strb.w	r1, [r3], #1
 800dd36:	9405      	str	r4, [sp, #20]
 800dd38:	e7e8      	b.n	800dd0c <_gcvt+0xac>
 800dd3a:	f803 cb01 	strb.w	ip, [r3], #1
 800dd3e:	3a01      	subs	r2, #1
 800dd40:	2101      	movs	r1, #1
 800dd42:	2c00      	cmp	r4, #0
 800dd44:	4620      	mov	r0, r4
 800dd46:	dc2a      	bgt.n	800dd9e <_gcvt+0x13e>
 800dd48:	b101      	cbz	r1, 800dd4c <_gcvt+0xec>
 800dd4a:	9405      	str	r4, [sp, #20]
 800dd4c:	b90f      	cbnz	r7, 800dd52 <_gcvt+0xf2>
 800dd4e:	7829      	ldrb	r1, [r5, #0]
 800dd50:	b311      	cbz	r1, 800dd98 <_gcvt+0x138>
 800dd52:	42b3      	cmp	r3, r6
 800dd54:	bf04      	itt	eq
 800dd56:	2130      	moveq	r1, #48	; 0x30
 800dd58:	f803 1b01 	strbeq.w	r1, [r3], #1
 800dd5c:	212e      	movs	r1, #46	; 0x2e
 800dd5e:	7019      	strb	r1, [r3, #0]
 800dd60:	9905      	ldr	r1, [sp, #20]
 800dd62:	4618      	mov	r0, r3
 800dd64:	2400      	movs	r4, #0
 800dd66:	eba1 0c03 	sub.w	ip, r1, r3
 800dd6a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800dd6e:	eb1c 0f00 	cmn.w	ip, r0
 800dd72:	d41c      	bmi.n	800ddae <_gcvt+0x14e>
 800dd74:	2900      	cmp	r1, #0
 800dd76:	f1c1 0000 	rsb	r0, r1, #0
 800dd7a:	bfc8      	it	gt
 800dd7c:	2000      	movgt	r0, #0
 800dd7e:	f100 0c01 	add.w	ip, r0, #1
 800dd82:	4463      	add	r3, ip
 800dd84:	4401      	add	r1, r0
 800dd86:	b104      	cbz	r4, 800dd8a <_gcvt+0x12a>
 800dd88:	9105      	str	r1, [sp, #20]
 800dd8a:	1e69      	subs	r1, r5, #1
 800dd8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd90:	b108      	cbz	r0, 800dd96 <_gcvt+0x136>
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	dc0f      	bgt.n	800ddb6 <_gcvt+0x156>
 800dd96:	b9df      	cbnz	r7, 800ddd0 <_gcvt+0x170>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	701a      	strb	r2, [r3, #0]
 800dd9c:	e780      	b.n	800dca0 <_gcvt+0x40>
 800dd9e:	2a00      	cmp	r2, #0
 800dda0:	f104 34ff 	add.w	r4, r4, #4294967295
 800dda4:	dcc9      	bgt.n	800dd3a <_gcvt+0xda>
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d0d0      	beq.n	800dd4c <_gcvt+0xec>
 800ddaa:	9005      	str	r0, [sp, #20]
 800ddac:	e7ce      	b.n	800dd4c <_gcvt+0xec>
 800ddae:	f800 ef01 	strb.w	lr, [r0, #1]!
 800ddb2:	2401      	movs	r4, #1
 800ddb4:	e7db      	b.n	800dd6e <_gcvt+0x10e>
 800ddb6:	f803 0b01 	strb.w	r0, [r3], #1
 800ddba:	3a01      	subs	r2, #1
 800ddbc:	e7e6      	b.n	800dd8c <_gcvt+0x12c>
 800ddbe:	f801 5b01 	strb.w	r5, [r1], #1
 800ddc2:	1a60      	subs	r0, r4, r1
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	dcfa      	bgt.n	800ddbe <_gcvt+0x15e>
 800ddc8:	2a00      	cmp	r2, #0
 800ddca:	bfa8      	it	ge
 800ddcc:	189b      	addge	r3, r3, r2
 800ddce:	e7e3      	b.n	800dd98 <_gcvt+0x138>
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	189c      	adds	r4, r3, r2
 800ddd4:	2530      	movs	r5, #48	; 0x30
 800ddd6:	e7f4      	b.n	800ddc2 <_gcvt+0x162>
 800ddd8:	eb1c432d 	.word	0xeb1c432d
 800dddc:	3f1a36e2 	.word	0x3f1a36e2

0800dde0 <__sflush_r>:
 800dde0:	898a      	ldrh	r2, [r1, #12]
 800dde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde6:	4605      	mov	r5, r0
 800dde8:	0710      	lsls	r0, r2, #28
 800ddea:	460c      	mov	r4, r1
 800ddec:	d458      	bmi.n	800dea0 <__sflush_r+0xc0>
 800ddee:	684b      	ldr	r3, [r1, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	dc05      	bgt.n	800de00 <__sflush_r+0x20>
 800ddf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	dc02      	bgt.n	800de00 <__sflush_r+0x20>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de02:	2e00      	cmp	r6, #0
 800de04:	d0f9      	beq.n	800ddfa <__sflush_r+0x1a>
 800de06:	2300      	movs	r3, #0
 800de08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de0c:	682f      	ldr	r7, [r5, #0]
 800de0e:	602b      	str	r3, [r5, #0]
 800de10:	d032      	beq.n	800de78 <__sflush_r+0x98>
 800de12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	075a      	lsls	r2, r3, #29
 800de18:	d505      	bpl.n	800de26 <__sflush_r+0x46>
 800de1a:	6863      	ldr	r3, [r4, #4]
 800de1c:	1ac0      	subs	r0, r0, r3
 800de1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de20:	b10b      	cbz	r3, 800de26 <__sflush_r+0x46>
 800de22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de24:	1ac0      	subs	r0, r0, r3
 800de26:	2300      	movs	r3, #0
 800de28:	4602      	mov	r2, r0
 800de2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de2c:	6a21      	ldr	r1, [r4, #32]
 800de2e:	4628      	mov	r0, r5
 800de30:	47b0      	blx	r6
 800de32:	1c43      	adds	r3, r0, #1
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	d106      	bne.n	800de46 <__sflush_r+0x66>
 800de38:	6829      	ldr	r1, [r5, #0]
 800de3a:	291d      	cmp	r1, #29
 800de3c:	d82c      	bhi.n	800de98 <__sflush_r+0xb8>
 800de3e:	4a2a      	ldr	r2, [pc, #168]	; (800dee8 <__sflush_r+0x108>)
 800de40:	40ca      	lsrs	r2, r1
 800de42:	07d6      	lsls	r6, r2, #31
 800de44:	d528      	bpl.n	800de98 <__sflush_r+0xb8>
 800de46:	2200      	movs	r2, #0
 800de48:	6062      	str	r2, [r4, #4]
 800de4a:	04d9      	lsls	r1, r3, #19
 800de4c:	6922      	ldr	r2, [r4, #16]
 800de4e:	6022      	str	r2, [r4, #0]
 800de50:	d504      	bpl.n	800de5c <__sflush_r+0x7c>
 800de52:	1c42      	adds	r2, r0, #1
 800de54:	d101      	bne.n	800de5a <__sflush_r+0x7a>
 800de56:	682b      	ldr	r3, [r5, #0]
 800de58:	b903      	cbnz	r3, 800de5c <__sflush_r+0x7c>
 800de5a:	6560      	str	r0, [r4, #84]	; 0x54
 800de5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de5e:	602f      	str	r7, [r5, #0]
 800de60:	2900      	cmp	r1, #0
 800de62:	d0ca      	beq.n	800ddfa <__sflush_r+0x1a>
 800de64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de68:	4299      	cmp	r1, r3
 800de6a:	d002      	beq.n	800de72 <__sflush_r+0x92>
 800de6c:	4628      	mov	r0, r5
 800de6e:	f000 fd8f 	bl	800e990 <_free_r>
 800de72:	2000      	movs	r0, #0
 800de74:	6360      	str	r0, [r4, #52]	; 0x34
 800de76:	e7c1      	b.n	800ddfc <__sflush_r+0x1c>
 800de78:	6a21      	ldr	r1, [r4, #32]
 800de7a:	2301      	movs	r3, #1
 800de7c:	4628      	mov	r0, r5
 800de7e:	47b0      	blx	r6
 800de80:	1c41      	adds	r1, r0, #1
 800de82:	d1c7      	bne.n	800de14 <__sflush_r+0x34>
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d0c4      	beq.n	800de14 <__sflush_r+0x34>
 800de8a:	2b1d      	cmp	r3, #29
 800de8c:	d001      	beq.n	800de92 <__sflush_r+0xb2>
 800de8e:	2b16      	cmp	r3, #22
 800de90:	d101      	bne.n	800de96 <__sflush_r+0xb6>
 800de92:	602f      	str	r7, [r5, #0]
 800de94:	e7b1      	b.n	800ddfa <__sflush_r+0x1a>
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de9c:	81a3      	strh	r3, [r4, #12]
 800de9e:	e7ad      	b.n	800ddfc <__sflush_r+0x1c>
 800dea0:	690f      	ldr	r7, [r1, #16]
 800dea2:	2f00      	cmp	r7, #0
 800dea4:	d0a9      	beq.n	800ddfa <__sflush_r+0x1a>
 800dea6:	0793      	lsls	r3, r2, #30
 800dea8:	680e      	ldr	r6, [r1, #0]
 800deaa:	bf08      	it	eq
 800deac:	694b      	ldreq	r3, [r1, #20]
 800deae:	600f      	str	r7, [r1, #0]
 800deb0:	bf18      	it	ne
 800deb2:	2300      	movne	r3, #0
 800deb4:	eba6 0807 	sub.w	r8, r6, r7
 800deb8:	608b      	str	r3, [r1, #8]
 800deba:	f1b8 0f00 	cmp.w	r8, #0
 800debe:	dd9c      	ble.n	800ddfa <__sflush_r+0x1a>
 800dec0:	6a21      	ldr	r1, [r4, #32]
 800dec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dec4:	4643      	mov	r3, r8
 800dec6:	463a      	mov	r2, r7
 800dec8:	4628      	mov	r0, r5
 800deca:	47b0      	blx	r6
 800decc:	2800      	cmp	r0, #0
 800dece:	dc06      	bgt.n	800dede <__sflush_r+0xfe>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	e78e      	b.n	800ddfc <__sflush_r+0x1c>
 800dede:	4407      	add	r7, r0
 800dee0:	eba8 0800 	sub.w	r8, r8, r0
 800dee4:	e7e9      	b.n	800deba <__sflush_r+0xda>
 800dee6:	bf00      	nop
 800dee8:	20400001 	.word	0x20400001

0800deec <_fflush_r>:
 800deec:	b538      	push	{r3, r4, r5, lr}
 800deee:	690b      	ldr	r3, [r1, #16]
 800def0:	4605      	mov	r5, r0
 800def2:	460c      	mov	r4, r1
 800def4:	b913      	cbnz	r3, 800defc <_fflush_r+0x10>
 800def6:	2500      	movs	r5, #0
 800def8:	4628      	mov	r0, r5
 800defa:	bd38      	pop	{r3, r4, r5, pc}
 800defc:	b118      	cbz	r0, 800df06 <_fflush_r+0x1a>
 800defe:	6983      	ldr	r3, [r0, #24]
 800df00:	b90b      	cbnz	r3, 800df06 <_fflush_r+0x1a>
 800df02:	f000 f887 	bl	800e014 <__sinit>
 800df06:	4b14      	ldr	r3, [pc, #80]	; (800df58 <_fflush_r+0x6c>)
 800df08:	429c      	cmp	r4, r3
 800df0a:	d11b      	bne.n	800df44 <_fflush_r+0x58>
 800df0c:	686c      	ldr	r4, [r5, #4]
 800df0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0ef      	beq.n	800def6 <_fflush_r+0xa>
 800df16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df18:	07d0      	lsls	r0, r2, #31
 800df1a:	d404      	bmi.n	800df26 <_fflush_r+0x3a>
 800df1c:	0599      	lsls	r1, r3, #22
 800df1e:	d402      	bmi.n	800df26 <_fflush_r+0x3a>
 800df20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df22:	f000 f915 	bl	800e150 <__retarget_lock_acquire_recursive>
 800df26:	4628      	mov	r0, r5
 800df28:	4621      	mov	r1, r4
 800df2a:	f7ff ff59 	bl	800dde0 <__sflush_r>
 800df2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df30:	07da      	lsls	r2, r3, #31
 800df32:	4605      	mov	r5, r0
 800df34:	d4e0      	bmi.n	800def8 <_fflush_r+0xc>
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	059b      	lsls	r3, r3, #22
 800df3a:	d4dd      	bmi.n	800def8 <_fflush_r+0xc>
 800df3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df3e:	f000 f908 	bl	800e152 <__retarget_lock_release_recursive>
 800df42:	e7d9      	b.n	800def8 <_fflush_r+0xc>
 800df44:	4b05      	ldr	r3, [pc, #20]	; (800df5c <_fflush_r+0x70>)
 800df46:	429c      	cmp	r4, r3
 800df48:	d101      	bne.n	800df4e <_fflush_r+0x62>
 800df4a:	68ac      	ldr	r4, [r5, #8]
 800df4c:	e7df      	b.n	800df0e <_fflush_r+0x22>
 800df4e:	4b04      	ldr	r3, [pc, #16]	; (800df60 <_fflush_r+0x74>)
 800df50:	429c      	cmp	r4, r3
 800df52:	bf08      	it	eq
 800df54:	68ec      	ldreq	r4, [r5, #12]
 800df56:	e7da      	b.n	800df0e <_fflush_r+0x22>
 800df58:	08011610 	.word	0x08011610
 800df5c:	08011630 	.word	0x08011630
 800df60:	080115f0 	.word	0x080115f0

0800df64 <std>:
 800df64:	2300      	movs	r3, #0
 800df66:	b510      	push	{r4, lr}
 800df68:	4604      	mov	r4, r0
 800df6a:	e9c0 3300 	strd	r3, r3, [r0]
 800df6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df72:	6083      	str	r3, [r0, #8]
 800df74:	8181      	strh	r1, [r0, #12]
 800df76:	6643      	str	r3, [r0, #100]	; 0x64
 800df78:	81c2      	strh	r2, [r0, #14]
 800df7a:	6183      	str	r3, [r0, #24]
 800df7c:	4619      	mov	r1, r3
 800df7e:	2208      	movs	r2, #8
 800df80:	305c      	adds	r0, #92	; 0x5c
 800df82:	f7ff fc13 	bl	800d7ac <memset>
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <std+0x38>)
 800df88:	6263      	str	r3, [r4, #36]	; 0x24
 800df8a:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <std+0x3c>)
 800df8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800df8e:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <std+0x40>)
 800df90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df92:	4b05      	ldr	r3, [pc, #20]	; (800dfa8 <std+0x44>)
 800df94:	6224      	str	r4, [r4, #32]
 800df96:	6323      	str	r3, [r4, #48]	; 0x30
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	bf00      	nop
 800df9c:	0800f14d 	.word	0x0800f14d
 800dfa0:	0800f16f 	.word	0x0800f16f
 800dfa4:	0800f1a7 	.word	0x0800f1a7
 800dfa8:	0800f1cb 	.word	0x0800f1cb

0800dfac <_cleanup_r>:
 800dfac:	4901      	ldr	r1, [pc, #4]	; (800dfb4 <_cleanup_r+0x8>)
 800dfae:	f000 b8af 	b.w	800e110 <_fwalk_reent>
 800dfb2:	bf00      	nop
 800dfb4:	0800deed 	.word	0x0800deed

0800dfb8 <__sfmoreglue>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	2268      	movs	r2, #104	; 0x68
 800dfbc:	1e4d      	subs	r5, r1, #1
 800dfbe:	4355      	muls	r5, r2
 800dfc0:	460e      	mov	r6, r1
 800dfc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dfc6:	f000 fd4f 	bl	800ea68 <_malloc_r>
 800dfca:	4604      	mov	r4, r0
 800dfcc:	b140      	cbz	r0, 800dfe0 <__sfmoreglue+0x28>
 800dfce:	2100      	movs	r1, #0
 800dfd0:	e9c0 1600 	strd	r1, r6, [r0]
 800dfd4:	300c      	adds	r0, #12
 800dfd6:	60a0      	str	r0, [r4, #8]
 800dfd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dfdc:	f7ff fbe6 	bl	800d7ac <memset>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}

0800dfe4 <__sfp_lock_acquire>:
 800dfe4:	4801      	ldr	r0, [pc, #4]	; (800dfec <__sfp_lock_acquire+0x8>)
 800dfe6:	f000 b8b3 	b.w	800e150 <__retarget_lock_acquire_recursive>
 800dfea:	bf00      	nop
 800dfec:	20002d95 	.word	0x20002d95

0800dff0 <__sfp_lock_release>:
 800dff0:	4801      	ldr	r0, [pc, #4]	; (800dff8 <__sfp_lock_release+0x8>)
 800dff2:	f000 b8ae 	b.w	800e152 <__retarget_lock_release_recursive>
 800dff6:	bf00      	nop
 800dff8:	20002d95 	.word	0x20002d95

0800dffc <__sinit_lock_acquire>:
 800dffc:	4801      	ldr	r0, [pc, #4]	; (800e004 <__sinit_lock_acquire+0x8>)
 800dffe:	f000 b8a7 	b.w	800e150 <__retarget_lock_acquire_recursive>
 800e002:	bf00      	nop
 800e004:	20002d96 	.word	0x20002d96

0800e008 <__sinit_lock_release>:
 800e008:	4801      	ldr	r0, [pc, #4]	; (800e010 <__sinit_lock_release+0x8>)
 800e00a:	f000 b8a2 	b.w	800e152 <__retarget_lock_release_recursive>
 800e00e:	bf00      	nop
 800e010:	20002d96 	.word	0x20002d96

0800e014 <__sinit>:
 800e014:	b510      	push	{r4, lr}
 800e016:	4604      	mov	r4, r0
 800e018:	f7ff fff0 	bl	800dffc <__sinit_lock_acquire>
 800e01c:	69a3      	ldr	r3, [r4, #24]
 800e01e:	b11b      	cbz	r3, 800e028 <__sinit+0x14>
 800e020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e024:	f7ff bff0 	b.w	800e008 <__sinit_lock_release>
 800e028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e02c:	6523      	str	r3, [r4, #80]	; 0x50
 800e02e:	4b13      	ldr	r3, [pc, #76]	; (800e07c <__sinit+0x68>)
 800e030:	4a13      	ldr	r2, [pc, #76]	; (800e080 <__sinit+0x6c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	62a2      	str	r2, [r4, #40]	; 0x28
 800e036:	42a3      	cmp	r3, r4
 800e038:	bf04      	itt	eq
 800e03a:	2301      	moveq	r3, #1
 800e03c:	61a3      	streq	r3, [r4, #24]
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 f820 	bl	800e084 <__sfp>
 800e044:	6060      	str	r0, [r4, #4]
 800e046:	4620      	mov	r0, r4
 800e048:	f000 f81c 	bl	800e084 <__sfp>
 800e04c:	60a0      	str	r0, [r4, #8]
 800e04e:	4620      	mov	r0, r4
 800e050:	f000 f818 	bl	800e084 <__sfp>
 800e054:	2200      	movs	r2, #0
 800e056:	60e0      	str	r0, [r4, #12]
 800e058:	2104      	movs	r1, #4
 800e05a:	6860      	ldr	r0, [r4, #4]
 800e05c:	f7ff ff82 	bl	800df64 <std>
 800e060:	68a0      	ldr	r0, [r4, #8]
 800e062:	2201      	movs	r2, #1
 800e064:	2109      	movs	r1, #9
 800e066:	f7ff ff7d 	bl	800df64 <std>
 800e06a:	68e0      	ldr	r0, [r4, #12]
 800e06c:	2202      	movs	r2, #2
 800e06e:	2112      	movs	r1, #18
 800e070:	f7ff ff78 	bl	800df64 <std>
 800e074:	2301      	movs	r3, #1
 800e076:	61a3      	str	r3, [r4, #24]
 800e078:	e7d2      	b.n	800e020 <__sinit+0xc>
 800e07a:	bf00      	nop
 800e07c:	080114e8 	.word	0x080114e8
 800e080:	0800dfad 	.word	0x0800dfad

0800e084 <__sfp>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	4607      	mov	r7, r0
 800e088:	f7ff ffac 	bl	800dfe4 <__sfp_lock_acquire>
 800e08c:	4b1e      	ldr	r3, [pc, #120]	; (800e108 <__sfp+0x84>)
 800e08e:	681e      	ldr	r6, [r3, #0]
 800e090:	69b3      	ldr	r3, [r6, #24]
 800e092:	b913      	cbnz	r3, 800e09a <__sfp+0x16>
 800e094:	4630      	mov	r0, r6
 800e096:	f7ff ffbd 	bl	800e014 <__sinit>
 800e09a:	3648      	adds	r6, #72	; 0x48
 800e09c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	d503      	bpl.n	800e0ac <__sfp+0x28>
 800e0a4:	6833      	ldr	r3, [r6, #0]
 800e0a6:	b30b      	cbz	r3, 800e0ec <__sfp+0x68>
 800e0a8:	6836      	ldr	r6, [r6, #0]
 800e0aa:	e7f7      	b.n	800e09c <__sfp+0x18>
 800e0ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0b0:	b9d5      	cbnz	r5, 800e0e8 <__sfp+0x64>
 800e0b2:	4b16      	ldr	r3, [pc, #88]	; (800e10c <__sfp+0x88>)
 800e0b4:	60e3      	str	r3, [r4, #12]
 800e0b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0ba:	6665      	str	r5, [r4, #100]	; 0x64
 800e0bc:	f000 f847 	bl	800e14e <__retarget_lock_init_recursive>
 800e0c0:	f7ff ff96 	bl	800dff0 <__sfp_lock_release>
 800e0c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e0cc:	6025      	str	r5, [r4, #0]
 800e0ce:	61a5      	str	r5, [r4, #24]
 800e0d0:	2208      	movs	r2, #8
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0d8:	f7ff fb68 	bl	800d7ac <memset>
 800e0dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e0e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0e8:	3468      	adds	r4, #104	; 0x68
 800e0ea:	e7d9      	b.n	800e0a0 <__sfp+0x1c>
 800e0ec:	2104      	movs	r1, #4
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	f7ff ff62 	bl	800dfb8 <__sfmoreglue>
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	6030      	str	r0, [r6, #0]
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d1d5      	bne.n	800e0a8 <__sfp+0x24>
 800e0fc:	f7ff ff78 	bl	800dff0 <__sfp_lock_release>
 800e100:	230c      	movs	r3, #12
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	e7ee      	b.n	800e0e4 <__sfp+0x60>
 800e106:	bf00      	nop
 800e108:	080114e8 	.word	0x080114e8
 800e10c:	ffff0001 	.word	0xffff0001

0800e110 <_fwalk_reent>:
 800e110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e114:	4606      	mov	r6, r0
 800e116:	4688      	mov	r8, r1
 800e118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e11c:	2700      	movs	r7, #0
 800e11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e122:	f1b9 0901 	subs.w	r9, r9, #1
 800e126:	d505      	bpl.n	800e134 <_fwalk_reent+0x24>
 800e128:	6824      	ldr	r4, [r4, #0]
 800e12a:	2c00      	cmp	r4, #0
 800e12c:	d1f7      	bne.n	800e11e <_fwalk_reent+0xe>
 800e12e:	4638      	mov	r0, r7
 800e130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e134:	89ab      	ldrh	r3, [r5, #12]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d907      	bls.n	800e14a <_fwalk_reent+0x3a>
 800e13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e13e:	3301      	adds	r3, #1
 800e140:	d003      	beq.n	800e14a <_fwalk_reent+0x3a>
 800e142:	4629      	mov	r1, r5
 800e144:	4630      	mov	r0, r6
 800e146:	47c0      	blx	r8
 800e148:	4307      	orrs	r7, r0
 800e14a:	3568      	adds	r5, #104	; 0x68
 800e14c:	e7e9      	b.n	800e122 <_fwalk_reent+0x12>

0800e14e <__retarget_lock_init_recursive>:
 800e14e:	4770      	bx	lr

0800e150 <__retarget_lock_acquire_recursive>:
 800e150:	4770      	bx	lr

0800e152 <__retarget_lock_release_recursive>:
 800e152:	4770      	bx	lr

0800e154 <__swhatbuf_r>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	460e      	mov	r6, r1
 800e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15c:	2900      	cmp	r1, #0
 800e15e:	b096      	sub	sp, #88	; 0x58
 800e160:	4614      	mov	r4, r2
 800e162:	461d      	mov	r5, r3
 800e164:	da08      	bge.n	800e178 <__swhatbuf_r+0x24>
 800e166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	602a      	str	r2, [r5, #0]
 800e16e:	061a      	lsls	r2, r3, #24
 800e170:	d410      	bmi.n	800e194 <__swhatbuf_r+0x40>
 800e172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e176:	e00e      	b.n	800e196 <__swhatbuf_r+0x42>
 800e178:	466a      	mov	r2, sp
 800e17a:	f001 ff01 	bl	800ff80 <_fstat_r>
 800e17e:	2800      	cmp	r0, #0
 800e180:	dbf1      	blt.n	800e166 <__swhatbuf_r+0x12>
 800e182:	9a01      	ldr	r2, [sp, #4]
 800e184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e18c:	425a      	negs	r2, r3
 800e18e:	415a      	adcs	r2, r3
 800e190:	602a      	str	r2, [r5, #0]
 800e192:	e7ee      	b.n	800e172 <__swhatbuf_r+0x1e>
 800e194:	2340      	movs	r3, #64	; 0x40
 800e196:	2000      	movs	r0, #0
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	b016      	add	sp, #88	; 0x58
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1a0 <__smakebuf_r>:
 800e1a0:	898b      	ldrh	r3, [r1, #12]
 800e1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1a4:	079d      	lsls	r5, r3, #30
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	d507      	bpl.n	800e1bc <__smakebuf_r+0x1c>
 800e1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	6123      	str	r3, [r4, #16]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	6163      	str	r3, [r4, #20]
 800e1b8:	b002      	add	sp, #8
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}
 800e1bc:	ab01      	add	r3, sp, #4
 800e1be:	466a      	mov	r2, sp
 800e1c0:	f7ff ffc8 	bl	800e154 <__swhatbuf_r>
 800e1c4:	9900      	ldr	r1, [sp, #0]
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f000 fc4d 	bl	800ea68 <_malloc_r>
 800e1ce:	b948      	cbnz	r0, 800e1e4 <__smakebuf_r+0x44>
 800e1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d4:	059a      	lsls	r2, r3, #22
 800e1d6:	d4ef      	bmi.n	800e1b8 <__smakebuf_r+0x18>
 800e1d8:	f023 0303 	bic.w	r3, r3, #3
 800e1dc:	f043 0302 	orr.w	r3, r3, #2
 800e1e0:	81a3      	strh	r3, [r4, #12]
 800e1e2:	e7e3      	b.n	800e1ac <__smakebuf_r+0xc>
 800e1e4:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <__smakebuf_r+0x7c>)
 800e1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	6020      	str	r0, [r4, #0]
 800e1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	9b00      	ldr	r3, [sp, #0]
 800e1f4:	6163      	str	r3, [r4, #20]
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	6120      	str	r0, [r4, #16]
 800e1fa:	b15b      	cbz	r3, 800e214 <__smakebuf_r+0x74>
 800e1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e200:	4630      	mov	r0, r6
 800e202:	f001 fecf 	bl	800ffa4 <_isatty_r>
 800e206:	b128      	cbz	r0, 800e214 <__smakebuf_r+0x74>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	f023 0303 	bic.w	r3, r3, #3
 800e20e:	f043 0301 	orr.w	r3, r3, #1
 800e212:	81a3      	strh	r3, [r4, #12]
 800e214:	89a0      	ldrh	r0, [r4, #12]
 800e216:	4305      	orrs	r5, r0
 800e218:	81a5      	strh	r5, [r4, #12]
 800e21a:	e7cd      	b.n	800e1b8 <__smakebuf_r+0x18>
 800e21c:	0800dfad 	.word	0x0800dfad

0800e220 <_Balloc>:
 800e220:	b570      	push	{r4, r5, r6, lr}
 800e222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e224:	4604      	mov	r4, r0
 800e226:	460d      	mov	r5, r1
 800e228:	b976      	cbnz	r6, 800e248 <_Balloc+0x28>
 800e22a:	2010      	movs	r0, #16
 800e22c:	f001 fedc 	bl	800ffe8 <malloc>
 800e230:	4602      	mov	r2, r0
 800e232:	6260      	str	r0, [r4, #36]	; 0x24
 800e234:	b920      	cbnz	r0, 800e240 <_Balloc+0x20>
 800e236:	4b18      	ldr	r3, [pc, #96]	; (800e298 <_Balloc+0x78>)
 800e238:	4818      	ldr	r0, [pc, #96]	; (800e29c <_Balloc+0x7c>)
 800e23a:	2166      	movs	r1, #102	; 0x66
 800e23c:	f000 ffe4 	bl	800f208 <__assert_func>
 800e240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e244:	6006      	str	r6, [r0, #0]
 800e246:	60c6      	str	r6, [r0, #12]
 800e248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e24a:	68f3      	ldr	r3, [r6, #12]
 800e24c:	b183      	cbz	r3, 800e270 <_Balloc+0x50>
 800e24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e256:	b9b8      	cbnz	r0, 800e288 <_Balloc+0x68>
 800e258:	2101      	movs	r1, #1
 800e25a:	fa01 f605 	lsl.w	r6, r1, r5
 800e25e:	1d72      	adds	r2, r6, #5
 800e260:	0092      	lsls	r2, r2, #2
 800e262:	4620      	mov	r0, r4
 800e264:	f000 fb7e 	bl	800e964 <_calloc_r>
 800e268:	b160      	cbz	r0, 800e284 <_Balloc+0x64>
 800e26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e26e:	e00e      	b.n	800e28e <_Balloc+0x6e>
 800e270:	2221      	movs	r2, #33	; 0x21
 800e272:	2104      	movs	r1, #4
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fb75 	bl	800e964 <_calloc_r>
 800e27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e27c:	60f0      	str	r0, [r6, #12]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1e4      	bne.n	800e24e <_Balloc+0x2e>
 800e284:	2000      	movs	r0, #0
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	6802      	ldr	r2, [r0, #0]
 800e28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e28e:	2300      	movs	r3, #0
 800e290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e294:	e7f7      	b.n	800e286 <_Balloc+0x66>
 800e296:	bf00      	nop
 800e298:	08011650 	.word	0x08011650
 800e29c:	08011667 	.word	0x08011667

0800e2a0 <_Bfree>:
 800e2a0:	b570      	push	{r4, r5, r6, lr}
 800e2a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	b976      	cbnz	r6, 800e2c8 <_Bfree+0x28>
 800e2aa:	2010      	movs	r0, #16
 800e2ac:	f001 fe9c 	bl	800ffe8 <malloc>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6268      	str	r0, [r5, #36]	; 0x24
 800e2b4:	b920      	cbnz	r0, 800e2c0 <_Bfree+0x20>
 800e2b6:	4b09      	ldr	r3, [pc, #36]	; (800e2dc <_Bfree+0x3c>)
 800e2b8:	4809      	ldr	r0, [pc, #36]	; (800e2e0 <_Bfree+0x40>)
 800e2ba:	218a      	movs	r1, #138	; 0x8a
 800e2bc:	f000 ffa4 	bl	800f208 <__assert_func>
 800e2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2c4:	6006      	str	r6, [r0, #0]
 800e2c6:	60c6      	str	r6, [r0, #12]
 800e2c8:	b13c      	cbz	r4, 800e2da <_Bfree+0x3a>
 800e2ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e2cc:	6862      	ldr	r2, [r4, #4]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2d4:	6021      	str	r1, [r4, #0]
 800e2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	08011650 	.word	0x08011650
 800e2e0:	08011667 	.word	0x08011667

0800e2e4 <__multadd>:
 800e2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e8:	690d      	ldr	r5, [r1, #16]
 800e2ea:	4607      	mov	r7, r0
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	461e      	mov	r6, r3
 800e2f0:	f101 0c14 	add.w	ip, r1, #20
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800e2fa:	b299      	uxth	r1, r3
 800e2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800e300:	0c1e      	lsrs	r6, r3, #16
 800e302:	0c0b      	lsrs	r3, r1, #16
 800e304:	fb02 3306 	mla	r3, r2, r6, r3
 800e308:	b289      	uxth	r1, r1
 800e30a:	3001      	adds	r0, #1
 800e30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e310:	4285      	cmp	r5, r0
 800e312:	f84c 1b04 	str.w	r1, [ip], #4
 800e316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e31a:	dcec      	bgt.n	800e2f6 <__multadd+0x12>
 800e31c:	b30e      	cbz	r6, 800e362 <__multadd+0x7e>
 800e31e:	68a3      	ldr	r3, [r4, #8]
 800e320:	42ab      	cmp	r3, r5
 800e322:	dc19      	bgt.n	800e358 <__multadd+0x74>
 800e324:	6861      	ldr	r1, [r4, #4]
 800e326:	4638      	mov	r0, r7
 800e328:	3101      	adds	r1, #1
 800e32a:	f7ff ff79 	bl	800e220 <_Balloc>
 800e32e:	4680      	mov	r8, r0
 800e330:	b928      	cbnz	r0, 800e33e <__multadd+0x5a>
 800e332:	4602      	mov	r2, r0
 800e334:	4b0c      	ldr	r3, [pc, #48]	; (800e368 <__multadd+0x84>)
 800e336:	480d      	ldr	r0, [pc, #52]	; (800e36c <__multadd+0x88>)
 800e338:	21b5      	movs	r1, #181	; 0xb5
 800e33a:	f000 ff65 	bl	800f208 <__assert_func>
 800e33e:	6922      	ldr	r2, [r4, #16]
 800e340:	3202      	adds	r2, #2
 800e342:	f104 010c 	add.w	r1, r4, #12
 800e346:	0092      	lsls	r2, r2, #2
 800e348:	300c      	adds	r0, #12
 800e34a:	f7ff fa21 	bl	800d790 <memcpy>
 800e34e:	4621      	mov	r1, r4
 800e350:	4638      	mov	r0, r7
 800e352:	f7ff ffa5 	bl	800e2a0 <_Bfree>
 800e356:	4644      	mov	r4, r8
 800e358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e35c:	3501      	adds	r5, #1
 800e35e:	615e      	str	r6, [r3, #20]
 800e360:	6125      	str	r5, [r4, #16]
 800e362:	4620      	mov	r0, r4
 800e364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e368:	080116c3 	.word	0x080116c3
 800e36c:	08011667 	.word	0x08011667

0800e370 <__hi0bits>:
 800e370:	0c03      	lsrs	r3, r0, #16
 800e372:	041b      	lsls	r3, r3, #16
 800e374:	b9d3      	cbnz	r3, 800e3ac <__hi0bits+0x3c>
 800e376:	0400      	lsls	r0, r0, #16
 800e378:	2310      	movs	r3, #16
 800e37a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e37e:	bf04      	itt	eq
 800e380:	0200      	lsleq	r0, r0, #8
 800e382:	3308      	addeq	r3, #8
 800e384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e388:	bf04      	itt	eq
 800e38a:	0100      	lsleq	r0, r0, #4
 800e38c:	3304      	addeq	r3, #4
 800e38e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e392:	bf04      	itt	eq
 800e394:	0080      	lsleq	r0, r0, #2
 800e396:	3302      	addeq	r3, #2
 800e398:	2800      	cmp	r0, #0
 800e39a:	db05      	blt.n	800e3a8 <__hi0bits+0x38>
 800e39c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e3a0:	f103 0301 	add.w	r3, r3, #1
 800e3a4:	bf08      	it	eq
 800e3a6:	2320      	moveq	r3, #32
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	4770      	bx	lr
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	e7e4      	b.n	800e37a <__hi0bits+0xa>

0800e3b0 <__lo0bits>:
 800e3b0:	6803      	ldr	r3, [r0, #0]
 800e3b2:	f013 0207 	ands.w	r2, r3, #7
 800e3b6:	4601      	mov	r1, r0
 800e3b8:	d00b      	beq.n	800e3d2 <__lo0bits+0x22>
 800e3ba:	07da      	lsls	r2, r3, #31
 800e3bc:	d423      	bmi.n	800e406 <__lo0bits+0x56>
 800e3be:	0798      	lsls	r0, r3, #30
 800e3c0:	bf49      	itett	mi
 800e3c2:	085b      	lsrmi	r3, r3, #1
 800e3c4:	089b      	lsrpl	r3, r3, #2
 800e3c6:	2001      	movmi	r0, #1
 800e3c8:	600b      	strmi	r3, [r1, #0]
 800e3ca:	bf5c      	itt	pl
 800e3cc:	600b      	strpl	r3, [r1, #0]
 800e3ce:	2002      	movpl	r0, #2
 800e3d0:	4770      	bx	lr
 800e3d2:	b298      	uxth	r0, r3
 800e3d4:	b9a8      	cbnz	r0, 800e402 <__lo0bits+0x52>
 800e3d6:	0c1b      	lsrs	r3, r3, #16
 800e3d8:	2010      	movs	r0, #16
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	b90a      	cbnz	r2, 800e3e2 <__lo0bits+0x32>
 800e3de:	3008      	adds	r0, #8
 800e3e0:	0a1b      	lsrs	r3, r3, #8
 800e3e2:	071a      	lsls	r2, r3, #28
 800e3e4:	bf04      	itt	eq
 800e3e6:	091b      	lsreq	r3, r3, #4
 800e3e8:	3004      	addeq	r0, #4
 800e3ea:	079a      	lsls	r2, r3, #30
 800e3ec:	bf04      	itt	eq
 800e3ee:	089b      	lsreq	r3, r3, #2
 800e3f0:	3002      	addeq	r0, #2
 800e3f2:	07da      	lsls	r2, r3, #31
 800e3f4:	d403      	bmi.n	800e3fe <__lo0bits+0x4e>
 800e3f6:	085b      	lsrs	r3, r3, #1
 800e3f8:	f100 0001 	add.w	r0, r0, #1
 800e3fc:	d005      	beq.n	800e40a <__lo0bits+0x5a>
 800e3fe:	600b      	str	r3, [r1, #0]
 800e400:	4770      	bx	lr
 800e402:	4610      	mov	r0, r2
 800e404:	e7e9      	b.n	800e3da <__lo0bits+0x2a>
 800e406:	2000      	movs	r0, #0
 800e408:	4770      	bx	lr
 800e40a:	2020      	movs	r0, #32
 800e40c:	4770      	bx	lr
	...

0800e410 <__i2b>:
 800e410:	b510      	push	{r4, lr}
 800e412:	460c      	mov	r4, r1
 800e414:	2101      	movs	r1, #1
 800e416:	f7ff ff03 	bl	800e220 <_Balloc>
 800e41a:	4602      	mov	r2, r0
 800e41c:	b928      	cbnz	r0, 800e42a <__i2b+0x1a>
 800e41e:	4b05      	ldr	r3, [pc, #20]	; (800e434 <__i2b+0x24>)
 800e420:	4805      	ldr	r0, [pc, #20]	; (800e438 <__i2b+0x28>)
 800e422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e426:	f000 feef 	bl	800f208 <__assert_func>
 800e42a:	2301      	movs	r3, #1
 800e42c:	6144      	str	r4, [r0, #20]
 800e42e:	6103      	str	r3, [r0, #16]
 800e430:	bd10      	pop	{r4, pc}
 800e432:	bf00      	nop
 800e434:	080116c3 	.word	0x080116c3
 800e438:	08011667 	.word	0x08011667

0800e43c <__multiply>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	4691      	mov	r9, r2
 800e442:	690a      	ldr	r2, [r1, #16]
 800e444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e448:	429a      	cmp	r2, r3
 800e44a:	bfb8      	it	lt
 800e44c:	460b      	movlt	r3, r1
 800e44e:	460c      	mov	r4, r1
 800e450:	bfbc      	itt	lt
 800e452:	464c      	movlt	r4, r9
 800e454:	4699      	movlt	r9, r3
 800e456:	6927      	ldr	r7, [r4, #16]
 800e458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e45c:	68a3      	ldr	r3, [r4, #8]
 800e45e:	6861      	ldr	r1, [r4, #4]
 800e460:	eb07 060a 	add.w	r6, r7, sl
 800e464:	42b3      	cmp	r3, r6
 800e466:	b085      	sub	sp, #20
 800e468:	bfb8      	it	lt
 800e46a:	3101      	addlt	r1, #1
 800e46c:	f7ff fed8 	bl	800e220 <_Balloc>
 800e470:	b930      	cbnz	r0, 800e480 <__multiply+0x44>
 800e472:	4602      	mov	r2, r0
 800e474:	4b44      	ldr	r3, [pc, #272]	; (800e588 <__multiply+0x14c>)
 800e476:	4845      	ldr	r0, [pc, #276]	; (800e58c <__multiply+0x150>)
 800e478:	f240 115d 	movw	r1, #349	; 0x15d
 800e47c:	f000 fec4 	bl	800f208 <__assert_func>
 800e480:	f100 0514 	add.w	r5, r0, #20
 800e484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e488:	462b      	mov	r3, r5
 800e48a:	2200      	movs	r2, #0
 800e48c:	4543      	cmp	r3, r8
 800e48e:	d321      	bcc.n	800e4d4 <__multiply+0x98>
 800e490:	f104 0314 	add.w	r3, r4, #20
 800e494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e498:	f109 0314 	add.w	r3, r9, #20
 800e49c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e4a0:	9202      	str	r2, [sp, #8]
 800e4a2:	1b3a      	subs	r2, r7, r4
 800e4a4:	3a15      	subs	r2, #21
 800e4a6:	f022 0203 	bic.w	r2, r2, #3
 800e4aa:	3204      	adds	r2, #4
 800e4ac:	f104 0115 	add.w	r1, r4, #21
 800e4b0:	428f      	cmp	r7, r1
 800e4b2:	bf38      	it	cc
 800e4b4:	2204      	movcc	r2, #4
 800e4b6:	9201      	str	r2, [sp, #4]
 800e4b8:	9a02      	ldr	r2, [sp, #8]
 800e4ba:	9303      	str	r3, [sp, #12]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d80c      	bhi.n	800e4da <__multiply+0x9e>
 800e4c0:	2e00      	cmp	r6, #0
 800e4c2:	dd03      	ble.n	800e4cc <__multiply+0x90>
 800e4c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d05a      	beq.n	800e582 <__multiply+0x146>
 800e4cc:	6106      	str	r6, [r0, #16]
 800e4ce:	b005      	add	sp, #20
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	f843 2b04 	str.w	r2, [r3], #4
 800e4d8:	e7d8      	b.n	800e48c <__multiply+0x50>
 800e4da:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4de:	f1ba 0f00 	cmp.w	sl, #0
 800e4e2:	d024      	beq.n	800e52e <__multiply+0xf2>
 800e4e4:	f104 0e14 	add.w	lr, r4, #20
 800e4e8:	46a9      	mov	r9, r5
 800e4ea:	f04f 0c00 	mov.w	ip, #0
 800e4ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4f2:	f8d9 1000 	ldr.w	r1, [r9]
 800e4f6:	fa1f fb82 	uxth.w	fp, r2
 800e4fa:	b289      	uxth	r1, r1
 800e4fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e504:	f8d9 2000 	ldr.w	r2, [r9]
 800e508:	4461      	add	r1, ip
 800e50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e50e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e516:	b289      	uxth	r1, r1
 800e518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e51c:	4577      	cmp	r7, lr
 800e51e:	f849 1b04 	str.w	r1, [r9], #4
 800e522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e526:	d8e2      	bhi.n	800e4ee <__multiply+0xb2>
 800e528:	9a01      	ldr	r2, [sp, #4]
 800e52a:	f845 c002 	str.w	ip, [r5, r2]
 800e52e:	9a03      	ldr	r2, [sp, #12]
 800e530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e534:	3304      	adds	r3, #4
 800e536:	f1b9 0f00 	cmp.w	r9, #0
 800e53a:	d020      	beq.n	800e57e <__multiply+0x142>
 800e53c:	6829      	ldr	r1, [r5, #0]
 800e53e:	f104 0c14 	add.w	ip, r4, #20
 800e542:	46ae      	mov	lr, r5
 800e544:	f04f 0a00 	mov.w	sl, #0
 800e548:	f8bc b000 	ldrh.w	fp, [ip]
 800e54c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e550:	fb09 220b 	mla	r2, r9, fp, r2
 800e554:	4492      	add	sl, r2
 800e556:	b289      	uxth	r1, r1
 800e558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e55c:	f84e 1b04 	str.w	r1, [lr], #4
 800e560:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e564:	f8be 1000 	ldrh.w	r1, [lr]
 800e568:	0c12      	lsrs	r2, r2, #16
 800e56a:	fb09 1102 	mla	r1, r9, r2, r1
 800e56e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e572:	4567      	cmp	r7, ip
 800e574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e578:	d8e6      	bhi.n	800e548 <__multiply+0x10c>
 800e57a:	9a01      	ldr	r2, [sp, #4]
 800e57c:	50a9      	str	r1, [r5, r2]
 800e57e:	3504      	adds	r5, #4
 800e580:	e79a      	b.n	800e4b8 <__multiply+0x7c>
 800e582:	3e01      	subs	r6, #1
 800e584:	e79c      	b.n	800e4c0 <__multiply+0x84>
 800e586:	bf00      	nop
 800e588:	080116c3 	.word	0x080116c3
 800e58c:	08011667 	.word	0x08011667

0800e590 <__pow5mult>:
 800e590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e594:	4615      	mov	r5, r2
 800e596:	f012 0203 	ands.w	r2, r2, #3
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	d007      	beq.n	800e5b0 <__pow5mult+0x20>
 800e5a0:	4c25      	ldr	r4, [pc, #148]	; (800e638 <__pow5mult+0xa8>)
 800e5a2:	3a01      	subs	r2, #1
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5aa:	f7ff fe9b 	bl	800e2e4 <__multadd>
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	10ad      	asrs	r5, r5, #2
 800e5b2:	d03d      	beq.n	800e630 <__pow5mult+0xa0>
 800e5b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e5b6:	b97c      	cbnz	r4, 800e5d8 <__pow5mult+0x48>
 800e5b8:	2010      	movs	r0, #16
 800e5ba:	f001 fd15 	bl	800ffe8 <malloc>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	6270      	str	r0, [r6, #36]	; 0x24
 800e5c2:	b928      	cbnz	r0, 800e5d0 <__pow5mult+0x40>
 800e5c4:	4b1d      	ldr	r3, [pc, #116]	; (800e63c <__pow5mult+0xac>)
 800e5c6:	481e      	ldr	r0, [pc, #120]	; (800e640 <__pow5mult+0xb0>)
 800e5c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e5cc:	f000 fe1c 	bl	800f208 <__assert_func>
 800e5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5d4:	6004      	str	r4, [r0, #0]
 800e5d6:	60c4      	str	r4, [r0, #12]
 800e5d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5e0:	b94c      	cbnz	r4, 800e5f6 <__pow5mult+0x66>
 800e5e2:	f240 2171 	movw	r1, #625	; 0x271
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f7ff ff12 	bl	800e410 <__i2b>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	6003      	str	r3, [r0, #0]
 800e5f6:	f04f 0900 	mov.w	r9, #0
 800e5fa:	07eb      	lsls	r3, r5, #31
 800e5fc:	d50a      	bpl.n	800e614 <__pow5mult+0x84>
 800e5fe:	4639      	mov	r1, r7
 800e600:	4622      	mov	r2, r4
 800e602:	4630      	mov	r0, r6
 800e604:	f7ff ff1a 	bl	800e43c <__multiply>
 800e608:	4639      	mov	r1, r7
 800e60a:	4680      	mov	r8, r0
 800e60c:	4630      	mov	r0, r6
 800e60e:	f7ff fe47 	bl	800e2a0 <_Bfree>
 800e612:	4647      	mov	r7, r8
 800e614:	106d      	asrs	r5, r5, #1
 800e616:	d00b      	beq.n	800e630 <__pow5mult+0xa0>
 800e618:	6820      	ldr	r0, [r4, #0]
 800e61a:	b938      	cbnz	r0, 800e62c <__pow5mult+0x9c>
 800e61c:	4622      	mov	r2, r4
 800e61e:	4621      	mov	r1, r4
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff ff0b 	bl	800e43c <__multiply>
 800e626:	6020      	str	r0, [r4, #0]
 800e628:	f8c0 9000 	str.w	r9, [r0]
 800e62c:	4604      	mov	r4, r0
 800e62e:	e7e4      	b.n	800e5fa <__pow5mult+0x6a>
 800e630:	4638      	mov	r0, r7
 800e632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e636:	bf00      	nop
 800e638:	080117c8 	.word	0x080117c8
 800e63c:	08011650 	.word	0x08011650
 800e640:	08011667 	.word	0x08011667

0800e644 <__lshift>:
 800e644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	460c      	mov	r4, r1
 800e64a:	6849      	ldr	r1, [r1, #4]
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	4607      	mov	r7, r0
 800e656:	4691      	mov	r9, r2
 800e658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e65c:	f108 0601 	add.w	r6, r8, #1
 800e660:	42b3      	cmp	r3, r6
 800e662:	db0b      	blt.n	800e67c <__lshift+0x38>
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff fddb 	bl	800e220 <_Balloc>
 800e66a:	4605      	mov	r5, r0
 800e66c:	b948      	cbnz	r0, 800e682 <__lshift+0x3e>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b2a      	ldr	r3, [pc, #168]	; (800e71c <__lshift+0xd8>)
 800e672:	482b      	ldr	r0, [pc, #172]	; (800e720 <__lshift+0xdc>)
 800e674:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e678:	f000 fdc6 	bl	800f208 <__assert_func>
 800e67c:	3101      	adds	r1, #1
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	e7ee      	b.n	800e660 <__lshift+0x1c>
 800e682:	2300      	movs	r3, #0
 800e684:	f100 0114 	add.w	r1, r0, #20
 800e688:	f100 0210 	add.w	r2, r0, #16
 800e68c:	4618      	mov	r0, r3
 800e68e:	4553      	cmp	r3, sl
 800e690:	db37      	blt.n	800e702 <__lshift+0xbe>
 800e692:	6920      	ldr	r0, [r4, #16]
 800e694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e698:	f104 0314 	add.w	r3, r4, #20
 800e69c:	f019 091f 	ands.w	r9, r9, #31
 800e6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6a8:	d02f      	beq.n	800e70a <__lshift+0xc6>
 800e6aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e6ae:	468a      	mov	sl, r1
 800e6b0:	f04f 0c00 	mov.w	ip, #0
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	fa02 f209 	lsl.w	r2, r2, r9
 800e6ba:	ea42 020c 	orr.w	r2, r2, ip
 800e6be:	f84a 2b04 	str.w	r2, [sl], #4
 800e6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c6:	4298      	cmp	r0, r3
 800e6c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e6cc:	d8f2      	bhi.n	800e6b4 <__lshift+0x70>
 800e6ce:	1b03      	subs	r3, r0, r4
 800e6d0:	3b15      	subs	r3, #21
 800e6d2:	f023 0303 	bic.w	r3, r3, #3
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	f104 0215 	add.w	r2, r4, #21
 800e6dc:	4290      	cmp	r0, r2
 800e6de:	bf38      	it	cc
 800e6e0:	2304      	movcc	r3, #4
 800e6e2:	f841 c003 	str.w	ip, [r1, r3]
 800e6e6:	f1bc 0f00 	cmp.w	ip, #0
 800e6ea:	d001      	beq.n	800e6f0 <__lshift+0xac>
 800e6ec:	f108 0602 	add.w	r6, r8, #2
 800e6f0:	3e01      	subs	r6, #1
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	612e      	str	r6, [r5, #16]
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	f7ff fdd2 	bl	800e2a0 <_Bfree>
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e702:	f842 0f04 	str.w	r0, [r2, #4]!
 800e706:	3301      	adds	r3, #1
 800e708:	e7c1      	b.n	800e68e <__lshift+0x4a>
 800e70a:	3904      	subs	r1, #4
 800e70c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e710:	f841 2f04 	str.w	r2, [r1, #4]!
 800e714:	4298      	cmp	r0, r3
 800e716:	d8f9      	bhi.n	800e70c <__lshift+0xc8>
 800e718:	e7ea      	b.n	800e6f0 <__lshift+0xac>
 800e71a:	bf00      	nop
 800e71c:	080116c3 	.word	0x080116c3
 800e720:	08011667 	.word	0x08011667

0800e724 <__mcmp>:
 800e724:	b530      	push	{r4, r5, lr}
 800e726:	6902      	ldr	r2, [r0, #16]
 800e728:	690c      	ldr	r4, [r1, #16]
 800e72a:	1b12      	subs	r2, r2, r4
 800e72c:	d10e      	bne.n	800e74c <__mcmp+0x28>
 800e72e:	f100 0314 	add.w	r3, r0, #20
 800e732:	3114      	adds	r1, #20
 800e734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e73c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e744:	42a5      	cmp	r5, r4
 800e746:	d003      	beq.n	800e750 <__mcmp+0x2c>
 800e748:	d305      	bcc.n	800e756 <__mcmp+0x32>
 800e74a:	2201      	movs	r2, #1
 800e74c:	4610      	mov	r0, r2
 800e74e:	bd30      	pop	{r4, r5, pc}
 800e750:	4283      	cmp	r3, r0
 800e752:	d3f3      	bcc.n	800e73c <__mcmp+0x18>
 800e754:	e7fa      	b.n	800e74c <__mcmp+0x28>
 800e756:	f04f 32ff 	mov.w	r2, #4294967295
 800e75a:	e7f7      	b.n	800e74c <__mcmp+0x28>

0800e75c <__mdiff>:
 800e75c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	460c      	mov	r4, r1
 800e762:	4606      	mov	r6, r0
 800e764:	4611      	mov	r1, r2
 800e766:	4620      	mov	r0, r4
 800e768:	4690      	mov	r8, r2
 800e76a:	f7ff ffdb 	bl	800e724 <__mcmp>
 800e76e:	1e05      	subs	r5, r0, #0
 800e770:	d110      	bne.n	800e794 <__mdiff+0x38>
 800e772:	4629      	mov	r1, r5
 800e774:	4630      	mov	r0, r6
 800e776:	f7ff fd53 	bl	800e220 <_Balloc>
 800e77a:	b930      	cbnz	r0, 800e78a <__mdiff+0x2e>
 800e77c:	4b3a      	ldr	r3, [pc, #232]	; (800e868 <__mdiff+0x10c>)
 800e77e:	4602      	mov	r2, r0
 800e780:	f240 2132 	movw	r1, #562	; 0x232
 800e784:	4839      	ldr	r0, [pc, #228]	; (800e86c <__mdiff+0x110>)
 800e786:	f000 fd3f 	bl	800f208 <__assert_func>
 800e78a:	2301      	movs	r3, #1
 800e78c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e794:	bfa4      	itt	ge
 800e796:	4643      	movge	r3, r8
 800e798:	46a0      	movge	r8, r4
 800e79a:	4630      	mov	r0, r6
 800e79c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e7a0:	bfa6      	itte	ge
 800e7a2:	461c      	movge	r4, r3
 800e7a4:	2500      	movge	r5, #0
 800e7a6:	2501      	movlt	r5, #1
 800e7a8:	f7ff fd3a 	bl	800e220 <_Balloc>
 800e7ac:	b920      	cbnz	r0, 800e7b8 <__mdiff+0x5c>
 800e7ae:	4b2e      	ldr	r3, [pc, #184]	; (800e868 <__mdiff+0x10c>)
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e7b6:	e7e5      	b.n	800e784 <__mdiff+0x28>
 800e7b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e7bc:	6926      	ldr	r6, [r4, #16]
 800e7be:	60c5      	str	r5, [r0, #12]
 800e7c0:	f104 0914 	add.w	r9, r4, #20
 800e7c4:	f108 0514 	add.w	r5, r8, #20
 800e7c8:	f100 0e14 	add.w	lr, r0, #20
 800e7cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e7d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e7d4:	f108 0210 	add.w	r2, r8, #16
 800e7d8:	46f2      	mov	sl, lr
 800e7da:	2100      	movs	r1, #0
 800e7dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e7e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e7e4:	fa1f f883 	uxth.w	r8, r3
 800e7e8:	fa11 f18b 	uxtah	r1, r1, fp
 800e7ec:	0c1b      	lsrs	r3, r3, #16
 800e7ee:	eba1 0808 	sub.w	r8, r1, r8
 800e7f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e7f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e7fa:	fa1f f888 	uxth.w	r8, r8
 800e7fe:	1419      	asrs	r1, r3, #16
 800e800:	454e      	cmp	r6, r9
 800e802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e806:	f84a 3b04 	str.w	r3, [sl], #4
 800e80a:	d8e7      	bhi.n	800e7dc <__mdiff+0x80>
 800e80c:	1b33      	subs	r3, r6, r4
 800e80e:	3b15      	subs	r3, #21
 800e810:	f023 0303 	bic.w	r3, r3, #3
 800e814:	3304      	adds	r3, #4
 800e816:	3415      	adds	r4, #21
 800e818:	42a6      	cmp	r6, r4
 800e81a:	bf38      	it	cc
 800e81c:	2304      	movcc	r3, #4
 800e81e:	441d      	add	r5, r3
 800e820:	4473      	add	r3, lr
 800e822:	469e      	mov	lr, r3
 800e824:	462e      	mov	r6, r5
 800e826:	4566      	cmp	r6, ip
 800e828:	d30e      	bcc.n	800e848 <__mdiff+0xec>
 800e82a:	f10c 0203 	add.w	r2, ip, #3
 800e82e:	1b52      	subs	r2, r2, r5
 800e830:	f022 0203 	bic.w	r2, r2, #3
 800e834:	3d03      	subs	r5, #3
 800e836:	45ac      	cmp	ip, r5
 800e838:	bf38      	it	cc
 800e83a:	2200      	movcc	r2, #0
 800e83c:	441a      	add	r2, r3
 800e83e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e842:	b17b      	cbz	r3, 800e864 <__mdiff+0x108>
 800e844:	6107      	str	r7, [r0, #16]
 800e846:	e7a3      	b.n	800e790 <__mdiff+0x34>
 800e848:	f856 8b04 	ldr.w	r8, [r6], #4
 800e84c:	fa11 f288 	uxtah	r2, r1, r8
 800e850:	1414      	asrs	r4, r2, #16
 800e852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e856:	b292      	uxth	r2, r2
 800e858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e85c:	f84e 2b04 	str.w	r2, [lr], #4
 800e860:	1421      	asrs	r1, r4, #16
 800e862:	e7e0      	b.n	800e826 <__mdiff+0xca>
 800e864:	3f01      	subs	r7, #1
 800e866:	e7ea      	b.n	800e83e <__mdiff+0xe2>
 800e868:	080116c3 	.word	0x080116c3
 800e86c:	08011667 	.word	0x08011667

0800e870 <__d2b>:
 800e870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e874:	4689      	mov	r9, r1
 800e876:	2101      	movs	r1, #1
 800e878:	ec57 6b10 	vmov	r6, r7, d0
 800e87c:	4690      	mov	r8, r2
 800e87e:	f7ff fccf 	bl	800e220 <_Balloc>
 800e882:	4604      	mov	r4, r0
 800e884:	b930      	cbnz	r0, 800e894 <__d2b+0x24>
 800e886:	4602      	mov	r2, r0
 800e888:	4b25      	ldr	r3, [pc, #148]	; (800e920 <__d2b+0xb0>)
 800e88a:	4826      	ldr	r0, [pc, #152]	; (800e924 <__d2b+0xb4>)
 800e88c:	f240 310a 	movw	r1, #778	; 0x30a
 800e890:	f000 fcba 	bl	800f208 <__assert_func>
 800e894:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e89c:	bb35      	cbnz	r5, 800e8ec <__d2b+0x7c>
 800e89e:	2e00      	cmp	r6, #0
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	d028      	beq.n	800e8f6 <__d2b+0x86>
 800e8a4:	4668      	mov	r0, sp
 800e8a6:	9600      	str	r6, [sp, #0]
 800e8a8:	f7ff fd82 	bl	800e3b0 <__lo0bits>
 800e8ac:	9900      	ldr	r1, [sp, #0]
 800e8ae:	b300      	cbz	r0, 800e8f2 <__d2b+0x82>
 800e8b0:	9a01      	ldr	r2, [sp, #4]
 800e8b2:	f1c0 0320 	rsb	r3, r0, #32
 800e8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ba:	430b      	orrs	r3, r1
 800e8bc:	40c2      	lsrs	r2, r0
 800e8be:	6163      	str	r3, [r4, #20]
 800e8c0:	9201      	str	r2, [sp, #4]
 800e8c2:	9b01      	ldr	r3, [sp, #4]
 800e8c4:	61a3      	str	r3, [r4, #24]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	bf14      	ite	ne
 800e8ca:	2202      	movne	r2, #2
 800e8cc:	2201      	moveq	r2, #1
 800e8ce:	6122      	str	r2, [r4, #16]
 800e8d0:	b1d5      	cbz	r5, 800e908 <__d2b+0x98>
 800e8d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e8d6:	4405      	add	r5, r0
 800e8d8:	f8c9 5000 	str.w	r5, [r9]
 800e8dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8e0:	f8c8 0000 	str.w	r0, [r8]
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	b003      	add	sp, #12
 800e8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8f0:	e7d5      	b.n	800e89e <__d2b+0x2e>
 800e8f2:	6161      	str	r1, [r4, #20]
 800e8f4:	e7e5      	b.n	800e8c2 <__d2b+0x52>
 800e8f6:	a801      	add	r0, sp, #4
 800e8f8:	f7ff fd5a 	bl	800e3b0 <__lo0bits>
 800e8fc:	9b01      	ldr	r3, [sp, #4]
 800e8fe:	6163      	str	r3, [r4, #20]
 800e900:	2201      	movs	r2, #1
 800e902:	6122      	str	r2, [r4, #16]
 800e904:	3020      	adds	r0, #32
 800e906:	e7e3      	b.n	800e8d0 <__d2b+0x60>
 800e908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e90c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e910:	f8c9 0000 	str.w	r0, [r9]
 800e914:	6918      	ldr	r0, [r3, #16]
 800e916:	f7ff fd2b 	bl	800e370 <__hi0bits>
 800e91a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e91e:	e7df      	b.n	800e8e0 <__d2b+0x70>
 800e920:	080116c3 	.word	0x080116c3
 800e924:	08011667 	.word	0x08011667

0800e928 <_mprec_log10>:
 800e928:	2817      	cmp	r0, #23
 800e92a:	b5d0      	push	{r4, r6, r7, lr}
 800e92c:	4604      	mov	r4, r0
 800e92e:	dc07      	bgt.n	800e940 <_mprec_log10+0x18>
 800e930:	4809      	ldr	r0, [pc, #36]	; (800e958 <_mprec_log10+0x30>)
 800e932:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800e936:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e93a:	ec41 0b10 	vmov	d0, r0, r1
 800e93e:	bdd0      	pop	{r4, r6, r7, pc}
 800e940:	4906      	ldr	r1, [pc, #24]	; (800e95c <_mprec_log10+0x34>)
 800e942:	4f07      	ldr	r7, [pc, #28]	; (800e960 <_mprec_log10+0x38>)
 800e944:	2000      	movs	r0, #0
 800e946:	2600      	movs	r6, #0
 800e948:	4632      	mov	r2, r6
 800e94a:	463b      	mov	r3, r7
 800e94c:	f7f1 fe74 	bl	8000638 <__aeabi_dmul>
 800e950:	3c01      	subs	r4, #1
 800e952:	d1f9      	bne.n	800e948 <_mprec_log10+0x20>
 800e954:	e7f1      	b.n	800e93a <_mprec_log10+0x12>
 800e956:	bf00      	nop
 800e958:	08011700 	.word	0x08011700
 800e95c:	3ff00000 	.word	0x3ff00000
 800e960:	40240000 	.word	0x40240000

0800e964 <_calloc_r>:
 800e964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e966:	fba1 2402 	umull	r2, r4, r1, r2
 800e96a:	b94c      	cbnz	r4, 800e980 <_calloc_r+0x1c>
 800e96c:	4611      	mov	r1, r2
 800e96e:	9201      	str	r2, [sp, #4]
 800e970:	f000 f87a 	bl	800ea68 <_malloc_r>
 800e974:	9a01      	ldr	r2, [sp, #4]
 800e976:	4605      	mov	r5, r0
 800e978:	b930      	cbnz	r0, 800e988 <_calloc_r+0x24>
 800e97a:	4628      	mov	r0, r5
 800e97c:	b003      	add	sp, #12
 800e97e:	bd30      	pop	{r4, r5, pc}
 800e980:	220c      	movs	r2, #12
 800e982:	6002      	str	r2, [r0, #0]
 800e984:	2500      	movs	r5, #0
 800e986:	e7f8      	b.n	800e97a <_calloc_r+0x16>
 800e988:	4621      	mov	r1, r4
 800e98a:	f7fe ff0f 	bl	800d7ac <memset>
 800e98e:	e7f4      	b.n	800e97a <_calloc_r+0x16>

0800e990 <_free_r>:
 800e990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e992:	2900      	cmp	r1, #0
 800e994:	d044      	beq.n	800ea20 <_free_r+0x90>
 800e996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e99a:	9001      	str	r0, [sp, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f1a1 0404 	sub.w	r4, r1, #4
 800e9a2:	bfb8      	it	lt
 800e9a4:	18e4      	addlt	r4, r4, r3
 800e9a6:	f001 fb27 	bl	800fff8 <__malloc_lock>
 800e9aa:	4a1e      	ldr	r2, [pc, #120]	; (800ea24 <_free_r+0x94>)
 800e9ac:	9801      	ldr	r0, [sp, #4]
 800e9ae:	6813      	ldr	r3, [r2, #0]
 800e9b0:	b933      	cbnz	r3, 800e9c0 <_free_r+0x30>
 800e9b2:	6063      	str	r3, [r4, #4]
 800e9b4:	6014      	str	r4, [r2, #0]
 800e9b6:	b003      	add	sp, #12
 800e9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9bc:	f001 bb22 	b.w	8010004 <__malloc_unlock>
 800e9c0:	42a3      	cmp	r3, r4
 800e9c2:	d908      	bls.n	800e9d6 <_free_r+0x46>
 800e9c4:	6825      	ldr	r5, [r4, #0]
 800e9c6:	1961      	adds	r1, r4, r5
 800e9c8:	428b      	cmp	r3, r1
 800e9ca:	bf01      	itttt	eq
 800e9cc:	6819      	ldreq	r1, [r3, #0]
 800e9ce:	685b      	ldreq	r3, [r3, #4]
 800e9d0:	1949      	addeq	r1, r1, r5
 800e9d2:	6021      	streq	r1, [r4, #0]
 800e9d4:	e7ed      	b.n	800e9b2 <_free_r+0x22>
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	b10b      	cbz	r3, 800e9e0 <_free_r+0x50>
 800e9dc:	42a3      	cmp	r3, r4
 800e9de:	d9fa      	bls.n	800e9d6 <_free_r+0x46>
 800e9e0:	6811      	ldr	r1, [r2, #0]
 800e9e2:	1855      	adds	r5, r2, r1
 800e9e4:	42a5      	cmp	r5, r4
 800e9e6:	d10b      	bne.n	800ea00 <_free_r+0x70>
 800e9e8:	6824      	ldr	r4, [r4, #0]
 800e9ea:	4421      	add	r1, r4
 800e9ec:	1854      	adds	r4, r2, r1
 800e9ee:	42a3      	cmp	r3, r4
 800e9f0:	6011      	str	r1, [r2, #0]
 800e9f2:	d1e0      	bne.n	800e9b6 <_free_r+0x26>
 800e9f4:	681c      	ldr	r4, [r3, #0]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	6053      	str	r3, [r2, #4]
 800e9fa:	4421      	add	r1, r4
 800e9fc:	6011      	str	r1, [r2, #0]
 800e9fe:	e7da      	b.n	800e9b6 <_free_r+0x26>
 800ea00:	d902      	bls.n	800ea08 <_free_r+0x78>
 800ea02:	230c      	movs	r3, #12
 800ea04:	6003      	str	r3, [r0, #0]
 800ea06:	e7d6      	b.n	800e9b6 <_free_r+0x26>
 800ea08:	6825      	ldr	r5, [r4, #0]
 800ea0a:	1961      	adds	r1, r4, r5
 800ea0c:	428b      	cmp	r3, r1
 800ea0e:	bf04      	itt	eq
 800ea10:	6819      	ldreq	r1, [r3, #0]
 800ea12:	685b      	ldreq	r3, [r3, #4]
 800ea14:	6063      	str	r3, [r4, #4]
 800ea16:	bf04      	itt	eq
 800ea18:	1949      	addeq	r1, r1, r5
 800ea1a:	6021      	streq	r1, [r4, #0]
 800ea1c:	6054      	str	r4, [r2, #4]
 800ea1e:	e7ca      	b.n	800e9b6 <_free_r+0x26>
 800ea20:	b003      	add	sp, #12
 800ea22:	bd30      	pop	{r4, r5, pc}
 800ea24:	20002d98 	.word	0x20002d98

0800ea28 <sbrk_aligned>:
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	4e0e      	ldr	r6, [pc, #56]	; (800ea64 <sbrk_aligned+0x3c>)
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	6831      	ldr	r1, [r6, #0]
 800ea30:	4605      	mov	r5, r0
 800ea32:	b911      	cbnz	r1, 800ea3a <sbrk_aligned+0x12>
 800ea34:	f000 fb7a 	bl	800f12c <_sbrk_r>
 800ea38:	6030      	str	r0, [r6, #0]
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f000 fb75 	bl	800f12c <_sbrk_r>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d00a      	beq.n	800ea5c <sbrk_aligned+0x34>
 800ea46:	1cc4      	adds	r4, r0, #3
 800ea48:	f024 0403 	bic.w	r4, r4, #3
 800ea4c:	42a0      	cmp	r0, r4
 800ea4e:	d007      	beq.n	800ea60 <sbrk_aligned+0x38>
 800ea50:	1a21      	subs	r1, r4, r0
 800ea52:	4628      	mov	r0, r5
 800ea54:	f000 fb6a 	bl	800f12c <_sbrk_r>
 800ea58:	3001      	adds	r0, #1
 800ea5a:	d101      	bne.n	800ea60 <sbrk_aligned+0x38>
 800ea5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ea60:	4620      	mov	r0, r4
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	20002d9c 	.word	0x20002d9c

0800ea68 <_malloc_r>:
 800ea68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6c:	1ccd      	adds	r5, r1, #3
 800ea6e:	f025 0503 	bic.w	r5, r5, #3
 800ea72:	3508      	adds	r5, #8
 800ea74:	2d0c      	cmp	r5, #12
 800ea76:	bf38      	it	cc
 800ea78:	250c      	movcc	r5, #12
 800ea7a:	2d00      	cmp	r5, #0
 800ea7c:	4607      	mov	r7, r0
 800ea7e:	db01      	blt.n	800ea84 <_malloc_r+0x1c>
 800ea80:	42a9      	cmp	r1, r5
 800ea82:	d905      	bls.n	800ea90 <_malloc_r+0x28>
 800ea84:	230c      	movs	r3, #12
 800ea86:	603b      	str	r3, [r7, #0]
 800ea88:	2600      	movs	r6, #0
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea90:	4e2e      	ldr	r6, [pc, #184]	; (800eb4c <_malloc_r+0xe4>)
 800ea92:	f001 fab1 	bl	800fff8 <__malloc_lock>
 800ea96:	6833      	ldr	r3, [r6, #0]
 800ea98:	461c      	mov	r4, r3
 800ea9a:	bb34      	cbnz	r4, 800eaea <_malloc_r+0x82>
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	f7ff ffc2 	bl	800ea28 <sbrk_aligned>
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	d14d      	bne.n	800eb46 <_malloc_r+0xde>
 800eaaa:	6834      	ldr	r4, [r6, #0]
 800eaac:	4626      	mov	r6, r4
 800eaae:	2e00      	cmp	r6, #0
 800eab0:	d140      	bne.n	800eb34 <_malloc_r+0xcc>
 800eab2:	6823      	ldr	r3, [r4, #0]
 800eab4:	4631      	mov	r1, r6
 800eab6:	4638      	mov	r0, r7
 800eab8:	eb04 0803 	add.w	r8, r4, r3
 800eabc:	f000 fb36 	bl	800f12c <_sbrk_r>
 800eac0:	4580      	cmp	r8, r0
 800eac2:	d13a      	bne.n	800eb3a <_malloc_r+0xd2>
 800eac4:	6821      	ldr	r1, [r4, #0]
 800eac6:	3503      	adds	r5, #3
 800eac8:	1a6d      	subs	r5, r5, r1
 800eaca:	f025 0503 	bic.w	r5, r5, #3
 800eace:	3508      	adds	r5, #8
 800ead0:	2d0c      	cmp	r5, #12
 800ead2:	bf38      	it	cc
 800ead4:	250c      	movcc	r5, #12
 800ead6:	4629      	mov	r1, r5
 800ead8:	4638      	mov	r0, r7
 800eada:	f7ff ffa5 	bl	800ea28 <sbrk_aligned>
 800eade:	3001      	adds	r0, #1
 800eae0:	d02b      	beq.n	800eb3a <_malloc_r+0xd2>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	442b      	add	r3, r5
 800eae6:	6023      	str	r3, [r4, #0]
 800eae8:	e00e      	b.n	800eb08 <_malloc_r+0xa0>
 800eaea:	6822      	ldr	r2, [r4, #0]
 800eaec:	1b52      	subs	r2, r2, r5
 800eaee:	d41e      	bmi.n	800eb2e <_malloc_r+0xc6>
 800eaf0:	2a0b      	cmp	r2, #11
 800eaf2:	d916      	bls.n	800eb22 <_malloc_r+0xba>
 800eaf4:	1961      	adds	r1, r4, r5
 800eaf6:	42a3      	cmp	r3, r4
 800eaf8:	6025      	str	r5, [r4, #0]
 800eafa:	bf18      	it	ne
 800eafc:	6059      	strne	r1, [r3, #4]
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	bf08      	it	eq
 800eb02:	6031      	streq	r1, [r6, #0]
 800eb04:	5162      	str	r2, [r4, r5]
 800eb06:	604b      	str	r3, [r1, #4]
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f104 060b 	add.w	r6, r4, #11
 800eb0e:	f001 fa79 	bl	8010004 <__malloc_unlock>
 800eb12:	f026 0607 	bic.w	r6, r6, #7
 800eb16:	1d23      	adds	r3, r4, #4
 800eb18:	1af2      	subs	r2, r6, r3
 800eb1a:	d0b6      	beq.n	800ea8a <_malloc_r+0x22>
 800eb1c:	1b9b      	subs	r3, r3, r6
 800eb1e:	50a3      	str	r3, [r4, r2]
 800eb20:	e7b3      	b.n	800ea8a <_malloc_r+0x22>
 800eb22:	6862      	ldr	r2, [r4, #4]
 800eb24:	42a3      	cmp	r3, r4
 800eb26:	bf0c      	ite	eq
 800eb28:	6032      	streq	r2, [r6, #0]
 800eb2a:	605a      	strne	r2, [r3, #4]
 800eb2c:	e7ec      	b.n	800eb08 <_malloc_r+0xa0>
 800eb2e:	4623      	mov	r3, r4
 800eb30:	6864      	ldr	r4, [r4, #4]
 800eb32:	e7b2      	b.n	800ea9a <_malloc_r+0x32>
 800eb34:	4634      	mov	r4, r6
 800eb36:	6876      	ldr	r6, [r6, #4]
 800eb38:	e7b9      	b.n	800eaae <_malloc_r+0x46>
 800eb3a:	230c      	movs	r3, #12
 800eb3c:	603b      	str	r3, [r7, #0]
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f001 fa60 	bl	8010004 <__malloc_unlock>
 800eb44:	e7a1      	b.n	800ea8a <_malloc_r+0x22>
 800eb46:	6025      	str	r5, [r4, #0]
 800eb48:	e7de      	b.n	800eb08 <_malloc_r+0xa0>
 800eb4a:	bf00      	nop
 800eb4c:	20002d98 	.word	0x20002d98

0800eb50 <__sfputc_r>:
 800eb50:	6893      	ldr	r3, [r2, #8]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	b410      	push	{r4}
 800eb58:	6093      	str	r3, [r2, #8]
 800eb5a:	da08      	bge.n	800eb6e <__sfputc_r+0x1e>
 800eb5c:	6994      	ldr	r4, [r2, #24]
 800eb5e:	42a3      	cmp	r3, r4
 800eb60:	db01      	blt.n	800eb66 <__sfputc_r+0x16>
 800eb62:	290a      	cmp	r1, #10
 800eb64:	d103      	bne.n	800eb6e <__sfputc_r+0x1e>
 800eb66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb6a:	f7fe bf41 	b.w	800d9f0 <__swbuf_r>
 800eb6e:	6813      	ldr	r3, [r2, #0]
 800eb70:	1c58      	adds	r0, r3, #1
 800eb72:	6010      	str	r0, [r2, #0]
 800eb74:	7019      	strb	r1, [r3, #0]
 800eb76:	4608      	mov	r0, r1
 800eb78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb7c:	4770      	bx	lr

0800eb7e <__sfputs_r>:
 800eb7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb80:	4606      	mov	r6, r0
 800eb82:	460f      	mov	r7, r1
 800eb84:	4614      	mov	r4, r2
 800eb86:	18d5      	adds	r5, r2, r3
 800eb88:	42ac      	cmp	r4, r5
 800eb8a:	d101      	bne.n	800eb90 <__sfputs_r+0x12>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	e007      	b.n	800eba0 <__sfputs_r+0x22>
 800eb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb94:	463a      	mov	r2, r7
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7ff ffda 	bl	800eb50 <__sfputc_r>
 800eb9c:	1c43      	adds	r3, r0, #1
 800eb9e:	d1f3      	bne.n	800eb88 <__sfputs_r+0xa>
 800eba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eba4 <_vfiprintf_r>:
 800eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba8:	460d      	mov	r5, r1
 800ebaa:	b09d      	sub	sp, #116	; 0x74
 800ebac:	4614      	mov	r4, r2
 800ebae:	4698      	mov	r8, r3
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	b118      	cbz	r0, 800ebbc <_vfiprintf_r+0x18>
 800ebb4:	6983      	ldr	r3, [r0, #24]
 800ebb6:	b90b      	cbnz	r3, 800ebbc <_vfiprintf_r+0x18>
 800ebb8:	f7ff fa2c 	bl	800e014 <__sinit>
 800ebbc:	4b89      	ldr	r3, [pc, #548]	; (800ede4 <_vfiprintf_r+0x240>)
 800ebbe:	429d      	cmp	r5, r3
 800ebc0:	d11b      	bne.n	800ebfa <_vfiprintf_r+0x56>
 800ebc2:	6875      	ldr	r5, [r6, #4]
 800ebc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebc6:	07d9      	lsls	r1, r3, #31
 800ebc8:	d405      	bmi.n	800ebd6 <_vfiprintf_r+0x32>
 800ebca:	89ab      	ldrh	r3, [r5, #12]
 800ebcc:	059a      	lsls	r2, r3, #22
 800ebce:	d402      	bmi.n	800ebd6 <_vfiprintf_r+0x32>
 800ebd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebd2:	f7ff fabd 	bl	800e150 <__retarget_lock_acquire_recursive>
 800ebd6:	89ab      	ldrh	r3, [r5, #12]
 800ebd8:	071b      	lsls	r3, r3, #28
 800ebda:	d501      	bpl.n	800ebe0 <_vfiprintf_r+0x3c>
 800ebdc:	692b      	ldr	r3, [r5, #16]
 800ebde:	b9eb      	cbnz	r3, 800ec1c <_vfiprintf_r+0x78>
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f7fe ff56 	bl	800da94 <__swsetup_r>
 800ebe8:	b1c0      	cbz	r0, 800ec1c <_vfiprintf_r+0x78>
 800ebea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebec:	07dc      	lsls	r4, r3, #31
 800ebee:	d50e      	bpl.n	800ec0e <_vfiprintf_r+0x6a>
 800ebf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf4:	b01d      	add	sp, #116	; 0x74
 800ebf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebfa:	4b7b      	ldr	r3, [pc, #492]	; (800ede8 <_vfiprintf_r+0x244>)
 800ebfc:	429d      	cmp	r5, r3
 800ebfe:	d101      	bne.n	800ec04 <_vfiprintf_r+0x60>
 800ec00:	68b5      	ldr	r5, [r6, #8]
 800ec02:	e7df      	b.n	800ebc4 <_vfiprintf_r+0x20>
 800ec04:	4b79      	ldr	r3, [pc, #484]	; (800edec <_vfiprintf_r+0x248>)
 800ec06:	429d      	cmp	r5, r3
 800ec08:	bf08      	it	eq
 800ec0a:	68f5      	ldreq	r5, [r6, #12]
 800ec0c:	e7da      	b.n	800ebc4 <_vfiprintf_r+0x20>
 800ec0e:	89ab      	ldrh	r3, [r5, #12]
 800ec10:	0598      	lsls	r0, r3, #22
 800ec12:	d4ed      	bmi.n	800ebf0 <_vfiprintf_r+0x4c>
 800ec14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec16:	f7ff fa9c 	bl	800e152 <__retarget_lock_release_recursive>
 800ec1a:	e7e9      	b.n	800ebf0 <_vfiprintf_r+0x4c>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec20:	2320      	movs	r3, #32
 800ec22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec2a:	2330      	movs	r3, #48	; 0x30
 800ec2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edf0 <_vfiprintf_r+0x24c>
 800ec30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec34:	f04f 0901 	mov.w	r9, #1
 800ec38:	4623      	mov	r3, r4
 800ec3a:	469a      	mov	sl, r3
 800ec3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec40:	b10a      	cbz	r2, 800ec46 <_vfiprintf_r+0xa2>
 800ec42:	2a25      	cmp	r2, #37	; 0x25
 800ec44:	d1f9      	bne.n	800ec3a <_vfiprintf_r+0x96>
 800ec46:	ebba 0b04 	subs.w	fp, sl, r4
 800ec4a:	d00b      	beq.n	800ec64 <_vfiprintf_r+0xc0>
 800ec4c:	465b      	mov	r3, fp
 800ec4e:	4622      	mov	r2, r4
 800ec50:	4629      	mov	r1, r5
 800ec52:	4630      	mov	r0, r6
 800ec54:	f7ff ff93 	bl	800eb7e <__sfputs_r>
 800ec58:	3001      	adds	r0, #1
 800ec5a:	f000 80aa 	beq.w	800edb2 <_vfiprintf_r+0x20e>
 800ec5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec60:	445a      	add	r2, fp
 800ec62:	9209      	str	r2, [sp, #36]	; 0x24
 800ec64:	f89a 3000 	ldrb.w	r3, [sl]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f000 80a2 	beq.w	800edb2 <_vfiprintf_r+0x20e>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	f04f 32ff 	mov.w	r2, #4294967295
 800ec74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec78:	f10a 0a01 	add.w	sl, sl, #1
 800ec7c:	9304      	str	r3, [sp, #16]
 800ec7e:	9307      	str	r3, [sp, #28]
 800ec80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec84:	931a      	str	r3, [sp, #104]	; 0x68
 800ec86:	4654      	mov	r4, sl
 800ec88:	2205      	movs	r2, #5
 800ec8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec8e:	4858      	ldr	r0, [pc, #352]	; (800edf0 <_vfiprintf_r+0x24c>)
 800ec90:	f7f1 fac6 	bl	8000220 <memchr>
 800ec94:	9a04      	ldr	r2, [sp, #16]
 800ec96:	b9d8      	cbnz	r0, 800ecd0 <_vfiprintf_r+0x12c>
 800ec98:	06d1      	lsls	r1, r2, #27
 800ec9a:	bf44      	itt	mi
 800ec9c:	2320      	movmi	r3, #32
 800ec9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eca2:	0713      	lsls	r3, r2, #28
 800eca4:	bf44      	itt	mi
 800eca6:	232b      	movmi	r3, #43	; 0x2b
 800eca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecac:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb2:	d015      	beq.n	800ece0 <_vfiprintf_r+0x13c>
 800ecb4:	9a07      	ldr	r2, [sp, #28]
 800ecb6:	4654      	mov	r4, sl
 800ecb8:	2000      	movs	r0, #0
 800ecba:	f04f 0c0a 	mov.w	ip, #10
 800ecbe:	4621      	mov	r1, r4
 800ecc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecc4:	3b30      	subs	r3, #48	; 0x30
 800ecc6:	2b09      	cmp	r3, #9
 800ecc8:	d94e      	bls.n	800ed68 <_vfiprintf_r+0x1c4>
 800ecca:	b1b0      	cbz	r0, 800ecfa <_vfiprintf_r+0x156>
 800eccc:	9207      	str	r2, [sp, #28]
 800ecce:	e014      	b.n	800ecfa <_vfiprintf_r+0x156>
 800ecd0:	eba0 0308 	sub.w	r3, r0, r8
 800ecd4:	fa09 f303 	lsl.w	r3, r9, r3
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	9304      	str	r3, [sp, #16]
 800ecdc:	46a2      	mov	sl, r4
 800ecde:	e7d2      	b.n	800ec86 <_vfiprintf_r+0xe2>
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	1d19      	adds	r1, r3, #4
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	9103      	str	r1, [sp, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	bfbb      	ittet	lt
 800ecec:	425b      	neglt	r3, r3
 800ecee:	f042 0202 	orrlt.w	r2, r2, #2
 800ecf2:	9307      	strge	r3, [sp, #28]
 800ecf4:	9307      	strlt	r3, [sp, #28]
 800ecf6:	bfb8      	it	lt
 800ecf8:	9204      	strlt	r2, [sp, #16]
 800ecfa:	7823      	ldrb	r3, [r4, #0]
 800ecfc:	2b2e      	cmp	r3, #46	; 0x2e
 800ecfe:	d10c      	bne.n	800ed1a <_vfiprintf_r+0x176>
 800ed00:	7863      	ldrb	r3, [r4, #1]
 800ed02:	2b2a      	cmp	r3, #42	; 0x2a
 800ed04:	d135      	bne.n	800ed72 <_vfiprintf_r+0x1ce>
 800ed06:	9b03      	ldr	r3, [sp, #12]
 800ed08:	1d1a      	adds	r2, r3, #4
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	9203      	str	r2, [sp, #12]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	bfb8      	it	lt
 800ed12:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed16:	3402      	adds	r4, #2
 800ed18:	9305      	str	r3, [sp, #20]
 800ed1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee00 <_vfiprintf_r+0x25c>
 800ed1e:	7821      	ldrb	r1, [r4, #0]
 800ed20:	2203      	movs	r2, #3
 800ed22:	4650      	mov	r0, sl
 800ed24:	f7f1 fa7c 	bl	8000220 <memchr>
 800ed28:	b140      	cbz	r0, 800ed3c <_vfiprintf_r+0x198>
 800ed2a:	2340      	movs	r3, #64	; 0x40
 800ed2c:	eba0 000a 	sub.w	r0, r0, sl
 800ed30:	fa03 f000 	lsl.w	r0, r3, r0
 800ed34:	9b04      	ldr	r3, [sp, #16]
 800ed36:	4303      	orrs	r3, r0
 800ed38:	3401      	adds	r4, #1
 800ed3a:	9304      	str	r3, [sp, #16]
 800ed3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed40:	482c      	ldr	r0, [pc, #176]	; (800edf4 <_vfiprintf_r+0x250>)
 800ed42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed46:	2206      	movs	r2, #6
 800ed48:	f7f1 fa6a 	bl	8000220 <memchr>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d03f      	beq.n	800edd0 <_vfiprintf_r+0x22c>
 800ed50:	4b29      	ldr	r3, [pc, #164]	; (800edf8 <_vfiprintf_r+0x254>)
 800ed52:	bb1b      	cbnz	r3, 800ed9c <_vfiprintf_r+0x1f8>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	3307      	adds	r3, #7
 800ed58:	f023 0307 	bic.w	r3, r3, #7
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	9303      	str	r3, [sp, #12]
 800ed60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed62:	443b      	add	r3, r7
 800ed64:	9309      	str	r3, [sp, #36]	; 0x24
 800ed66:	e767      	b.n	800ec38 <_vfiprintf_r+0x94>
 800ed68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	2001      	movs	r0, #1
 800ed70:	e7a5      	b.n	800ecbe <_vfiprintf_r+0x11a>
 800ed72:	2300      	movs	r3, #0
 800ed74:	3401      	adds	r4, #1
 800ed76:	9305      	str	r3, [sp, #20]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	f04f 0c0a 	mov.w	ip, #10
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed84:	3a30      	subs	r2, #48	; 0x30
 800ed86:	2a09      	cmp	r2, #9
 800ed88:	d903      	bls.n	800ed92 <_vfiprintf_r+0x1ee>
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d0c5      	beq.n	800ed1a <_vfiprintf_r+0x176>
 800ed8e:	9105      	str	r1, [sp, #20]
 800ed90:	e7c3      	b.n	800ed1a <_vfiprintf_r+0x176>
 800ed92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed96:	4604      	mov	r4, r0
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e7f0      	b.n	800ed7e <_vfiprintf_r+0x1da>
 800ed9c:	ab03      	add	r3, sp, #12
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	462a      	mov	r2, r5
 800eda2:	4b16      	ldr	r3, [pc, #88]	; (800edfc <_vfiprintf_r+0x258>)
 800eda4:	a904      	add	r1, sp, #16
 800eda6:	4630      	mov	r0, r6
 800eda8:	f3af 8000 	nop.w
 800edac:	4607      	mov	r7, r0
 800edae:	1c78      	adds	r0, r7, #1
 800edb0:	d1d6      	bne.n	800ed60 <_vfiprintf_r+0x1bc>
 800edb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edb4:	07d9      	lsls	r1, r3, #31
 800edb6:	d405      	bmi.n	800edc4 <_vfiprintf_r+0x220>
 800edb8:	89ab      	ldrh	r3, [r5, #12]
 800edba:	059a      	lsls	r2, r3, #22
 800edbc:	d402      	bmi.n	800edc4 <_vfiprintf_r+0x220>
 800edbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edc0:	f7ff f9c7 	bl	800e152 <__retarget_lock_release_recursive>
 800edc4:	89ab      	ldrh	r3, [r5, #12]
 800edc6:	065b      	lsls	r3, r3, #25
 800edc8:	f53f af12 	bmi.w	800ebf0 <_vfiprintf_r+0x4c>
 800edcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edce:	e711      	b.n	800ebf4 <_vfiprintf_r+0x50>
 800edd0:	ab03      	add	r3, sp, #12
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	462a      	mov	r2, r5
 800edd6:	4b09      	ldr	r3, [pc, #36]	; (800edfc <_vfiprintf_r+0x258>)
 800edd8:	a904      	add	r1, sp, #16
 800edda:	4630      	mov	r0, r6
 800eddc:	f000 f880 	bl	800eee0 <_printf_i>
 800ede0:	e7e4      	b.n	800edac <_vfiprintf_r+0x208>
 800ede2:	bf00      	nop
 800ede4:	08011610 	.word	0x08011610
 800ede8:	08011630 	.word	0x08011630
 800edec:	080115f0 	.word	0x080115f0
 800edf0:	080117d4 	.word	0x080117d4
 800edf4:	080117de 	.word	0x080117de
 800edf8:	00000000 	.word	0x00000000
 800edfc:	0800eb7f 	.word	0x0800eb7f
 800ee00:	080117da 	.word	0x080117da

0800ee04 <_printf_common>:
 800ee04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee08:	4616      	mov	r6, r2
 800ee0a:	4699      	mov	r9, r3
 800ee0c:	688a      	ldr	r2, [r1, #8]
 800ee0e:	690b      	ldr	r3, [r1, #16]
 800ee10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee14:	4293      	cmp	r3, r2
 800ee16:	bfb8      	it	lt
 800ee18:	4613      	movlt	r3, r2
 800ee1a:	6033      	str	r3, [r6, #0]
 800ee1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee20:	4607      	mov	r7, r0
 800ee22:	460c      	mov	r4, r1
 800ee24:	b10a      	cbz	r2, 800ee2a <_printf_common+0x26>
 800ee26:	3301      	adds	r3, #1
 800ee28:	6033      	str	r3, [r6, #0]
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	0699      	lsls	r1, r3, #26
 800ee2e:	bf42      	ittt	mi
 800ee30:	6833      	ldrmi	r3, [r6, #0]
 800ee32:	3302      	addmi	r3, #2
 800ee34:	6033      	strmi	r3, [r6, #0]
 800ee36:	6825      	ldr	r5, [r4, #0]
 800ee38:	f015 0506 	ands.w	r5, r5, #6
 800ee3c:	d106      	bne.n	800ee4c <_printf_common+0x48>
 800ee3e:	f104 0a19 	add.w	sl, r4, #25
 800ee42:	68e3      	ldr	r3, [r4, #12]
 800ee44:	6832      	ldr	r2, [r6, #0]
 800ee46:	1a9b      	subs	r3, r3, r2
 800ee48:	42ab      	cmp	r3, r5
 800ee4a:	dc26      	bgt.n	800ee9a <_printf_common+0x96>
 800ee4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee50:	1e13      	subs	r3, r2, #0
 800ee52:	6822      	ldr	r2, [r4, #0]
 800ee54:	bf18      	it	ne
 800ee56:	2301      	movne	r3, #1
 800ee58:	0692      	lsls	r2, r2, #26
 800ee5a:	d42b      	bmi.n	800eeb4 <_printf_common+0xb0>
 800ee5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee60:	4649      	mov	r1, r9
 800ee62:	4638      	mov	r0, r7
 800ee64:	47c0      	blx	r8
 800ee66:	3001      	adds	r0, #1
 800ee68:	d01e      	beq.n	800eea8 <_printf_common+0xa4>
 800ee6a:	6823      	ldr	r3, [r4, #0]
 800ee6c:	68e5      	ldr	r5, [r4, #12]
 800ee6e:	6832      	ldr	r2, [r6, #0]
 800ee70:	f003 0306 	and.w	r3, r3, #6
 800ee74:	2b04      	cmp	r3, #4
 800ee76:	bf08      	it	eq
 800ee78:	1aad      	subeq	r5, r5, r2
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	6922      	ldr	r2, [r4, #16]
 800ee7e:	bf0c      	ite	eq
 800ee80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee84:	2500      	movne	r5, #0
 800ee86:	4293      	cmp	r3, r2
 800ee88:	bfc4      	itt	gt
 800ee8a:	1a9b      	subgt	r3, r3, r2
 800ee8c:	18ed      	addgt	r5, r5, r3
 800ee8e:	2600      	movs	r6, #0
 800ee90:	341a      	adds	r4, #26
 800ee92:	42b5      	cmp	r5, r6
 800ee94:	d11a      	bne.n	800eecc <_printf_common+0xc8>
 800ee96:	2000      	movs	r0, #0
 800ee98:	e008      	b.n	800eeac <_printf_common+0xa8>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	4649      	mov	r1, r9
 800eea0:	4638      	mov	r0, r7
 800eea2:	47c0      	blx	r8
 800eea4:	3001      	adds	r0, #1
 800eea6:	d103      	bne.n	800eeb0 <_printf_common+0xac>
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb0:	3501      	adds	r5, #1
 800eeb2:	e7c6      	b.n	800ee42 <_printf_common+0x3e>
 800eeb4:	18e1      	adds	r1, r4, r3
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	2030      	movs	r0, #48	; 0x30
 800eeba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eebe:	4422      	add	r2, r4
 800eec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eec8:	3302      	adds	r3, #2
 800eeca:	e7c7      	b.n	800ee5c <_printf_common+0x58>
 800eecc:	2301      	movs	r3, #1
 800eece:	4622      	mov	r2, r4
 800eed0:	4649      	mov	r1, r9
 800eed2:	4638      	mov	r0, r7
 800eed4:	47c0      	blx	r8
 800eed6:	3001      	adds	r0, #1
 800eed8:	d0e6      	beq.n	800eea8 <_printf_common+0xa4>
 800eeda:	3601      	adds	r6, #1
 800eedc:	e7d9      	b.n	800ee92 <_printf_common+0x8e>
	...

0800eee0 <_printf_i>:
 800eee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	7e0f      	ldrb	r7, [r1, #24]
 800eee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eee8:	2f78      	cmp	r7, #120	; 0x78
 800eeea:	4691      	mov	r9, r2
 800eeec:	4680      	mov	r8, r0
 800eeee:	460c      	mov	r4, r1
 800eef0:	469a      	mov	sl, r3
 800eef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eef6:	d807      	bhi.n	800ef08 <_printf_i+0x28>
 800eef8:	2f62      	cmp	r7, #98	; 0x62
 800eefa:	d80a      	bhi.n	800ef12 <_printf_i+0x32>
 800eefc:	2f00      	cmp	r7, #0
 800eefe:	f000 80d8 	beq.w	800f0b2 <_printf_i+0x1d2>
 800ef02:	2f58      	cmp	r7, #88	; 0x58
 800ef04:	f000 80a3 	beq.w	800f04e <_printf_i+0x16e>
 800ef08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef10:	e03a      	b.n	800ef88 <_printf_i+0xa8>
 800ef12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef16:	2b15      	cmp	r3, #21
 800ef18:	d8f6      	bhi.n	800ef08 <_printf_i+0x28>
 800ef1a:	a101      	add	r1, pc, #4	; (adr r1, 800ef20 <_printf_i+0x40>)
 800ef1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef20:	0800ef79 	.word	0x0800ef79
 800ef24:	0800ef8d 	.word	0x0800ef8d
 800ef28:	0800ef09 	.word	0x0800ef09
 800ef2c:	0800ef09 	.word	0x0800ef09
 800ef30:	0800ef09 	.word	0x0800ef09
 800ef34:	0800ef09 	.word	0x0800ef09
 800ef38:	0800ef8d 	.word	0x0800ef8d
 800ef3c:	0800ef09 	.word	0x0800ef09
 800ef40:	0800ef09 	.word	0x0800ef09
 800ef44:	0800ef09 	.word	0x0800ef09
 800ef48:	0800ef09 	.word	0x0800ef09
 800ef4c:	0800f099 	.word	0x0800f099
 800ef50:	0800efbd 	.word	0x0800efbd
 800ef54:	0800f07b 	.word	0x0800f07b
 800ef58:	0800ef09 	.word	0x0800ef09
 800ef5c:	0800ef09 	.word	0x0800ef09
 800ef60:	0800f0bb 	.word	0x0800f0bb
 800ef64:	0800ef09 	.word	0x0800ef09
 800ef68:	0800efbd 	.word	0x0800efbd
 800ef6c:	0800ef09 	.word	0x0800ef09
 800ef70:	0800ef09 	.word	0x0800ef09
 800ef74:	0800f083 	.word	0x0800f083
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	1d1a      	adds	r2, r3, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	602a      	str	r2, [r5, #0]
 800ef80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e0a3      	b.n	800f0d4 <_printf_i+0x1f4>
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	6829      	ldr	r1, [r5, #0]
 800ef90:	0606      	lsls	r6, r0, #24
 800ef92:	f101 0304 	add.w	r3, r1, #4
 800ef96:	d50a      	bpl.n	800efae <_printf_i+0xce>
 800ef98:	680e      	ldr	r6, [r1, #0]
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	2e00      	cmp	r6, #0
 800ef9e:	da03      	bge.n	800efa8 <_printf_i+0xc8>
 800efa0:	232d      	movs	r3, #45	; 0x2d
 800efa2:	4276      	negs	r6, r6
 800efa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa8:	485e      	ldr	r0, [pc, #376]	; (800f124 <_printf_i+0x244>)
 800efaa:	230a      	movs	r3, #10
 800efac:	e019      	b.n	800efe2 <_printf_i+0x102>
 800efae:	680e      	ldr	r6, [r1, #0]
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efb6:	bf18      	it	ne
 800efb8:	b236      	sxthne	r6, r6
 800efba:	e7ef      	b.n	800ef9c <_printf_i+0xbc>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	6820      	ldr	r0, [r4, #0]
 800efc0:	1d19      	adds	r1, r3, #4
 800efc2:	6029      	str	r1, [r5, #0]
 800efc4:	0601      	lsls	r1, r0, #24
 800efc6:	d501      	bpl.n	800efcc <_printf_i+0xec>
 800efc8:	681e      	ldr	r6, [r3, #0]
 800efca:	e002      	b.n	800efd2 <_printf_i+0xf2>
 800efcc:	0646      	lsls	r6, r0, #25
 800efce:	d5fb      	bpl.n	800efc8 <_printf_i+0xe8>
 800efd0:	881e      	ldrh	r6, [r3, #0]
 800efd2:	4854      	ldr	r0, [pc, #336]	; (800f124 <_printf_i+0x244>)
 800efd4:	2f6f      	cmp	r7, #111	; 0x6f
 800efd6:	bf0c      	ite	eq
 800efd8:	2308      	moveq	r3, #8
 800efda:	230a      	movne	r3, #10
 800efdc:	2100      	movs	r1, #0
 800efde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efe2:	6865      	ldr	r5, [r4, #4]
 800efe4:	60a5      	str	r5, [r4, #8]
 800efe6:	2d00      	cmp	r5, #0
 800efe8:	bfa2      	ittt	ge
 800efea:	6821      	ldrge	r1, [r4, #0]
 800efec:	f021 0104 	bicge.w	r1, r1, #4
 800eff0:	6021      	strge	r1, [r4, #0]
 800eff2:	b90e      	cbnz	r6, 800eff8 <_printf_i+0x118>
 800eff4:	2d00      	cmp	r5, #0
 800eff6:	d04d      	beq.n	800f094 <_printf_i+0x1b4>
 800eff8:	4615      	mov	r5, r2
 800effa:	fbb6 f1f3 	udiv	r1, r6, r3
 800effe:	fb03 6711 	mls	r7, r3, r1, r6
 800f002:	5dc7      	ldrb	r7, [r0, r7]
 800f004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f008:	4637      	mov	r7, r6
 800f00a:	42bb      	cmp	r3, r7
 800f00c:	460e      	mov	r6, r1
 800f00e:	d9f4      	bls.n	800effa <_printf_i+0x11a>
 800f010:	2b08      	cmp	r3, #8
 800f012:	d10b      	bne.n	800f02c <_printf_i+0x14c>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	07de      	lsls	r6, r3, #31
 800f018:	d508      	bpl.n	800f02c <_printf_i+0x14c>
 800f01a:	6923      	ldr	r3, [r4, #16]
 800f01c:	6861      	ldr	r1, [r4, #4]
 800f01e:	4299      	cmp	r1, r3
 800f020:	bfde      	ittt	le
 800f022:	2330      	movle	r3, #48	; 0x30
 800f024:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f02c:	1b52      	subs	r2, r2, r5
 800f02e:	6122      	str	r2, [r4, #16]
 800f030:	f8cd a000 	str.w	sl, [sp]
 800f034:	464b      	mov	r3, r9
 800f036:	aa03      	add	r2, sp, #12
 800f038:	4621      	mov	r1, r4
 800f03a:	4640      	mov	r0, r8
 800f03c:	f7ff fee2 	bl	800ee04 <_printf_common>
 800f040:	3001      	adds	r0, #1
 800f042:	d14c      	bne.n	800f0de <_printf_i+0x1fe>
 800f044:	f04f 30ff 	mov.w	r0, #4294967295
 800f048:	b004      	add	sp, #16
 800f04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f04e:	4835      	ldr	r0, [pc, #212]	; (800f124 <_printf_i+0x244>)
 800f050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f054:	6829      	ldr	r1, [r5, #0]
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	f851 6b04 	ldr.w	r6, [r1], #4
 800f05c:	6029      	str	r1, [r5, #0]
 800f05e:	061d      	lsls	r5, r3, #24
 800f060:	d514      	bpl.n	800f08c <_printf_i+0x1ac>
 800f062:	07df      	lsls	r7, r3, #31
 800f064:	bf44      	itt	mi
 800f066:	f043 0320 	orrmi.w	r3, r3, #32
 800f06a:	6023      	strmi	r3, [r4, #0]
 800f06c:	b91e      	cbnz	r6, 800f076 <_printf_i+0x196>
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	f023 0320 	bic.w	r3, r3, #32
 800f074:	6023      	str	r3, [r4, #0]
 800f076:	2310      	movs	r3, #16
 800f078:	e7b0      	b.n	800efdc <_printf_i+0xfc>
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	f043 0320 	orr.w	r3, r3, #32
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	2378      	movs	r3, #120	; 0x78
 800f084:	4828      	ldr	r0, [pc, #160]	; (800f128 <_printf_i+0x248>)
 800f086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f08a:	e7e3      	b.n	800f054 <_printf_i+0x174>
 800f08c:	0659      	lsls	r1, r3, #25
 800f08e:	bf48      	it	mi
 800f090:	b2b6      	uxthmi	r6, r6
 800f092:	e7e6      	b.n	800f062 <_printf_i+0x182>
 800f094:	4615      	mov	r5, r2
 800f096:	e7bb      	b.n	800f010 <_printf_i+0x130>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	6826      	ldr	r6, [r4, #0]
 800f09c:	6961      	ldr	r1, [r4, #20]
 800f09e:	1d18      	adds	r0, r3, #4
 800f0a0:	6028      	str	r0, [r5, #0]
 800f0a2:	0635      	lsls	r5, r6, #24
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	d501      	bpl.n	800f0ac <_printf_i+0x1cc>
 800f0a8:	6019      	str	r1, [r3, #0]
 800f0aa:	e002      	b.n	800f0b2 <_printf_i+0x1d2>
 800f0ac:	0670      	lsls	r0, r6, #25
 800f0ae:	d5fb      	bpl.n	800f0a8 <_printf_i+0x1c8>
 800f0b0:	8019      	strh	r1, [r3, #0]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	6123      	str	r3, [r4, #16]
 800f0b6:	4615      	mov	r5, r2
 800f0b8:	e7ba      	b.n	800f030 <_printf_i+0x150>
 800f0ba:	682b      	ldr	r3, [r5, #0]
 800f0bc:	1d1a      	adds	r2, r3, #4
 800f0be:	602a      	str	r2, [r5, #0]
 800f0c0:	681d      	ldr	r5, [r3, #0]
 800f0c2:	6862      	ldr	r2, [r4, #4]
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7f1 f8aa 	bl	8000220 <memchr>
 800f0cc:	b108      	cbz	r0, 800f0d2 <_printf_i+0x1f2>
 800f0ce:	1b40      	subs	r0, r0, r5
 800f0d0:	6060      	str	r0, [r4, #4]
 800f0d2:	6863      	ldr	r3, [r4, #4]
 800f0d4:	6123      	str	r3, [r4, #16]
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0dc:	e7a8      	b.n	800f030 <_printf_i+0x150>
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4649      	mov	r1, r9
 800f0e4:	4640      	mov	r0, r8
 800f0e6:	47d0      	blx	sl
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	d0ab      	beq.n	800f044 <_printf_i+0x164>
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	079b      	lsls	r3, r3, #30
 800f0f0:	d413      	bmi.n	800f11a <_printf_i+0x23a>
 800f0f2:	68e0      	ldr	r0, [r4, #12]
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	4298      	cmp	r0, r3
 800f0f8:	bfb8      	it	lt
 800f0fa:	4618      	movlt	r0, r3
 800f0fc:	e7a4      	b.n	800f048 <_printf_i+0x168>
 800f0fe:	2301      	movs	r3, #1
 800f100:	4632      	mov	r2, r6
 800f102:	4649      	mov	r1, r9
 800f104:	4640      	mov	r0, r8
 800f106:	47d0      	blx	sl
 800f108:	3001      	adds	r0, #1
 800f10a:	d09b      	beq.n	800f044 <_printf_i+0x164>
 800f10c:	3501      	adds	r5, #1
 800f10e:	68e3      	ldr	r3, [r4, #12]
 800f110:	9903      	ldr	r1, [sp, #12]
 800f112:	1a5b      	subs	r3, r3, r1
 800f114:	42ab      	cmp	r3, r5
 800f116:	dcf2      	bgt.n	800f0fe <_printf_i+0x21e>
 800f118:	e7eb      	b.n	800f0f2 <_printf_i+0x212>
 800f11a:	2500      	movs	r5, #0
 800f11c:	f104 0619 	add.w	r6, r4, #25
 800f120:	e7f5      	b.n	800f10e <_printf_i+0x22e>
 800f122:	bf00      	nop
 800f124:	080117e5 	.word	0x080117e5
 800f128:	080117f6 	.word	0x080117f6

0800f12c <_sbrk_r>:
 800f12c:	b538      	push	{r3, r4, r5, lr}
 800f12e:	4d06      	ldr	r5, [pc, #24]	; (800f148 <_sbrk_r+0x1c>)
 800f130:	2300      	movs	r3, #0
 800f132:	4604      	mov	r4, r0
 800f134:	4608      	mov	r0, r1
 800f136:	602b      	str	r3, [r5, #0]
 800f138:	f7f5 fcba 	bl	8004ab0 <_sbrk>
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	d102      	bne.n	800f146 <_sbrk_r+0x1a>
 800f140:	682b      	ldr	r3, [r5, #0]
 800f142:	b103      	cbz	r3, 800f146 <_sbrk_r+0x1a>
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	bd38      	pop	{r3, r4, r5, pc}
 800f148:	20002da0 	.word	0x20002da0

0800f14c <__sread>:
 800f14c:	b510      	push	{r4, lr}
 800f14e:	460c      	mov	r4, r1
 800f150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f154:	f000 ff5c 	bl	8010010 <_read_r>
 800f158:	2800      	cmp	r0, #0
 800f15a:	bfab      	itete	ge
 800f15c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f15e:	89a3      	ldrhlt	r3, [r4, #12]
 800f160:	181b      	addge	r3, r3, r0
 800f162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f166:	bfac      	ite	ge
 800f168:	6563      	strge	r3, [r4, #84]	; 0x54
 800f16a:	81a3      	strhlt	r3, [r4, #12]
 800f16c:	bd10      	pop	{r4, pc}

0800f16e <__swrite>:
 800f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f172:	461f      	mov	r7, r3
 800f174:	898b      	ldrh	r3, [r1, #12]
 800f176:	05db      	lsls	r3, r3, #23
 800f178:	4605      	mov	r5, r0
 800f17a:	460c      	mov	r4, r1
 800f17c:	4616      	mov	r6, r2
 800f17e:	d505      	bpl.n	800f18c <__swrite+0x1e>
 800f180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f184:	2302      	movs	r3, #2
 800f186:	2200      	movs	r2, #0
 800f188:	f000 ff1c 	bl	800ffc4 <_lseek_r>
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	4632      	mov	r2, r6
 800f19a:	463b      	mov	r3, r7
 800f19c:	4628      	mov	r0, r5
 800f19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a2:	f000 b81f 	b.w	800f1e4 <_write_r>

0800f1a6 <__sseek>:
 800f1a6:	b510      	push	{r4, lr}
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ae:	f000 ff09 	bl	800ffc4 <_lseek_r>
 800f1b2:	1c43      	adds	r3, r0, #1
 800f1b4:	89a3      	ldrh	r3, [r4, #12]
 800f1b6:	bf15      	itete	ne
 800f1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1c2:	81a3      	strheq	r3, [r4, #12]
 800f1c4:	bf18      	it	ne
 800f1c6:	81a3      	strhne	r3, [r4, #12]
 800f1c8:	bd10      	pop	{r4, pc}

0800f1ca <__sclose>:
 800f1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ce:	f000 b839 	b.w	800f244 <_close_r>

0800f1d2 <strcpy>:
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1d8:	f803 2b01 	strb.w	r2, [r3], #1
 800f1dc:	2a00      	cmp	r2, #0
 800f1de:	d1f9      	bne.n	800f1d4 <strcpy+0x2>
 800f1e0:	4770      	bx	lr
	...

0800f1e4 <_write_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4d07      	ldr	r5, [pc, #28]	; (800f204 <_write_r+0x20>)
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	602a      	str	r2, [r5, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f7f4 fea8 	bl	8003f48 <_write>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_write_r+0x1e>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_write_r+0x1e>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	20002da0 	.word	0x20002da0

0800f208 <__assert_func>:
 800f208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f20a:	4614      	mov	r4, r2
 800f20c:	461a      	mov	r2, r3
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <__assert_func+0x2c>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4605      	mov	r5, r0
 800f214:	68d8      	ldr	r0, [r3, #12]
 800f216:	b14c      	cbz	r4, 800f22c <__assert_func+0x24>
 800f218:	4b07      	ldr	r3, [pc, #28]	; (800f238 <__assert_func+0x30>)
 800f21a:	9100      	str	r1, [sp, #0]
 800f21c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f220:	4906      	ldr	r1, [pc, #24]	; (800f23c <__assert_func+0x34>)
 800f222:	462b      	mov	r3, r5
 800f224:	f000 fe9a 	bl	800ff5c <fiprintf>
 800f228:	f000 ff04 	bl	8010034 <abort>
 800f22c:	4b04      	ldr	r3, [pc, #16]	; (800f240 <__assert_func+0x38>)
 800f22e:	461c      	mov	r4, r3
 800f230:	e7f3      	b.n	800f21a <__assert_func+0x12>
 800f232:	bf00      	nop
 800f234:	2000003c 	.word	0x2000003c
 800f238:	08011807 	.word	0x08011807
 800f23c:	08011814 	.word	0x08011814
 800f240:	08011842 	.word	0x08011842

0800f244 <_close_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4d06      	ldr	r5, [pc, #24]	; (800f260 <_close_r+0x1c>)
 800f248:	2300      	movs	r3, #0
 800f24a:	4604      	mov	r4, r0
 800f24c:	4608      	mov	r0, r1
 800f24e:	602b      	str	r3, [r5, #0]
 800f250:	f7f5 fbf9 	bl	8004a46 <_close>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d102      	bne.n	800f25e <_close_r+0x1a>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	b103      	cbz	r3, 800f25e <_close_r+0x1a>
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	bd38      	pop	{r3, r4, r5, pc}
 800f260:	20002da0 	.word	0x20002da0

0800f264 <quorem>:
 800f264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	6903      	ldr	r3, [r0, #16]
 800f26a:	690c      	ldr	r4, [r1, #16]
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	4607      	mov	r7, r0
 800f270:	f2c0 8081 	blt.w	800f376 <quorem+0x112>
 800f274:	3c01      	subs	r4, #1
 800f276:	f101 0814 	add.w	r8, r1, #20
 800f27a:	f100 0514 	add.w	r5, r0, #20
 800f27e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f282:	9301      	str	r3, [sp, #4]
 800f284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f28c:	3301      	adds	r3, #1
 800f28e:	429a      	cmp	r2, r3
 800f290:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f298:	fbb2 f6f3 	udiv	r6, r2, r3
 800f29c:	d331      	bcc.n	800f302 <quorem+0x9e>
 800f29e:	f04f 0e00 	mov.w	lr, #0
 800f2a2:	4640      	mov	r0, r8
 800f2a4:	46ac      	mov	ip, r5
 800f2a6:	46f2      	mov	sl, lr
 800f2a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f2ac:	b293      	uxth	r3, r2
 800f2ae:	fb06 e303 	mla	r3, r6, r3, lr
 800f2b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	ebaa 0303 	sub.w	r3, sl, r3
 800f2bc:	f8dc a000 	ldr.w	sl, [ip]
 800f2c0:	0c12      	lsrs	r2, r2, #16
 800f2c2:	fa13 f38a 	uxtah	r3, r3, sl
 800f2c6:	fb06 e202 	mla	r2, r6, r2, lr
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	9b00      	ldr	r3, [sp, #0]
 800f2ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f2d2:	b292      	uxth	r2, r2
 800f2d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f2d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800f2e0:	4581      	cmp	r9, r0
 800f2e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2e6:	f84c 3b04 	str.w	r3, [ip], #4
 800f2ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f2ee:	d2db      	bcs.n	800f2a8 <quorem+0x44>
 800f2f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800f2f4:	b92b      	cbnz	r3, 800f302 <quorem+0x9e>
 800f2f6:	9b01      	ldr	r3, [sp, #4]
 800f2f8:	3b04      	subs	r3, #4
 800f2fa:	429d      	cmp	r5, r3
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	d32e      	bcc.n	800f35e <quorem+0xfa>
 800f300:	613c      	str	r4, [r7, #16]
 800f302:	4638      	mov	r0, r7
 800f304:	f7ff fa0e 	bl	800e724 <__mcmp>
 800f308:	2800      	cmp	r0, #0
 800f30a:	db24      	blt.n	800f356 <quorem+0xf2>
 800f30c:	3601      	adds	r6, #1
 800f30e:	4628      	mov	r0, r5
 800f310:	f04f 0c00 	mov.w	ip, #0
 800f314:	f858 2b04 	ldr.w	r2, [r8], #4
 800f318:	f8d0 e000 	ldr.w	lr, [r0]
 800f31c:	b293      	uxth	r3, r2
 800f31e:	ebac 0303 	sub.w	r3, ip, r3
 800f322:	0c12      	lsrs	r2, r2, #16
 800f324:	fa13 f38e 	uxtah	r3, r3, lr
 800f328:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f32c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f330:	b29b      	uxth	r3, r3
 800f332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f336:	45c1      	cmp	r9, r8
 800f338:	f840 3b04 	str.w	r3, [r0], #4
 800f33c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f340:	d2e8      	bcs.n	800f314 <quorem+0xb0>
 800f342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f34a:	b922      	cbnz	r2, 800f356 <quorem+0xf2>
 800f34c:	3b04      	subs	r3, #4
 800f34e:	429d      	cmp	r5, r3
 800f350:	461a      	mov	r2, r3
 800f352:	d30a      	bcc.n	800f36a <quorem+0x106>
 800f354:	613c      	str	r4, [r7, #16]
 800f356:	4630      	mov	r0, r6
 800f358:	b003      	add	sp, #12
 800f35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35e:	6812      	ldr	r2, [r2, #0]
 800f360:	3b04      	subs	r3, #4
 800f362:	2a00      	cmp	r2, #0
 800f364:	d1cc      	bne.n	800f300 <quorem+0x9c>
 800f366:	3c01      	subs	r4, #1
 800f368:	e7c7      	b.n	800f2fa <quorem+0x96>
 800f36a:	6812      	ldr	r2, [r2, #0]
 800f36c:	3b04      	subs	r3, #4
 800f36e:	2a00      	cmp	r2, #0
 800f370:	d1f0      	bne.n	800f354 <quorem+0xf0>
 800f372:	3c01      	subs	r4, #1
 800f374:	e7eb      	b.n	800f34e <quorem+0xea>
 800f376:	2000      	movs	r0, #0
 800f378:	e7ee      	b.n	800f358 <quorem+0xf4>
 800f37a:	0000      	movs	r0, r0
 800f37c:	0000      	movs	r0, r0
	...

0800f380 <_dtoa_r>:
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	ed2d 8b04 	vpush	{d8-d9}
 800f388:	ec57 6b10 	vmov	r6, r7, d0
 800f38c:	b093      	sub	sp, #76	; 0x4c
 800f38e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f394:	9106      	str	r1, [sp, #24]
 800f396:	ee10 aa10 	vmov	sl, s0
 800f39a:	4604      	mov	r4, r0
 800f39c:	9209      	str	r2, [sp, #36]	; 0x24
 800f39e:	930c      	str	r3, [sp, #48]	; 0x30
 800f3a0:	46bb      	mov	fp, r7
 800f3a2:	b975      	cbnz	r5, 800f3c2 <_dtoa_r+0x42>
 800f3a4:	2010      	movs	r0, #16
 800f3a6:	f000 fe1f 	bl	800ffe8 <malloc>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	6260      	str	r0, [r4, #36]	; 0x24
 800f3ae:	b920      	cbnz	r0, 800f3ba <_dtoa_r+0x3a>
 800f3b0:	4ba7      	ldr	r3, [pc, #668]	; (800f650 <_dtoa_r+0x2d0>)
 800f3b2:	21ea      	movs	r1, #234	; 0xea
 800f3b4:	48a7      	ldr	r0, [pc, #668]	; (800f654 <_dtoa_r+0x2d4>)
 800f3b6:	f7ff ff27 	bl	800f208 <__assert_func>
 800f3ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3be:	6005      	str	r5, [r0, #0]
 800f3c0:	60c5      	str	r5, [r0, #12]
 800f3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3c4:	6819      	ldr	r1, [r3, #0]
 800f3c6:	b151      	cbz	r1, 800f3de <_dtoa_r+0x5e>
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	604a      	str	r2, [r1, #4]
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	4093      	lsls	r3, r2
 800f3d0:	608b      	str	r3, [r1, #8]
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f7fe ff64 	bl	800e2a0 <_Bfree>
 800f3d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3da:	2200      	movs	r2, #0
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	1e3b      	subs	r3, r7, #0
 800f3e0:	bfaa      	itet	ge
 800f3e2:	2300      	movge	r3, #0
 800f3e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f3e8:	f8c8 3000 	strge.w	r3, [r8]
 800f3ec:	4b9a      	ldr	r3, [pc, #616]	; (800f658 <_dtoa_r+0x2d8>)
 800f3ee:	bfbc      	itt	lt
 800f3f0:	2201      	movlt	r2, #1
 800f3f2:	f8c8 2000 	strlt.w	r2, [r8]
 800f3f6:	ea33 030b 	bics.w	r3, r3, fp
 800f3fa:	d11b      	bne.n	800f434 <_dtoa_r+0xb4>
 800f3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800f402:	6013      	str	r3, [r2, #0]
 800f404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f408:	4333      	orrs	r3, r6
 800f40a:	f000 8592 	beq.w	800ff32 <_dtoa_r+0xbb2>
 800f40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f410:	b963      	cbnz	r3, 800f42c <_dtoa_r+0xac>
 800f412:	4b92      	ldr	r3, [pc, #584]	; (800f65c <_dtoa_r+0x2dc>)
 800f414:	e022      	b.n	800f45c <_dtoa_r+0xdc>
 800f416:	4b92      	ldr	r3, [pc, #584]	; (800f660 <_dtoa_r+0x2e0>)
 800f418:	9301      	str	r3, [sp, #4]
 800f41a:	3308      	adds	r3, #8
 800f41c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	9801      	ldr	r0, [sp, #4]
 800f422:	b013      	add	sp, #76	; 0x4c
 800f424:	ecbd 8b04 	vpop	{d8-d9}
 800f428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42c:	4b8b      	ldr	r3, [pc, #556]	; (800f65c <_dtoa_r+0x2dc>)
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	3303      	adds	r3, #3
 800f432:	e7f3      	b.n	800f41c <_dtoa_r+0x9c>
 800f434:	2200      	movs	r2, #0
 800f436:	2300      	movs	r3, #0
 800f438:	4650      	mov	r0, sl
 800f43a:	4659      	mov	r1, fp
 800f43c:	f7f1 fb64 	bl	8000b08 <__aeabi_dcmpeq>
 800f440:	ec4b ab19 	vmov	d9, sl, fp
 800f444:	4680      	mov	r8, r0
 800f446:	b158      	cbz	r0, 800f460 <_dtoa_r+0xe0>
 800f448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f44a:	2301      	movs	r3, #1
 800f44c:	6013      	str	r3, [r2, #0]
 800f44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f450:	2b00      	cmp	r3, #0
 800f452:	f000 856b 	beq.w	800ff2c <_dtoa_r+0xbac>
 800f456:	4883      	ldr	r0, [pc, #524]	; (800f664 <_dtoa_r+0x2e4>)
 800f458:	6018      	str	r0, [r3, #0]
 800f45a:	1e43      	subs	r3, r0, #1
 800f45c:	9301      	str	r3, [sp, #4]
 800f45e:	e7df      	b.n	800f420 <_dtoa_r+0xa0>
 800f460:	ec4b ab10 	vmov	d0, sl, fp
 800f464:	aa10      	add	r2, sp, #64	; 0x40
 800f466:	a911      	add	r1, sp, #68	; 0x44
 800f468:	4620      	mov	r0, r4
 800f46a:	f7ff fa01 	bl	800e870 <__d2b>
 800f46e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f472:	ee08 0a10 	vmov	s16, r0
 800f476:	2d00      	cmp	r5, #0
 800f478:	f000 8084 	beq.w	800f584 <_dtoa_r+0x204>
 800f47c:	ee19 3a90 	vmov	r3, s19
 800f480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f488:	4656      	mov	r6, sl
 800f48a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f48e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f496:	4b74      	ldr	r3, [pc, #464]	; (800f668 <_dtoa_r+0x2e8>)
 800f498:	2200      	movs	r2, #0
 800f49a:	4630      	mov	r0, r6
 800f49c:	4639      	mov	r1, r7
 800f49e:	f7f0 ff13 	bl	80002c8 <__aeabi_dsub>
 800f4a2:	a365      	add	r3, pc, #404	; (adr r3, 800f638 <_dtoa_r+0x2b8>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f1 f8c6 	bl	8000638 <__aeabi_dmul>
 800f4ac:	a364      	add	r3, pc, #400	; (adr r3, 800f640 <_dtoa_r+0x2c0>)
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	f7f0 ff0b 	bl	80002cc <__adddf3>
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	f7f1 f852 	bl	8000564 <__aeabi_i2d>
 800f4c0:	a361      	add	r3, pc, #388	; (adr r3, 800f648 <_dtoa_r+0x2c8>)
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	f7f1 f8b7 	bl	8000638 <__aeabi_dmul>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	f7f0 fefb 	bl	80002cc <__adddf3>
 800f4d6:	4606      	mov	r6, r0
 800f4d8:	460f      	mov	r7, r1
 800f4da:	f7f1 fb5d 	bl	8000b98 <__aeabi_d2iz>
 800f4de:	2200      	movs	r2, #0
 800f4e0:	9000      	str	r0, [sp, #0]
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	4639      	mov	r1, r7
 800f4e8:	f7f1 fb18 	bl	8000b1c <__aeabi_dcmplt>
 800f4ec:	b150      	cbz	r0, 800f504 <_dtoa_r+0x184>
 800f4ee:	9800      	ldr	r0, [sp, #0]
 800f4f0:	f7f1 f838 	bl	8000564 <__aeabi_i2d>
 800f4f4:	4632      	mov	r2, r6
 800f4f6:	463b      	mov	r3, r7
 800f4f8:	f7f1 fb06 	bl	8000b08 <__aeabi_dcmpeq>
 800f4fc:	b910      	cbnz	r0, 800f504 <_dtoa_r+0x184>
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	3b01      	subs	r3, #1
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	9b00      	ldr	r3, [sp, #0]
 800f506:	2b16      	cmp	r3, #22
 800f508:	d85a      	bhi.n	800f5c0 <_dtoa_r+0x240>
 800f50a:	9a00      	ldr	r2, [sp, #0]
 800f50c:	4b57      	ldr	r3, [pc, #348]	; (800f66c <_dtoa_r+0x2ec>)
 800f50e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	ec51 0b19 	vmov	r0, r1, d9
 800f51a:	f7f1 faff 	bl	8000b1c <__aeabi_dcmplt>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d050      	beq.n	800f5c4 <_dtoa_r+0x244>
 800f522:	9b00      	ldr	r3, [sp, #0]
 800f524:	3b01      	subs	r3, #1
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	2300      	movs	r3, #0
 800f52a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f52e:	1b5d      	subs	r5, r3, r5
 800f530:	1e6b      	subs	r3, r5, #1
 800f532:	9305      	str	r3, [sp, #20]
 800f534:	bf45      	ittet	mi
 800f536:	f1c5 0301 	rsbmi	r3, r5, #1
 800f53a:	9304      	strmi	r3, [sp, #16]
 800f53c:	2300      	movpl	r3, #0
 800f53e:	2300      	movmi	r3, #0
 800f540:	bf4c      	ite	mi
 800f542:	9305      	strmi	r3, [sp, #20]
 800f544:	9304      	strpl	r3, [sp, #16]
 800f546:	9b00      	ldr	r3, [sp, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	db3d      	blt.n	800f5c8 <_dtoa_r+0x248>
 800f54c:	9b05      	ldr	r3, [sp, #20]
 800f54e:	9a00      	ldr	r2, [sp, #0]
 800f550:	920a      	str	r2, [sp, #40]	; 0x28
 800f552:	4413      	add	r3, r2
 800f554:	9305      	str	r3, [sp, #20]
 800f556:	2300      	movs	r3, #0
 800f558:	9307      	str	r3, [sp, #28]
 800f55a:	9b06      	ldr	r3, [sp, #24]
 800f55c:	2b09      	cmp	r3, #9
 800f55e:	f200 8089 	bhi.w	800f674 <_dtoa_r+0x2f4>
 800f562:	2b05      	cmp	r3, #5
 800f564:	bfc4      	itt	gt
 800f566:	3b04      	subgt	r3, #4
 800f568:	9306      	strgt	r3, [sp, #24]
 800f56a:	9b06      	ldr	r3, [sp, #24]
 800f56c:	f1a3 0302 	sub.w	r3, r3, #2
 800f570:	bfcc      	ite	gt
 800f572:	2500      	movgt	r5, #0
 800f574:	2501      	movle	r5, #1
 800f576:	2b03      	cmp	r3, #3
 800f578:	f200 8087 	bhi.w	800f68a <_dtoa_r+0x30a>
 800f57c:	e8df f003 	tbb	[pc, r3]
 800f580:	59383a2d 	.word	0x59383a2d
 800f584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f588:	441d      	add	r5, r3
 800f58a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f58e:	2b20      	cmp	r3, #32
 800f590:	bfc1      	itttt	gt
 800f592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f59a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f59e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f5a2:	bfda      	itte	le
 800f5a4:	f1c3 0320 	rsble	r3, r3, #32
 800f5a8:	fa06 f003 	lslle.w	r0, r6, r3
 800f5ac:	4318      	orrgt	r0, r3
 800f5ae:	f7f0 ffc9 	bl	8000544 <__aeabi_ui2d>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f5ba:	3d01      	subs	r5, #1
 800f5bc:	930e      	str	r3, [sp, #56]	; 0x38
 800f5be:	e76a      	b.n	800f496 <_dtoa_r+0x116>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e7b2      	b.n	800f52a <_dtoa_r+0x1aa>
 800f5c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5c6:	e7b1      	b.n	800f52c <_dtoa_r+0x1ac>
 800f5c8:	9b04      	ldr	r3, [sp, #16]
 800f5ca:	9a00      	ldr	r2, [sp, #0]
 800f5cc:	1a9b      	subs	r3, r3, r2
 800f5ce:	9304      	str	r3, [sp, #16]
 800f5d0:	4253      	negs	r3, r2
 800f5d2:	9307      	str	r3, [sp, #28]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f5d8:	e7bf      	b.n	800f55a <_dtoa_r+0x1da>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	9308      	str	r3, [sp, #32]
 800f5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	dc55      	bgt.n	800f690 <_dtoa_r+0x310>
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f5ee:	e00c      	b.n	800f60a <_dtoa_r+0x28a>
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e7f3      	b.n	800f5dc <_dtoa_r+0x25c>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5f8:	9308      	str	r3, [sp, #32]
 800f5fa:	9b00      	ldr	r3, [sp, #0]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	9302      	str	r3, [sp, #8]
 800f600:	3301      	adds	r3, #1
 800f602:	2b01      	cmp	r3, #1
 800f604:	9303      	str	r3, [sp, #12]
 800f606:	bfb8      	it	lt
 800f608:	2301      	movlt	r3, #1
 800f60a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f60c:	2200      	movs	r2, #0
 800f60e:	6042      	str	r2, [r0, #4]
 800f610:	2204      	movs	r2, #4
 800f612:	f102 0614 	add.w	r6, r2, #20
 800f616:	429e      	cmp	r6, r3
 800f618:	6841      	ldr	r1, [r0, #4]
 800f61a:	d93d      	bls.n	800f698 <_dtoa_r+0x318>
 800f61c:	4620      	mov	r0, r4
 800f61e:	f7fe fdff 	bl	800e220 <_Balloc>
 800f622:	9001      	str	r0, [sp, #4]
 800f624:	2800      	cmp	r0, #0
 800f626:	d13b      	bne.n	800f6a0 <_dtoa_r+0x320>
 800f628:	4b11      	ldr	r3, [pc, #68]	; (800f670 <_dtoa_r+0x2f0>)
 800f62a:	4602      	mov	r2, r0
 800f62c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f630:	e6c0      	b.n	800f3b4 <_dtoa_r+0x34>
 800f632:	2301      	movs	r3, #1
 800f634:	e7df      	b.n	800f5f6 <_dtoa_r+0x276>
 800f636:	bf00      	nop
 800f638:	636f4361 	.word	0x636f4361
 800f63c:	3fd287a7 	.word	0x3fd287a7
 800f640:	8b60c8b3 	.word	0x8b60c8b3
 800f644:	3fc68a28 	.word	0x3fc68a28
 800f648:	509f79fb 	.word	0x509f79fb
 800f64c:	3fd34413 	.word	0x3fd34413
 800f650:	08011650 	.word	0x08011650
 800f654:	08011852 	.word	0x08011852
 800f658:	7ff00000 	.word	0x7ff00000
 800f65c:	0801184c 	.word	0x0801184c
 800f660:	08011843 	.word	0x08011843
 800f664:	08011851 	.word	0x08011851
 800f668:	3ff80000 	.word	0x3ff80000
 800f66c:	08011700 	.word	0x08011700
 800f670:	080116c3 	.word	0x080116c3
 800f674:	2501      	movs	r5, #1
 800f676:	2300      	movs	r3, #0
 800f678:	9306      	str	r3, [sp, #24]
 800f67a:	9508      	str	r5, [sp, #32]
 800f67c:	f04f 33ff 	mov.w	r3, #4294967295
 800f680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f684:	2200      	movs	r2, #0
 800f686:	2312      	movs	r3, #18
 800f688:	e7b0      	b.n	800f5ec <_dtoa_r+0x26c>
 800f68a:	2301      	movs	r3, #1
 800f68c:	9308      	str	r3, [sp, #32]
 800f68e:	e7f5      	b.n	800f67c <_dtoa_r+0x2fc>
 800f690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f696:	e7b8      	b.n	800f60a <_dtoa_r+0x28a>
 800f698:	3101      	adds	r1, #1
 800f69a:	6041      	str	r1, [r0, #4]
 800f69c:	0052      	lsls	r2, r2, #1
 800f69e:	e7b8      	b.n	800f612 <_dtoa_r+0x292>
 800f6a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a2:	9a01      	ldr	r2, [sp, #4]
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	9b03      	ldr	r3, [sp, #12]
 800f6a8:	2b0e      	cmp	r3, #14
 800f6aa:	f200 809d 	bhi.w	800f7e8 <_dtoa_r+0x468>
 800f6ae:	2d00      	cmp	r5, #0
 800f6b0:	f000 809a 	beq.w	800f7e8 <_dtoa_r+0x468>
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	dd32      	ble.n	800f720 <_dtoa_r+0x3a0>
 800f6ba:	4ab7      	ldr	r2, [pc, #732]	; (800f998 <_dtoa_r+0x618>)
 800f6bc:	f003 030f 	and.w	r3, r3, #15
 800f6c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f6c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6c8:	9b00      	ldr	r3, [sp, #0]
 800f6ca:	05d8      	lsls	r0, r3, #23
 800f6cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f6d0:	d516      	bpl.n	800f700 <_dtoa_r+0x380>
 800f6d2:	4bb2      	ldr	r3, [pc, #712]	; (800f99c <_dtoa_r+0x61c>)
 800f6d4:	ec51 0b19 	vmov	r0, r1, d9
 800f6d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f6dc:	f7f1 f8d6 	bl	800088c <__aeabi_ddiv>
 800f6e0:	f007 070f 	and.w	r7, r7, #15
 800f6e4:	4682      	mov	sl, r0
 800f6e6:	468b      	mov	fp, r1
 800f6e8:	2503      	movs	r5, #3
 800f6ea:	4eac      	ldr	r6, [pc, #688]	; (800f99c <_dtoa_r+0x61c>)
 800f6ec:	b957      	cbnz	r7, 800f704 <_dtoa_r+0x384>
 800f6ee:	4642      	mov	r2, r8
 800f6f0:	464b      	mov	r3, r9
 800f6f2:	4650      	mov	r0, sl
 800f6f4:	4659      	mov	r1, fp
 800f6f6:	f7f1 f8c9 	bl	800088c <__aeabi_ddiv>
 800f6fa:	4682      	mov	sl, r0
 800f6fc:	468b      	mov	fp, r1
 800f6fe:	e028      	b.n	800f752 <_dtoa_r+0x3d2>
 800f700:	2502      	movs	r5, #2
 800f702:	e7f2      	b.n	800f6ea <_dtoa_r+0x36a>
 800f704:	07f9      	lsls	r1, r7, #31
 800f706:	d508      	bpl.n	800f71a <_dtoa_r+0x39a>
 800f708:	4640      	mov	r0, r8
 800f70a:	4649      	mov	r1, r9
 800f70c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f710:	f7f0 ff92 	bl	8000638 <__aeabi_dmul>
 800f714:	3501      	adds	r5, #1
 800f716:	4680      	mov	r8, r0
 800f718:	4689      	mov	r9, r1
 800f71a:	107f      	asrs	r7, r7, #1
 800f71c:	3608      	adds	r6, #8
 800f71e:	e7e5      	b.n	800f6ec <_dtoa_r+0x36c>
 800f720:	f000 809b 	beq.w	800f85a <_dtoa_r+0x4da>
 800f724:	9b00      	ldr	r3, [sp, #0]
 800f726:	4f9d      	ldr	r7, [pc, #628]	; (800f99c <_dtoa_r+0x61c>)
 800f728:	425e      	negs	r6, r3
 800f72a:	4b9b      	ldr	r3, [pc, #620]	; (800f998 <_dtoa_r+0x618>)
 800f72c:	f006 020f 	and.w	r2, r6, #15
 800f730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	ec51 0b19 	vmov	r0, r1, d9
 800f73c:	f7f0 ff7c 	bl	8000638 <__aeabi_dmul>
 800f740:	1136      	asrs	r6, r6, #4
 800f742:	4682      	mov	sl, r0
 800f744:	468b      	mov	fp, r1
 800f746:	2300      	movs	r3, #0
 800f748:	2502      	movs	r5, #2
 800f74a:	2e00      	cmp	r6, #0
 800f74c:	d17a      	bne.n	800f844 <_dtoa_r+0x4c4>
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1d3      	bne.n	800f6fa <_dtoa_r+0x37a>
 800f752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f754:	2b00      	cmp	r3, #0
 800f756:	f000 8082 	beq.w	800f85e <_dtoa_r+0x4de>
 800f75a:	4b91      	ldr	r3, [pc, #580]	; (800f9a0 <_dtoa_r+0x620>)
 800f75c:	2200      	movs	r2, #0
 800f75e:	4650      	mov	r0, sl
 800f760:	4659      	mov	r1, fp
 800f762:	f7f1 f9db 	bl	8000b1c <__aeabi_dcmplt>
 800f766:	2800      	cmp	r0, #0
 800f768:	d079      	beq.n	800f85e <_dtoa_r+0x4de>
 800f76a:	9b03      	ldr	r3, [sp, #12]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d076      	beq.n	800f85e <_dtoa_r+0x4de>
 800f770:	9b02      	ldr	r3, [sp, #8]
 800f772:	2b00      	cmp	r3, #0
 800f774:	dd36      	ble.n	800f7e4 <_dtoa_r+0x464>
 800f776:	9b00      	ldr	r3, [sp, #0]
 800f778:	4650      	mov	r0, sl
 800f77a:	4659      	mov	r1, fp
 800f77c:	1e5f      	subs	r7, r3, #1
 800f77e:	2200      	movs	r2, #0
 800f780:	4b88      	ldr	r3, [pc, #544]	; (800f9a4 <_dtoa_r+0x624>)
 800f782:	f7f0 ff59 	bl	8000638 <__aeabi_dmul>
 800f786:	9e02      	ldr	r6, [sp, #8]
 800f788:	4682      	mov	sl, r0
 800f78a:	468b      	mov	fp, r1
 800f78c:	3501      	adds	r5, #1
 800f78e:	4628      	mov	r0, r5
 800f790:	f7f0 fee8 	bl	8000564 <__aeabi_i2d>
 800f794:	4652      	mov	r2, sl
 800f796:	465b      	mov	r3, fp
 800f798:	f7f0 ff4e 	bl	8000638 <__aeabi_dmul>
 800f79c:	4b82      	ldr	r3, [pc, #520]	; (800f9a8 <_dtoa_r+0x628>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f7f0 fd94 	bl	80002cc <__adddf3>
 800f7a4:	46d0      	mov	r8, sl
 800f7a6:	46d9      	mov	r9, fp
 800f7a8:	4682      	mov	sl, r0
 800f7aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f7ae:	2e00      	cmp	r6, #0
 800f7b0:	d158      	bne.n	800f864 <_dtoa_r+0x4e4>
 800f7b2:	4b7e      	ldr	r3, [pc, #504]	; (800f9ac <_dtoa_r+0x62c>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f0 fd85 	bl	80002c8 <__aeabi_dsub>
 800f7be:	4652      	mov	r2, sl
 800f7c0:	465b      	mov	r3, fp
 800f7c2:	4680      	mov	r8, r0
 800f7c4:	4689      	mov	r9, r1
 800f7c6:	f7f1 f9c7 	bl	8000b58 <__aeabi_dcmpgt>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	f040 8295 	bne.w	800fcfa <_dtoa_r+0x97a>
 800f7d0:	4652      	mov	r2, sl
 800f7d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	4649      	mov	r1, r9
 800f7da:	f7f1 f99f 	bl	8000b1c <__aeabi_dcmplt>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f040 8289 	bne.w	800fcf6 <_dtoa_r+0x976>
 800f7e4:	ec5b ab19 	vmov	sl, fp, d9
 800f7e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f2c0 8148 	blt.w	800fa80 <_dtoa_r+0x700>
 800f7f0:	9a00      	ldr	r2, [sp, #0]
 800f7f2:	2a0e      	cmp	r2, #14
 800f7f4:	f300 8144 	bgt.w	800fa80 <_dtoa_r+0x700>
 800f7f8:	4b67      	ldr	r3, [pc, #412]	; (800f998 <_dtoa_r+0x618>)
 800f7fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f804:	2b00      	cmp	r3, #0
 800f806:	f280 80d5 	bge.w	800f9b4 <_dtoa_r+0x634>
 800f80a:	9b03      	ldr	r3, [sp, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f300 80d1 	bgt.w	800f9b4 <_dtoa_r+0x634>
 800f812:	f040 826f 	bne.w	800fcf4 <_dtoa_r+0x974>
 800f816:	4b65      	ldr	r3, [pc, #404]	; (800f9ac <_dtoa_r+0x62c>)
 800f818:	2200      	movs	r2, #0
 800f81a:	4640      	mov	r0, r8
 800f81c:	4649      	mov	r1, r9
 800f81e:	f7f0 ff0b 	bl	8000638 <__aeabi_dmul>
 800f822:	4652      	mov	r2, sl
 800f824:	465b      	mov	r3, fp
 800f826:	f7f1 f98d 	bl	8000b44 <__aeabi_dcmpge>
 800f82a:	9e03      	ldr	r6, [sp, #12]
 800f82c:	4637      	mov	r7, r6
 800f82e:	2800      	cmp	r0, #0
 800f830:	f040 8245 	bne.w	800fcbe <_dtoa_r+0x93e>
 800f834:	9d01      	ldr	r5, [sp, #4]
 800f836:	2331      	movs	r3, #49	; 0x31
 800f838:	f805 3b01 	strb.w	r3, [r5], #1
 800f83c:	9b00      	ldr	r3, [sp, #0]
 800f83e:	3301      	adds	r3, #1
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	e240      	b.n	800fcc6 <_dtoa_r+0x946>
 800f844:	07f2      	lsls	r2, r6, #31
 800f846:	d505      	bpl.n	800f854 <_dtoa_r+0x4d4>
 800f848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f84c:	f7f0 fef4 	bl	8000638 <__aeabi_dmul>
 800f850:	3501      	adds	r5, #1
 800f852:	2301      	movs	r3, #1
 800f854:	1076      	asrs	r6, r6, #1
 800f856:	3708      	adds	r7, #8
 800f858:	e777      	b.n	800f74a <_dtoa_r+0x3ca>
 800f85a:	2502      	movs	r5, #2
 800f85c:	e779      	b.n	800f752 <_dtoa_r+0x3d2>
 800f85e:	9f00      	ldr	r7, [sp, #0]
 800f860:	9e03      	ldr	r6, [sp, #12]
 800f862:	e794      	b.n	800f78e <_dtoa_r+0x40e>
 800f864:	9901      	ldr	r1, [sp, #4]
 800f866:	4b4c      	ldr	r3, [pc, #304]	; (800f998 <_dtoa_r+0x618>)
 800f868:	4431      	add	r1, r6
 800f86a:	910d      	str	r1, [sp, #52]	; 0x34
 800f86c:	9908      	ldr	r1, [sp, #32]
 800f86e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f876:	2900      	cmp	r1, #0
 800f878:	d043      	beq.n	800f902 <_dtoa_r+0x582>
 800f87a:	494d      	ldr	r1, [pc, #308]	; (800f9b0 <_dtoa_r+0x630>)
 800f87c:	2000      	movs	r0, #0
 800f87e:	f7f1 f805 	bl	800088c <__aeabi_ddiv>
 800f882:	4652      	mov	r2, sl
 800f884:	465b      	mov	r3, fp
 800f886:	f7f0 fd1f 	bl	80002c8 <__aeabi_dsub>
 800f88a:	9d01      	ldr	r5, [sp, #4]
 800f88c:	4682      	mov	sl, r0
 800f88e:	468b      	mov	fp, r1
 800f890:	4649      	mov	r1, r9
 800f892:	4640      	mov	r0, r8
 800f894:	f7f1 f980 	bl	8000b98 <__aeabi_d2iz>
 800f898:	4606      	mov	r6, r0
 800f89a:	f7f0 fe63 	bl	8000564 <__aeabi_i2d>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4640      	mov	r0, r8
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	f7f0 fd0f 	bl	80002c8 <__aeabi_dsub>
 800f8aa:	3630      	adds	r6, #48	; 0x30
 800f8ac:	f805 6b01 	strb.w	r6, [r5], #1
 800f8b0:	4652      	mov	r2, sl
 800f8b2:	465b      	mov	r3, fp
 800f8b4:	4680      	mov	r8, r0
 800f8b6:	4689      	mov	r9, r1
 800f8b8:	f7f1 f930 	bl	8000b1c <__aeabi_dcmplt>
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d163      	bne.n	800f988 <_dtoa_r+0x608>
 800f8c0:	4642      	mov	r2, r8
 800f8c2:	464b      	mov	r3, r9
 800f8c4:	4936      	ldr	r1, [pc, #216]	; (800f9a0 <_dtoa_r+0x620>)
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	f7f0 fcfe 	bl	80002c8 <__aeabi_dsub>
 800f8cc:	4652      	mov	r2, sl
 800f8ce:	465b      	mov	r3, fp
 800f8d0:	f7f1 f924 	bl	8000b1c <__aeabi_dcmplt>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f040 80b5 	bne.w	800fa44 <_dtoa_r+0x6c4>
 800f8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8dc:	429d      	cmp	r5, r3
 800f8de:	d081      	beq.n	800f7e4 <_dtoa_r+0x464>
 800f8e0:	4b30      	ldr	r3, [pc, #192]	; (800f9a4 <_dtoa_r+0x624>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	4650      	mov	r0, sl
 800f8e6:	4659      	mov	r1, fp
 800f8e8:	f7f0 fea6 	bl	8000638 <__aeabi_dmul>
 800f8ec:	4b2d      	ldr	r3, [pc, #180]	; (800f9a4 <_dtoa_r+0x624>)
 800f8ee:	4682      	mov	sl, r0
 800f8f0:	468b      	mov	fp, r1
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	4649      	mov	r1, r9
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f7f0 fe9e 	bl	8000638 <__aeabi_dmul>
 800f8fc:	4680      	mov	r8, r0
 800f8fe:	4689      	mov	r9, r1
 800f900:	e7c6      	b.n	800f890 <_dtoa_r+0x510>
 800f902:	4650      	mov	r0, sl
 800f904:	4659      	mov	r1, fp
 800f906:	f7f0 fe97 	bl	8000638 <__aeabi_dmul>
 800f90a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f90c:	9d01      	ldr	r5, [sp, #4]
 800f90e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f910:	4682      	mov	sl, r0
 800f912:	468b      	mov	fp, r1
 800f914:	4649      	mov	r1, r9
 800f916:	4640      	mov	r0, r8
 800f918:	f7f1 f93e 	bl	8000b98 <__aeabi_d2iz>
 800f91c:	4606      	mov	r6, r0
 800f91e:	f7f0 fe21 	bl	8000564 <__aeabi_i2d>
 800f922:	3630      	adds	r6, #48	; 0x30
 800f924:	4602      	mov	r2, r0
 800f926:	460b      	mov	r3, r1
 800f928:	4640      	mov	r0, r8
 800f92a:	4649      	mov	r1, r9
 800f92c:	f7f0 fccc 	bl	80002c8 <__aeabi_dsub>
 800f930:	f805 6b01 	strb.w	r6, [r5], #1
 800f934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f936:	429d      	cmp	r5, r3
 800f938:	4680      	mov	r8, r0
 800f93a:	4689      	mov	r9, r1
 800f93c:	f04f 0200 	mov.w	r2, #0
 800f940:	d124      	bne.n	800f98c <_dtoa_r+0x60c>
 800f942:	4b1b      	ldr	r3, [pc, #108]	; (800f9b0 <_dtoa_r+0x630>)
 800f944:	4650      	mov	r0, sl
 800f946:	4659      	mov	r1, fp
 800f948:	f7f0 fcc0 	bl	80002cc <__adddf3>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	4640      	mov	r0, r8
 800f952:	4649      	mov	r1, r9
 800f954:	f7f1 f900 	bl	8000b58 <__aeabi_dcmpgt>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d173      	bne.n	800fa44 <_dtoa_r+0x6c4>
 800f95c:	4652      	mov	r2, sl
 800f95e:	465b      	mov	r3, fp
 800f960:	4913      	ldr	r1, [pc, #76]	; (800f9b0 <_dtoa_r+0x630>)
 800f962:	2000      	movs	r0, #0
 800f964:	f7f0 fcb0 	bl	80002c8 <__aeabi_dsub>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4640      	mov	r0, r8
 800f96e:	4649      	mov	r1, r9
 800f970:	f7f1 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 800f974:	2800      	cmp	r0, #0
 800f976:	f43f af35 	beq.w	800f7e4 <_dtoa_r+0x464>
 800f97a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f97c:	1e6b      	subs	r3, r5, #1
 800f97e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f984:	2b30      	cmp	r3, #48	; 0x30
 800f986:	d0f8      	beq.n	800f97a <_dtoa_r+0x5fa>
 800f988:	9700      	str	r7, [sp, #0]
 800f98a:	e049      	b.n	800fa20 <_dtoa_r+0x6a0>
 800f98c:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <_dtoa_r+0x624>)
 800f98e:	f7f0 fe53 	bl	8000638 <__aeabi_dmul>
 800f992:	4680      	mov	r8, r0
 800f994:	4689      	mov	r9, r1
 800f996:	e7bd      	b.n	800f914 <_dtoa_r+0x594>
 800f998:	08011700 	.word	0x08011700
 800f99c:	080116d8 	.word	0x080116d8
 800f9a0:	3ff00000 	.word	0x3ff00000
 800f9a4:	40240000 	.word	0x40240000
 800f9a8:	401c0000 	.word	0x401c0000
 800f9ac:	40140000 	.word	0x40140000
 800f9b0:	3fe00000 	.word	0x3fe00000
 800f9b4:	9d01      	ldr	r5, [sp, #4]
 800f9b6:	4656      	mov	r6, sl
 800f9b8:	465f      	mov	r7, fp
 800f9ba:	4642      	mov	r2, r8
 800f9bc:	464b      	mov	r3, r9
 800f9be:	4630      	mov	r0, r6
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	f7f0 ff63 	bl	800088c <__aeabi_ddiv>
 800f9c6:	f7f1 f8e7 	bl	8000b98 <__aeabi_d2iz>
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	f7f0 fdca 	bl	8000564 <__aeabi_i2d>
 800f9d0:	4642      	mov	r2, r8
 800f9d2:	464b      	mov	r3, r9
 800f9d4:	f7f0 fe30 	bl	8000638 <__aeabi_dmul>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4630      	mov	r0, r6
 800f9de:	4639      	mov	r1, r7
 800f9e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f9e4:	f7f0 fc70 	bl	80002c8 <__aeabi_dsub>
 800f9e8:	f805 6b01 	strb.w	r6, [r5], #1
 800f9ec:	9e01      	ldr	r6, [sp, #4]
 800f9ee:	9f03      	ldr	r7, [sp, #12]
 800f9f0:	1bae      	subs	r6, r5, r6
 800f9f2:	42b7      	cmp	r7, r6
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	d135      	bne.n	800fa66 <_dtoa_r+0x6e6>
 800f9fa:	f7f0 fc67 	bl	80002cc <__adddf3>
 800f9fe:	4642      	mov	r2, r8
 800fa00:	464b      	mov	r3, r9
 800fa02:	4606      	mov	r6, r0
 800fa04:	460f      	mov	r7, r1
 800fa06:	f7f1 f8a7 	bl	8000b58 <__aeabi_dcmpgt>
 800fa0a:	b9d0      	cbnz	r0, 800fa42 <_dtoa_r+0x6c2>
 800fa0c:	4642      	mov	r2, r8
 800fa0e:	464b      	mov	r3, r9
 800fa10:	4630      	mov	r0, r6
 800fa12:	4639      	mov	r1, r7
 800fa14:	f7f1 f878 	bl	8000b08 <__aeabi_dcmpeq>
 800fa18:	b110      	cbz	r0, 800fa20 <_dtoa_r+0x6a0>
 800fa1a:	f01a 0f01 	tst.w	sl, #1
 800fa1e:	d110      	bne.n	800fa42 <_dtoa_r+0x6c2>
 800fa20:	4620      	mov	r0, r4
 800fa22:	ee18 1a10 	vmov	r1, s16
 800fa26:	f7fe fc3b 	bl	800e2a0 <_Bfree>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	9800      	ldr	r0, [sp, #0]
 800fa2e:	702b      	strb	r3, [r5, #0]
 800fa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa32:	3001      	adds	r0, #1
 800fa34:	6018      	str	r0, [r3, #0]
 800fa36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f43f acf1 	beq.w	800f420 <_dtoa_r+0xa0>
 800fa3e:	601d      	str	r5, [r3, #0]
 800fa40:	e4ee      	b.n	800f420 <_dtoa_r+0xa0>
 800fa42:	9f00      	ldr	r7, [sp, #0]
 800fa44:	462b      	mov	r3, r5
 800fa46:	461d      	mov	r5, r3
 800fa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa4c:	2a39      	cmp	r2, #57	; 0x39
 800fa4e:	d106      	bne.n	800fa5e <_dtoa_r+0x6de>
 800fa50:	9a01      	ldr	r2, [sp, #4]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d1f7      	bne.n	800fa46 <_dtoa_r+0x6c6>
 800fa56:	9901      	ldr	r1, [sp, #4]
 800fa58:	2230      	movs	r2, #48	; 0x30
 800fa5a:	3701      	adds	r7, #1
 800fa5c:	700a      	strb	r2, [r1, #0]
 800fa5e:	781a      	ldrb	r2, [r3, #0]
 800fa60:	3201      	adds	r2, #1
 800fa62:	701a      	strb	r2, [r3, #0]
 800fa64:	e790      	b.n	800f988 <_dtoa_r+0x608>
 800fa66:	4ba6      	ldr	r3, [pc, #664]	; (800fd00 <_dtoa_r+0x980>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f7f0 fde5 	bl	8000638 <__aeabi_dmul>
 800fa6e:	2200      	movs	r2, #0
 800fa70:	2300      	movs	r3, #0
 800fa72:	4606      	mov	r6, r0
 800fa74:	460f      	mov	r7, r1
 800fa76:	f7f1 f847 	bl	8000b08 <__aeabi_dcmpeq>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d09d      	beq.n	800f9ba <_dtoa_r+0x63a>
 800fa7e:	e7cf      	b.n	800fa20 <_dtoa_r+0x6a0>
 800fa80:	9a08      	ldr	r2, [sp, #32]
 800fa82:	2a00      	cmp	r2, #0
 800fa84:	f000 80d7 	beq.w	800fc36 <_dtoa_r+0x8b6>
 800fa88:	9a06      	ldr	r2, [sp, #24]
 800fa8a:	2a01      	cmp	r2, #1
 800fa8c:	f300 80ba 	bgt.w	800fc04 <_dtoa_r+0x884>
 800fa90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa92:	2a00      	cmp	r2, #0
 800fa94:	f000 80b2 	beq.w	800fbfc <_dtoa_r+0x87c>
 800fa98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fa9c:	9e07      	ldr	r6, [sp, #28]
 800fa9e:	9d04      	ldr	r5, [sp, #16]
 800faa0:	9a04      	ldr	r2, [sp, #16]
 800faa2:	441a      	add	r2, r3
 800faa4:	9204      	str	r2, [sp, #16]
 800faa6:	9a05      	ldr	r2, [sp, #20]
 800faa8:	2101      	movs	r1, #1
 800faaa:	441a      	add	r2, r3
 800faac:	4620      	mov	r0, r4
 800faae:	9205      	str	r2, [sp, #20]
 800fab0:	f7fe fcae 	bl	800e410 <__i2b>
 800fab4:	4607      	mov	r7, r0
 800fab6:	2d00      	cmp	r5, #0
 800fab8:	dd0c      	ble.n	800fad4 <_dtoa_r+0x754>
 800faba:	9b05      	ldr	r3, [sp, #20]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	dd09      	ble.n	800fad4 <_dtoa_r+0x754>
 800fac0:	42ab      	cmp	r3, r5
 800fac2:	9a04      	ldr	r2, [sp, #16]
 800fac4:	bfa8      	it	ge
 800fac6:	462b      	movge	r3, r5
 800fac8:	1ad2      	subs	r2, r2, r3
 800faca:	9204      	str	r2, [sp, #16]
 800facc:	9a05      	ldr	r2, [sp, #20]
 800face:	1aed      	subs	r5, r5, r3
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	9305      	str	r3, [sp, #20]
 800fad4:	9b07      	ldr	r3, [sp, #28]
 800fad6:	b31b      	cbz	r3, 800fb20 <_dtoa_r+0x7a0>
 800fad8:	9b08      	ldr	r3, [sp, #32]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 80af 	beq.w	800fc3e <_dtoa_r+0x8be>
 800fae0:	2e00      	cmp	r6, #0
 800fae2:	dd13      	ble.n	800fb0c <_dtoa_r+0x78c>
 800fae4:	4639      	mov	r1, r7
 800fae6:	4632      	mov	r2, r6
 800fae8:	4620      	mov	r0, r4
 800faea:	f7fe fd51 	bl	800e590 <__pow5mult>
 800faee:	ee18 2a10 	vmov	r2, s16
 800faf2:	4601      	mov	r1, r0
 800faf4:	4607      	mov	r7, r0
 800faf6:	4620      	mov	r0, r4
 800faf8:	f7fe fca0 	bl	800e43c <__multiply>
 800fafc:	ee18 1a10 	vmov	r1, s16
 800fb00:	4680      	mov	r8, r0
 800fb02:	4620      	mov	r0, r4
 800fb04:	f7fe fbcc 	bl	800e2a0 <_Bfree>
 800fb08:	ee08 8a10 	vmov	s16, r8
 800fb0c:	9b07      	ldr	r3, [sp, #28]
 800fb0e:	1b9a      	subs	r2, r3, r6
 800fb10:	d006      	beq.n	800fb20 <_dtoa_r+0x7a0>
 800fb12:	ee18 1a10 	vmov	r1, s16
 800fb16:	4620      	mov	r0, r4
 800fb18:	f7fe fd3a 	bl	800e590 <__pow5mult>
 800fb1c:	ee08 0a10 	vmov	s16, r0
 800fb20:	2101      	movs	r1, #1
 800fb22:	4620      	mov	r0, r4
 800fb24:	f7fe fc74 	bl	800e410 <__i2b>
 800fb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	f340 8088 	ble.w	800fc42 <_dtoa_r+0x8c2>
 800fb32:	461a      	mov	r2, r3
 800fb34:	4601      	mov	r1, r0
 800fb36:	4620      	mov	r0, r4
 800fb38:	f7fe fd2a 	bl	800e590 <__pow5mult>
 800fb3c:	9b06      	ldr	r3, [sp, #24]
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	4606      	mov	r6, r0
 800fb42:	f340 8081 	ble.w	800fc48 <_dtoa_r+0x8c8>
 800fb46:	f04f 0800 	mov.w	r8, #0
 800fb4a:	6933      	ldr	r3, [r6, #16]
 800fb4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fb50:	6918      	ldr	r0, [r3, #16]
 800fb52:	f7fe fc0d 	bl	800e370 <__hi0bits>
 800fb56:	f1c0 0020 	rsb	r0, r0, #32
 800fb5a:	9b05      	ldr	r3, [sp, #20]
 800fb5c:	4418      	add	r0, r3
 800fb5e:	f010 001f 	ands.w	r0, r0, #31
 800fb62:	f000 8092 	beq.w	800fc8a <_dtoa_r+0x90a>
 800fb66:	f1c0 0320 	rsb	r3, r0, #32
 800fb6a:	2b04      	cmp	r3, #4
 800fb6c:	f340 808a 	ble.w	800fc84 <_dtoa_r+0x904>
 800fb70:	f1c0 001c 	rsb	r0, r0, #28
 800fb74:	9b04      	ldr	r3, [sp, #16]
 800fb76:	4403      	add	r3, r0
 800fb78:	9304      	str	r3, [sp, #16]
 800fb7a:	9b05      	ldr	r3, [sp, #20]
 800fb7c:	4403      	add	r3, r0
 800fb7e:	4405      	add	r5, r0
 800fb80:	9305      	str	r3, [sp, #20]
 800fb82:	9b04      	ldr	r3, [sp, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dd07      	ble.n	800fb98 <_dtoa_r+0x818>
 800fb88:	ee18 1a10 	vmov	r1, s16
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f7fe fd58 	bl	800e644 <__lshift>
 800fb94:	ee08 0a10 	vmov	s16, r0
 800fb98:	9b05      	ldr	r3, [sp, #20]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	dd05      	ble.n	800fbaa <_dtoa_r+0x82a>
 800fb9e:	4631      	mov	r1, r6
 800fba0:	461a      	mov	r2, r3
 800fba2:	4620      	mov	r0, r4
 800fba4:	f7fe fd4e 	bl	800e644 <__lshift>
 800fba8:	4606      	mov	r6, r0
 800fbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d06e      	beq.n	800fc8e <_dtoa_r+0x90e>
 800fbb0:	ee18 0a10 	vmov	r0, s16
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	f7fe fdb5 	bl	800e724 <__mcmp>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	da67      	bge.n	800fc8e <_dtoa_r+0x90e>
 800fbbe:	9b00      	ldr	r3, [sp, #0]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	ee18 1a10 	vmov	r1, s16
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	220a      	movs	r2, #10
 800fbca:	2300      	movs	r3, #0
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f7fe fb89 	bl	800e2e4 <__multadd>
 800fbd2:	9b08      	ldr	r3, [sp, #32]
 800fbd4:	ee08 0a10 	vmov	s16, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f000 81b1 	beq.w	800ff40 <_dtoa_r+0xbc0>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	220a      	movs	r2, #10
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f7fe fb7d 	bl	800e2e4 <__multadd>
 800fbea:	9b02      	ldr	r3, [sp, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	4607      	mov	r7, r0
 800fbf0:	f300 808e 	bgt.w	800fd10 <_dtoa_r+0x990>
 800fbf4:	9b06      	ldr	r3, [sp, #24]
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	dc51      	bgt.n	800fc9e <_dtoa_r+0x91e>
 800fbfa:	e089      	b.n	800fd10 <_dtoa_r+0x990>
 800fbfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc02:	e74b      	b.n	800fa9c <_dtoa_r+0x71c>
 800fc04:	9b03      	ldr	r3, [sp, #12]
 800fc06:	1e5e      	subs	r6, r3, #1
 800fc08:	9b07      	ldr	r3, [sp, #28]
 800fc0a:	42b3      	cmp	r3, r6
 800fc0c:	bfbf      	itttt	lt
 800fc0e:	9b07      	ldrlt	r3, [sp, #28]
 800fc10:	9607      	strlt	r6, [sp, #28]
 800fc12:	1af2      	sublt	r2, r6, r3
 800fc14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fc16:	bfb6      	itet	lt
 800fc18:	189b      	addlt	r3, r3, r2
 800fc1a:	1b9e      	subge	r6, r3, r6
 800fc1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fc1e:	9b03      	ldr	r3, [sp, #12]
 800fc20:	bfb8      	it	lt
 800fc22:	2600      	movlt	r6, #0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	bfb7      	itett	lt
 800fc28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fc2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fc30:	1a9d      	sublt	r5, r3, r2
 800fc32:	2300      	movlt	r3, #0
 800fc34:	e734      	b.n	800faa0 <_dtoa_r+0x720>
 800fc36:	9e07      	ldr	r6, [sp, #28]
 800fc38:	9d04      	ldr	r5, [sp, #16]
 800fc3a:	9f08      	ldr	r7, [sp, #32]
 800fc3c:	e73b      	b.n	800fab6 <_dtoa_r+0x736>
 800fc3e:	9a07      	ldr	r2, [sp, #28]
 800fc40:	e767      	b.n	800fb12 <_dtoa_r+0x792>
 800fc42:	9b06      	ldr	r3, [sp, #24]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	dc18      	bgt.n	800fc7a <_dtoa_r+0x8fa>
 800fc48:	f1ba 0f00 	cmp.w	sl, #0
 800fc4c:	d115      	bne.n	800fc7a <_dtoa_r+0x8fa>
 800fc4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc52:	b993      	cbnz	r3, 800fc7a <_dtoa_r+0x8fa>
 800fc54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fc58:	0d1b      	lsrs	r3, r3, #20
 800fc5a:	051b      	lsls	r3, r3, #20
 800fc5c:	b183      	cbz	r3, 800fc80 <_dtoa_r+0x900>
 800fc5e:	9b04      	ldr	r3, [sp, #16]
 800fc60:	3301      	adds	r3, #1
 800fc62:	9304      	str	r3, [sp, #16]
 800fc64:	9b05      	ldr	r3, [sp, #20]
 800fc66:	3301      	adds	r3, #1
 800fc68:	9305      	str	r3, [sp, #20]
 800fc6a:	f04f 0801 	mov.w	r8, #1
 800fc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f47f af6a 	bne.w	800fb4a <_dtoa_r+0x7ca>
 800fc76:	2001      	movs	r0, #1
 800fc78:	e76f      	b.n	800fb5a <_dtoa_r+0x7da>
 800fc7a:	f04f 0800 	mov.w	r8, #0
 800fc7e:	e7f6      	b.n	800fc6e <_dtoa_r+0x8ee>
 800fc80:	4698      	mov	r8, r3
 800fc82:	e7f4      	b.n	800fc6e <_dtoa_r+0x8ee>
 800fc84:	f43f af7d 	beq.w	800fb82 <_dtoa_r+0x802>
 800fc88:	4618      	mov	r0, r3
 800fc8a:	301c      	adds	r0, #28
 800fc8c:	e772      	b.n	800fb74 <_dtoa_r+0x7f4>
 800fc8e:	9b03      	ldr	r3, [sp, #12]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	dc37      	bgt.n	800fd04 <_dtoa_r+0x984>
 800fc94:	9b06      	ldr	r3, [sp, #24]
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	dd34      	ble.n	800fd04 <_dtoa_r+0x984>
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	9302      	str	r3, [sp, #8]
 800fc9e:	9b02      	ldr	r3, [sp, #8]
 800fca0:	b96b      	cbnz	r3, 800fcbe <_dtoa_r+0x93e>
 800fca2:	4631      	mov	r1, r6
 800fca4:	2205      	movs	r2, #5
 800fca6:	4620      	mov	r0, r4
 800fca8:	f7fe fb1c 	bl	800e2e4 <__multadd>
 800fcac:	4601      	mov	r1, r0
 800fcae:	4606      	mov	r6, r0
 800fcb0:	ee18 0a10 	vmov	r0, s16
 800fcb4:	f7fe fd36 	bl	800e724 <__mcmp>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	f73f adbb 	bgt.w	800f834 <_dtoa_r+0x4b4>
 800fcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcc0:	9d01      	ldr	r5, [sp, #4]
 800fcc2:	43db      	mvns	r3, r3
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	f04f 0800 	mov.w	r8, #0
 800fcca:	4631      	mov	r1, r6
 800fccc:	4620      	mov	r0, r4
 800fcce:	f7fe fae7 	bl	800e2a0 <_Bfree>
 800fcd2:	2f00      	cmp	r7, #0
 800fcd4:	f43f aea4 	beq.w	800fa20 <_dtoa_r+0x6a0>
 800fcd8:	f1b8 0f00 	cmp.w	r8, #0
 800fcdc:	d005      	beq.n	800fcea <_dtoa_r+0x96a>
 800fcde:	45b8      	cmp	r8, r7
 800fce0:	d003      	beq.n	800fcea <_dtoa_r+0x96a>
 800fce2:	4641      	mov	r1, r8
 800fce4:	4620      	mov	r0, r4
 800fce6:	f7fe fadb 	bl	800e2a0 <_Bfree>
 800fcea:	4639      	mov	r1, r7
 800fcec:	4620      	mov	r0, r4
 800fcee:	f7fe fad7 	bl	800e2a0 <_Bfree>
 800fcf2:	e695      	b.n	800fa20 <_dtoa_r+0x6a0>
 800fcf4:	2600      	movs	r6, #0
 800fcf6:	4637      	mov	r7, r6
 800fcf8:	e7e1      	b.n	800fcbe <_dtoa_r+0x93e>
 800fcfa:	9700      	str	r7, [sp, #0]
 800fcfc:	4637      	mov	r7, r6
 800fcfe:	e599      	b.n	800f834 <_dtoa_r+0x4b4>
 800fd00:	40240000 	.word	0x40240000
 800fd04:	9b08      	ldr	r3, [sp, #32]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 80ca 	beq.w	800fea0 <_dtoa_r+0xb20>
 800fd0c:	9b03      	ldr	r3, [sp, #12]
 800fd0e:	9302      	str	r3, [sp, #8]
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	dd05      	ble.n	800fd20 <_dtoa_r+0x9a0>
 800fd14:	4639      	mov	r1, r7
 800fd16:	462a      	mov	r2, r5
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f7fe fc93 	bl	800e644 <__lshift>
 800fd1e:	4607      	mov	r7, r0
 800fd20:	f1b8 0f00 	cmp.w	r8, #0
 800fd24:	d05b      	beq.n	800fdde <_dtoa_r+0xa5e>
 800fd26:	6879      	ldr	r1, [r7, #4]
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f7fe fa79 	bl	800e220 <_Balloc>
 800fd2e:	4605      	mov	r5, r0
 800fd30:	b928      	cbnz	r0, 800fd3e <_dtoa_r+0x9be>
 800fd32:	4b87      	ldr	r3, [pc, #540]	; (800ff50 <_dtoa_r+0xbd0>)
 800fd34:	4602      	mov	r2, r0
 800fd36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fd3a:	f7ff bb3b 	b.w	800f3b4 <_dtoa_r+0x34>
 800fd3e:	693a      	ldr	r2, [r7, #16]
 800fd40:	3202      	adds	r2, #2
 800fd42:	0092      	lsls	r2, r2, #2
 800fd44:	f107 010c 	add.w	r1, r7, #12
 800fd48:	300c      	adds	r0, #12
 800fd4a:	f7fd fd21 	bl	800d790 <memcpy>
 800fd4e:	2201      	movs	r2, #1
 800fd50:	4629      	mov	r1, r5
 800fd52:	4620      	mov	r0, r4
 800fd54:	f7fe fc76 	bl	800e644 <__lshift>
 800fd58:	9b01      	ldr	r3, [sp, #4]
 800fd5a:	f103 0901 	add.w	r9, r3, #1
 800fd5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	9305      	str	r3, [sp, #20]
 800fd66:	f00a 0301 	and.w	r3, sl, #1
 800fd6a:	46b8      	mov	r8, r7
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	4607      	mov	r7, r0
 800fd70:	4631      	mov	r1, r6
 800fd72:	ee18 0a10 	vmov	r0, s16
 800fd76:	f7ff fa75 	bl	800f264 <quorem>
 800fd7a:	4641      	mov	r1, r8
 800fd7c:	9002      	str	r0, [sp, #8]
 800fd7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fd82:	ee18 0a10 	vmov	r0, s16
 800fd86:	f7fe fccd 	bl	800e724 <__mcmp>
 800fd8a:	463a      	mov	r2, r7
 800fd8c:	9003      	str	r0, [sp, #12]
 800fd8e:	4631      	mov	r1, r6
 800fd90:	4620      	mov	r0, r4
 800fd92:	f7fe fce3 	bl	800e75c <__mdiff>
 800fd96:	68c2      	ldr	r2, [r0, #12]
 800fd98:	f109 3bff 	add.w	fp, r9, #4294967295
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	bb02      	cbnz	r2, 800fde2 <_dtoa_r+0xa62>
 800fda0:	4601      	mov	r1, r0
 800fda2:	ee18 0a10 	vmov	r0, s16
 800fda6:	f7fe fcbd 	bl	800e724 <__mcmp>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	4629      	mov	r1, r5
 800fdae:	4620      	mov	r0, r4
 800fdb0:	9207      	str	r2, [sp, #28]
 800fdb2:	f7fe fa75 	bl	800e2a0 <_Bfree>
 800fdb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fdba:	ea43 0102 	orr.w	r1, r3, r2
 800fdbe:	9b04      	ldr	r3, [sp, #16]
 800fdc0:	430b      	orrs	r3, r1
 800fdc2:	464d      	mov	r5, r9
 800fdc4:	d10f      	bne.n	800fde6 <_dtoa_r+0xa66>
 800fdc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fdca:	d02a      	beq.n	800fe22 <_dtoa_r+0xaa2>
 800fdcc:	9b03      	ldr	r3, [sp, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	dd02      	ble.n	800fdd8 <_dtoa_r+0xa58>
 800fdd2:	9b02      	ldr	r3, [sp, #8]
 800fdd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fdd8:	f88b a000 	strb.w	sl, [fp]
 800fddc:	e775      	b.n	800fcca <_dtoa_r+0x94a>
 800fdde:	4638      	mov	r0, r7
 800fde0:	e7ba      	b.n	800fd58 <_dtoa_r+0x9d8>
 800fde2:	2201      	movs	r2, #1
 800fde4:	e7e2      	b.n	800fdac <_dtoa_r+0xa2c>
 800fde6:	9b03      	ldr	r3, [sp, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	db04      	blt.n	800fdf6 <_dtoa_r+0xa76>
 800fdec:	9906      	ldr	r1, [sp, #24]
 800fdee:	430b      	orrs	r3, r1
 800fdf0:	9904      	ldr	r1, [sp, #16]
 800fdf2:	430b      	orrs	r3, r1
 800fdf4:	d122      	bne.n	800fe3c <_dtoa_r+0xabc>
 800fdf6:	2a00      	cmp	r2, #0
 800fdf8:	ddee      	ble.n	800fdd8 <_dtoa_r+0xa58>
 800fdfa:	ee18 1a10 	vmov	r1, s16
 800fdfe:	2201      	movs	r2, #1
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7fe fc1f 	bl	800e644 <__lshift>
 800fe06:	4631      	mov	r1, r6
 800fe08:	ee08 0a10 	vmov	s16, r0
 800fe0c:	f7fe fc8a 	bl	800e724 <__mcmp>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	dc03      	bgt.n	800fe1c <_dtoa_r+0xa9c>
 800fe14:	d1e0      	bne.n	800fdd8 <_dtoa_r+0xa58>
 800fe16:	f01a 0f01 	tst.w	sl, #1
 800fe1a:	d0dd      	beq.n	800fdd8 <_dtoa_r+0xa58>
 800fe1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fe20:	d1d7      	bne.n	800fdd2 <_dtoa_r+0xa52>
 800fe22:	2339      	movs	r3, #57	; 0x39
 800fe24:	f88b 3000 	strb.w	r3, [fp]
 800fe28:	462b      	mov	r3, r5
 800fe2a:	461d      	mov	r5, r3
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fe32:	2a39      	cmp	r2, #57	; 0x39
 800fe34:	d071      	beq.n	800ff1a <_dtoa_r+0xb9a>
 800fe36:	3201      	adds	r2, #1
 800fe38:	701a      	strb	r2, [r3, #0]
 800fe3a:	e746      	b.n	800fcca <_dtoa_r+0x94a>
 800fe3c:	2a00      	cmp	r2, #0
 800fe3e:	dd07      	ble.n	800fe50 <_dtoa_r+0xad0>
 800fe40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fe44:	d0ed      	beq.n	800fe22 <_dtoa_r+0xaa2>
 800fe46:	f10a 0301 	add.w	r3, sl, #1
 800fe4a:	f88b 3000 	strb.w	r3, [fp]
 800fe4e:	e73c      	b.n	800fcca <_dtoa_r+0x94a>
 800fe50:	9b05      	ldr	r3, [sp, #20]
 800fe52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fe56:	4599      	cmp	r9, r3
 800fe58:	d047      	beq.n	800feea <_dtoa_r+0xb6a>
 800fe5a:	ee18 1a10 	vmov	r1, s16
 800fe5e:	2300      	movs	r3, #0
 800fe60:	220a      	movs	r2, #10
 800fe62:	4620      	mov	r0, r4
 800fe64:	f7fe fa3e 	bl	800e2e4 <__multadd>
 800fe68:	45b8      	cmp	r8, r7
 800fe6a:	ee08 0a10 	vmov	s16, r0
 800fe6e:	f04f 0300 	mov.w	r3, #0
 800fe72:	f04f 020a 	mov.w	r2, #10
 800fe76:	4641      	mov	r1, r8
 800fe78:	4620      	mov	r0, r4
 800fe7a:	d106      	bne.n	800fe8a <_dtoa_r+0xb0a>
 800fe7c:	f7fe fa32 	bl	800e2e4 <__multadd>
 800fe80:	4680      	mov	r8, r0
 800fe82:	4607      	mov	r7, r0
 800fe84:	f109 0901 	add.w	r9, r9, #1
 800fe88:	e772      	b.n	800fd70 <_dtoa_r+0x9f0>
 800fe8a:	f7fe fa2b 	bl	800e2e4 <__multadd>
 800fe8e:	4639      	mov	r1, r7
 800fe90:	4680      	mov	r8, r0
 800fe92:	2300      	movs	r3, #0
 800fe94:	220a      	movs	r2, #10
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7fe fa24 	bl	800e2e4 <__multadd>
 800fe9c:	4607      	mov	r7, r0
 800fe9e:	e7f1      	b.n	800fe84 <_dtoa_r+0xb04>
 800fea0:	9b03      	ldr	r3, [sp, #12]
 800fea2:	9302      	str	r3, [sp, #8]
 800fea4:	9d01      	ldr	r5, [sp, #4]
 800fea6:	ee18 0a10 	vmov	r0, s16
 800feaa:	4631      	mov	r1, r6
 800feac:	f7ff f9da 	bl	800f264 <quorem>
 800feb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800feb4:	9b01      	ldr	r3, [sp, #4]
 800feb6:	f805 ab01 	strb.w	sl, [r5], #1
 800feba:	1aea      	subs	r2, r5, r3
 800febc:	9b02      	ldr	r3, [sp, #8]
 800febe:	4293      	cmp	r3, r2
 800fec0:	dd09      	ble.n	800fed6 <_dtoa_r+0xb56>
 800fec2:	ee18 1a10 	vmov	r1, s16
 800fec6:	2300      	movs	r3, #0
 800fec8:	220a      	movs	r2, #10
 800feca:	4620      	mov	r0, r4
 800fecc:	f7fe fa0a 	bl	800e2e4 <__multadd>
 800fed0:	ee08 0a10 	vmov	s16, r0
 800fed4:	e7e7      	b.n	800fea6 <_dtoa_r+0xb26>
 800fed6:	9b02      	ldr	r3, [sp, #8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	bfc8      	it	gt
 800fedc:	461d      	movgt	r5, r3
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	bfd8      	it	le
 800fee2:	2501      	movle	r5, #1
 800fee4:	441d      	add	r5, r3
 800fee6:	f04f 0800 	mov.w	r8, #0
 800feea:	ee18 1a10 	vmov	r1, s16
 800feee:	2201      	movs	r2, #1
 800fef0:	4620      	mov	r0, r4
 800fef2:	f7fe fba7 	bl	800e644 <__lshift>
 800fef6:	4631      	mov	r1, r6
 800fef8:	ee08 0a10 	vmov	s16, r0
 800fefc:	f7fe fc12 	bl	800e724 <__mcmp>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	dc91      	bgt.n	800fe28 <_dtoa_r+0xaa8>
 800ff04:	d102      	bne.n	800ff0c <_dtoa_r+0xb8c>
 800ff06:	f01a 0f01 	tst.w	sl, #1
 800ff0a:	d18d      	bne.n	800fe28 <_dtoa_r+0xaa8>
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	461d      	mov	r5, r3
 800ff10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff14:	2a30      	cmp	r2, #48	; 0x30
 800ff16:	d0fa      	beq.n	800ff0e <_dtoa_r+0xb8e>
 800ff18:	e6d7      	b.n	800fcca <_dtoa_r+0x94a>
 800ff1a:	9a01      	ldr	r2, [sp, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d184      	bne.n	800fe2a <_dtoa_r+0xaaa>
 800ff20:	9b00      	ldr	r3, [sp, #0]
 800ff22:	3301      	adds	r3, #1
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	2331      	movs	r3, #49	; 0x31
 800ff28:	7013      	strb	r3, [r2, #0]
 800ff2a:	e6ce      	b.n	800fcca <_dtoa_r+0x94a>
 800ff2c:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <_dtoa_r+0xbd4>)
 800ff2e:	f7ff ba95 	b.w	800f45c <_dtoa_r+0xdc>
 800ff32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f47f aa6e 	bne.w	800f416 <_dtoa_r+0x96>
 800ff3a:	4b07      	ldr	r3, [pc, #28]	; (800ff58 <_dtoa_r+0xbd8>)
 800ff3c:	f7ff ba8e 	b.w	800f45c <_dtoa_r+0xdc>
 800ff40:	9b02      	ldr	r3, [sp, #8]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dcae      	bgt.n	800fea4 <_dtoa_r+0xb24>
 800ff46:	9b06      	ldr	r3, [sp, #24]
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	f73f aea8 	bgt.w	800fc9e <_dtoa_r+0x91e>
 800ff4e:	e7a9      	b.n	800fea4 <_dtoa_r+0xb24>
 800ff50:	080116c3 	.word	0x080116c3
 800ff54:	08011850 	.word	0x08011850
 800ff58:	08011843 	.word	0x08011843

0800ff5c <fiprintf>:
 800ff5c:	b40e      	push	{r1, r2, r3}
 800ff5e:	b503      	push	{r0, r1, lr}
 800ff60:	4601      	mov	r1, r0
 800ff62:	ab03      	add	r3, sp, #12
 800ff64:	4805      	ldr	r0, [pc, #20]	; (800ff7c <fiprintf+0x20>)
 800ff66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff6a:	6800      	ldr	r0, [r0, #0]
 800ff6c:	9301      	str	r3, [sp, #4]
 800ff6e:	f7fe fe19 	bl	800eba4 <_vfiprintf_r>
 800ff72:	b002      	add	sp, #8
 800ff74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff78:	b003      	add	sp, #12
 800ff7a:	4770      	bx	lr
 800ff7c:	2000003c 	.word	0x2000003c

0800ff80 <_fstat_r>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	4d07      	ldr	r5, [pc, #28]	; (800ffa0 <_fstat_r+0x20>)
 800ff84:	2300      	movs	r3, #0
 800ff86:	4604      	mov	r4, r0
 800ff88:	4608      	mov	r0, r1
 800ff8a:	4611      	mov	r1, r2
 800ff8c:	602b      	str	r3, [r5, #0]
 800ff8e:	f7f4 fd66 	bl	8004a5e <_fstat>
 800ff92:	1c43      	adds	r3, r0, #1
 800ff94:	d102      	bne.n	800ff9c <_fstat_r+0x1c>
 800ff96:	682b      	ldr	r3, [r5, #0]
 800ff98:	b103      	cbz	r3, 800ff9c <_fstat_r+0x1c>
 800ff9a:	6023      	str	r3, [r4, #0]
 800ff9c:	bd38      	pop	{r3, r4, r5, pc}
 800ff9e:	bf00      	nop
 800ffa0:	20002da0 	.word	0x20002da0

0800ffa4 <_isatty_r>:
 800ffa4:	b538      	push	{r3, r4, r5, lr}
 800ffa6:	4d06      	ldr	r5, [pc, #24]	; (800ffc0 <_isatty_r+0x1c>)
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	4604      	mov	r4, r0
 800ffac:	4608      	mov	r0, r1
 800ffae:	602b      	str	r3, [r5, #0]
 800ffb0:	f7f4 fd65 	bl	8004a7e <_isatty>
 800ffb4:	1c43      	adds	r3, r0, #1
 800ffb6:	d102      	bne.n	800ffbe <_isatty_r+0x1a>
 800ffb8:	682b      	ldr	r3, [r5, #0]
 800ffba:	b103      	cbz	r3, 800ffbe <_isatty_r+0x1a>
 800ffbc:	6023      	str	r3, [r4, #0]
 800ffbe:	bd38      	pop	{r3, r4, r5, pc}
 800ffc0:	20002da0 	.word	0x20002da0

0800ffc4 <_lseek_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d07      	ldr	r5, [pc, #28]	; (800ffe4 <_lseek_r+0x20>)
 800ffc8:	4604      	mov	r4, r0
 800ffca:	4608      	mov	r0, r1
 800ffcc:	4611      	mov	r1, r2
 800ffce:	2200      	movs	r2, #0
 800ffd0:	602a      	str	r2, [r5, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	f7f4 fd5e 	bl	8004a94 <_lseek>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d102      	bne.n	800ffe2 <_lseek_r+0x1e>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	b103      	cbz	r3, 800ffe2 <_lseek_r+0x1e>
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	20002da0 	.word	0x20002da0

0800ffe8 <malloc>:
 800ffe8:	4b02      	ldr	r3, [pc, #8]	; (800fff4 <malloc+0xc>)
 800ffea:	4601      	mov	r1, r0
 800ffec:	6818      	ldr	r0, [r3, #0]
 800ffee:	f7fe bd3b 	b.w	800ea68 <_malloc_r>
 800fff2:	bf00      	nop
 800fff4:	2000003c 	.word	0x2000003c

0800fff8 <__malloc_lock>:
 800fff8:	4801      	ldr	r0, [pc, #4]	; (8010000 <__malloc_lock+0x8>)
 800fffa:	f7fe b8a9 	b.w	800e150 <__retarget_lock_acquire_recursive>
 800fffe:	bf00      	nop
 8010000:	20002d94 	.word	0x20002d94

08010004 <__malloc_unlock>:
 8010004:	4801      	ldr	r0, [pc, #4]	; (801000c <__malloc_unlock+0x8>)
 8010006:	f7fe b8a4 	b.w	800e152 <__retarget_lock_release_recursive>
 801000a:	bf00      	nop
 801000c:	20002d94 	.word	0x20002d94

08010010 <_read_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4d07      	ldr	r5, [pc, #28]	; (8010030 <_read_r+0x20>)
 8010014:	4604      	mov	r4, r0
 8010016:	4608      	mov	r0, r1
 8010018:	4611      	mov	r1, r2
 801001a:	2200      	movs	r2, #0
 801001c:	602a      	str	r2, [r5, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f7f4 fcf4 	bl	8004a0c <_read>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d102      	bne.n	801002e <_read_r+0x1e>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	b103      	cbz	r3, 801002e <_read_r+0x1e>
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	bd38      	pop	{r3, r4, r5, pc}
 8010030:	20002da0 	.word	0x20002da0

08010034 <abort>:
 8010034:	b508      	push	{r3, lr}
 8010036:	2006      	movs	r0, #6
 8010038:	f000 f82c 	bl	8010094 <raise>
 801003c:	2001      	movs	r0, #1
 801003e:	f7f4 fcdb 	bl	80049f8 <_exit>

08010042 <_raise_r>:
 8010042:	291f      	cmp	r1, #31
 8010044:	b538      	push	{r3, r4, r5, lr}
 8010046:	4604      	mov	r4, r0
 8010048:	460d      	mov	r5, r1
 801004a:	d904      	bls.n	8010056 <_raise_r+0x14>
 801004c:	2316      	movs	r3, #22
 801004e:	6003      	str	r3, [r0, #0]
 8010050:	f04f 30ff 	mov.w	r0, #4294967295
 8010054:	bd38      	pop	{r3, r4, r5, pc}
 8010056:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010058:	b112      	cbz	r2, 8010060 <_raise_r+0x1e>
 801005a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801005e:	b94b      	cbnz	r3, 8010074 <_raise_r+0x32>
 8010060:	4620      	mov	r0, r4
 8010062:	f000 f831 	bl	80100c8 <_getpid_r>
 8010066:	462a      	mov	r2, r5
 8010068:	4601      	mov	r1, r0
 801006a:	4620      	mov	r0, r4
 801006c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010070:	f000 b818 	b.w	80100a4 <_kill_r>
 8010074:	2b01      	cmp	r3, #1
 8010076:	d00a      	beq.n	801008e <_raise_r+0x4c>
 8010078:	1c59      	adds	r1, r3, #1
 801007a:	d103      	bne.n	8010084 <_raise_r+0x42>
 801007c:	2316      	movs	r3, #22
 801007e:	6003      	str	r3, [r0, #0]
 8010080:	2001      	movs	r0, #1
 8010082:	e7e7      	b.n	8010054 <_raise_r+0x12>
 8010084:	2400      	movs	r4, #0
 8010086:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801008a:	4628      	mov	r0, r5
 801008c:	4798      	blx	r3
 801008e:	2000      	movs	r0, #0
 8010090:	e7e0      	b.n	8010054 <_raise_r+0x12>
	...

08010094 <raise>:
 8010094:	4b02      	ldr	r3, [pc, #8]	; (80100a0 <raise+0xc>)
 8010096:	4601      	mov	r1, r0
 8010098:	6818      	ldr	r0, [r3, #0]
 801009a:	f7ff bfd2 	b.w	8010042 <_raise_r>
 801009e:	bf00      	nop
 80100a0:	2000003c 	.word	0x2000003c

080100a4 <_kill_r>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	4d07      	ldr	r5, [pc, #28]	; (80100c4 <_kill_r+0x20>)
 80100a8:	2300      	movs	r3, #0
 80100aa:	4604      	mov	r4, r0
 80100ac:	4608      	mov	r0, r1
 80100ae:	4611      	mov	r1, r2
 80100b0:	602b      	str	r3, [r5, #0]
 80100b2:	f7f4 fc91 	bl	80049d8 <_kill>
 80100b6:	1c43      	adds	r3, r0, #1
 80100b8:	d102      	bne.n	80100c0 <_kill_r+0x1c>
 80100ba:	682b      	ldr	r3, [r5, #0]
 80100bc:	b103      	cbz	r3, 80100c0 <_kill_r+0x1c>
 80100be:	6023      	str	r3, [r4, #0]
 80100c0:	bd38      	pop	{r3, r4, r5, pc}
 80100c2:	bf00      	nop
 80100c4:	20002da0 	.word	0x20002da0

080100c8 <_getpid_r>:
 80100c8:	f7f4 bc7e 	b.w	80049c8 <_getpid>

080100cc <pow>:
 80100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ce:	ed2d 8b02 	vpush	{d8}
 80100d2:	eeb0 8a40 	vmov.f32	s16, s0
 80100d6:	eef0 8a60 	vmov.f32	s17, s1
 80100da:	ec55 4b11 	vmov	r4, r5, d1
 80100de:	f000 f867 	bl	80101b0 <__ieee754_pow>
 80100e2:	4622      	mov	r2, r4
 80100e4:	462b      	mov	r3, r5
 80100e6:	4620      	mov	r0, r4
 80100e8:	4629      	mov	r1, r5
 80100ea:	ec57 6b10 	vmov	r6, r7, d0
 80100ee:	f7f0 fd3d 	bl	8000b6c <__aeabi_dcmpun>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d13b      	bne.n	801016e <pow+0xa2>
 80100f6:	ec51 0b18 	vmov	r0, r1, d8
 80100fa:	2200      	movs	r2, #0
 80100fc:	2300      	movs	r3, #0
 80100fe:	f7f0 fd03 	bl	8000b08 <__aeabi_dcmpeq>
 8010102:	b1b8      	cbz	r0, 8010134 <pow+0x68>
 8010104:	2200      	movs	r2, #0
 8010106:	2300      	movs	r3, #0
 8010108:	4620      	mov	r0, r4
 801010a:	4629      	mov	r1, r5
 801010c:	f7f0 fcfc 	bl	8000b08 <__aeabi_dcmpeq>
 8010110:	2800      	cmp	r0, #0
 8010112:	d146      	bne.n	80101a2 <pow+0xd6>
 8010114:	ec45 4b10 	vmov	d0, r4, r5
 8010118:	f000 fe63 	bl	8010de2 <finite>
 801011c:	b338      	cbz	r0, 801016e <pow+0xa2>
 801011e:	2200      	movs	r2, #0
 8010120:	2300      	movs	r3, #0
 8010122:	4620      	mov	r0, r4
 8010124:	4629      	mov	r1, r5
 8010126:	f7f0 fcf9 	bl	8000b1c <__aeabi_dcmplt>
 801012a:	b300      	cbz	r0, 801016e <pow+0xa2>
 801012c:	f7fd fb06 	bl	800d73c <__errno>
 8010130:	2322      	movs	r3, #34	; 0x22
 8010132:	e01b      	b.n	801016c <pow+0xa0>
 8010134:	ec47 6b10 	vmov	d0, r6, r7
 8010138:	f000 fe53 	bl	8010de2 <finite>
 801013c:	b9e0      	cbnz	r0, 8010178 <pow+0xac>
 801013e:	eeb0 0a48 	vmov.f32	s0, s16
 8010142:	eef0 0a68 	vmov.f32	s1, s17
 8010146:	f000 fe4c 	bl	8010de2 <finite>
 801014a:	b1a8      	cbz	r0, 8010178 <pow+0xac>
 801014c:	ec45 4b10 	vmov	d0, r4, r5
 8010150:	f000 fe47 	bl	8010de2 <finite>
 8010154:	b180      	cbz	r0, 8010178 <pow+0xac>
 8010156:	4632      	mov	r2, r6
 8010158:	463b      	mov	r3, r7
 801015a:	4630      	mov	r0, r6
 801015c:	4639      	mov	r1, r7
 801015e:	f7f0 fd05 	bl	8000b6c <__aeabi_dcmpun>
 8010162:	2800      	cmp	r0, #0
 8010164:	d0e2      	beq.n	801012c <pow+0x60>
 8010166:	f7fd fae9 	bl	800d73c <__errno>
 801016a:	2321      	movs	r3, #33	; 0x21
 801016c:	6003      	str	r3, [r0, #0]
 801016e:	ecbd 8b02 	vpop	{d8}
 8010172:	ec47 6b10 	vmov	d0, r6, r7
 8010176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010178:	2200      	movs	r2, #0
 801017a:	2300      	movs	r3, #0
 801017c:	4630      	mov	r0, r6
 801017e:	4639      	mov	r1, r7
 8010180:	f7f0 fcc2 	bl	8000b08 <__aeabi_dcmpeq>
 8010184:	2800      	cmp	r0, #0
 8010186:	d0f2      	beq.n	801016e <pow+0xa2>
 8010188:	eeb0 0a48 	vmov.f32	s0, s16
 801018c:	eef0 0a68 	vmov.f32	s1, s17
 8010190:	f000 fe27 	bl	8010de2 <finite>
 8010194:	2800      	cmp	r0, #0
 8010196:	d0ea      	beq.n	801016e <pow+0xa2>
 8010198:	ec45 4b10 	vmov	d0, r4, r5
 801019c:	f000 fe21 	bl	8010de2 <finite>
 80101a0:	e7c3      	b.n	801012a <pow+0x5e>
 80101a2:	4f01      	ldr	r7, [pc, #4]	; (80101a8 <pow+0xdc>)
 80101a4:	2600      	movs	r6, #0
 80101a6:	e7e2      	b.n	801016e <pow+0xa2>
 80101a8:	3ff00000 	.word	0x3ff00000
 80101ac:	00000000 	.word	0x00000000

080101b0 <__ieee754_pow>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	ed2d 8b06 	vpush	{d8-d10}
 80101b8:	b089      	sub	sp, #36	; 0x24
 80101ba:	ed8d 1b00 	vstr	d1, [sp]
 80101be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80101c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80101c6:	ea58 0102 	orrs.w	r1, r8, r2
 80101ca:	ec57 6b10 	vmov	r6, r7, d0
 80101ce:	d115      	bne.n	80101fc <__ieee754_pow+0x4c>
 80101d0:	19b3      	adds	r3, r6, r6
 80101d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80101d6:	4152      	adcs	r2, r2
 80101d8:	4299      	cmp	r1, r3
 80101da:	4b89      	ldr	r3, [pc, #548]	; (8010400 <__ieee754_pow+0x250>)
 80101dc:	4193      	sbcs	r3, r2
 80101de:	f080 84d2 	bcs.w	8010b86 <__ieee754_pow+0x9d6>
 80101e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101e6:	4630      	mov	r0, r6
 80101e8:	4639      	mov	r1, r7
 80101ea:	f7f0 f86f 	bl	80002cc <__adddf3>
 80101ee:	ec41 0b10 	vmov	d0, r0, r1
 80101f2:	b009      	add	sp, #36	; 0x24
 80101f4:	ecbd 8b06 	vpop	{d8-d10}
 80101f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101fc:	4b81      	ldr	r3, [pc, #516]	; (8010404 <__ieee754_pow+0x254>)
 80101fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010202:	429c      	cmp	r4, r3
 8010204:	ee10 aa10 	vmov	sl, s0
 8010208:	463d      	mov	r5, r7
 801020a:	dc06      	bgt.n	801021a <__ieee754_pow+0x6a>
 801020c:	d101      	bne.n	8010212 <__ieee754_pow+0x62>
 801020e:	2e00      	cmp	r6, #0
 8010210:	d1e7      	bne.n	80101e2 <__ieee754_pow+0x32>
 8010212:	4598      	cmp	r8, r3
 8010214:	dc01      	bgt.n	801021a <__ieee754_pow+0x6a>
 8010216:	d10f      	bne.n	8010238 <__ieee754_pow+0x88>
 8010218:	b172      	cbz	r2, 8010238 <__ieee754_pow+0x88>
 801021a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801021e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010222:	ea55 050a 	orrs.w	r5, r5, sl
 8010226:	d1dc      	bne.n	80101e2 <__ieee754_pow+0x32>
 8010228:	e9dd 3200 	ldrd	r3, r2, [sp]
 801022c:	18db      	adds	r3, r3, r3
 801022e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010232:	4152      	adcs	r2, r2
 8010234:	429d      	cmp	r5, r3
 8010236:	e7d0      	b.n	80101da <__ieee754_pow+0x2a>
 8010238:	2d00      	cmp	r5, #0
 801023a:	da3b      	bge.n	80102b4 <__ieee754_pow+0x104>
 801023c:	4b72      	ldr	r3, [pc, #456]	; (8010408 <__ieee754_pow+0x258>)
 801023e:	4598      	cmp	r8, r3
 8010240:	dc51      	bgt.n	80102e6 <__ieee754_pow+0x136>
 8010242:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010246:	4598      	cmp	r8, r3
 8010248:	f340 84ac 	ble.w	8010ba4 <__ieee754_pow+0x9f4>
 801024c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010250:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010254:	2b14      	cmp	r3, #20
 8010256:	dd0f      	ble.n	8010278 <__ieee754_pow+0xc8>
 8010258:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801025c:	fa22 f103 	lsr.w	r1, r2, r3
 8010260:	fa01 f303 	lsl.w	r3, r1, r3
 8010264:	4293      	cmp	r3, r2
 8010266:	f040 849d 	bne.w	8010ba4 <__ieee754_pow+0x9f4>
 801026a:	f001 0101 	and.w	r1, r1, #1
 801026e:	f1c1 0302 	rsb	r3, r1, #2
 8010272:	9304      	str	r3, [sp, #16]
 8010274:	b182      	cbz	r2, 8010298 <__ieee754_pow+0xe8>
 8010276:	e05f      	b.n	8010338 <__ieee754_pow+0x188>
 8010278:	2a00      	cmp	r2, #0
 801027a:	d15b      	bne.n	8010334 <__ieee754_pow+0x184>
 801027c:	f1c3 0314 	rsb	r3, r3, #20
 8010280:	fa48 f103 	asr.w	r1, r8, r3
 8010284:	fa01 f303 	lsl.w	r3, r1, r3
 8010288:	4543      	cmp	r3, r8
 801028a:	f040 8488 	bne.w	8010b9e <__ieee754_pow+0x9ee>
 801028e:	f001 0101 	and.w	r1, r1, #1
 8010292:	f1c1 0302 	rsb	r3, r1, #2
 8010296:	9304      	str	r3, [sp, #16]
 8010298:	4b5c      	ldr	r3, [pc, #368]	; (801040c <__ieee754_pow+0x25c>)
 801029a:	4598      	cmp	r8, r3
 801029c:	d132      	bne.n	8010304 <__ieee754_pow+0x154>
 801029e:	f1b9 0f00 	cmp.w	r9, #0
 80102a2:	f280 8478 	bge.w	8010b96 <__ieee754_pow+0x9e6>
 80102a6:	4959      	ldr	r1, [pc, #356]	; (801040c <__ieee754_pow+0x25c>)
 80102a8:	4632      	mov	r2, r6
 80102aa:	463b      	mov	r3, r7
 80102ac:	2000      	movs	r0, #0
 80102ae:	f7f0 faed 	bl	800088c <__aeabi_ddiv>
 80102b2:	e79c      	b.n	80101ee <__ieee754_pow+0x3e>
 80102b4:	2300      	movs	r3, #0
 80102b6:	9304      	str	r3, [sp, #16]
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	d13d      	bne.n	8010338 <__ieee754_pow+0x188>
 80102bc:	4b51      	ldr	r3, [pc, #324]	; (8010404 <__ieee754_pow+0x254>)
 80102be:	4598      	cmp	r8, r3
 80102c0:	d1ea      	bne.n	8010298 <__ieee754_pow+0xe8>
 80102c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80102c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80102ca:	ea53 030a 	orrs.w	r3, r3, sl
 80102ce:	f000 845a 	beq.w	8010b86 <__ieee754_pow+0x9d6>
 80102d2:	4b4f      	ldr	r3, [pc, #316]	; (8010410 <__ieee754_pow+0x260>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	dd08      	ble.n	80102ea <__ieee754_pow+0x13a>
 80102d8:	f1b9 0f00 	cmp.w	r9, #0
 80102dc:	f2c0 8457 	blt.w	8010b8e <__ieee754_pow+0x9de>
 80102e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102e4:	e783      	b.n	80101ee <__ieee754_pow+0x3e>
 80102e6:	2302      	movs	r3, #2
 80102e8:	e7e5      	b.n	80102b6 <__ieee754_pow+0x106>
 80102ea:	f1b9 0f00 	cmp.w	r9, #0
 80102ee:	f04f 0000 	mov.w	r0, #0
 80102f2:	f04f 0100 	mov.w	r1, #0
 80102f6:	f6bf af7a 	bge.w	80101ee <__ieee754_pow+0x3e>
 80102fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80102fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010302:	e774      	b.n	80101ee <__ieee754_pow+0x3e>
 8010304:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010308:	d106      	bne.n	8010318 <__ieee754_pow+0x168>
 801030a:	4632      	mov	r2, r6
 801030c:	463b      	mov	r3, r7
 801030e:	4630      	mov	r0, r6
 8010310:	4639      	mov	r1, r7
 8010312:	f7f0 f991 	bl	8000638 <__aeabi_dmul>
 8010316:	e76a      	b.n	80101ee <__ieee754_pow+0x3e>
 8010318:	4b3e      	ldr	r3, [pc, #248]	; (8010414 <__ieee754_pow+0x264>)
 801031a:	4599      	cmp	r9, r3
 801031c:	d10c      	bne.n	8010338 <__ieee754_pow+0x188>
 801031e:	2d00      	cmp	r5, #0
 8010320:	db0a      	blt.n	8010338 <__ieee754_pow+0x188>
 8010322:	ec47 6b10 	vmov	d0, r6, r7
 8010326:	b009      	add	sp, #36	; 0x24
 8010328:	ecbd 8b06 	vpop	{d8-d10}
 801032c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	f000 bc6c 	b.w	8010c0c <__ieee754_sqrt>
 8010334:	2300      	movs	r3, #0
 8010336:	9304      	str	r3, [sp, #16]
 8010338:	ec47 6b10 	vmov	d0, r6, r7
 801033c:	f000 fd48 	bl	8010dd0 <fabs>
 8010340:	ec51 0b10 	vmov	r0, r1, d0
 8010344:	f1ba 0f00 	cmp.w	sl, #0
 8010348:	d129      	bne.n	801039e <__ieee754_pow+0x1ee>
 801034a:	b124      	cbz	r4, 8010356 <__ieee754_pow+0x1a6>
 801034c:	4b2f      	ldr	r3, [pc, #188]	; (801040c <__ieee754_pow+0x25c>)
 801034e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010352:	429a      	cmp	r2, r3
 8010354:	d123      	bne.n	801039e <__ieee754_pow+0x1ee>
 8010356:	f1b9 0f00 	cmp.w	r9, #0
 801035a:	da05      	bge.n	8010368 <__ieee754_pow+0x1b8>
 801035c:	4602      	mov	r2, r0
 801035e:	460b      	mov	r3, r1
 8010360:	2000      	movs	r0, #0
 8010362:	492a      	ldr	r1, [pc, #168]	; (801040c <__ieee754_pow+0x25c>)
 8010364:	f7f0 fa92 	bl	800088c <__aeabi_ddiv>
 8010368:	2d00      	cmp	r5, #0
 801036a:	f6bf af40 	bge.w	80101ee <__ieee754_pow+0x3e>
 801036e:	9b04      	ldr	r3, [sp, #16]
 8010370:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010374:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010378:	4323      	orrs	r3, r4
 801037a:	d108      	bne.n	801038e <__ieee754_pow+0x1de>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	4610      	mov	r0, r2
 8010382:	4619      	mov	r1, r3
 8010384:	f7ef ffa0 	bl	80002c8 <__aeabi_dsub>
 8010388:	4602      	mov	r2, r0
 801038a:	460b      	mov	r3, r1
 801038c:	e78f      	b.n	80102ae <__ieee754_pow+0xfe>
 801038e:	9b04      	ldr	r3, [sp, #16]
 8010390:	2b01      	cmp	r3, #1
 8010392:	f47f af2c 	bne.w	80101ee <__ieee754_pow+0x3e>
 8010396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801039a:	4619      	mov	r1, r3
 801039c:	e727      	b.n	80101ee <__ieee754_pow+0x3e>
 801039e:	0feb      	lsrs	r3, r5, #31
 80103a0:	3b01      	subs	r3, #1
 80103a2:	9306      	str	r3, [sp, #24]
 80103a4:	9a06      	ldr	r2, [sp, #24]
 80103a6:	9b04      	ldr	r3, [sp, #16]
 80103a8:	4313      	orrs	r3, r2
 80103aa:	d102      	bne.n	80103b2 <__ieee754_pow+0x202>
 80103ac:	4632      	mov	r2, r6
 80103ae:	463b      	mov	r3, r7
 80103b0:	e7e6      	b.n	8010380 <__ieee754_pow+0x1d0>
 80103b2:	4b19      	ldr	r3, [pc, #100]	; (8010418 <__ieee754_pow+0x268>)
 80103b4:	4598      	cmp	r8, r3
 80103b6:	f340 80fb 	ble.w	80105b0 <__ieee754_pow+0x400>
 80103ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80103be:	4598      	cmp	r8, r3
 80103c0:	4b13      	ldr	r3, [pc, #76]	; (8010410 <__ieee754_pow+0x260>)
 80103c2:	dd0c      	ble.n	80103de <__ieee754_pow+0x22e>
 80103c4:	429c      	cmp	r4, r3
 80103c6:	dc0f      	bgt.n	80103e8 <__ieee754_pow+0x238>
 80103c8:	f1b9 0f00 	cmp.w	r9, #0
 80103cc:	da0f      	bge.n	80103ee <__ieee754_pow+0x23e>
 80103ce:	2000      	movs	r0, #0
 80103d0:	b009      	add	sp, #36	; 0x24
 80103d2:	ecbd 8b06 	vpop	{d8-d10}
 80103d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103da:	f000 bcf0 	b.w	8010dbe <__math_oflow>
 80103de:	429c      	cmp	r4, r3
 80103e0:	dbf2      	blt.n	80103c8 <__ieee754_pow+0x218>
 80103e2:	4b0a      	ldr	r3, [pc, #40]	; (801040c <__ieee754_pow+0x25c>)
 80103e4:	429c      	cmp	r4, r3
 80103e6:	dd19      	ble.n	801041c <__ieee754_pow+0x26c>
 80103e8:	f1b9 0f00 	cmp.w	r9, #0
 80103ec:	dcef      	bgt.n	80103ce <__ieee754_pow+0x21e>
 80103ee:	2000      	movs	r0, #0
 80103f0:	b009      	add	sp, #36	; 0x24
 80103f2:	ecbd 8b06 	vpop	{d8-d10}
 80103f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	f000 bcd7 	b.w	8010dac <__math_uflow>
 80103fe:	bf00      	nop
 8010400:	fff00000 	.word	0xfff00000
 8010404:	7ff00000 	.word	0x7ff00000
 8010408:	433fffff 	.word	0x433fffff
 801040c:	3ff00000 	.word	0x3ff00000
 8010410:	3fefffff 	.word	0x3fefffff
 8010414:	3fe00000 	.word	0x3fe00000
 8010418:	41e00000 	.word	0x41e00000
 801041c:	4b60      	ldr	r3, [pc, #384]	; (80105a0 <__ieee754_pow+0x3f0>)
 801041e:	2200      	movs	r2, #0
 8010420:	f7ef ff52 	bl	80002c8 <__aeabi_dsub>
 8010424:	a354      	add	r3, pc, #336	; (adr r3, 8010578 <__ieee754_pow+0x3c8>)
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	4604      	mov	r4, r0
 801042c:	460d      	mov	r5, r1
 801042e:	f7f0 f903 	bl	8000638 <__aeabi_dmul>
 8010432:	a353      	add	r3, pc, #332	; (adr r3, 8010580 <__ieee754_pow+0x3d0>)
 8010434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010438:	4606      	mov	r6, r0
 801043a:	460f      	mov	r7, r1
 801043c:	4620      	mov	r0, r4
 801043e:	4629      	mov	r1, r5
 8010440:	f7f0 f8fa 	bl	8000638 <__aeabi_dmul>
 8010444:	4b57      	ldr	r3, [pc, #348]	; (80105a4 <__ieee754_pow+0x3f4>)
 8010446:	4682      	mov	sl, r0
 8010448:	468b      	mov	fp, r1
 801044a:	2200      	movs	r2, #0
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	f7f0 f8f2 	bl	8000638 <__aeabi_dmul>
 8010454:	4602      	mov	r2, r0
 8010456:	460b      	mov	r3, r1
 8010458:	a14b      	add	r1, pc, #300	; (adr r1, 8010588 <__ieee754_pow+0x3d8>)
 801045a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801045e:	f7ef ff33 	bl	80002c8 <__aeabi_dsub>
 8010462:	4622      	mov	r2, r4
 8010464:	462b      	mov	r3, r5
 8010466:	f7f0 f8e7 	bl	8000638 <__aeabi_dmul>
 801046a:	4602      	mov	r2, r0
 801046c:	460b      	mov	r3, r1
 801046e:	2000      	movs	r0, #0
 8010470:	494d      	ldr	r1, [pc, #308]	; (80105a8 <__ieee754_pow+0x3f8>)
 8010472:	f7ef ff29 	bl	80002c8 <__aeabi_dsub>
 8010476:	4622      	mov	r2, r4
 8010478:	4680      	mov	r8, r0
 801047a:	4689      	mov	r9, r1
 801047c:	462b      	mov	r3, r5
 801047e:	4620      	mov	r0, r4
 8010480:	4629      	mov	r1, r5
 8010482:	f7f0 f8d9 	bl	8000638 <__aeabi_dmul>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	4640      	mov	r0, r8
 801048c:	4649      	mov	r1, r9
 801048e:	f7f0 f8d3 	bl	8000638 <__aeabi_dmul>
 8010492:	a33f      	add	r3, pc, #252	; (adr r3, 8010590 <__ieee754_pow+0x3e0>)
 8010494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010498:	f7f0 f8ce 	bl	8000638 <__aeabi_dmul>
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	4650      	mov	r0, sl
 80104a2:	4659      	mov	r1, fp
 80104a4:	f7ef ff10 	bl	80002c8 <__aeabi_dsub>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	4680      	mov	r8, r0
 80104ae:	4689      	mov	r9, r1
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	f7ef ff0a 	bl	80002cc <__adddf3>
 80104b8:	2000      	movs	r0, #0
 80104ba:	4632      	mov	r2, r6
 80104bc:	463b      	mov	r3, r7
 80104be:	4604      	mov	r4, r0
 80104c0:	460d      	mov	r5, r1
 80104c2:	f7ef ff01 	bl	80002c8 <__aeabi_dsub>
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	4640      	mov	r0, r8
 80104cc:	4649      	mov	r1, r9
 80104ce:	f7ef fefb 	bl	80002c8 <__aeabi_dsub>
 80104d2:	9b04      	ldr	r3, [sp, #16]
 80104d4:	9a06      	ldr	r2, [sp, #24]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	4313      	orrs	r3, r2
 80104da:	4682      	mov	sl, r0
 80104dc:	468b      	mov	fp, r1
 80104de:	f040 81e7 	bne.w	80108b0 <__ieee754_pow+0x700>
 80104e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010598 <__ieee754_pow+0x3e8>
 80104e6:	eeb0 8a47 	vmov.f32	s16, s14
 80104ea:	eef0 8a67 	vmov.f32	s17, s15
 80104ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80104f2:	2600      	movs	r6, #0
 80104f4:	4632      	mov	r2, r6
 80104f6:	463b      	mov	r3, r7
 80104f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104fc:	f7ef fee4 	bl	80002c8 <__aeabi_dsub>
 8010500:	4622      	mov	r2, r4
 8010502:	462b      	mov	r3, r5
 8010504:	f7f0 f898 	bl	8000638 <__aeabi_dmul>
 8010508:	e9dd 2300 	ldrd	r2, r3, [sp]
 801050c:	4680      	mov	r8, r0
 801050e:	4689      	mov	r9, r1
 8010510:	4650      	mov	r0, sl
 8010512:	4659      	mov	r1, fp
 8010514:	f7f0 f890 	bl	8000638 <__aeabi_dmul>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	4640      	mov	r0, r8
 801051e:	4649      	mov	r1, r9
 8010520:	f7ef fed4 	bl	80002cc <__adddf3>
 8010524:	4632      	mov	r2, r6
 8010526:	463b      	mov	r3, r7
 8010528:	4680      	mov	r8, r0
 801052a:	4689      	mov	r9, r1
 801052c:	4620      	mov	r0, r4
 801052e:	4629      	mov	r1, r5
 8010530:	f7f0 f882 	bl	8000638 <__aeabi_dmul>
 8010534:	460b      	mov	r3, r1
 8010536:	4604      	mov	r4, r0
 8010538:	460d      	mov	r5, r1
 801053a:	4602      	mov	r2, r0
 801053c:	4649      	mov	r1, r9
 801053e:	4640      	mov	r0, r8
 8010540:	f7ef fec4 	bl	80002cc <__adddf3>
 8010544:	4b19      	ldr	r3, [pc, #100]	; (80105ac <__ieee754_pow+0x3fc>)
 8010546:	4299      	cmp	r1, r3
 8010548:	ec45 4b19 	vmov	d9, r4, r5
 801054c:	4606      	mov	r6, r0
 801054e:	460f      	mov	r7, r1
 8010550:	468b      	mov	fp, r1
 8010552:	f340 82f1 	ble.w	8010b38 <__ieee754_pow+0x988>
 8010556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801055a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801055e:	4303      	orrs	r3, r0
 8010560:	f000 81e4 	beq.w	801092c <__ieee754_pow+0x77c>
 8010564:	ec51 0b18 	vmov	r0, r1, d8
 8010568:	2200      	movs	r2, #0
 801056a:	2300      	movs	r3, #0
 801056c:	f7f0 fad6 	bl	8000b1c <__aeabi_dcmplt>
 8010570:	3800      	subs	r0, #0
 8010572:	bf18      	it	ne
 8010574:	2001      	movne	r0, #1
 8010576:	e72b      	b.n	80103d0 <__ieee754_pow+0x220>
 8010578:	60000000 	.word	0x60000000
 801057c:	3ff71547 	.word	0x3ff71547
 8010580:	f85ddf44 	.word	0xf85ddf44
 8010584:	3e54ae0b 	.word	0x3e54ae0b
 8010588:	55555555 	.word	0x55555555
 801058c:	3fd55555 	.word	0x3fd55555
 8010590:	652b82fe 	.word	0x652b82fe
 8010594:	3ff71547 	.word	0x3ff71547
 8010598:	00000000 	.word	0x00000000
 801059c:	bff00000 	.word	0xbff00000
 80105a0:	3ff00000 	.word	0x3ff00000
 80105a4:	3fd00000 	.word	0x3fd00000
 80105a8:	3fe00000 	.word	0x3fe00000
 80105ac:	408fffff 	.word	0x408fffff
 80105b0:	4bd5      	ldr	r3, [pc, #852]	; (8010908 <__ieee754_pow+0x758>)
 80105b2:	402b      	ands	r3, r5
 80105b4:	2200      	movs	r2, #0
 80105b6:	b92b      	cbnz	r3, 80105c4 <__ieee754_pow+0x414>
 80105b8:	4bd4      	ldr	r3, [pc, #848]	; (801090c <__ieee754_pow+0x75c>)
 80105ba:	f7f0 f83d 	bl	8000638 <__aeabi_dmul>
 80105be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80105c2:	460c      	mov	r4, r1
 80105c4:	1523      	asrs	r3, r4, #20
 80105c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80105ca:	4413      	add	r3, r2
 80105cc:	9305      	str	r3, [sp, #20]
 80105ce:	4bd0      	ldr	r3, [pc, #832]	; (8010910 <__ieee754_pow+0x760>)
 80105d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80105d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80105d8:	429c      	cmp	r4, r3
 80105da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80105de:	dd08      	ble.n	80105f2 <__ieee754_pow+0x442>
 80105e0:	4bcc      	ldr	r3, [pc, #816]	; (8010914 <__ieee754_pow+0x764>)
 80105e2:	429c      	cmp	r4, r3
 80105e4:	f340 8162 	ble.w	80108ac <__ieee754_pow+0x6fc>
 80105e8:	9b05      	ldr	r3, [sp, #20]
 80105ea:	3301      	adds	r3, #1
 80105ec:	9305      	str	r3, [sp, #20]
 80105ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80105f2:	2400      	movs	r4, #0
 80105f4:	00e3      	lsls	r3, r4, #3
 80105f6:	9307      	str	r3, [sp, #28]
 80105f8:	4bc7      	ldr	r3, [pc, #796]	; (8010918 <__ieee754_pow+0x768>)
 80105fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105fe:	ed93 7b00 	vldr	d7, [r3]
 8010602:	4629      	mov	r1, r5
 8010604:	ec53 2b17 	vmov	r2, r3, d7
 8010608:	eeb0 9a47 	vmov.f32	s18, s14
 801060c:	eef0 9a67 	vmov.f32	s19, s15
 8010610:	4682      	mov	sl, r0
 8010612:	f7ef fe59 	bl	80002c8 <__aeabi_dsub>
 8010616:	4652      	mov	r2, sl
 8010618:	4606      	mov	r6, r0
 801061a:	460f      	mov	r7, r1
 801061c:	462b      	mov	r3, r5
 801061e:	ec51 0b19 	vmov	r0, r1, d9
 8010622:	f7ef fe53 	bl	80002cc <__adddf3>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	2000      	movs	r0, #0
 801062c:	49bb      	ldr	r1, [pc, #748]	; (801091c <__ieee754_pow+0x76c>)
 801062e:	f7f0 f92d 	bl	800088c <__aeabi_ddiv>
 8010632:	ec41 0b1a 	vmov	d10, r0, r1
 8010636:	4602      	mov	r2, r0
 8010638:	460b      	mov	r3, r1
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7ef fffb 	bl	8000638 <__aeabi_dmul>
 8010642:	2300      	movs	r3, #0
 8010644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010648:	9302      	str	r3, [sp, #8]
 801064a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801064e:	46ab      	mov	fp, r5
 8010650:	106d      	asrs	r5, r5, #1
 8010652:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010656:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801065a:	ec41 0b18 	vmov	d8, r0, r1
 801065e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010662:	2200      	movs	r2, #0
 8010664:	4640      	mov	r0, r8
 8010666:	4649      	mov	r1, r9
 8010668:	4614      	mov	r4, r2
 801066a:	461d      	mov	r5, r3
 801066c:	f7ef ffe4 	bl	8000638 <__aeabi_dmul>
 8010670:	4602      	mov	r2, r0
 8010672:	460b      	mov	r3, r1
 8010674:	4630      	mov	r0, r6
 8010676:	4639      	mov	r1, r7
 8010678:	f7ef fe26 	bl	80002c8 <__aeabi_dsub>
 801067c:	ec53 2b19 	vmov	r2, r3, d9
 8010680:	4606      	mov	r6, r0
 8010682:	460f      	mov	r7, r1
 8010684:	4620      	mov	r0, r4
 8010686:	4629      	mov	r1, r5
 8010688:	f7ef fe1e 	bl	80002c8 <__aeabi_dsub>
 801068c:	4602      	mov	r2, r0
 801068e:	460b      	mov	r3, r1
 8010690:	4650      	mov	r0, sl
 8010692:	4659      	mov	r1, fp
 8010694:	f7ef fe18 	bl	80002c8 <__aeabi_dsub>
 8010698:	4642      	mov	r2, r8
 801069a:	464b      	mov	r3, r9
 801069c:	f7ef ffcc 	bl	8000638 <__aeabi_dmul>
 80106a0:	4602      	mov	r2, r0
 80106a2:	460b      	mov	r3, r1
 80106a4:	4630      	mov	r0, r6
 80106a6:	4639      	mov	r1, r7
 80106a8:	f7ef fe0e 	bl	80002c8 <__aeabi_dsub>
 80106ac:	ec53 2b1a 	vmov	r2, r3, d10
 80106b0:	f7ef ffc2 	bl	8000638 <__aeabi_dmul>
 80106b4:	ec53 2b18 	vmov	r2, r3, d8
 80106b8:	ec41 0b19 	vmov	d9, r0, r1
 80106bc:	ec51 0b18 	vmov	r0, r1, d8
 80106c0:	f7ef ffba 	bl	8000638 <__aeabi_dmul>
 80106c4:	a37c      	add	r3, pc, #496	; (adr r3, 80108b8 <__ieee754_pow+0x708>)
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	4604      	mov	r4, r0
 80106cc:	460d      	mov	r5, r1
 80106ce:	f7ef ffb3 	bl	8000638 <__aeabi_dmul>
 80106d2:	a37b      	add	r3, pc, #492	; (adr r3, 80108c0 <__ieee754_pow+0x710>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef fdf8 	bl	80002cc <__adddf3>
 80106dc:	4622      	mov	r2, r4
 80106de:	462b      	mov	r3, r5
 80106e0:	f7ef ffaa 	bl	8000638 <__aeabi_dmul>
 80106e4:	a378      	add	r3, pc, #480	; (adr r3, 80108c8 <__ieee754_pow+0x718>)
 80106e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ea:	f7ef fdef 	bl	80002cc <__adddf3>
 80106ee:	4622      	mov	r2, r4
 80106f0:	462b      	mov	r3, r5
 80106f2:	f7ef ffa1 	bl	8000638 <__aeabi_dmul>
 80106f6:	a376      	add	r3, pc, #472	; (adr r3, 80108d0 <__ieee754_pow+0x720>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	f7ef fde6 	bl	80002cc <__adddf3>
 8010700:	4622      	mov	r2, r4
 8010702:	462b      	mov	r3, r5
 8010704:	f7ef ff98 	bl	8000638 <__aeabi_dmul>
 8010708:	a373      	add	r3, pc, #460	; (adr r3, 80108d8 <__ieee754_pow+0x728>)
 801070a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070e:	f7ef fddd 	bl	80002cc <__adddf3>
 8010712:	4622      	mov	r2, r4
 8010714:	462b      	mov	r3, r5
 8010716:	f7ef ff8f 	bl	8000638 <__aeabi_dmul>
 801071a:	a371      	add	r3, pc, #452	; (adr r3, 80108e0 <__ieee754_pow+0x730>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f7ef fdd4 	bl	80002cc <__adddf3>
 8010724:	4622      	mov	r2, r4
 8010726:	4606      	mov	r6, r0
 8010728:	460f      	mov	r7, r1
 801072a:	462b      	mov	r3, r5
 801072c:	4620      	mov	r0, r4
 801072e:	4629      	mov	r1, r5
 8010730:	f7ef ff82 	bl	8000638 <__aeabi_dmul>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef ff7c 	bl	8000638 <__aeabi_dmul>
 8010740:	4642      	mov	r2, r8
 8010742:	4604      	mov	r4, r0
 8010744:	460d      	mov	r5, r1
 8010746:	464b      	mov	r3, r9
 8010748:	ec51 0b18 	vmov	r0, r1, d8
 801074c:	f7ef fdbe 	bl	80002cc <__adddf3>
 8010750:	ec53 2b19 	vmov	r2, r3, d9
 8010754:	f7ef ff70 	bl	8000638 <__aeabi_dmul>
 8010758:	4622      	mov	r2, r4
 801075a:	462b      	mov	r3, r5
 801075c:	f7ef fdb6 	bl	80002cc <__adddf3>
 8010760:	4642      	mov	r2, r8
 8010762:	4682      	mov	sl, r0
 8010764:	468b      	mov	fp, r1
 8010766:	464b      	mov	r3, r9
 8010768:	4640      	mov	r0, r8
 801076a:	4649      	mov	r1, r9
 801076c:	f7ef ff64 	bl	8000638 <__aeabi_dmul>
 8010770:	4b6b      	ldr	r3, [pc, #428]	; (8010920 <__ieee754_pow+0x770>)
 8010772:	2200      	movs	r2, #0
 8010774:	4606      	mov	r6, r0
 8010776:	460f      	mov	r7, r1
 8010778:	f7ef fda8 	bl	80002cc <__adddf3>
 801077c:	4652      	mov	r2, sl
 801077e:	465b      	mov	r3, fp
 8010780:	f7ef fda4 	bl	80002cc <__adddf3>
 8010784:	2000      	movs	r0, #0
 8010786:	4604      	mov	r4, r0
 8010788:	460d      	mov	r5, r1
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	4640      	mov	r0, r8
 8010790:	4649      	mov	r1, r9
 8010792:	f7ef ff51 	bl	8000638 <__aeabi_dmul>
 8010796:	4b62      	ldr	r3, [pc, #392]	; (8010920 <__ieee754_pow+0x770>)
 8010798:	4680      	mov	r8, r0
 801079a:	4689      	mov	r9, r1
 801079c:	2200      	movs	r2, #0
 801079e:	4620      	mov	r0, r4
 80107a0:	4629      	mov	r1, r5
 80107a2:	f7ef fd91 	bl	80002c8 <__aeabi_dsub>
 80107a6:	4632      	mov	r2, r6
 80107a8:	463b      	mov	r3, r7
 80107aa:	f7ef fd8d 	bl	80002c8 <__aeabi_dsub>
 80107ae:	4602      	mov	r2, r0
 80107b0:	460b      	mov	r3, r1
 80107b2:	4650      	mov	r0, sl
 80107b4:	4659      	mov	r1, fp
 80107b6:	f7ef fd87 	bl	80002c8 <__aeabi_dsub>
 80107ba:	ec53 2b18 	vmov	r2, r3, d8
 80107be:	f7ef ff3b 	bl	8000638 <__aeabi_dmul>
 80107c2:	4622      	mov	r2, r4
 80107c4:	4606      	mov	r6, r0
 80107c6:	460f      	mov	r7, r1
 80107c8:	462b      	mov	r3, r5
 80107ca:	ec51 0b19 	vmov	r0, r1, d9
 80107ce:	f7ef ff33 	bl	8000638 <__aeabi_dmul>
 80107d2:	4602      	mov	r2, r0
 80107d4:	460b      	mov	r3, r1
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	f7ef fd77 	bl	80002cc <__adddf3>
 80107de:	4606      	mov	r6, r0
 80107e0:	460f      	mov	r7, r1
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	4640      	mov	r0, r8
 80107e8:	4649      	mov	r1, r9
 80107ea:	f7ef fd6f 	bl	80002cc <__adddf3>
 80107ee:	a33e      	add	r3, pc, #248	; (adr r3, 80108e8 <__ieee754_pow+0x738>)
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	2000      	movs	r0, #0
 80107f6:	4604      	mov	r4, r0
 80107f8:	460d      	mov	r5, r1
 80107fa:	f7ef ff1d 	bl	8000638 <__aeabi_dmul>
 80107fe:	4642      	mov	r2, r8
 8010800:	ec41 0b18 	vmov	d8, r0, r1
 8010804:	464b      	mov	r3, r9
 8010806:	4620      	mov	r0, r4
 8010808:	4629      	mov	r1, r5
 801080a:	f7ef fd5d 	bl	80002c8 <__aeabi_dsub>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	f7ef fd57 	bl	80002c8 <__aeabi_dsub>
 801081a:	a335      	add	r3, pc, #212	; (adr r3, 80108f0 <__ieee754_pow+0x740>)
 801081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010820:	f7ef ff0a 	bl	8000638 <__aeabi_dmul>
 8010824:	a334      	add	r3, pc, #208	; (adr r3, 80108f8 <__ieee754_pow+0x748>)
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	4606      	mov	r6, r0
 801082c:	460f      	mov	r7, r1
 801082e:	4620      	mov	r0, r4
 8010830:	4629      	mov	r1, r5
 8010832:	f7ef ff01 	bl	8000638 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4630      	mov	r0, r6
 801083c:	4639      	mov	r1, r7
 801083e:	f7ef fd45 	bl	80002cc <__adddf3>
 8010842:	9a07      	ldr	r2, [sp, #28]
 8010844:	4b37      	ldr	r3, [pc, #220]	; (8010924 <__ieee754_pow+0x774>)
 8010846:	4413      	add	r3, r2
 8010848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084c:	f7ef fd3e 	bl	80002cc <__adddf3>
 8010850:	4682      	mov	sl, r0
 8010852:	9805      	ldr	r0, [sp, #20]
 8010854:	468b      	mov	fp, r1
 8010856:	f7ef fe85 	bl	8000564 <__aeabi_i2d>
 801085a:	9a07      	ldr	r2, [sp, #28]
 801085c:	4b32      	ldr	r3, [pc, #200]	; (8010928 <__ieee754_pow+0x778>)
 801085e:	4413      	add	r3, r2
 8010860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010864:	4606      	mov	r6, r0
 8010866:	460f      	mov	r7, r1
 8010868:	4652      	mov	r2, sl
 801086a:	465b      	mov	r3, fp
 801086c:	ec51 0b18 	vmov	r0, r1, d8
 8010870:	f7ef fd2c 	bl	80002cc <__adddf3>
 8010874:	4642      	mov	r2, r8
 8010876:	464b      	mov	r3, r9
 8010878:	f7ef fd28 	bl	80002cc <__adddf3>
 801087c:	4632      	mov	r2, r6
 801087e:	463b      	mov	r3, r7
 8010880:	f7ef fd24 	bl	80002cc <__adddf3>
 8010884:	2000      	movs	r0, #0
 8010886:	4632      	mov	r2, r6
 8010888:	463b      	mov	r3, r7
 801088a:	4604      	mov	r4, r0
 801088c:	460d      	mov	r5, r1
 801088e:	f7ef fd1b 	bl	80002c8 <__aeabi_dsub>
 8010892:	4642      	mov	r2, r8
 8010894:	464b      	mov	r3, r9
 8010896:	f7ef fd17 	bl	80002c8 <__aeabi_dsub>
 801089a:	ec53 2b18 	vmov	r2, r3, d8
 801089e:	f7ef fd13 	bl	80002c8 <__aeabi_dsub>
 80108a2:	4602      	mov	r2, r0
 80108a4:	460b      	mov	r3, r1
 80108a6:	4650      	mov	r0, sl
 80108a8:	4659      	mov	r1, fp
 80108aa:	e610      	b.n	80104ce <__ieee754_pow+0x31e>
 80108ac:	2401      	movs	r4, #1
 80108ae:	e6a1      	b.n	80105f4 <__ieee754_pow+0x444>
 80108b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010900 <__ieee754_pow+0x750>
 80108b4:	e617      	b.n	80104e6 <__ieee754_pow+0x336>
 80108b6:	bf00      	nop
 80108b8:	4a454eef 	.word	0x4a454eef
 80108bc:	3fca7e28 	.word	0x3fca7e28
 80108c0:	93c9db65 	.word	0x93c9db65
 80108c4:	3fcd864a 	.word	0x3fcd864a
 80108c8:	a91d4101 	.word	0xa91d4101
 80108cc:	3fd17460 	.word	0x3fd17460
 80108d0:	518f264d 	.word	0x518f264d
 80108d4:	3fd55555 	.word	0x3fd55555
 80108d8:	db6fabff 	.word	0xdb6fabff
 80108dc:	3fdb6db6 	.word	0x3fdb6db6
 80108e0:	33333303 	.word	0x33333303
 80108e4:	3fe33333 	.word	0x3fe33333
 80108e8:	e0000000 	.word	0xe0000000
 80108ec:	3feec709 	.word	0x3feec709
 80108f0:	dc3a03fd 	.word	0xdc3a03fd
 80108f4:	3feec709 	.word	0x3feec709
 80108f8:	145b01f5 	.word	0x145b01f5
 80108fc:	be3e2fe0 	.word	0xbe3e2fe0
 8010900:	00000000 	.word	0x00000000
 8010904:	3ff00000 	.word	0x3ff00000
 8010908:	7ff00000 	.word	0x7ff00000
 801090c:	43400000 	.word	0x43400000
 8010910:	0003988e 	.word	0x0003988e
 8010914:	000bb679 	.word	0x000bb679
 8010918:	080118b0 	.word	0x080118b0
 801091c:	3ff00000 	.word	0x3ff00000
 8010920:	40080000 	.word	0x40080000
 8010924:	080118d0 	.word	0x080118d0
 8010928:	080118c0 	.word	0x080118c0
 801092c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010c04 <__ieee754_pow+0xa54>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	4640      	mov	r0, r8
 8010934:	4649      	mov	r1, r9
 8010936:	f7ef fcc9 	bl	80002cc <__adddf3>
 801093a:	4622      	mov	r2, r4
 801093c:	ec41 0b1a 	vmov	d10, r0, r1
 8010940:	462b      	mov	r3, r5
 8010942:	4630      	mov	r0, r6
 8010944:	4639      	mov	r1, r7
 8010946:	f7ef fcbf 	bl	80002c8 <__aeabi_dsub>
 801094a:	4602      	mov	r2, r0
 801094c:	460b      	mov	r3, r1
 801094e:	ec51 0b1a 	vmov	r0, r1, d10
 8010952:	f7f0 f901 	bl	8000b58 <__aeabi_dcmpgt>
 8010956:	2800      	cmp	r0, #0
 8010958:	f47f ae04 	bne.w	8010564 <__ieee754_pow+0x3b4>
 801095c:	4aa4      	ldr	r2, [pc, #656]	; (8010bf0 <__ieee754_pow+0xa40>)
 801095e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010962:	4293      	cmp	r3, r2
 8010964:	f340 8108 	ble.w	8010b78 <__ieee754_pow+0x9c8>
 8010968:	151b      	asrs	r3, r3, #20
 801096a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801096e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010972:	fa4a f303 	asr.w	r3, sl, r3
 8010976:	445b      	add	r3, fp
 8010978:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801097c:	4e9d      	ldr	r6, [pc, #628]	; (8010bf4 <__ieee754_pow+0xa44>)
 801097e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010982:	4116      	asrs	r6, r2
 8010984:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010988:	2000      	movs	r0, #0
 801098a:	ea23 0106 	bic.w	r1, r3, r6
 801098e:	f1c2 0214 	rsb	r2, r2, #20
 8010992:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010996:	fa4a fa02 	asr.w	sl, sl, r2
 801099a:	f1bb 0f00 	cmp.w	fp, #0
 801099e:	4602      	mov	r2, r0
 80109a0:	460b      	mov	r3, r1
 80109a2:	4620      	mov	r0, r4
 80109a4:	4629      	mov	r1, r5
 80109a6:	bfb8      	it	lt
 80109a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80109ac:	f7ef fc8c 	bl	80002c8 <__aeabi_dsub>
 80109b0:	ec41 0b19 	vmov	d9, r0, r1
 80109b4:	4642      	mov	r2, r8
 80109b6:	464b      	mov	r3, r9
 80109b8:	ec51 0b19 	vmov	r0, r1, d9
 80109bc:	f7ef fc86 	bl	80002cc <__adddf3>
 80109c0:	a37b      	add	r3, pc, #492	; (adr r3, 8010bb0 <__ieee754_pow+0xa00>)
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	2000      	movs	r0, #0
 80109c8:	4604      	mov	r4, r0
 80109ca:	460d      	mov	r5, r1
 80109cc:	f7ef fe34 	bl	8000638 <__aeabi_dmul>
 80109d0:	ec53 2b19 	vmov	r2, r3, d9
 80109d4:	4606      	mov	r6, r0
 80109d6:	460f      	mov	r7, r1
 80109d8:	4620      	mov	r0, r4
 80109da:	4629      	mov	r1, r5
 80109dc:	f7ef fc74 	bl	80002c8 <__aeabi_dsub>
 80109e0:	4602      	mov	r2, r0
 80109e2:	460b      	mov	r3, r1
 80109e4:	4640      	mov	r0, r8
 80109e6:	4649      	mov	r1, r9
 80109e8:	f7ef fc6e 	bl	80002c8 <__aeabi_dsub>
 80109ec:	a372      	add	r3, pc, #456	; (adr r3, 8010bb8 <__ieee754_pow+0xa08>)
 80109ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f2:	f7ef fe21 	bl	8000638 <__aeabi_dmul>
 80109f6:	a372      	add	r3, pc, #456	; (adr r3, 8010bc0 <__ieee754_pow+0xa10>)
 80109f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fc:	4680      	mov	r8, r0
 80109fe:	4689      	mov	r9, r1
 8010a00:	4620      	mov	r0, r4
 8010a02:	4629      	mov	r1, r5
 8010a04:	f7ef fe18 	bl	8000638 <__aeabi_dmul>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	4640      	mov	r0, r8
 8010a0e:	4649      	mov	r1, r9
 8010a10:	f7ef fc5c 	bl	80002cc <__adddf3>
 8010a14:	4604      	mov	r4, r0
 8010a16:	460d      	mov	r5, r1
 8010a18:	4602      	mov	r2, r0
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	4639      	mov	r1, r7
 8010a20:	f7ef fc54 	bl	80002cc <__adddf3>
 8010a24:	4632      	mov	r2, r6
 8010a26:	463b      	mov	r3, r7
 8010a28:	4680      	mov	r8, r0
 8010a2a:	4689      	mov	r9, r1
 8010a2c:	f7ef fc4c 	bl	80002c8 <__aeabi_dsub>
 8010a30:	4602      	mov	r2, r0
 8010a32:	460b      	mov	r3, r1
 8010a34:	4620      	mov	r0, r4
 8010a36:	4629      	mov	r1, r5
 8010a38:	f7ef fc46 	bl	80002c8 <__aeabi_dsub>
 8010a3c:	4642      	mov	r2, r8
 8010a3e:	4606      	mov	r6, r0
 8010a40:	460f      	mov	r7, r1
 8010a42:	464b      	mov	r3, r9
 8010a44:	4640      	mov	r0, r8
 8010a46:	4649      	mov	r1, r9
 8010a48:	f7ef fdf6 	bl	8000638 <__aeabi_dmul>
 8010a4c:	a35e      	add	r3, pc, #376	; (adr r3, 8010bc8 <__ieee754_pow+0xa18>)
 8010a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a52:	4604      	mov	r4, r0
 8010a54:	460d      	mov	r5, r1
 8010a56:	f7ef fdef 	bl	8000638 <__aeabi_dmul>
 8010a5a:	a35d      	add	r3, pc, #372	; (adr r3, 8010bd0 <__ieee754_pow+0xa20>)
 8010a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a60:	f7ef fc32 	bl	80002c8 <__aeabi_dsub>
 8010a64:	4622      	mov	r2, r4
 8010a66:	462b      	mov	r3, r5
 8010a68:	f7ef fde6 	bl	8000638 <__aeabi_dmul>
 8010a6c:	a35a      	add	r3, pc, #360	; (adr r3, 8010bd8 <__ieee754_pow+0xa28>)
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	f7ef fc2b 	bl	80002cc <__adddf3>
 8010a76:	4622      	mov	r2, r4
 8010a78:	462b      	mov	r3, r5
 8010a7a:	f7ef fddd 	bl	8000638 <__aeabi_dmul>
 8010a7e:	a358      	add	r3, pc, #352	; (adr r3, 8010be0 <__ieee754_pow+0xa30>)
 8010a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a84:	f7ef fc20 	bl	80002c8 <__aeabi_dsub>
 8010a88:	4622      	mov	r2, r4
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	f7ef fdd4 	bl	8000638 <__aeabi_dmul>
 8010a90:	a355      	add	r3, pc, #340	; (adr r3, 8010be8 <__ieee754_pow+0xa38>)
 8010a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a96:	f7ef fc19 	bl	80002cc <__adddf3>
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	462b      	mov	r3, r5
 8010a9e:	f7ef fdcb 	bl	8000638 <__aeabi_dmul>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	4640      	mov	r0, r8
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	f7ef fc0d 	bl	80002c8 <__aeabi_dsub>
 8010aae:	4604      	mov	r4, r0
 8010ab0:	460d      	mov	r5, r1
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	4640      	mov	r0, r8
 8010ab8:	4649      	mov	r1, r9
 8010aba:	f7ef fdbd 	bl	8000638 <__aeabi_dmul>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	ec41 0b19 	vmov	d9, r0, r1
 8010ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ac8:	4620      	mov	r0, r4
 8010aca:	4629      	mov	r1, r5
 8010acc:	f7ef fbfc 	bl	80002c8 <__aeabi_dsub>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	460b      	mov	r3, r1
 8010ad4:	ec51 0b19 	vmov	r0, r1, d9
 8010ad8:	f7ef fed8 	bl	800088c <__aeabi_ddiv>
 8010adc:	4632      	mov	r2, r6
 8010ade:	4604      	mov	r4, r0
 8010ae0:	460d      	mov	r5, r1
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	4640      	mov	r0, r8
 8010ae6:	4649      	mov	r1, r9
 8010ae8:	f7ef fda6 	bl	8000638 <__aeabi_dmul>
 8010aec:	4632      	mov	r2, r6
 8010aee:	463b      	mov	r3, r7
 8010af0:	f7ef fbec 	bl	80002cc <__adddf3>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	4620      	mov	r0, r4
 8010afa:	4629      	mov	r1, r5
 8010afc:	f7ef fbe4 	bl	80002c8 <__aeabi_dsub>
 8010b00:	4642      	mov	r2, r8
 8010b02:	464b      	mov	r3, r9
 8010b04:	f7ef fbe0 	bl	80002c8 <__aeabi_dsub>
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	493a      	ldr	r1, [pc, #232]	; (8010bf8 <__ieee754_pow+0xa48>)
 8010b0e:	2000      	movs	r0, #0
 8010b10:	f7ef fbda 	bl	80002c8 <__aeabi_dsub>
 8010b14:	ec41 0b10 	vmov	d0, r0, r1
 8010b18:	ee10 3a90 	vmov	r3, s1
 8010b1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b24:	da2b      	bge.n	8010b7e <__ieee754_pow+0x9ce>
 8010b26:	4650      	mov	r0, sl
 8010b28:	f000 f966 	bl	8010df8 <scalbn>
 8010b2c:	ec51 0b10 	vmov	r0, r1, d0
 8010b30:	ec53 2b18 	vmov	r2, r3, d8
 8010b34:	f7ff bbed 	b.w	8010312 <__ieee754_pow+0x162>
 8010b38:	4b30      	ldr	r3, [pc, #192]	; (8010bfc <__ieee754_pow+0xa4c>)
 8010b3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010b3e:	429e      	cmp	r6, r3
 8010b40:	f77f af0c 	ble.w	801095c <__ieee754_pow+0x7ac>
 8010b44:	4b2e      	ldr	r3, [pc, #184]	; (8010c00 <__ieee754_pow+0xa50>)
 8010b46:	440b      	add	r3, r1
 8010b48:	4303      	orrs	r3, r0
 8010b4a:	d009      	beq.n	8010b60 <__ieee754_pow+0x9b0>
 8010b4c:	ec51 0b18 	vmov	r0, r1, d8
 8010b50:	2200      	movs	r2, #0
 8010b52:	2300      	movs	r3, #0
 8010b54:	f7ef ffe2 	bl	8000b1c <__aeabi_dcmplt>
 8010b58:	3800      	subs	r0, #0
 8010b5a:	bf18      	it	ne
 8010b5c:	2001      	movne	r0, #1
 8010b5e:	e447      	b.n	80103f0 <__ieee754_pow+0x240>
 8010b60:	4622      	mov	r2, r4
 8010b62:	462b      	mov	r3, r5
 8010b64:	f7ef fbb0 	bl	80002c8 <__aeabi_dsub>
 8010b68:	4642      	mov	r2, r8
 8010b6a:	464b      	mov	r3, r9
 8010b6c:	f7ef ffea 	bl	8000b44 <__aeabi_dcmpge>
 8010b70:	2800      	cmp	r0, #0
 8010b72:	f43f aef3 	beq.w	801095c <__ieee754_pow+0x7ac>
 8010b76:	e7e9      	b.n	8010b4c <__ieee754_pow+0x99c>
 8010b78:	f04f 0a00 	mov.w	sl, #0
 8010b7c:	e71a      	b.n	80109b4 <__ieee754_pow+0x804>
 8010b7e:	ec51 0b10 	vmov	r0, r1, d0
 8010b82:	4619      	mov	r1, r3
 8010b84:	e7d4      	b.n	8010b30 <__ieee754_pow+0x980>
 8010b86:	491c      	ldr	r1, [pc, #112]	; (8010bf8 <__ieee754_pow+0xa48>)
 8010b88:	2000      	movs	r0, #0
 8010b8a:	f7ff bb30 	b.w	80101ee <__ieee754_pow+0x3e>
 8010b8e:	2000      	movs	r0, #0
 8010b90:	2100      	movs	r1, #0
 8010b92:	f7ff bb2c 	b.w	80101ee <__ieee754_pow+0x3e>
 8010b96:	4630      	mov	r0, r6
 8010b98:	4639      	mov	r1, r7
 8010b9a:	f7ff bb28 	b.w	80101ee <__ieee754_pow+0x3e>
 8010b9e:	9204      	str	r2, [sp, #16]
 8010ba0:	f7ff bb7a 	b.w	8010298 <__ieee754_pow+0xe8>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f7ff bb64 	b.w	8010272 <__ieee754_pow+0xc2>
 8010baa:	bf00      	nop
 8010bac:	f3af 8000 	nop.w
 8010bb0:	00000000 	.word	0x00000000
 8010bb4:	3fe62e43 	.word	0x3fe62e43
 8010bb8:	fefa39ef 	.word	0xfefa39ef
 8010bbc:	3fe62e42 	.word	0x3fe62e42
 8010bc0:	0ca86c39 	.word	0x0ca86c39
 8010bc4:	be205c61 	.word	0xbe205c61
 8010bc8:	72bea4d0 	.word	0x72bea4d0
 8010bcc:	3e663769 	.word	0x3e663769
 8010bd0:	c5d26bf1 	.word	0xc5d26bf1
 8010bd4:	3ebbbd41 	.word	0x3ebbbd41
 8010bd8:	af25de2c 	.word	0xaf25de2c
 8010bdc:	3f11566a 	.word	0x3f11566a
 8010be0:	16bebd93 	.word	0x16bebd93
 8010be4:	3f66c16c 	.word	0x3f66c16c
 8010be8:	5555553e 	.word	0x5555553e
 8010bec:	3fc55555 	.word	0x3fc55555
 8010bf0:	3fe00000 	.word	0x3fe00000
 8010bf4:	000fffff 	.word	0x000fffff
 8010bf8:	3ff00000 	.word	0x3ff00000
 8010bfc:	4090cbff 	.word	0x4090cbff
 8010c00:	3f6f3400 	.word	0x3f6f3400
 8010c04:	652b82fe 	.word	0x652b82fe
 8010c08:	3c971547 	.word	0x3c971547

08010c0c <__ieee754_sqrt>:
 8010c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c10:	ec55 4b10 	vmov	r4, r5, d0
 8010c14:	4e55      	ldr	r6, [pc, #340]	; (8010d6c <__ieee754_sqrt+0x160>)
 8010c16:	43ae      	bics	r6, r5
 8010c18:	ee10 0a10 	vmov	r0, s0
 8010c1c:	ee10 3a10 	vmov	r3, s0
 8010c20:	462a      	mov	r2, r5
 8010c22:	4629      	mov	r1, r5
 8010c24:	d110      	bne.n	8010c48 <__ieee754_sqrt+0x3c>
 8010c26:	ee10 2a10 	vmov	r2, s0
 8010c2a:	462b      	mov	r3, r5
 8010c2c:	f7ef fd04 	bl	8000638 <__aeabi_dmul>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	4620      	mov	r0, r4
 8010c36:	4629      	mov	r1, r5
 8010c38:	f7ef fb48 	bl	80002cc <__adddf3>
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	460d      	mov	r5, r1
 8010c40:	ec45 4b10 	vmov	d0, r4, r5
 8010c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c48:	2d00      	cmp	r5, #0
 8010c4a:	dc10      	bgt.n	8010c6e <__ieee754_sqrt+0x62>
 8010c4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010c50:	4330      	orrs	r0, r6
 8010c52:	d0f5      	beq.n	8010c40 <__ieee754_sqrt+0x34>
 8010c54:	b15d      	cbz	r5, 8010c6e <__ieee754_sqrt+0x62>
 8010c56:	ee10 2a10 	vmov	r2, s0
 8010c5a:	462b      	mov	r3, r5
 8010c5c:	ee10 0a10 	vmov	r0, s0
 8010c60:	f7ef fb32 	bl	80002c8 <__aeabi_dsub>
 8010c64:	4602      	mov	r2, r0
 8010c66:	460b      	mov	r3, r1
 8010c68:	f7ef fe10 	bl	800088c <__aeabi_ddiv>
 8010c6c:	e7e6      	b.n	8010c3c <__ieee754_sqrt+0x30>
 8010c6e:	1512      	asrs	r2, r2, #20
 8010c70:	d074      	beq.n	8010d5c <__ieee754_sqrt+0x150>
 8010c72:	07d4      	lsls	r4, r2, #31
 8010c74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010c78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c80:	bf5e      	ittt	pl
 8010c82:	0fda      	lsrpl	r2, r3, #31
 8010c84:	005b      	lslpl	r3, r3, #1
 8010c86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010c8a:	2400      	movs	r4, #0
 8010c8c:	0fda      	lsrs	r2, r3, #31
 8010c8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010c92:	107f      	asrs	r7, r7, #1
 8010c94:	005b      	lsls	r3, r3, #1
 8010c96:	2516      	movs	r5, #22
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010c9e:	1886      	adds	r6, r0, r2
 8010ca0:	428e      	cmp	r6, r1
 8010ca2:	bfde      	ittt	le
 8010ca4:	1b89      	suble	r1, r1, r6
 8010ca6:	18b0      	addle	r0, r6, r2
 8010ca8:	18a4      	addle	r4, r4, r2
 8010caa:	0049      	lsls	r1, r1, #1
 8010cac:	3d01      	subs	r5, #1
 8010cae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010cb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010cb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010cba:	d1f0      	bne.n	8010c9e <__ieee754_sqrt+0x92>
 8010cbc:	462a      	mov	r2, r5
 8010cbe:	f04f 0e20 	mov.w	lr, #32
 8010cc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010cc6:	4281      	cmp	r1, r0
 8010cc8:	eb06 0c05 	add.w	ip, r6, r5
 8010ccc:	dc02      	bgt.n	8010cd4 <__ieee754_sqrt+0xc8>
 8010cce:	d113      	bne.n	8010cf8 <__ieee754_sqrt+0xec>
 8010cd0:	459c      	cmp	ip, r3
 8010cd2:	d811      	bhi.n	8010cf8 <__ieee754_sqrt+0xec>
 8010cd4:	f1bc 0f00 	cmp.w	ip, #0
 8010cd8:	eb0c 0506 	add.w	r5, ip, r6
 8010cdc:	da43      	bge.n	8010d66 <__ieee754_sqrt+0x15a>
 8010cde:	2d00      	cmp	r5, #0
 8010ce0:	db41      	blt.n	8010d66 <__ieee754_sqrt+0x15a>
 8010ce2:	f100 0801 	add.w	r8, r0, #1
 8010ce6:	1a09      	subs	r1, r1, r0
 8010ce8:	459c      	cmp	ip, r3
 8010cea:	bf88      	it	hi
 8010cec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010cf0:	eba3 030c 	sub.w	r3, r3, ip
 8010cf4:	4432      	add	r2, r6
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010cfc:	f1be 0e01 	subs.w	lr, lr, #1
 8010d00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010d04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010d08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010d0c:	d1db      	bne.n	8010cc6 <__ieee754_sqrt+0xba>
 8010d0e:	430b      	orrs	r3, r1
 8010d10:	d006      	beq.n	8010d20 <__ieee754_sqrt+0x114>
 8010d12:	1c50      	adds	r0, r2, #1
 8010d14:	bf13      	iteet	ne
 8010d16:	3201      	addne	r2, #1
 8010d18:	3401      	addeq	r4, #1
 8010d1a:	4672      	moveq	r2, lr
 8010d1c:	f022 0201 	bicne.w	r2, r2, #1
 8010d20:	1063      	asrs	r3, r4, #1
 8010d22:	0852      	lsrs	r2, r2, #1
 8010d24:	07e1      	lsls	r1, r4, #31
 8010d26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010d2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010d2e:	bf48      	it	mi
 8010d30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010d34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010d38:	4614      	mov	r4, r2
 8010d3a:	e781      	b.n	8010c40 <__ieee754_sqrt+0x34>
 8010d3c:	0ad9      	lsrs	r1, r3, #11
 8010d3e:	3815      	subs	r0, #21
 8010d40:	055b      	lsls	r3, r3, #21
 8010d42:	2900      	cmp	r1, #0
 8010d44:	d0fa      	beq.n	8010d3c <__ieee754_sqrt+0x130>
 8010d46:	02cd      	lsls	r5, r1, #11
 8010d48:	d50a      	bpl.n	8010d60 <__ieee754_sqrt+0x154>
 8010d4a:	f1c2 0420 	rsb	r4, r2, #32
 8010d4e:	fa23 f404 	lsr.w	r4, r3, r4
 8010d52:	1e55      	subs	r5, r2, #1
 8010d54:	4093      	lsls	r3, r2
 8010d56:	4321      	orrs	r1, r4
 8010d58:	1b42      	subs	r2, r0, r5
 8010d5a:	e78a      	b.n	8010c72 <__ieee754_sqrt+0x66>
 8010d5c:	4610      	mov	r0, r2
 8010d5e:	e7f0      	b.n	8010d42 <__ieee754_sqrt+0x136>
 8010d60:	0049      	lsls	r1, r1, #1
 8010d62:	3201      	adds	r2, #1
 8010d64:	e7ef      	b.n	8010d46 <__ieee754_sqrt+0x13a>
 8010d66:	4680      	mov	r8, r0
 8010d68:	e7bd      	b.n	8010ce6 <__ieee754_sqrt+0xda>
 8010d6a:	bf00      	nop
 8010d6c:	7ff00000 	.word	0x7ff00000

08010d70 <with_errno>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	4604      	mov	r4, r0
 8010d74:	460d      	mov	r5, r1
 8010d76:	4616      	mov	r6, r2
 8010d78:	f7fc fce0 	bl	800d73c <__errno>
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	6006      	str	r6, [r0, #0]
 8010d80:	4620      	mov	r0, r4
 8010d82:	bd70      	pop	{r4, r5, r6, pc}

08010d84 <xflow>:
 8010d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d86:	4614      	mov	r4, r2
 8010d88:	461d      	mov	r5, r3
 8010d8a:	b108      	cbz	r0, 8010d90 <xflow+0xc>
 8010d8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010d90:	e9cd 2300 	strd	r2, r3, [sp]
 8010d94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d98:	4620      	mov	r0, r4
 8010d9a:	4629      	mov	r1, r5
 8010d9c:	f7ef fc4c 	bl	8000638 <__aeabi_dmul>
 8010da0:	2222      	movs	r2, #34	; 0x22
 8010da2:	b003      	add	sp, #12
 8010da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010da8:	f7ff bfe2 	b.w	8010d70 <with_errno>

08010dac <__math_uflow>:
 8010dac:	b508      	push	{r3, lr}
 8010dae:	2200      	movs	r2, #0
 8010db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010db4:	f7ff ffe6 	bl	8010d84 <xflow>
 8010db8:	ec41 0b10 	vmov	d0, r0, r1
 8010dbc:	bd08      	pop	{r3, pc}

08010dbe <__math_oflow>:
 8010dbe:	b508      	push	{r3, lr}
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010dc6:	f7ff ffdd 	bl	8010d84 <xflow>
 8010dca:	ec41 0b10 	vmov	d0, r0, r1
 8010dce:	bd08      	pop	{r3, pc}

08010dd0 <fabs>:
 8010dd0:	ec51 0b10 	vmov	r0, r1, d0
 8010dd4:	ee10 2a10 	vmov	r2, s0
 8010dd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ddc:	ec43 2b10 	vmov	d0, r2, r3
 8010de0:	4770      	bx	lr

08010de2 <finite>:
 8010de2:	b082      	sub	sp, #8
 8010de4:	ed8d 0b00 	vstr	d0, [sp]
 8010de8:	9801      	ldr	r0, [sp, #4]
 8010dea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010dee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010df2:	0fc0      	lsrs	r0, r0, #31
 8010df4:	b002      	add	sp, #8
 8010df6:	4770      	bx	lr

08010df8 <scalbn>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	ec55 4b10 	vmov	r4, r5, d0
 8010dfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010e02:	4606      	mov	r6, r0
 8010e04:	462b      	mov	r3, r5
 8010e06:	b99a      	cbnz	r2, 8010e30 <scalbn+0x38>
 8010e08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010e0c:	4323      	orrs	r3, r4
 8010e0e:	d036      	beq.n	8010e7e <scalbn+0x86>
 8010e10:	4b39      	ldr	r3, [pc, #228]	; (8010ef8 <scalbn+0x100>)
 8010e12:	4629      	mov	r1, r5
 8010e14:	ee10 0a10 	vmov	r0, s0
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f7ef fc0d 	bl	8000638 <__aeabi_dmul>
 8010e1e:	4b37      	ldr	r3, [pc, #220]	; (8010efc <scalbn+0x104>)
 8010e20:	429e      	cmp	r6, r3
 8010e22:	4604      	mov	r4, r0
 8010e24:	460d      	mov	r5, r1
 8010e26:	da10      	bge.n	8010e4a <scalbn+0x52>
 8010e28:	a32b      	add	r3, pc, #172	; (adr r3, 8010ed8 <scalbn+0xe0>)
 8010e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2e:	e03a      	b.n	8010ea6 <scalbn+0xae>
 8010e30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010e34:	428a      	cmp	r2, r1
 8010e36:	d10c      	bne.n	8010e52 <scalbn+0x5a>
 8010e38:	ee10 2a10 	vmov	r2, s0
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	f7ef fa44 	bl	80002cc <__adddf3>
 8010e44:	4604      	mov	r4, r0
 8010e46:	460d      	mov	r5, r1
 8010e48:	e019      	b.n	8010e7e <scalbn+0x86>
 8010e4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010e4e:	460b      	mov	r3, r1
 8010e50:	3a36      	subs	r2, #54	; 0x36
 8010e52:	4432      	add	r2, r6
 8010e54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010e58:	428a      	cmp	r2, r1
 8010e5a:	dd08      	ble.n	8010e6e <scalbn+0x76>
 8010e5c:	2d00      	cmp	r5, #0
 8010e5e:	a120      	add	r1, pc, #128	; (adr r1, 8010ee0 <scalbn+0xe8>)
 8010e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e64:	da1c      	bge.n	8010ea0 <scalbn+0xa8>
 8010e66:	a120      	add	r1, pc, #128	; (adr r1, 8010ee8 <scalbn+0xf0>)
 8010e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e6c:	e018      	b.n	8010ea0 <scalbn+0xa8>
 8010e6e:	2a00      	cmp	r2, #0
 8010e70:	dd08      	ble.n	8010e84 <scalbn+0x8c>
 8010e72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010e7e:	ec45 4b10 	vmov	d0, r4, r5
 8010e82:	bd70      	pop	{r4, r5, r6, pc}
 8010e84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010e88:	da19      	bge.n	8010ebe <scalbn+0xc6>
 8010e8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010e8e:	429e      	cmp	r6, r3
 8010e90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010e94:	dd0a      	ble.n	8010eac <scalbn+0xb4>
 8010e96:	a112      	add	r1, pc, #72	; (adr r1, 8010ee0 <scalbn+0xe8>)
 8010e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1e2      	bne.n	8010e66 <scalbn+0x6e>
 8010ea0:	a30f      	add	r3, pc, #60	; (adr r3, 8010ee0 <scalbn+0xe8>)
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	f7ef fbc7 	bl	8000638 <__aeabi_dmul>
 8010eaa:	e7cb      	b.n	8010e44 <scalbn+0x4c>
 8010eac:	a10a      	add	r1, pc, #40	; (adr r1, 8010ed8 <scalbn+0xe0>)
 8010eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d0b8      	beq.n	8010e28 <scalbn+0x30>
 8010eb6:	a10e      	add	r1, pc, #56	; (adr r1, 8010ef0 <scalbn+0xf8>)
 8010eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ebc:	e7b4      	b.n	8010e28 <scalbn+0x30>
 8010ebe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010ec2:	3236      	adds	r2, #54	; 0x36
 8010ec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ec8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <scalbn+0x108>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	e7e8      	b.n	8010ea6 <scalbn+0xae>
 8010ed4:	f3af 8000 	nop.w
 8010ed8:	c2f8f359 	.word	0xc2f8f359
 8010edc:	01a56e1f 	.word	0x01a56e1f
 8010ee0:	8800759c 	.word	0x8800759c
 8010ee4:	7e37e43c 	.word	0x7e37e43c
 8010ee8:	8800759c 	.word	0x8800759c
 8010eec:	fe37e43c 	.word	0xfe37e43c
 8010ef0:	c2f8f359 	.word	0xc2f8f359
 8010ef4:	81a56e1f 	.word	0x81a56e1f
 8010ef8:	43500000 	.word	0x43500000
 8010efc:	ffff3cb0 	.word	0xffff3cb0
 8010f00:	3c900000 	.word	0x3c900000

08010f04 <_init>:
 8010f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f06:	bf00      	nop
 8010f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f0a:	bc08      	pop	{r3}
 8010f0c:	469e      	mov	lr, r3
 8010f0e:	4770      	bx	lr

08010f10 <_fini>:
 8010f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f12:	bf00      	nop
 8010f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f16:	bc08      	pop	{r3}
 8010f18:	469e      	mov	lr, r3
 8010f1a:	4770      	bx	lr
