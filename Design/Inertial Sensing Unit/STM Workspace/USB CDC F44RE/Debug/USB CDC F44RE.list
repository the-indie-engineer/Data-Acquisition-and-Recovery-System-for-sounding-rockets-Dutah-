
USB CDC F44RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007810  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a44  08007a44  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08007a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  2000010c  08007b58  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d38  08007b58  00021d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f419  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  0002f555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000320e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00032cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a8e  00000000  00000000  00033770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b1  00000000  00000000  000571fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9add  00000000  00000000  000673af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130e8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f58  00000000  00000000  00130edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080079bc 	.word	0x080079bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	080079bc 	.word	0x080079bc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char *msg="\nHello Dutah!";
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x38>)
 8000520:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 f965 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f815 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f87f 	bl	800062c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800052e:	f006 fc89 	bl	8006e44 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CDC_Transmit_FS(msg,strlen(msg)); //Transmit the packet
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff fe66 	bl	8000204 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29b      	uxth	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f006 fd3e 	bl	8006fc0 <CDC_Transmit_FS>

	  HAL_Delay(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000548:	f000 f9c4 	bl	80008d4 <HAL_Delay>
	CDC_Transmit_FS(msg,strlen(msg)); //Transmit the packet
 800054c:	e7f1      	b.n	8000532 <main+0x1a>
 800054e:	bf00      	nop
 8000550:	080079d4 	.word	0x080079d4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f007 fa22 	bl	80079ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	2300      	movs	r3, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005cc:	2348      	movs	r3, #72	; 0x48
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d4:	2303      	movs	r3, #3
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fd57 	bl	8003094 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ec:	f000 f854 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fef5 	bl	80023fc <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000618:	f000 f83e 	bl	8000698 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_GPIO_Init+0x68>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MX_GPIO_Init+0x68>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_GPIO_Init+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_GPIO_Init+0x68>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x68>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x68>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x68>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <HAL_MspInit+0x58>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <HAL_MspInit+0x58>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_MspInit+0x58>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x58>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <HAL_MspInit+0x58>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x58>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 f9f3 	bl	8000ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f000 fa0c 	bl	8000b0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f8a2 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <OTG_FS_IRQHandler+0x10>)
 800076a:	f000 fcd4 	bl	8001116 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000160c 	.word	0x2000160c

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007b8:	4c0b      	ldr	r4, [pc, #44]	; (80007e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007c6:	f7ff ffd7 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f007 f8cb 	bl	8007964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ce:	f7ff fea3 	bl	8000518 <main>
  bx  lr    
 80007d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80007e0:	08007a4c 	.word	0x08007a4c
  ldr r2, =_sbss
 80007e4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80007e8:	20001d38 	.word	0x20001d38

080007ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_Init+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <HAL_Init+0x40>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_Init+0x40>)
 8000806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_Init+0x40>)
 8000812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f000 f94f 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081e:	200f      	movs	r0, #15
 8000820:	f000 f808 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000824:	f7ff ff3e 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023c00 	.word	0x40023c00

08000834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x54>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x58>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	fbb3 f3f1 	udiv	r3, r3, r1
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f967 	bl	8000b26 <HAL_SYSTICK_Config>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e00e      	b.n	8000880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d80a      	bhi.n	800087e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f000 f92f 	bl	8000ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_InitTick+0x5c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	e000      	b.n	8000880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000000 	.word	0x20000000
 800088c:	20000008 	.word	0x20000008
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000128 	.word	0x20000128

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_GetTick+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000128 	.word	0x20000128

080008d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008dc:	f7ff ffee 	bl	80008bc <HAL_GetTick>
 80008e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ec:	d005      	beq.n	80008fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_Delay+0x44>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008fa:	bf00      	nop
 80008fc:	f7ff ffde 	bl	80008bc <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	d8f7      	bhi.n	80008fc <HAL_Delay+0x28>
  {
  }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008

0800091c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db0b      	blt.n	80009aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 021f 	and.w	r2, r3, #31
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <__NVIC_EnableIRQ+0x38>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	2001      	movs	r0, #1
 80009a2:	fa00 f202 	lsl.w	r2, r0, r2
 80009a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a88:	d301      	bcc.n	8000a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00f      	b.n	8000aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <SysTick_Config+0x40>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a96:	210f      	movs	r1, #15
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f7ff ff8e 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff29 	bl	800091c <__NVIC_SetPriorityGrouping>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae4:	f7ff ff3e 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8000ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff ff8e 	bl	8000a10 <NVIC_EncodePriority>
 8000af4:	4602      	mov	r2, r0
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff5d 	bl	80009bc <__NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff31 	bl	8000980 <__NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffa2 	bl	8000a78 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e165      	b.n	8000e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8154 	bne.w	8000e22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d005      	beq.n	8000b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d130      	bne.n	8000bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	f003 0201 	and.w	r2, r3, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d017      	beq.n	8000c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d123      	bne.n	8000c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	08da      	lsrs	r2, r3, #3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3208      	adds	r2, #8
 8000c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	08da      	lsrs	r2, r3, #3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3208      	adds	r2, #8
 8000c7e:	69b9      	ldr	r1, [r7, #24]
 8000c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0203 	and.w	r2, r3, #3
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 80ae 	beq.w	8000e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a5c      	ldr	r2, [pc, #368]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce2:	4a58      	ldr	r2, [pc, #352]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4f      	ldr	r2, [pc, #316]	; (8000e48 <HAL_GPIO_Init+0x308>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d025      	beq.n	8000d5a <HAL_GPIO_Init+0x21a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4e      	ldr	r2, [pc, #312]	; (8000e4c <HAL_GPIO_Init+0x30c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d01f      	beq.n	8000d56 <HAL_GPIO_Init+0x216>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4d      	ldr	r2, [pc, #308]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d019      	beq.n	8000d52 <HAL_GPIO_Init+0x212>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4c      	ldr	r2, [pc, #304]	; (8000e54 <HAL_GPIO_Init+0x314>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0x20e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4b      	ldr	r2, [pc, #300]	; (8000e58 <HAL_GPIO_Init+0x318>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d00d      	beq.n	8000d4a <HAL_GPIO_Init+0x20a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_GPIO_Init+0x31c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d007      	beq.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a49      	ldr	r2, [pc, #292]	; (8000e60 <HAL_GPIO_Init+0x320>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_GPIO_Init+0x202>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e00c      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d42:	2307      	movs	r3, #7
 8000d44:	e00a      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x21c>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d6c:	4935      	ldr	r1, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9e:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_GPIO_Init+0x324>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	f67f ae96 	bls.w	8000b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b08f      	sub	sp, #60	; 0x3c
 8000e6c:	af0a      	add	r7, sp, #40	; 0x28
 8000e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e116      	b.n	80010a8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f006 f9ed 	bl	8007274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fc9e 	bl	80037fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	687e      	ldr	r6, [r7, #4]
 8000ec6:	466d      	mov	r5, sp
 8000ec8:	f106 0410 	add.w	r4, r6, #16
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000edc:	1d33      	adds	r3, r6, #4
 8000ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee0:	6838      	ldr	r0, [r7, #0]
 8000ee2:	f002 fb75 	bl	80035d0 <USB_CoreInit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e0d7      	b.n	80010a8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fc8c 	bl	800381c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e04a      	b.n	8000fa0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	333d      	adds	r3, #61	; 0x3d
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	333c      	adds	r3, #60	; 0x3c
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	b298      	uxth	r0, r3
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	3344      	adds	r3, #68	; 0x44
 8000f46:	4602      	mov	r2, r0
 8000f48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	3340      	adds	r3, #64	; 0x40
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3348      	adds	r3, #72	; 0x48
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	334c      	adds	r3, #76	; 0x4c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	3354      	adds	r3, #84	; 0x54
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3af      	bcc.n	8000f0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e044      	b.n	800103a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	d3b5      	bcc.n	8000fb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	687e      	ldr	r6, [r7, #4]
 800104c:	466d      	mov	r5, sp
 800104e:	f106 0410 	add.w	r4, r6, #16
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001062:	1d33      	adds	r3, r6, #4
 8001064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f002 fc24 	bl	80038b4 <USB_DevInit>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e014      	b.n	80010a8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	2b01      	cmp	r3, #1
 8001094:	d102      	bne.n	800109c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 f98c 	bl	80023b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fd66 	bl	8004b72 <USB_DevDisconnect>

  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_PCD_Start+0x1c>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e020      	b.n	800110e <HAL_PCD_Start+0x5e>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d109      	bne.n	80010f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d005      	beq.n	80010f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fb6f 	bl	80037d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd16 	bl	8004b30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001116:	b590      	push	{r4, r7, lr}
 8001118:	b08d      	sub	sp, #52	; 0x34
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fdd4 	bl	8004cda <USB_GetMode>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f040 84b7 	bne.w	8001aa8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fd38 	bl	8004bb4 <USB_ReadInterrupts>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 84ad 	beq.w	8001aa6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fd25 	bl	8004bb4 <USB_ReadInterrupts>
 800116a:	4603      	mov	r3, r0
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b02      	cmp	r3, #2
 8001172:	d107      	bne.n	8001184 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f002 0202 	and.w	r2, r2, #2
 8001182:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fd13 	bl	8004bb4 <USB_ReadInterrupts>
 800118e:	4603      	mov	r3, r0
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b10      	cmp	r3, #16
 8001196:	d161      	bne.n	800125c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0210 	bic.w	r2, r2, #16
 80011a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f003 020f 	and.w	r2, r3, #15
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	0c5b      	lsrs	r3, r3, #17
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d124      	bne.n	800121e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d035      	beq.n	800124c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	6a38      	ldr	r0, [r7, #32]
 80011f4:	f003 fb4a 	bl	800488c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001204:	441a      	add	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001216:	441a      	add	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	621a      	str	r2, [r3, #32]
 800121c:	e016      	b.n	800124c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	0c5b      	lsrs	r3, r3, #17
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	2b06      	cmp	r3, #6
 8001228:	d110      	bne.n	800124c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001230:	2208      	movs	r2, #8
 8001232:	4619      	mov	r1, r3
 8001234:	6a38      	ldr	r0, [r7, #32]
 8001236:	f003 fb29 	bl	800488c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	6a1a      	ldr	r2, [r3, #32]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001246:	441a      	add	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0210 	orr.w	r2, r2, #16
 800125a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fca7 	bl	8004bb4 <USB_ReadInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800126c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001270:	f040 80a7 	bne.w	80013c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fcac 	bl	8004bda <USB_ReadDevAllOutEpInterrupt>
 8001282:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001284:	e099      	b.n	80013ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 808e 	beq.w	80013ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f003 fcd0 	bl	8004c42 <USB_ReadDevOutEPInterrupt>
 80012a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00c      	beq.n	80012c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	015a      	lsls	r2, r3, #5
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ba:	461a      	mov	r2, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fef0 	bl	80020a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00c      	beq.n	80012ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	015a      	lsls	r2, r3, #5
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	4413      	add	r3, r2
 80012da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012de:	461a      	mov	r2, r3
 80012e0:	2308      	movs	r3, #8
 80012e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 ffc6 	bl	8002278 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	015a      	lsls	r2, r3, #5
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001302:	461a      	mov	r2, r3
 8001304:	2310      	movs	r3, #16
 8001306:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	2b80      	cmp	r3, #128	; 0x80
 800131c:	d109      	bne.n	8001332 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800132c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001330:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	3304      	adds	r3, #4
 8001346:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	78db      	ldrb	r3, [r3, #3]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d108      	bne.n	8001362 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2200      	movs	r2, #0
 8001354:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f006 f8a5 	bl	80074ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136e:	461a      	mov	r2, r3
 8001370:	2302      	movs	r3, #2
 8001372:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138a:	461a      	mov	r2, r3
 800138c:	2320      	movs	r3, #32
 800138e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	015a      	lsls	r2, r3, #5
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4413      	add	r3, r2
 80013a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013a6:	461a      	mov	r2, r3
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f af62 	bne.w	8001286 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fbf4 	bl	8004bb4 <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013d6:	f040 80db 	bne.w	8001590 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fc15 	bl	8004c0e <USB_ReadDevAllInEpInterrupt>
 80013e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013ea:	e0cd      	b.n	8001588 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80c2 	beq.w	800157c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fc3b 	bl	8004c7e <USB_ReadDevInEPInterrupt>
 8001408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d057      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	2201      	movs	r2, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	69f9      	ldr	r1, [r7, #28]
 8001430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001434:	4013      	ands	r3, r2
 8001436:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001444:	461a      	mov	r2, r3
 8001446:	2301      	movs	r3, #1
 8001448:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d132      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	334c      	adds	r3, #76	; 0x4c
 8001462:	6819      	ldr	r1, [r3, #0]
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4403      	add	r3, r0
 8001472:	3348      	adds	r3, #72	; 0x48
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4419      	add	r1, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4403      	add	r3, r0
 8001486:	334c      	adds	r3, #76	; 0x4c
 8001488:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x3a2>
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3354      	adds	r3, #84	; 0x54
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b0:	461a      	mov	r2, r3
 80014b2:	2101      	movs	r1, #1
 80014b4:	f003 fc42 	bl	8004d3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f005 ff6f 	bl	80073a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014da:	461a      	mov	r2, r3
 80014dc:	2308      	movs	r3, #8
 80014de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f6:	461a      	mov	r2, r3
 80014f8:	2310      	movs	r3, #16
 80014fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001512:	461a      	mov	r2, r3
 8001514:	2340      	movs	r3, #64	; 0x40
 8001516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d023      	beq.n	800156a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001524:	6a38      	ldr	r0, [r7, #32]
 8001526:	f002 fb23 	bl	8003b70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3338      	adds	r3, #56	; 0x38
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	3304      	adds	r3, #4
 800153c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2200      	movs	r2, #0
 800154a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f005 ffbc 	bl	80074d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001564:	461a      	mov	r2, r3
 8001566:	2302      	movs	r3, #2
 8001568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fd08 	bl	8001f8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	3301      	adds	r3, #1
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	f47f af2e 	bne.w	80013ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fb0d 	bl	8004bb4 <USB_ReadInterrupts>
 800159a:	4603      	mov	r3, r0
 800159c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015a4:	d122      	bne.n	80015ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f006 f936 	bl	8007840 <HAL_PCDEx_LPM_Callback>
 80015d4:	e002      	b.n	80015dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f005 ff5a 	bl	8007490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fadf 	bl	8004bb4 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001600:	d112      	bne.n	8001628 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f005 ff16 	bl	8007444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001626:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fac1 	bl	8004bb4 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800163c:	d121      	bne.n	8001682 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800164c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	f003 020f 	and.w	r2, r3, #15
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001672:	2101      	movs	r1, #1
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f006 f8e3 	bl	8007840 <HAL_PCDEx_LPM_Callback>
 800167a:	e002      	b.n	8001682 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f005 fee1 	bl	8007444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fa94 	bl	8004bb4 <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001696:	f040 80b7 	bne.w	8001808 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2110      	movs	r1, #16
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fa5b 	bl	8003b70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016be:	e046      	b.n	800174e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	015a      	lsls	r2, r3, #5
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016cc:	461a      	mov	r2, r3
 80016ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e4:	0151      	lsls	r1, r2, #5
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	440a      	add	r2, r1
 80016ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001700:	461a      	mov	r2, r3
 8001702:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001706:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001718:	0151      	lsls	r1, r2, #5
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	440a      	add	r2, r1
 800171e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001726:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001738:	0151      	lsls	r1, r2, #5
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	440a      	add	r2, r1
 800173e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001746:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	3301      	adds	r3, #1
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001754:	429a      	cmp	r2, r3
 8001756:	d3b3      	bcc.n	80016c0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001766:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800176a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	2b00      	cmp	r3, #0
 8001772:	d016      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001784:	f043 030b 	orr.w	r3, r3, #11
 8001788:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179a:	f043 030b 	orr.w	r3, r3, #11
 800179e:	6453      	str	r3, [r2, #68]	; 0x44
 80017a0:	e015      	b.n	80017ce <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c8:	f043 030b 	orr.w	r3, r3, #11
 80017cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017f2:	461a      	mov	r2, r3
 80017f4:	f003 faa2 	bl	8004d3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f9d1 	bl	8004bb4 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800181c:	d124      	bne.n	8001868 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fa67 	bl	8004cf6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fa1c 	bl	8003c6a <USB_GetDevSpeed>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681c      	ldr	r4, [r3, #0]
 800183e:	f000 fec3 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8001842:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4620      	mov	r0, r4
 800184e:	f001 ff21 	bl	8003694 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f005 fdcd 	bl	80073f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001866:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 f9a1 	bl	8004bb4 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b08      	cmp	r3, #8
 800187a:	d10a      	bne.n	8001892 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f005 fdaa 	bl	80073d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f002 0208 	and.w	r2, r2, #8
 8001890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f98c 	bl	8004bb4 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	2b80      	cmp	r3, #128	; 0x80
 80018a4:	d122      	bne.n	80018ec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	e014      	b.n	80018e2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fb27 	bl	8001f2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3301      	adds	r3, #1
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3e5      	bcc.n	80018b8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f95f 	bl	8004bb4 <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001900:	d13b      	bne.n	800197a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001902:	2301      	movs	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	e02b      	b.n	8001960 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	3340      	adds	r3, #64	; 0x40
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d115      	bne.n	800195a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800192e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	da12      	bge.n	800195a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	333f      	adds	r3, #63	; 0x3f
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fae8 	bl	8001f2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	429a      	cmp	r2, r3
 8001968:	d3ce      	bcc.n	8001908 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f918 	bl	8004bb4 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800198e:	d155      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001990:	2301      	movs	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	e045      	b.n	8001a22 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d12e      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da2b      	bge.n	8001a1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d121      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a18:	6053      	str	r3, [r2, #4]
            break;
 8001a1a:	e007      	b.n	8001a2c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3301      	adds	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d3b4      	bcc.n	8001996 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 f8b7 	bl	8004bb4 <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a50:	d10a      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f005 fd4e 	bl	80074f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 f8a1 	bl	8004bb4 <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d115      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f005 fd3e 	bl	8007510 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e000      	b.n	8001aa8 <HAL_PCD_IRQHandler+0x992>
      return;
 8001aa6:	bf00      	nop
    }
  }
}
 8001aa8:	3734      	adds	r7, #52	; 0x34
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}

08001aae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_SetAddress+0x1a>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e013      	b.n	8001af0 <HAL_PCD_SetAddress+0x42>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 ffff 	bl	8004ae4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	70fb      	strb	r3, [r7, #3]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	803b      	strh	r3, [r7, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da0f      	bge.n	8001b3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00f      	b.n	8001b5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b6a:	883a      	ldrh	r2, [r7, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	78ba      	ldrb	r2, [r7, #2]
 8001b74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d102      	bne.n	8001b94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_EP_Open+0xaa>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e00e      	b.n	8001bc0 <HAL_PCD_EP_Open+0xc8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 f87f 	bl	8003cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da0f      	bge.n	8001bfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	3338      	adds	r3, #56	; 0x38
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	705a      	strb	r2, [r3, #1]
 8001bfa:	e00f      	b.n	8001c1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 020f 	and.w	r2, r3, #15
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_Close+0x6e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_Close+0x8c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 f8bd 	bl	8003dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6979      	ldr	r1, [r7, #20]
 8001cd0:	f002 fb9c 	bl	800440c <USB_EP0StartXfer>
 8001cd4:	e008      	b.n	8001ce8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6979      	ldr	r1, [r7, #20]
 8001ce4:	f002 f94a 	bl	8003f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d14:	681b      	ldr	r3, [r3, #0]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3338      	adds	r3, #56	; 0x38
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	6979      	ldr	r1, [r7, #20]
 8001d94:	f002 fb3a 	bl	800440c <USB_EP0StartXfer>
 8001d98:	e008      	b.n	8001dac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	6979      	ldr	r1, [r7, #20]
 8001da8:	f002 f8e8 	bl	8003f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d901      	bls.n	8001dd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e050      	b.n	8001e76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da0f      	bge.n	8001dfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 020f 	and.w	r2, r3, #15
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	3338      	adds	r3, #56	; 0x38
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	3304      	adds	r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	705a      	strb	r2, [r3, #1]
 8001dfa:	e00d      	b.n	8001e18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3304      	adds	r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_EP_SetStall+0x82>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e01e      	b.n	8001e76 <HAL_PCD_EP_SetStall+0xc0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fd78 	bl	800493c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	b2d9      	uxtb	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e66:	461a      	mov	r2, r3
 8001e68:	f002 ff68 	bl	8004d3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 020f 	and.w	r2, r3, #15
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d901      	bls.n	8001e9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e042      	b.n	8001f22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da0f      	bge.n	8001ec4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 020f 	and.w	r2, r3, #15
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	3338      	adds	r3, #56	; 0x38
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
 8001ec2:	e00f      	b.n	8001ee4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	3304      	adds	r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_EP_ClrStall+0x86>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e00e      	b.n	8001f22 <HAL_PCD_EP_ClrStall+0xa4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fd80 	bl	8004a18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da0c      	bge.n	8001f58 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3338      	adds	r3, #56	; 0x38
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	3304      	adds	r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e00c      	b.n	8001f72 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fb9f 	bl	80046bc <USB_EPStopXfer>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	3338      	adds	r3, #56	; 0x38
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d901      	bls.n	8001fc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e06c      	b.n	800209e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d902      	bls.n	8001fe0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	3303      	adds	r3, #3
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fe8:	e02b      	b.n	8002042 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d902      	bls.n	8002006 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3303      	adds	r3, #3
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800201e:	b2db      	uxtb	r3, r3
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4603      	mov	r3, r0
 8002024:	6978      	ldr	r0, [r7, #20]
 8002026:	f002 fbf3 	bl	8004810 <USB_WritePacket>

    ep->xfer_buff  += len;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	441a      	add	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	441a      	add	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	b29b      	uxth	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	429a      	cmp	r2, r3
 8002056:	d809      	bhi.n	800206c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002060:	429a      	cmp	r2, r3
 8002062:	d203      	bcs.n	800206c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1be      	bne.n	8001fea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d811      	bhi.n	800209c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2201      	movs	r2, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	43db      	mvns	r3, r3
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002098:	4013      	ands	r3, r2
 800209a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	333c      	adds	r3, #60	; 0x3c
 80020c0:	3304      	adds	r3, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d17b      	bne.n	80021d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4a61      	ldr	r2, [pc, #388]	; (8002270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f240 80b9 	bls.w	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80b3 	beq.w	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002110:	6093      	str	r3, [r2, #8]
 8002112:	e0a7      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	461a      	mov	r2, r3
 800212c:	2320      	movs	r3, #32
 800212e:	6093      	str	r3, [r2, #8]
 8002130:	e098      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 8093 	bne.w	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d90f      	bls.n	8002166 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215c:	461a      	mov	r2, r3
 800215e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002162:	6093      	str	r3, [r2, #8]
 8002164:	e07e      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	3304      	adds	r3, #4
 800217a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	0159      	lsls	r1, r3, #5
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	440b      	add	r3, r1
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	1ad2      	subs	r2, r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d114      	bne.n	80021c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021b0:	461a      	mov	r2, r3
 80021b2:	2101      	movs	r1, #1
 80021b4:	f002 fdc2 	bl	8004d3c <USB_EP0_OutStart>
 80021b8:	e006      	b.n	80021c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	441a      	add	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f005 f8cc 	bl	800736c <HAL_PCD_DataOutStageCallback>
 80021d4:	e046      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d124      	bne.n	8002228 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021fa:	6093      	str	r3, [r2, #8]
 80021fc:	e032      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002214:	461a      	mov	r2, r3
 8002216:	2320      	movs	r3, #32
 8002218:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f005 f8a3 	bl	800736c <HAL_PCD_DataOutStageCallback>
 8002226:	e01d      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d114      	bne.n	8002258 <PCD_EP_OutXfrComplete_int+0x1b0>
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002250:	461a      	mov	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	f002 fd72 	bl	8004d3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f005 f884 	bl	800736c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	4f54300a 	.word	0x4f54300a
 8002274:	4f54310a 	.word	0x4f54310a

08002278 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	333c      	adds	r3, #60	; 0x3c
 8002290:	3304      	adds	r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <PCD_EP_OutSetupPacket_int+0x88>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d90e      	bls.n	80022cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c4:	461a      	mov	r2, r3
 80022c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f005 f83b 	bl	8007348 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <PCD_EP_OutSetupPacket_int+0x88>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d90c      	bls.n	80022f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d108      	bne.n	80022f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ec:	461a      	mov	r2, r3
 80022ee:	2101      	movs	r1, #1
 80022f0:	f002 fd24 	bl	8004d3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	4f54300a 	.word	0x4f54300a

08002304 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
 8002310:	4613      	mov	r3, r2
 8002312:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002322:	883b      	ldrh	r3, [r7, #0]
 8002324:	0419      	lsls	r1, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	430a      	orrs	r2, r1
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
 8002330:	e028      	b.n	8002384 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e00d      	b.n	8002362 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3340      	adds	r3, #64	; 0x40
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	4413      	add	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	3301      	adds	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	3b01      	subs	r3, #1
 8002368:	429a      	cmp	r2, r3
 800236a:	d3ec      	bcc.n	8002346 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800236c:	883b      	ldrh	r3, [r7, #0]
 800236e:	0418      	lsls	r0, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	3b01      	subs	r3, #1
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	4302      	orrs	r2, r0
 800237c:	3340      	adds	r3, #64	; 0x40
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	f043 0303 	orr.w	r3, r3, #3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0cc      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d90c      	bls.n	8002438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d044      	beq.n	800251c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d119      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e067      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 0203 	bic.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4934      	ldr	r1, [pc, #208]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ec:	f7fe f9e6 	bl	80008bc <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	e00a      	b.n	800250a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7fe f9e2 	bl	80008bc <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 020c 	and.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1eb      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20c      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002582:	f000 fb57 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe f946 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08007a2c 	.word	0x08007a2c
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d010      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002618:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	496c      	ldr	r1, [pc, #432]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002636:	2301      	movs	r3, #1
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002646:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	4960      	ldr	r1, [pc, #384]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d017      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4955      	ldr	r1, [pc, #340]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002692:	d101      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002694:	2301      	movs	r3, #1
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80026a0:	2301      	movs	r3, #1
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d017      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026b0:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	4946      	ldr	r1, [pc, #280]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ce:	d101      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80026dc:	2301      	movs	r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 808a 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a33      	ldr	r2, [pc, #204]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002716:	f7fe f8d1 	bl	80008bc <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe f8cd 	bl	80008bc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e278      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002744:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02f      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	429a      	cmp	r2, r3
 8002758:	d028      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002762:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002770:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d114      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe f89b 	bl	80008bc <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe f897 	bl	80008bc <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e240      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b8:	d114      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ce:	4902      	ldr	r1, [pc, #8]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
 80027d4:	e00c      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	42470e40 	.word	0x42470e40
 80027e4:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a49      	ldr	r2, [pc, #292]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	4944      	ldr	r1, [pc, #272]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002814:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002816:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002824:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4937      	ldr	r1, [pc, #220]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002846:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	492e      	ldr	r1, [pc, #184]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d011      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	4926      	ldr	r1, [pc, #152]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002886:	d101      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002888:	2301      	movs	r3, #1
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	491a      	ldr	r1, [pc, #104]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d011      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	4911      	ldr	r1, [pc, #68]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d8:	d101      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80028da:	2301      	movs	r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d005      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ec:	f040 80ff 	bne.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028f6:	f7fd ffe1 	bl	80008bc <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028fc:	e00e      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028fe:	f7fd ffdd 	bl	80008bc <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d907      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e188      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002910:	40023800 	.word	0x40023800
 8002914:	424711e0 	.word	0x424711e0
 8002918:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800291c:	4b7e      	ldr	r3, [pc, #504]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ea      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002944:	2b00      	cmp	r3, #0
 8002946:	d028      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d124      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002950:	4b71      	ldr	r3, [pc, #452]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	3301      	adds	r3, #1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002962:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	431a      	orrs	r2, r3
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	071b      	lsls	r3, r3, #28
 8002992:	4961      	ldr	r1, [pc, #388]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d035      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c4:	d130      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029de:	0f1b      	lsrs	r3, r3, #28
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	431a      	orrs	r2, r3
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	431a      	orrs	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	071b      	lsls	r3, r3, #28
 8002a08:	4943      	ldr	r1, [pc, #268]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	f023 021f 	bic.w	r2, r3, #31
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	493d      	ldr	r1, [pc, #244]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d029      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3c:	d124      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a56:	0f1b      	lsrs	r3, r3, #28
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	019b      	lsls	r3, r3, #6
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	431a      	orrs	r2, r3
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	071b      	lsls	r3, r3, #28
 8002a80:	4925      	ldr	r1, [pc, #148]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	071b      	lsls	r3, r3, #28
 8002aba:	4917      	ldr	r1, [pc, #92]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fd fef8 	bl	80008bc <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ad0:	f7fd fef4 	bl	80008bc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e09f      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 8095 	bne.w	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fd fede 	bl	80008bc <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b02:	e00f      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b04:	f7fd feda 	bl	80008bc <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d908      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e085      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470068 	.word	0x42470068
 8002b20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b30:	d0e8      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d02b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d127      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	3301      	adds	r3, #1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	431a      	orrs	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	061b      	lsls	r3, r3, #24
 8002b88:	4928      	ldr	r1, [pc, #160]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	4922      	ldr	r1, [pc, #136]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbe:	d118      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	0e1b      	lsrs	r3, r3, #24
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	019b      	lsls	r3, r3, #6
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	4910      	ldr	r1, [pc, #64]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fd fe60 	bl	80008bc <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c00:	f7fd fe5c 	bl	80008bc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e007      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c1e:	d1ef      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3730      	adds	r7, #48	; 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	42470070 	.word	0x42470070

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b0ae      	sub	sp, #184	; 0xb8
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5a:	4bcb      	ldr	r3, [pc, #812]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	f200 8206 	bhi.w	8003074 <HAL_RCC_GetSysClockFreq+0x440>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002ca5 	.word	0x08002ca5
 8002c74:	08003075 	.word	0x08003075
 8002c78:	08003075 	.word	0x08003075
 8002c7c:	08003075 	.word	0x08003075
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08003075 	.word	0x08003075
 8002c88:	08003075 	.word	0x08003075
 8002c8c:	08003075 	.word	0x08003075
 8002c90:	08002cb5 	.word	0x08002cb5
 8002c94:	08003075 	.word	0x08003075
 8002c98:	08003075 	.word	0x08003075
 8002c9c:	08003075 	.word	0x08003075
 8002ca0:	08002ea5 	.word	0x08002ea5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4bb9      	ldr	r3, [pc, #740]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002caa:	e1e7      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cac:	4bb8      	ldr	r3, [pc, #736]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cb2:	e1e3      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb4:	4bb4      	ldr	r3, [pc, #720]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc0:	4bb1      	ldr	r3, [pc, #708]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d071      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	4bae      	ldr	r3, [pc, #696]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	1a51      	subs	r1, r2, r1
 8002d0e:	6439      	str	r1, [r7, #64]	; 0x40
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb63 0301 	sbc.w	r3, r3, r1
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d24:	4649      	mov	r1, r9
 8002d26:	018b      	lsls	r3, r1, #6
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2e:	4641      	mov	r1, r8
 8002d30:	018a      	lsls	r2, r1, #6
 8002d32:	4641      	mov	r1, r8
 8002d34:	1a51      	subs	r1, r2, r1
 8002d36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d38:	4649      	mov	r1, r9
 8002d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d56:	4641      	mov	r1, r8
 8002d58:	00ca      	lsls	r2, r1, #3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4622      	mov	r2, r4
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
 8002d66:	462b      	mov	r3, r5
 8002d68:	460a      	mov	r2, r1
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	024b      	lsls	r3, r1, #9
 8002d80:	4621      	mov	r1, r4
 8002d82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d86:	4621      	mov	r1, r4
 8002d88:	024a      	lsls	r2, r1, #9
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002da0:	f7fd fa38 	bl	8000214 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dae:	e067      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dca:	2300      	movs	r3, #0
 8002dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	462b      	mov	r3, r5
 8002dd6:	f04f 0000 	mov.w	r0, #0
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	0159      	lsls	r1, r3, #5
 8002de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de4:	0150      	lsls	r0, r2, #5
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4621      	mov	r1, r4
 8002dec:	1a51      	subs	r1, r2, r1
 8002dee:	62b9      	str	r1, [r7, #40]	; 0x28
 8002df0:	4629      	mov	r1, r5
 8002df2:	eb63 0301 	sbc.w	r3, r3, r1
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e04:	4649      	mov	r1, r9
 8002e06:	018b      	lsls	r3, r1, #6
 8002e08:	4641      	mov	r1, r8
 8002e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e0e:	4641      	mov	r1, r8
 8002e10:	018a      	lsls	r2, r1, #6
 8002e12:	4641      	mov	r1, r8
 8002e14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e18:	4649      	mov	r1, r9
 8002e1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e32:	4692      	mov	sl, r2
 8002e34:	469b      	mov	fp, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	eb1a 0303 	adds.w	r3, sl, r3
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	462b      	mov	r3, r5
 8002e40:	eb4b 0303 	adc.w	r3, fp, r3
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e68:	2200      	movs	r2, #0
 8002e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e6c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e72:	f7fd f9cf 	bl	8000214 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e80:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ea2:	e0eb      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb0:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d06b      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebc:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ec6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ed8:	4622      	mov	r2, r4
 8002eda:	462b      	mov	r3, r5
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	0159      	lsls	r1, r3, #5
 8002ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eea:	0150      	lsls	r0, r2, #5
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	1a51      	subs	r1, r2, r1
 8002ef4:	61b9      	str	r1, [r7, #24]
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	eb63 0301 	sbc.w	r3, r3, r1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f0a:	4659      	mov	r1, fp
 8002f0c:	018b      	lsls	r3, r1, #6
 8002f0e:	4651      	mov	r1, sl
 8002f10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f14:	4651      	mov	r1, sl
 8002f16:	018a      	lsls	r2, r1, #6
 8002f18:	4651      	mov	r1, sl
 8002f1a:	ebb2 0801 	subs.w	r8, r2, r1
 8002f1e:	4659      	mov	r1, fp
 8002f20:	eb63 0901 	sbc.w	r9, r3, r1
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f38:	4690      	mov	r8, r2
 8002f3a:	4699      	mov	r9, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	eb18 0303 	adds.w	r3, r8, r3
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	462b      	mov	r3, r5
 8002f46:	eb49 0303 	adc.w	r3, r9, r3
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	024b      	lsls	r3, r1, #9
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f62:	4621      	mov	r1, r4
 8002f64:	024a      	lsls	r2, r1, #9
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f6e:	2200      	movs	r2, #0
 8002f70:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f78:	f7fd f94c 	bl	8000214 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f86:	e065      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x420>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f94:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8002faa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fae:	4642      	mov	r2, r8
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	0159      	lsls	r1, r3, #5
 8002fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc0:	0150      	lsls	r0, r2, #5
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1a51      	subs	r1, r2, r1
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	4649      	mov	r1, r9
 8002fce:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	018b      	lsls	r3, r1, #6
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fea:	4651      	mov	r1, sl
 8002fec:	018a      	lsls	r2, r1, #6
 8002fee:	4651      	mov	r1, sl
 8002ff0:	1a54      	subs	r4, r2, r1
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	00eb      	lsls	r3, r5, #3
 8003002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003006:	00e2      	lsls	r2, r4, #3
 8003008:	4614      	mov	r4, r2
 800300a:	461d      	mov	r5, r3
 800300c:	4643      	mov	r3, r8
 800300e:	18e3      	adds	r3, r4, r3
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	464b      	mov	r3, r9
 8003014:	eb45 0303 	adc.w	r3, r5, r3
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003026:	4629      	mov	r1, r5
 8003028:	028b      	lsls	r3, r1, #10
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003030:	4621      	mov	r1, r4
 8003032:	028a      	lsls	r2, r1, #10
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800303c:	2200      	movs	r2, #0
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003042:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003046:	f7fd f8e5 	bl	8000214 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4613      	mov	r3, r2
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_RCC_GetSysClockFreq+0x458>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0f1b      	lsrs	r3, r3, #28
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003072:	e003      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800307a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003080:	4618      	mov	r0, r3
 8003082:	37b8      	adds	r7, #184	; 0xb8
 8003084:	46bd      	mov	sp, r7
 8003086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	00f42400 	.word	0x00f42400

08003094 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e28d      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8083 	beq.w	80031ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030b4:	4b94      	ldr	r3, [pc, #592]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d019      	beq.n	80030f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030c0:	4b91      	ldr	r3, [pc, #580]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030cc:	4b8e      	ldr	r3, [pc, #568]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b8b      	ldr	r3, [pc, #556]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d112      	bne.n	800310c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f2:	d10b      	bne.n	800310c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	4b84      	ldr	r3, [pc, #528]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05b      	beq.n	80031b8 <HAL_RCC_OscConfig+0x124>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d157      	bne.n	80031b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e25a      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x90>
 8003116:	4b7c      	ldr	r3, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7b      	ldr	r2, [pc, #492]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e01d      	b.n	8003160 <HAL_RCC_OscConfig+0xcc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0xb4>
 800312e:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a75      	ldr	r2, [pc, #468]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b73      	ldr	r3, [pc, #460]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a72      	ldr	r2, [pc, #456]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0xcc>
 8003148:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd fba8 	bl	80008bc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fd fba4 	bl	80008bc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e21f      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xdc>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fd fb94 	bl	80008bc <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7fd fb90 	bl	80008bc <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e20b      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b57      	ldr	r3, [pc, #348]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x104>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d06f      	beq.n	80032a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031c6:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d017      	beq.n	8003202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031d2:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031de:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d11c      	bne.n	8003230 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b44      	ldr	r3, [pc, #272]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_RCC_OscConfig+0x186>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d001      	beq.n	800321a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e1d3      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	e03a      	b.n	80032a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003238:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_RCC_OscConfig+0x278>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd fb3d 	bl	80008bc <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003246:	f7fd fb39 	bl	80008bc <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1b4      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4925      	ldr	r1, [pc, #148]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e015      	b.n	80032a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x278>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd fb1c 	bl	80008bc <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003288:	f7fd fb18 	bl	80008bc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e193      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d036      	beq.n	8003320 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_RCC_OscConfig+0x27c>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fd fafc 	bl	80008bc <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fd faf8 	bl	80008bc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e173      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x234>
 80032e6:	e01b      	b.n	8003320 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fd fae5 	bl	80008bc <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	e00e      	b.n	8003314 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fd fae1 	bl	80008bc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d907      	bls.n	8003314 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e15c      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
 8003308:	40023800 	.word	0x40023800
 800330c:	42470000 	.word	0x42470000
 8003310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b8a      	ldr	r3, [pc, #552]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ea      	bne.n	80032f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8097 	beq.w	800345c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b83      	ldr	r3, [pc, #524]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	4b7f      	ldr	r3, [pc, #508]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b79      	ldr	r3, [pc, #484]	; (8003544 <HAL_RCC_OscConfig+0x4b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d118      	bne.n	800339c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x4b0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x4b0>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fd faa1 	bl	80008bc <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fd fa9d 	bl	80008bc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e118      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x4b0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x31e>
 80033a4:	4b66      	ldr	r3, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a65      	ldr	r2, [pc, #404]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	e01c      	b.n	80033ec <HAL_RCC_OscConfig+0x358>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x340>
 80033ba:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a60      	ldr	r2, [pc, #384]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	4b5e      	ldr	r3, [pc, #376]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0x358>
 80033d4:	4b5a      	ldr	r3, [pc, #360]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a59      	ldr	r2, [pc, #356]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a56      	ldr	r2, [pc, #344]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	f023 0304 	bic.w	r3, r3, #4
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fd fa62 	bl	80008bc <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fd fa5e 	bl	80008bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0d7      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0ee      	beq.n	80033fc <HAL_RCC_OscConfig+0x368>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fa4c 	bl	80008bc <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fd fa48 	bl	80008bc <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0c1      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ee      	bne.n	8003428 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80ad 	beq.w	80035c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b08      	cmp	r3, #8
 8003470:	d060      	beq.n	8003534 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d145      	bne.n	8003506 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x4b4>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fd fa1c 	bl	80008bc <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003488:	f7fd fa18 	bl	80008bc <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e093      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	019b      	lsls	r3, r3, #6
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	3b01      	subs	r3, #1
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	071b      	lsls	r3, r3, #28
 80034d2:	491b      	ldr	r1, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x4b4>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fd f9ed 	bl	80008bc <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd f9e9 	bl	80008bc <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e064      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x452>
 8003504:	e05c      	b.n	80035c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x4b4>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd f9d6 	bl	80008bc <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fd f9d2 	bl	80008bc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e04d      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x480>
 8003532:	e045      	b.n	80035c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e040      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000
 8003548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_RCC_OscConfig+0x538>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d030      	beq.n	80035bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d129      	bne.n	80035bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d122      	bne.n	80035bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	4293      	cmp	r3, r2
 8003586:	d119      	bne.n	80035bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	3b01      	subs	r3, #1
 8003596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d10f      	bne.n	80035bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800

080035d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035d0:	b084      	sub	sp, #16
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	f107 001c 	add.w	r0, r7, #28
 80035de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d122      	bne.n	800362e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f001 fbe8 	bl	8004df8 <USB_CoreReset>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e01a      	b.n	8003664 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 fbdc 	bl	8004df8 <USB_CoreReset>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
 8003656:	e005      	b.n	8003664 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	2b01      	cmp	r3, #1
 8003668:	d10b      	bne.n	8003682 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f043 0206 	orr.w	r2, r3, #6
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800368e:	b004      	add	sp, #16
 8003690:	4770      	bx	lr
	...

08003694 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d165      	bne.n	8003774 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <USB_SetTurnaroundTime+0x11c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d906      	bls.n	80036be <USB_SetTurnaroundTime+0x2a>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <USB_SetTurnaroundTime+0x120>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d202      	bcs.n	80036be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036b8:	230f      	movs	r3, #15
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e062      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4a3c      	ldr	r2, [pc, #240]	; (80037b4 <USB_SetTurnaroundTime+0x120>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d306      	bcc.n	80036d4 <USB_SetTurnaroundTime+0x40>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4a3b      	ldr	r2, [pc, #236]	; (80037b8 <USB_SetTurnaroundTime+0x124>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d202      	bcs.n	80036d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036ce:	230e      	movs	r3, #14
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e057      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4a38      	ldr	r2, [pc, #224]	; (80037b8 <USB_SetTurnaroundTime+0x124>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d306      	bcc.n	80036ea <USB_SetTurnaroundTime+0x56>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4a37      	ldr	r2, [pc, #220]	; (80037bc <USB_SetTurnaroundTime+0x128>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d202      	bcs.n	80036ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036e4:	230d      	movs	r3, #13
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e04c      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <USB_SetTurnaroundTime+0x128>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d306      	bcc.n	8003700 <USB_SetTurnaroundTime+0x6c>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <USB_SetTurnaroundTime+0x12c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d802      	bhi.n	8003700 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036fa:	230c      	movs	r3, #12
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e041      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4a2f      	ldr	r2, [pc, #188]	; (80037c0 <USB_SetTurnaroundTime+0x12c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d906      	bls.n	8003716 <USB_SetTurnaroundTime+0x82>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4a2e      	ldr	r2, [pc, #184]	; (80037c4 <USB_SetTurnaroundTime+0x130>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d802      	bhi.n	8003716 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003710:	230b      	movs	r3, #11
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e036      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <USB_SetTurnaroundTime+0x130>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d906      	bls.n	800372c <USB_SetTurnaroundTime+0x98>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <USB_SetTurnaroundTime+0x134>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d802      	bhi.n	800372c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003726:	230a      	movs	r3, #10
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e02b      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <USB_SetTurnaroundTime+0x134>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d906      	bls.n	8003742 <USB_SetTurnaroundTime+0xae>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4a25      	ldr	r2, [pc, #148]	; (80037cc <USB_SetTurnaroundTime+0x138>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d202      	bcs.n	8003742 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800373c:	2309      	movs	r3, #9
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e020      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a21      	ldr	r2, [pc, #132]	; (80037cc <USB_SetTurnaroundTime+0x138>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d306      	bcc.n	8003758 <USB_SetTurnaroundTime+0xc4>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <USB_SetTurnaroundTime+0x13c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d802      	bhi.n	8003758 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003752:	2308      	movs	r3, #8
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e015      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <USB_SetTurnaroundTime+0x13c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d906      	bls.n	800376e <USB_SetTurnaroundTime+0xda>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <USB_SetTurnaroundTime+0x140>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d202      	bcs.n	800376e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003768:	2307      	movs	r3, #7
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e00a      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800376e:	2306      	movs	r3, #6
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e007      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800377a:	2309      	movs	r3, #9
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e001      	b.n	8003784 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003780:	2309      	movs	r3, #9
 8003782:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	00d8acbf 	.word	0x00d8acbf
 80037b4:	00e4e1c0 	.word	0x00e4e1c0
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	01067380 	.word	0x01067380
 80037c0:	011a499f 	.word	0x011a499f
 80037c4:	01312cff 	.word	0x01312cff
 80037c8:	014ca43f 	.word	0x014ca43f
 80037cc:	016e3600 	.word	0x016e3600
 80037d0:	01a6ab1f 	.word	0x01a6ab1f
 80037d4:	01e84800 	.word	0x01e84800

080037d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0201 	bic.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d115      	bne.n	800386a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800384a:	2001      	movs	r0, #1
 800384c:	f7fd f842 	bl	80008d4 <HAL_Delay>
      ms++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f001 fa3f 	bl	8004cda <USB_GetMode>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d01e      	beq.n	80038a0 <USB_SetCurrentMode+0x84>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b31      	cmp	r3, #49	; 0x31
 8003866:	d9f0      	bls.n	800384a <USB_SetCurrentMode+0x2e>
 8003868:	e01a      	b.n	80038a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d115      	bne.n	800389c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800387c:	2001      	movs	r0, #1
 800387e:	f7fd f829 	bl	80008d4 <HAL_Delay>
      ms++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f001 fa26 	bl	8004cda <USB_GetMode>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <USB_SetCurrentMode+0x84>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b31      	cmp	r3, #49	; 0x31
 8003898:	d9f0      	bls.n	800387c <USB_SetCurrentMode+0x60>
 800389a:	e001      	b.n	80038a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e005      	b.n	80038ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b32      	cmp	r3, #50	; 0x32
 80038a4:	d101      	bne.n	80038aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b4:	b084      	sub	sp, #16
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e009      	b.n	80038e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3340      	adds	r3, #64	; 0x40
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0e      	cmp	r3, #14
 80038ec:	d9f2      	bls.n	80038d4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11c      	bne.n	800392e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003902:	f043 0302 	orr.w	r3, r3, #2
 8003906:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e005      	b.n	800393a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	4619      	mov	r1, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	461a      	mov	r2, r3
 8003956:	680b      	ldr	r3, [r1, #0]
 8003958:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003966:	2100      	movs	r1, #0
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f965 	bl	8003c38 <USB_SetDevSpeed>
 800396e:	e008      	b.n	8003982 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003970:	2101      	movs	r1, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f960 	bl	8003c38 <USB_SetDevSpeed>
 8003978:	e003      	b.n	8003982 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800397a:	2103      	movs	r1, #3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f95b 	bl	8003c38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003982:	2110      	movs	r1, #16
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f8f3 	bl	8003b70 <USB_FlushTxFifo>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f91f 	bl	8003bd8 <USB_FlushRxFifo>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	461a      	mov	r2, r3
 80039ac:	2300      	movs	r3, #0
 80039ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b6:	461a      	mov	r2, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e043      	b.n	8003a56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e4:	d118      	bne.n	8003a18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	461a      	mov	r2, r3
 80039fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e013      	b.n	8003a2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e008      	b.n	8003a2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a36:	461a      	mov	r2, r3
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3301      	adds	r3, #1
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3b7      	bcc.n	80039ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e043      	b.n	8003aec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a7a:	d118      	bne.n	8003aae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e013      	b.n	8003ac0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e008      	b.n	8003ac0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	461a      	mov	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ae4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3b7      	bcc.n	8003a64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f043 0210 	orr.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <USB_DevInit+0x2b8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b68:	b004      	add	sp, #16
 8003b6a:	4770      	bx	lr
 8003b6c:	803c3800 	.word	0x803c3800

08003b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <USB_FlushTxFifo+0x64>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e01b      	b.n	8003bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	daf2      	bge.n	8003b7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	019b      	lsls	r3, r3, #6
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <USB_FlushTxFifo+0x64>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e006      	b.n	8003bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d0f0      	beq.n	8003ba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	00030d40 	.word	0x00030d40

08003bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <USB_FlushRxFifo+0x5c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e018      	b.n	8003c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	daf2      	bge.n	8003be4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2210      	movs	r2, #16
 8003c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <USB_FlushRxFifo+0x5c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e006      	b.n	8003c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d0f0      	beq.n	8003c08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	00030d40 	.word	0x00030d40

08003c38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0306 	and.w	r3, r3, #6
 8003c82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
 8003c8e:	e00a      	b.n	8003ca6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d002      	beq.n	8003c9c <USB_GetDevSpeed+0x32>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d102      	bne.n	8003ca2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	75fb      	strb	r3, [r7, #23]
 8003ca0:	e001      	b.n	8003ca6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d13a      	bne.n	8003d46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d155      	bne.n	8003db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	791b      	ldrb	r3, [r3, #4]
 8003d22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	059b      	lsls	r3, r3, #22
 8003d2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e036      	b.n	8003db4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2101      	movs	r1, #1
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11a      	bne.n	8003db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d161      	bne.n	8003ea4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df6:	d11f      	bne.n	8003e38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e58:	4013      	ands	r3, r2
 8003e5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0159      	lsls	r1, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	440b      	add	r3, r1
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <USB_DeactivateEndpoint+0x1b0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
 8003ea2:	e060      	b.n	8003f66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eba:	d11f      	bne.n	8003efc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	43db      	mvns	r3, r3
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f40:	4013      	ands	r3, r2
 8003f42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0159      	lsls	r1, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	440b      	add	r3, r1
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <USB_DeactivateEndpoint+0x1b4>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	ec337800 	.word	0xec337800
 8003f78:	eff37800 	.word	0xeff37800

08003f7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f040 815c 	bne.w	8004256 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d132      	bne.n	800400c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004004:	0cdb      	lsrs	r3, r3, #19
 8004006:	04db      	lsls	r3, r3, #19
 8004008:	6113      	str	r3, [r2, #16]
 800400a:	e074      	b.n	80040f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	0151      	lsls	r1, r2, #5
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	440a      	add	r2, r1
 8004022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004026:	0cdb      	lsrs	r3, r3, #19
 8004028:	04db      	lsls	r3, r3, #19
 800402a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800404a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800404e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	440b      	add	r3, r1
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004072:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004074:	4b9d      	ldr	r3, [pc, #628]	; (80042ec <USB_EPStartXfer+0x370>)
 8004076:	400b      	ands	r3, r1
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	0148      	lsls	r0, r1, #5
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	4401      	add	r1, r0
 8004080:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004084:	4313      	orrs	r3, r2
 8004086:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	0148      	lsls	r0, r1, #5
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	4401      	add	r1, r0
 80040a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040aa:	4313      	orrs	r3, r2
 80040ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	791b      	ldrb	r3, [r3, #4]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d11f      	bne.n	80040f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	0151      	lsls	r1, r2, #5
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	440a      	add	r2, r1
 80040cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d14b      	bne.n	8004194 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	461a      	mov	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d128      	bne.n	8004172 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d110      	bne.n	8004152 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e00f      	b.n	8004172 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004170:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e133      	b.n	80043fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	791b      	ldrb	r3, [r3, #4]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d015      	beq.n	80041e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 811b 	beq.w	80043fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	69f9      	ldr	r1, [r7, #28]
 80041de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e2:	4313      	orrs	r3, r2
 80041e4:	634b      	str	r3, [r1, #52]	; 0x34
 80041e6:	e109      	b.n	80043fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d110      	bne.n	800421a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e00f      	b.n	800423a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	440a      	add	r2, r1
 8004230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	b298      	uxth	r0, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fade 	bl	8004810 <USB_WritePacket>
 8004254:	e0d2      	b.n	80043fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	0cdb      	lsrs	r3, r3, #19
 8004272:	04db      	lsls	r3, r3, #19
 8004274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d126      	bne.n	80042f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	0148      	lsls	r0, r1, #5
 80042bc:	69f9      	ldr	r1, [r7, #28]
 80042be:	4401      	add	r1, r0
 80042c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042c4:	4313      	orrs	r3, r2
 80042c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042e6:	6113      	str	r3, [r2, #16]
 80042e8:	e03a      	b.n	8004360 <USB_EPStartXfer+0x3e4>
 80042ea:	bf00      	nop
 80042ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	1e5a      	subs	r2, r3, #1
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	8afa      	ldrh	r2, [r7, #22]
 800430c:	fb03 f202 	mul.w	r2, r3, r2
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	8afb      	ldrh	r3, [r7, #22]
 8004324:	04d9      	lsls	r1, r3, #19
 8004326:	4b38      	ldr	r3, [pc, #224]	; (8004408 <USB_EPStartXfer+0x48c>)
 8004328:	400b      	ands	r3, r1
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	0148      	lsls	r0, r1, #5
 800432e:	69f9      	ldr	r1, [r7, #28]
 8004330:	4401      	add	r1, r0
 8004332:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	0148      	lsls	r0, r1, #5
 8004354:	69f9      	ldr	r1, [r7, #28]
 8004356:	4401      	add	r1, r0
 8004358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800435c:	4313      	orrs	r3, r2
 800435e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10d      	bne.n	8004382 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6919      	ldr	r1, [r3, #16]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	460a      	mov	r2, r1
 8004380:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	791b      	ldrb	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d128      	bne.n	80043dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d110      	bne.n	80043bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00f      	b.n	80043dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	1ff80000 	.word	0x1ff80000

0800440c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 80ce 	bne.w	80045ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d132      	bne.n	800449c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004494:	0cdb      	lsrs	r3, r3, #19
 8004496:	04db      	lsls	r3, r3, #19
 8004498:	6113      	str	r3, [r2, #16]
 800449a:	e04e      	b.n	800453a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b6:	0cdb      	lsrs	r3, r3, #19
 80044b8:	04db      	lsls	r3, r3, #19
 80044ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d903      	bls.n	80044f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	440a      	add	r2, r1
 800450a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	0148      	lsls	r0, r1, #5
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	4401      	add	r1, r0
 8004532:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11e      	bne.n	800457e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004554:	461a      	mov	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e097      	b.n	80046ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800459c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8083 	beq.w	80046ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	6979      	ldr	r1, [r7, #20]
 80045c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c4:	4313      	orrs	r3, r2
 80045c6:	634b      	str	r3, [r1, #52]	; 0x34
 80045c8:	e071      	b.n	80046ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e4:	0cdb      	lsrs	r3, r3, #19
 80045e6:	04db      	lsls	r3, r3, #19
 80045e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004604:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004608:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800460c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465c:	6939      	ldr	r1, [r7, #16]
 800465e:	0148      	lsls	r0, r1, #5
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	4401      	add	r1, r0
 8004664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10d      	bne.n	800468e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6919      	ldr	r1, [r3, #16]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	460a      	mov	r2, r1
 800468c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d14a      	bne.n	8004770 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	f040 8086 	bne.w	8004802 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004718:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f242 7210 	movw	r2, #10000	; 0x2710
 800474a:	4293      	cmp	r3, r2
 800474c:	d902      	bls.n	8004754 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
          break;
 8004752:	e056      	b.n	8004802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800476c:	d0e7      	beq.n	800473e <USB_EPStopXfer+0x82>
 800476e:	e048      	b.n	8004802 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004788:	d13b      	bne.n	8004802 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	7812      	ldrb	r2, [r2, #0]
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f242 7210 	movw	r2, #10000	; 0x2710
 80047de:	4293      	cmp	r3, r2
 80047e0:	d902      	bls.n	80047e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
          break;
 80047e6:	e00c      	b.n	8004802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004800:	d0e7      	beq.n	80047d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
}
 8004804:	4618      	mov	r0, r3
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	460b      	mov	r3, r1
 8004820:	71fb      	strb	r3, [r7, #7]
 8004822:	4613      	mov	r3, r2
 8004824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800482e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d123      	bne.n	800487e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004836:	88bb      	ldrh	r3, [r7, #4]
 8004838:	3303      	adds	r3, #3
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e018      	b.n	8004876 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	031a      	lsls	r2, r3, #12
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	4413      	add	r3, r2
 800484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004850:	461a      	mov	r2, r3
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3301      	adds	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3301      	adds	r3, #1
 800486e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	3301      	adds	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	429a      	cmp	r2, r3
 800487c:	d3e2      	bcc.n	8004844 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3724      	adds	r7, #36	; 0x24
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800488c:	b480      	push	{r7}
 800488e:	b08b      	sub	sp, #44	; 0x2c
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	e014      	b.n	80048e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	3301      	adds	r3, #1
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	3301      	adds	r3, #1
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	3301      	adds	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	3301      	adds	r3, #1
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	6a3a      	ldr	r2, [r7, #32]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3e6      	bcc.n	80048b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ea:	8bfb      	ldrh	r3, [r7, #30]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01e      	beq.n	800492e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fa:	461a      	mov	r2, r3
 80048fc:	f107 0310 	add.w	r3, r7, #16
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
 8004910:	b2da      	uxtb	r2, r3
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	701a      	strb	r2, [r3, #0]
      i++;
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	3301      	adds	r3, #1
 800491a:	623b      	str	r3, [r7, #32]
      pDest++;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	3301      	adds	r3, #1
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004922:	8bfb      	ldrh	r3, [r7, #30]
 8004924:	3b01      	subs	r3, #1
 8004926:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004928:	8bfb      	ldrh	r3, [r7, #30]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ea      	bne.n	8004904 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004930:	4618      	mov	r0, r3
 8004932:	372c      	adds	r7, #44	; 0x2c
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d12c      	bne.n	80049b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db12      	blt.n	8004990 <USB_EPSetStall+0x54>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	440a      	add	r2, r1
 8004986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800498e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	e02b      	b.n	8004a0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db12      	blt.n	80049ea <USB_EPSetStall+0xae>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00f      	beq.n	80049ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d128      	bne.n	8004a86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d003      	beq.n	8004a64 <USB_EPClearStall+0x4c>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	791b      	ldrb	r3, [r3, #4]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d138      	bne.n	8004ad6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e027      	b.n	8004ad6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aa4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d003      	beq.n	8004ab6 <USB_EPClearStall+0x9e>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	791b      	ldrb	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d10f      	bne.n	8004ad6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b18:	68f9      	ldr	r1, [r7, #12]
 8004b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5e:	f023 0302 	bic.w	r3, r3, #2
 8004b62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b8c:	f023 0303 	bic.w	r3, r3, #3
 8004b90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba0:	f043 0302 	orr.w	r3, r3, #2
 8004ba4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	0c1b      	lsrs	r3, r3, #16
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	b29b      	uxth	r3, r3
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c70:	68bb      	ldr	r3, [r7, #8]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cae:	01db      	lsls	r3, r3, #7
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d14:	f023 0307 	bic.w	r3, r3, #7
 8004d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	460b      	mov	r3, r1
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	333c      	adds	r3, #60	; 0x3c
 8004d52:	3304      	adds	r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4a26      	ldr	r2, [pc, #152]	; (8004df4 <USB_EP0_OutStart+0xb8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d90a      	bls.n	8004d76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d70:	d101      	bne.n	8004d76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e037      	b.n	8004de6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da4:	f043 0318 	orr.w	r3, r3, #24
 8004da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004dbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d10f      	bne.n	8004de4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	4f54300a 	.word	0x4f54300a

08004df8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <USB_CoreReset+0x64>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e01b      	b.n	8004e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	daf2      	bge.n	8004e04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f043 0201 	orr.w	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <USB_CoreReset+0x64>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d0f0      	beq.n	8004e2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	00030d40 	.word	0x00030d40

08004e60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e70:	f002 fd34 	bl	80078dc <USBD_static_malloc>
 8004e74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	32b0      	adds	r2, #176	; 0xb0
 8004e86:	2100      	movs	r1, #0
 8004e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e0d4      	b.n	800503a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e90:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e94:	2100      	movs	r1, #0
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f002 fd88 	bl	80079ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	32b0      	adds	r2, #176	; 0xb0
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	32b0      	adds	r2, #176	; 0xb0
 8004eb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7c1b      	ldrb	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d138      	bne.n	8004f3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <USBD_CDC_Init+0x1e4>)
 8004eca:	7819      	ldrb	r1, [r3, #0]
 8004ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f002 fb91 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ed8:	4b5a      	ldr	r3, [pc, #360]	; (8005044 <USBD_CDC_Init+0x1e4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2201      	movs	r2, #1
 8004ef0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ef2:	4b55      	ldr	r3, [pc, #340]	; (8005048 <USBD_CDC_Init+0x1e8>)
 8004ef4:	7819      	ldrb	r1, [r3, #0]
 8004ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efa:	2202      	movs	r2, #2
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f002 fb7c 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f02:	4b51      	ldr	r3, [pc, #324]	; (8005048 <USBD_CDC_Init+0x1e8>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f1e:	4b4b      	ldr	r3, [pc, #300]	; (800504c <USBD_CDC_Init+0x1ec>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3326      	adds	r3, #38	; 0x26
 8004f34:	2210      	movs	r2, #16
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e035      	b.n	8004fa6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f3a:	4b42      	ldr	r3, [pc, #264]	; (8005044 <USBD_CDC_Init+0x1e4>)
 8004f3c:	7819      	ldrb	r1, [r3, #0]
 8004f3e:	2340      	movs	r3, #64	; 0x40
 8004f40:	2202      	movs	r2, #2
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f002 fb59 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f48:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <USBD_CDC_Init+0x1e4>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	f003 020f 	and.w	r2, r3, #15
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3324      	adds	r3, #36	; 0x24
 8004f5e:	2201      	movs	r2, #1
 8004f60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f62:	4b39      	ldr	r3, [pc, #228]	; (8005048 <USBD_CDC_Init+0x1e8>)
 8004f64:	7819      	ldrb	r1, [r3, #0]
 8004f66:	2340      	movs	r3, #64	; 0x40
 8004f68:	2202      	movs	r2, #2
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f002 fb45 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f70:	4b35      	ldr	r3, [pc, #212]	; (8005048 <USBD_CDC_Init+0x1e8>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f88:	2201      	movs	r2, #1
 8004f8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f8c:	4b2f      	ldr	r3, [pc, #188]	; (800504c <USBD_CDC_Init+0x1ec>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3326      	adds	r3, #38	; 0x26
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fa6:	4b29      	ldr	r3, [pc, #164]	; (800504c <USBD_CDC_Init+0x1ec>)
 8004fa8:	7819      	ldrb	r1, [r3, #0]
 8004faa:	2308      	movs	r3, #8
 8004fac:	2203      	movs	r2, #3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f002 fb23 	bl	80075fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <USBD_CDC_Init+0x1ec>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 020f 	and.w	r2, r3, #15
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	2201      	movs	r2, #1
 8004fcc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	33b0      	adds	r3, #176	; 0xb0
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005004:	2302      	movs	r3, #2
 8005006:	e018      	b.n	800503a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	7c1b      	ldrb	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <USBD_CDC_Init+0x1e8>)
 8005012:	7819      	ldrb	r1, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800501a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f002 fbda 	bl	80077d8 <USBD_LL_PrepareReceive>
 8005024:	e008      	b.n	8005038 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <USBD_CDC_Init+0x1e8>)
 8005028:	7819      	ldrb	r1, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 fbd0 	bl	80077d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000093 	.word	0x20000093
 8005048:	20000094 	.word	0x20000094
 800504c:	20000095 	.word	0x20000095

08005050 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800505c:	4b3a      	ldr	r3, [pc, #232]	; (8005148 <USBD_CDC_DeInit+0xf8>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f002 faef 	bl	8007646 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005068:	4b37      	ldr	r3, [pc, #220]	; (8005148 <USBD_CDC_DeInit+0xf8>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	2200      	movs	r2, #0
 8005080:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <USBD_CDC_DeInit+0xfc>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f002 fadc 	bl	8007646 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800508e:	4b2f      	ldr	r3, [pc, #188]	; (800514c <USBD_CDC_DeInit+0xfc>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	f003 020f 	and.w	r2, r3, #15
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050a6:	2200      	movs	r2, #0
 80050a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <USBD_CDC_DeInit+0x100>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 fac8 	bl	8007646 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80050b6:	4b26      	ldr	r3, [pc, #152]	; (8005150 <USBD_CDC_DeInit+0x100>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3324      	adds	r3, #36	; 0x24
 80050cc:	2200      	movs	r2, #0
 80050ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050d0:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <USBD_CDC_DeInit+0x100>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3326      	adds	r3, #38	; 0x26
 80050e6:	2200      	movs	r2, #0
 80050e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	32b0      	adds	r2, #176	; 0xb0
 80050f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01f      	beq.n	800513c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	33b0      	adds	r3, #176	; 0xb0
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	32b0      	adds	r2, #176	; 0xb0
 800511a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511e:	4618      	mov	r0, r3
 8005120:	f002 fbea 	bl	80078f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	32b0      	adds	r2, #176	; 0xb0
 800512e:	2100      	movs	r1, #0
 8005130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000093 	.word	0x20000093
 800514c:	20000094 	.word	0x20000094
 8005150:	20000095 	.word	0x20000095

08005154 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	32b0      	adds	r2, #176	; 0xb0
 8005168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	e0bf      	b.n	8005304 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800518c:	2b00      	cmp	r3, #0
 800518e:	d050      	beq.n	8005232 <USBD_CDC_Setup+0xde>
 8005190:	2b20      	cmp	r3, #32
 8005192:	f040 80af 	bne.w	80052f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	88db      	ldrh	r3, [r3, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03a      	beq.n	8005214 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b25b      	sxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	da1b      	bge.n	80051e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	33b0      	adds	r3, #176	; 0xb0
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80051be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	88d2      	ldrh	r2, [r2, #6]
 80051c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	88db      	ldrh	r3, [r3, #6]
 80051ca:	2b07      	cmp	r3, #7
 80051cc:	bf28      	it	cs
 80051ce:	2307      	movcs	r3, #7
 80051d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	89fa      	ldrh	r2, [r7, #14]
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f001 fdb3 	bl	8006d44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051de:	e090      	b.n	8005302 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	785a      	ldrb	r2, [r3, #1]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	88db      	ldrh	r3, [r3, #6]
 80051ee:	2b3f      	cmp	r3, #63	; 0x3f
 80051f0:	d803      	bhi.n	80051fa <USBD_CDC_Setup+0xa6>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	88db      	ldrh	r3, [r3, #6]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	e000      	b.n	80051fc <USBD_CDC_Setup+0xa8>
 80051fa:	2240      	movs	r2, #64	; 0x40
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005202:	6939      	ldr	r1, [r7, #16]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800520a:	461a      	mov	r2, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fdc5 	bl	8006d9c <USBD_CtlPrepareRx>
      break;
 8005212:	e076      	b.n	8005302 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	33b0      	adds	r3, #176	; 0xb0
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	7850      	ldrb	r0, [r2, #1]
 800522a:	2200      	movs	r2, #0
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	4798      	blx	r3
      break;
 8005230:	e067      	b.n	8005302 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b0b      	cmp	r3, #11
 8005238:	d851      	bhi.n	80052de <USBD_CDC_Setup+0x18a>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <USBD_CDC_Setup+0xec>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005271 	.word	0x08005271
 8005244:	080052ed 	.word	0x080052ed
 8005248:	080052df 	.word	0x080052df
 800524c:	080052df 	.word	0x080052df
 8005250:	080052df 	.word	0x080052df
 8005254:	080052df 	.word	0x080052df
 8005258:	080052df 	.word	0x080052df
 800525c:	080052df 	.word	0x080052df
 8005260:	080052df 	.word	0x080052df
 8005264:	080052df 	.word	0x080052df
 8005268:	0800529b 	.word	0x0800529b
 800526c:	080052c5 	.word	0x080052c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b03      	cmp	r3, #3
 800527a:	d107      	bne.n	800528c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800527c:	f107 030a 	add.w	r3, r7, #10
 8005280:	2202      	movs	r2, #2
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f001 fd5d 	bl	8006d44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800528a:	e032      	b.n	80052f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f001 fce7 	bl	8006c62 <USBD_CtlError>
            ret = USBD_FAIL;
 8005294:	2303      	movs	r3, #3
 8005296:	75fb      	strb	r3, [r7, #23]
          break;
 8005298:	e02b      	b.n	80052f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d107      	bne.n	80052b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80052a6:	f107 030d 	add.w	r3, r7, #13
 80052aa:	2201      	movs	r2, #1
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 fd48 	bl	8006d44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052b4:	e01d      	b.n	80052f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fcd2 	bl	8006c62 <USBD_CtlError>
            ret = USBD_FAIL;
 80052be:	2303      	movs	r3, #3
 80052c0:	75fb      	strb	r3, [r7, #23]
          break;
 80052c2:	e016      	b.n	80052f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d00f      	beq.n	80052f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fcc5 	bl	8006c62 <USBD_CtlError>
            ret = USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052dc:	e008      	b.n	80052f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 fcbe 	bl	8006c62 <USBD_CtlError>
          ret = USBD_FAIL;
 80052e6:	2303      	movs	r3, #3
 80052e8:	75fb      	strb	r3, [r7, #23]
          break;
 80052ea:	e002      	b.n	80052f2 <USBD_CDC_Setup+0x19e>
          break;
 80052ec:	bf00      	nop
 80052ee:	e008      	b.n	8005302 <USBD_CDC_Setup+0x1ae>
          break;
 80052f0:	bf00      	nop
      }
      break;
 80052f2:	e006      	b.n	8005302 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fcb3 	bl	8006c62 <USBD_CtlError>
      ret = USBD_FAIL;
 80052fc:	2303      	movs	r3, #3
 80052fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005300:	bf00      	nop
  }

  return (uint8_t)ret;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800531e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	32b0      	adds	r2, #176	; 0xb0
 800532a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005332:	2303      	movs	r3, #3
 8005334:	e065      	b.n	8005402 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	32b0      	adds	r2, #176	; 0xb0
 8005340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005344:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	f003 020f 	and.w	r2, r3, #15
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3318      	adds	r3, #24
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02f      	beq.n	80053c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	3318      	adds	r3, #24
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	f003 010f 	and.w	r1, r3, #15
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	460b      	mov	r3, r1
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4403      	add	r3, r0
 8005388:	3348      	adds	r3, #72	; 0x48
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005396:	2b00      	cmp	r3, #0
 8005398:	d112      	bne.n	80053c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3318      	adds	r3, #24
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80053b2:	78f9      	ldrb	r1, [r7, #3]
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f002 f9ec 	bl	8007796 <USBD_LL_Transmit>
 80053be:	e01f      	b.n	8005400 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	33b0      	adds	r3, #176	; 0xb0
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	33b0      	adds	r3, #176	; 0xb0
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	32b0      	adds	r2, #176	; 0xb0
 8005420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005424:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	32b0      	adds	r2, #176	; 0xb0
 8005430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005438:	2303      	movs	r3, #3
 800543a:	e01a      	b.n	8005472 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f002 f9ea 	bl	800781a <USBD_LL_GetRxDataSize>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	33b0      	adds	r3, #176	; 0xb0
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800546c:	4611      	mov	r1, r2
 800546e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	32b0      	adds	r2, #176	; 0xb0
 800548c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005490:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005498:	2303      	movs	r3, #3
 800549a:	e025      	b.n	80054e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	33b0      	adds	r3, #176	; 0xb0
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01a      	beq.n	80054e6 <USBD_CDC_EP0_RxReady+0x6c>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054b6:	2bff      	cmp	r3, #255	; 0xff
 80054b8:	d015      	beq.n	80054e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	33b0      	adds	r3, #176	; 0xb0
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054da:	b292      	uxth	r2, r2
 80054dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	22ff      	movs	r2, #255	; 0xff
 80054e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054f8:	2182      	movs	r1, #130	; 0x82
 80054fa:	4818      	ldr	r0, [pc, #96]	; (800555c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054fc:	f000 fd4f 	bl	8005f9e <USBD_GetEpDesc>
 8005500:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005502:	2101      	movs	r1, #1
 8005504:	4815      	ldr	r0, [pc, #84]	; (800555c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005506:	f000 fd4a 	bl	8005f9e <USBD_GetEpDesc>
 800550a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800550c:	2181      	movs	r1, #129	; 0x81
 800550e:	4813      	ldr	r0, [pc, #76]	; (800555c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005510:	f000 fd45 	bl	8005f9e <USBD_GetEpDesc>
 8005514:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2210      	movs	r2, #16
 8005520:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2200      	movs	r2, #0
 800552c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005530:	711a      	strb	r2, [r3, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005544:	711a      	strb	r2, [r3, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2243      	movs	r2, #67	; 0x43
 800554e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005550:	4b02      	ldr	r3, [pc, #8]	; (800555c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000050 	.word	0x20000050

08005560 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005568:	2182      	movs	r1, #130	; 0x82
 800556a:	4818      	ldr	r0, [pc, #96]	; (80055cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800556c:	f000 fd17 	bl	8005f9e <USBD_GetEpDesc>
 8005570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005572:	2101      	movs	r1, #1
 8005574:	4815      	ldr	r0, [pc, #84]	; (80055cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005576:	f000 fd12 	bl	8005f9e <USBD_GetEpDesc>
 800557a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800557c:	2181      	movs	r1, #129	; 0x81
 800557e:	4813      	ldr	r0, [pc, #76]	; (80055cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005580:	f000 fd0d 	bl	8005f9e <USBD_GetEpDesc>
 8005584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2210      	movs	r2, #16
 8005590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d006      	beq.n	80055a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2200      	movs	r2, #0
 800559c:	711a      	strb	r2, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f042 0202 	orr.w	r2, r2, #2
 80055a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	711a      	strb	r2, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f042 0202 	orr.w	r2, r2, #2
 80055b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2243      	movs	r2, #67	; 0x43
 80055be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055c0:	4b02      	ldr	r3, [pc, #8]	; (80055cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000050 	.word	0x20000050

080055d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055d8:	2182      	movs	r1, #130	; 0x82
 80055da:	4818      	ldr	r0, [pc, #96]	; (800563c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055dc:	f000 fcdf 	bl	8005f9e <USBD_GetEpDesc>
 80055e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055e2:	2101      	movs	r1, #1
 80055e4:	4815      	ldr	r0, [pc, #84]	; (800563c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055e6:	f000 fcda 	bl	8005f9e <USBD_GetEpDesc>
 80055ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055ec:	2181      	movs	r1, #129	; 0x81
 80055ee:	4813      	ldr	r0, [pc, #76]	; (800563c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055f0:	f000 fcd5 	bl	8005f9e <USBD_GetEpDesc>
 80055f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2210      	movs	r2, #16
 8005600:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d006      	beq.n	8005616 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2200      	movs	r2, #0
 800560c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005610:	711a      	strb	r2, [r3, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d006      	beq.n	800562a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005624:	711a      	strb	r2, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2243      	movs	r2, #67	; 0x43
 800562e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000050 	.word	0x20000050

08005640 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	220a      	movs	r2, #10
 800564c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800564e:	4b03      	ldr	r3, [pc, #12]	; (800565c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	2000000c 	.word	0x2000000c

08005660 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	e009      	b.n	8005688 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	33b0      	adds	r3, #176	; 0xb0
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	32b0      	adds	r2, #176	; 0xb0
 80056aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e008      	b.n	80056cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	32b0      	adds	r2, #176	; 0xb0
 80056ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e004      	b.n	8005706 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32b0      	adds	r2, #176	; 0xb0
 8005726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32b0      	adds	r2, #176	; 0xb0
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	e025      	b.n	8005792 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11f      	bne.n	8005790 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2201      	movs	r2, #1
 8005754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <USBD_CDC_TransmitPacket+0x88>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4403      	add	r3, r0
 8005772:	3318      	adds	r3, #24
 8005774:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <USBD_CDC_TransmitPacket+0x88>)
 8005778:	7819      	ldrb	r1, [r3, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 f805 	bl	8007796 <USBD_LL_Transmit>

    ret = USBD_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000093 	.word	0x20000093

080057a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	32b0      	adds	r2, #176	; 0xb0
 80057b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32b0      	adds	r2, #176	; 0xb0
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e018      	b.n	8005800 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	7c1b      	ldrb	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <USBD_CDC_ReceivePacket+0x68>)
 80057d8:	7819      	ldrb	r1, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fff7 	bl	80077d8 <USBD_LL_PrepareReceive>
 80057ea:	e008      	b.n	80057fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <USBD_CDC_ReceivePacket+0x68>)
 80057ee:	7819      	ldrb	r1, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 ffed 	bl	80077d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000094 	.word	0x20000094

0800580c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e01f      	b.n	8005864 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	79fa      	ldrb	r2, [r7, #7]
 8005856:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f001 fe67 	bl	800752c <USBD_LL_Init>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005880:	2303      	movs	r3, #3
 8005882:	e025      	b.n	80058d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	32ae      	adds	r2, #174	; 0xae
 8005896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	32ae      	adds	r2, #174	; 0xae
 80058aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f107 020e 	add.w	r2, r7, #14
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
 80058b8:	4602      	mov	r2, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fe6f 	bl	80075c4 <USBD_LL_Start>
 80058e6:	4603      	mov	r3, r0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	4611      	mov	r1, r2
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4798      	blx	r3
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	4611      	mov	r1, r2
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f001 f932 	bl	8006bee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005998:	461a      	mov	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d01a      	beq.n	80059e4 <USBD_LL_SetupStage+0x72>
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d822      	bhi.n	80059f8 <USBD_LL_SetupStage+0x86>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <USBD_LL_SetupStage+0x4a>
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d00a      	beq.n	80059d0 <USBD_LL_SetupStage+0x5e>
 80059ba:	e01d      	b.n	80059f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fb5f 	bl	8006088 <USBD_StdDevReq>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
      break;
 80059ce:	e020      	b.n	8005a12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fbc7 	bl	800616c <USBD_StdItfReq>
 80059de:	4603      	mov	r3, r0
 80059e0:	73fb      	strb	r3, [r7, #15]
      break;
 80059e2:	e016      	b.n	8005a12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fc29 	bl	8006244 <USBD_StdEPReq>
 80059f2:	4603      	mov	r3, r0
 80059f4:	73fb      	strb	r3, [r7, #15]
      break;
 80059f6:	e00c      	b.n	8005a12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fe3c 	bl	8007684 <USBD_LL_StallEP>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	bf00      	nop
  }

  return ret;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	460b      	mov	r3, r1
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d16e      	bne.n	8005b12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	f040 8098 	bne.w	8005b78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d913      	bls.n	8005a7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	1ad2      	subs	r2, r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bf28      	it	cs
 8005a6e:	4613      	movcs	r3, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 f9ae 	bl	8006dd6 <USBD_CtlContinueRx>
 8005a7a:	e07d      	b.n	8005b78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d014      	beq.n	8005ab4 <USBD_LL_DataOutStage+0x98>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d81d      	bhi.n	8005aca <USBD_LL_DataOutStage+0xae>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <USBD_LL_DataOutStage+0x7c>
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d003      	beq.n	8005a9e <USBD_LL_DataOutStage+0x82>
 8005a96:	e018      	b.n	8005aca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a9c:	e018      	b.n	8005ad0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fa5e 	bl	8005f6a <USBD_CoreFindIF>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ab2:	e00d      	b.n	8005ad0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fa60 	bl	8005f84 <USBD_CoreFindEP>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ac8:	e002      	b.n	8005ad0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	75bb      	strb	r3, [r7, #22]
            break;
 8005ace:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ad0:	7dbb      	ldrb	r3, [r7, #22]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d119      	bne.n	8005b0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d113      	bne.n	8005b0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ae2:	7dba      	ldrb	r2, [r7, #22]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	32ae      	adds	r2, #174	; 0xae
 8005ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005af2:	7dba      	ldrb	r2, [r7, #22]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005afa:	7dba      	ldrb	r2, [r7, #22]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	32ae      	adds	r2, #174	; 0xae
 8005b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f001 f974 	bl	8006df8 <USBD_CtlSendStatus>
 8005b10:	e032      	b.n	8005b78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fa31 	bl	8005f84 <USBD_CoreFindEP>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b26:	7dbb      	ldrb	r3, [r7, #22]
 8005b28:	2bff      	cmp	r3, #255	; 0xff
 8005b2a:	d025      	beq.n	8005b78 <USBD_LL_DataOutStage+0x15c>
 8005b2c:	7dbb      	ldrb	r3, [r7, #22]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d122      	bne.n	8005b78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d117      	bne.n	8005b6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b3e:	7dba      	ldrb	r2, [r7, #22]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	32ae      	adds	r2, #174	; 0xae
 8005b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00f      	beq.n	8005b6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b4e:	7dba      	ldrb	r2, [r7, #22]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b56:	7dba      	ldrb	r2, [r7, #22]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	32ae      	adds	r2, #174	; 0xae
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	7afa      	ldrb	r2, [r7, #11]
 8005b64:	4611      	mov	r1, r2
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	4798      	blx	r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	e000      	b.n	8005b7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d16f      	bne.n	8005c76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3314      	adds	r3, #20
 8005b9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d15a      	bne.n	8005c5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d914      	bls.n	8005bdc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f001 f8d6 	bl	8006d7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f001 fdff 	bl	80077d8 <USBD_LL_PrepareReceive>
 8005bda:	e03f      	b.n	8005c5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d11c      	bne.n	8005c22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d316      	bcc.n	8005c22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d20f      	bcs.n	8005c22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2100      	movs	r1, #0
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f001 f8b7 	bl	8006d7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f001 fddc 	bl	80077d8 <USBD_LL_PrepareReceive>
 8005c20:	e01c      	b.n	8005c5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d10f      	bne.n	8005c4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f001 fd17 	bl	8007684 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f001 f8e1 	bl	8006e1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03a      	beq.n	8005cdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe42 	bl	80058f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c74:	e032      	b.n	8005cdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f97f 	bl	8005f84 <USBD_CoreFindEP>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2bff      	cmp	r3, #255	; 0xff
 8005c8e:	d025      	beq.n	8005cdc <USBD_LL_DataInStage+0x15a>
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d122      	bne.n	8005cdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d11c      	bne.n	8005cdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ca2:	7dfa      	ldrb	r2, [r7, #23]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	32ae      	adds	r2, #174	; 0xae
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d014      	beq.n	8005cdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cb2:	7dfa      	ldrb	r2, [r7, #23]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cba:	7dfa      	ldrb	r2, [r7, #23]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	32ae      	adds	r2, #174	; 0xae
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	7afa      	ldrb	r2, [r7, #11]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	4798      	blx	r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cd2:	7dbb      	ldrb	r3, [r7, #22]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005cd8:	7dbb      	ldrb	r3, [r7, #22]
 8005cda:	e000      	b.n	8005cde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d014      	beq.n	8005d4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00e      	beq.n	8005d4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6852      	ldr	r2, [r2, #4]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d4c:	2340      	movs	r3, #64	; 0x40
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2100      	movs	r1, #0
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fc51 	bl	80075fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fc43 	bl	80075fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2240      	movs	r2, #64	; 0x40
 8005d7e:	621a      	str	r2, [r3, #32]

  return ret;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d106      	bne.n	8005df8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d110      	bne.n	8005e3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	32ae      	adds	r2, #174	; 0xae
 8005e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e01c      	b.n	8005ea2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d115      	bne.n	8005ea0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	32ae      	adds	r2, #174	; 0xae
 8005e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32ae      	adds	r2, #174	; 0xae
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	32ae      	adds	r2, #174	; 0xae
 8005ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e01c      	b.n	8005f06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d115      	bne.n	8005f04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	32ae      	adds	r2, #174	; 0xae
 8005ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	32ae      	adds	r2, #174	; 0xae
 8005ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	4611      	mov	r1, r2
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6852      	ldr	r2, [r2, #4]
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	4611      	mov	r1, r2
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b086      	sub	sp, #24
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d920      	bls.n	8006008 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fce:	e013      	b.n	8005ff8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fd0:	f107 030a 	add.w	r3, r7, #10
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6978      	ldr	r0, [r7, #20]
 8005fd8:	f000 f81b 	bl	8006012 <USBD_GetNextDesc>
 8005fdc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d108      	bne.n	8005ff8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	789b      	ldrb	r3, [r3, #2]
 8005fee:	78fa      	ldrb	r2, [r7, #3]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d008      	beq.n	8006006 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	885b      	ldrh	r3, [r3, #2]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	897b      	ldrh	r3, [r7, #10]
 8006000:	429a      	cmp	r2, r3
 8006002:	d8e5      	bhi.n	8005fd0 <USBD_GetEpDesc+0x32>
 8006004:	e000      	b.n	8006008 <USBD_GetEpDesc+0x6a>
          break;
 8006006:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006008:	693b      	ldr	r3, [r7, #16]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	881a      	ldrh	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	4413      	add	r3, r2
 800602c:	b29a      	uxth	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800603e:	68fb      	ldr	r3, [r7, #12]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3301      	adds	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800606a:	8a3b      	ldrh	r3, [r7, #16]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	b21a      	sxth	r2, r3
 8006070:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006074:	4313      	orrs	r3, r2
 8006076:	b21b      	sxth	r3, r3
 8006078:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800607a:	89fb      	ldrh	r3, [r7, #14]
}
 800607c:	4618      	mov	r0, r3
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d005      	beq.n	80060ae <USBD_StdDevReq+0x26>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d857      	bhi.n	8006156 <USBD_StdDevReq+0xce>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00f      	beq.n	80060ca <USBD_StdDevReq+0x42>
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d153      	bne.n	8006156 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	32ae      	adds	r2, #174	; 0xae
 80060b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e04a      	b.n	8006160 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d83b      	bhi.n	800614a <USBD_StdDevReq+0xc2>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <USBD_StdDevReq+0x50>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	08006141 	.word	0x08006141
 80060e0:	0800614b 	.word	0x0800614b
 80060e4:	08006137 	.word	0x08006137
 80060e8:	0800614b 	.word	0x0800614b
 80060ec:	0800610b 	.word	0x0800610b
 80060f0:	08006101 	.word	0x08006101
 80060f4:	0800614b 	.word	0x0800614b
 80060f8:	08006123 	.word	0x08006123
 80060fc:	08006115 	.word	0x08006115
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa3c 	bl	8006580 <USBD_GetDescriptor>
          break;
 8006108:	e024      	b.n	8006154 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fbcb 	bl	80068a8 <USBD_SetAddress>
          break;
 8006112:	e01f      	b.n	8006154 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fc0a 	bl	8006930 <USBD_SetConfig>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
          break;
 8006120:	e018      	b.n	8006154 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fcad 	bl	8006a84 <USBD_GetConfig>
          break;
 800612a:	e013      	b.n	8006154 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fcde 	bl	8006af0 <USBD_GetStatus>
          break;
 8006134:	e00e      	b.n	8006154 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fd0d 	bl	8006b58 <USBD_SetFeature>
          break;
 800613e:	e009      	b.n	8006154 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fd31 	bl	8006baa <USBD_ClrFeature>
          break;
 8006148:	e004      	b.n	8006154 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fd88 	bl	8006c62 <USBD_CtlError>
          break;
 8006152:	bf00      	nop
      }
      break;
 8006154:	e004      	b.n	8006160 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fd82 	bl	8006c62 <USBD_CtlError>
      break;
 800615e:	bf00      	nop
  }

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop

0800616c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d005      	beq.n	8006192 <USBD_StdItfReq+0x26>
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d852      	bhi.n	8006230 <USBD_StdItfReq+0xc4>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <USBD_StdItfReq+0x26>
 800618e:	2b20      	cmp	r3, #32
 8006190:	d14e      	bne.n	8006230 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	b2db      	uxtb	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	2b02      	cmp	r3, #2
 800619e:	d840      	bhi.n	8006222 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	889b      	ldrh	r3, [r3, #4]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d836      	bhi.n	8006218 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	889b      	ldrh	r3, [r3, #4]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fed9 	bl	8005f6a <USBD_CoreFindIF>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	2bff      	cmp	r3, #255	; 0xff
 80061c0:	d01d      	beq.n	80061fe <USBD_StdItfReq+0x92>
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11a      	bne.n	80061fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061c8:	7bba      	ldrb	r2, [r7, #14]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	32ae      	adds	r2, #174	; 0xae
 80061ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061d8:	7bba      	ldrb	r2, [r7, #14]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061e0:	7bba      	ldrb	r2, [r7, #14]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32ae      	adds	r2, #174	; 0xae
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061f6:	e004      	b.n	8006202 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061f8:	2303      	movs	r3, #3
 80061fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061fc:	e001      	b.n	8006202 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061fe:	2303      	movs	r3, #3
 8006200:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d110      	bne.n	800622c <USBD_StdItfReq+0xc0>
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10d      	bne.n	800622c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fdf1 	bl	8006df8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006216:	e009      	b.n	800622c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fd21 	bl	8006c62 <USBD_CtlError>
          break;
 8006220:	e004      	b.n	800622c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fd1c 	bl	8006c62 <USBD_CtlError>
          break;
 800622a:	e000      	b.n	800622e <USBD_StdItfReq+0xc2>
          break;
 800622c:	bf00      	nop
      }
      break;
 800622e:	e004      	b.n	800623a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fd15 	bl	8006c62 <USBD_CtlError>
      break;
 8006238:	bf00      	nop
  }

  return ret;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	889b      	ldrh	r3, [r3, #4]
 8006256:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d007      	beq.n	8006274 <USBD_StdEPReq+0x30>
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	f200 817f 	bhi.w	8006568 <USBD_StdEPReq+0x324>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02a      	beq.n	80062c4 <USBD_StdEPReq+0x80>
 800626e:	2b20      	cmp	r3, #32
 8006270:	f040 817a 	bne.w	8006568 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fe83 	bl	8005f84 <USBD_CoreFindEP>
 800627e:	4603      	mov	r3, r0
 8006280:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006282:	7b7b      	ldrb	r3, [r7, #13]
 8006284:	2bff      	cmp	r3, #255	; 0xff
 8006286:	f000 8174 	beq.w	8006572 <USBD_StdEPReq+0x32e>
 800628a:	7b7b      	ldrb	r3, [r7, #13]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 8170 	bne.w	8006572 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006292:	7b7a      	ldrb	r2, [r7, #13]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800629a:	7b7a      	ldrb	r2, [r7, #13]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	32ae      	adds	r2, #174	; 0xae
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8163 	beq.w	8006572 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062ac:	7b7a      	ldrb	r2, [r7, #13]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32ae      	adds	r2, #174	; 0xae
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062c2:	e156      	b.n	8006572 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d008      	beq.n	80062de <USBD_StdEPReq+0x9a>
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	f300 8145 	bgt.w	800655c <USBD_StdEPReq+0x318>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 809b 	beq.w	800640e <USBD_StdEPReq+0x1ca>
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d03c      	beq.n	8006356 <USBD_StdEPReq+0x112>
 80062dc:	e13e      	b.n	800655c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d002      	beq.n	80062f0 <USBD_StdEPReq+0xac>
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d016      	beq.n	800631c <USBD_StdEPReq+0xd8>
 80062ee:	e02c      	b.n	800634a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <USBD_StdEPReq+0xce>
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d00a      	beq.n	8006312 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 f9bf 	bl	8007684 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f9bb 	bl	8007684 <USBD_LL_StallEP>
 800630e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006310:	e020      	b.n	8006354 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fca4 	bl	8006c62 <USBD_CtlError>
              break;
 800631a:	e01b      	b.n	8006354 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	885b      	ldrh	r3, [r3, #2]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10e      	bne.n	8006342 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <USBD_StdEPReq+0xfe>
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d008      	beq.n	8006342 <USBD_StdEPReq+0xfe>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	88db      	ldrh	r3, [r3, #6]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f9a1 	bl	8007684 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fd58 	bl	8006df8 <USBD_CtlSendStatus>

              break;
 8006348:	e004      	b.n	8006354 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fc88 	bl	8006c62 <USBD_CtlError>
              break;
 8006352:	bf00      	nop
          }
          break;
 8006354:	e107      	b.n	8006566 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d002      	beq.n	8006368 <USBD_StdEPReq+0x124>
 8006362:	2b03      	cmp	r3, #3
 8006364:	d016      	beq.n	8006394 <USBD_StdEPReq+0x150>
 8006366:	e04b      	b.n	8006400 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00d      	beq.n	800638a <USBD_StdEPReq+0x146>
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b80      	cmp	r3, #128	; 0x80
 8006372:	d00a      	beq.n	800638a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 f983 	bl	8007684 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800637e:	2180      	movs	r1, #128	; 0x80
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f97f 	bl	8007684 <USBD_LL_StallEP>
 8006386:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006388:	e040      	b.n	800640c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc68 	bl	8006c62 <USBD_CtlError>
              break;
 8006392:	e03b      	b.n	800640c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	885b      	ldrh	r3, [r3, #2]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d136      	bne.n	800640a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 f989 	bl	80076c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fd21 	bl	8006df8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fde2 	bl	8005f84 <USBD_CoreFindEP>
 80063c0:	4603      	mov	r3, r0
 80063c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063c4:	7b7b      	ldrb	r3, [r7, #13]
 80063c6:	2bff      	cmp	r3, #255	; 0xff
 80063c8:	d01f      	beq.n	800640a <USBD_StdEPReq+0x1c6>
 80063ca:	7b7b      	ldrb	r3, [r7, #13]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11c      	bne.n	800640a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063d0:	7b7a      	ldrb	r2, [r7, #13]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063d8:	7b7a      	ldrb	r2, [r7, #13]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	; 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d010      	beq.n	800640a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063e8:	7b7a      	ldrb	r2, [r7, #13]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	32ae      	adds	r2, #174	; 0xae
 80063ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063fe:	e004      	b.n	800640a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fc2d 	bl	8006c62 <USBD_CtlError>
              break;
 8006408:	e000      	b.n	800640c <USBD_StdEPReq+0x1c8>
              break;
 800640a:	bf00      	nop
          }
          break;
 800640c:	e0ab      	b.n	8006566 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d002      	beq.n	8006420 <USBD_StdEPReq+0x1dc>
 800641a:	2b03      	cmp	r3, #3
 800641c:	d032      	beq.n	8006484 <USBD_StdEPReq+0x240>
 800641e:	e097      	b.n	8006550 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <USBD_StdEPReq+0x1f2>
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d004      	beq.n	8006436 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fc17 	bl	8006c62 <USBD_CtlError>
                break;
 8006434:	e091      	b.n	800655a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800643a:	2b00      	cmp	r3, #0
 800643c:	da0b      	bge.n	8006456 <USBD_StdEPReq+0x212>
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	3310      	adds	r3, #16
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	3304      	adds	r3, #4
 8006454:	e00b      	b.n	800646e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	4413      	add	r3, r2
 800646c:	3304      	adds	r3, #4
 800646e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2202      	movs	r2, #2
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc61 	bl	8006d44 <USBD_CtlSendData>
              break;
 8006482:	e06a      	b.n	800655a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006488:	2b00      	cmp	r3, #0
 800648a:	da11      	bge.n	80064b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	3324      	adds	r3, #36	; 0x24
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d117      	bne.n	80064d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fbda 	bl	8006c62 <USBD_CtlError>
                  break;
 80064ae:	e054      	b.n	800655a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fbc7 	bl	8006c62 <USBD_CtlError>
                  break;
 80064d4:	e041      	b.n	800655a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da0b      	bge.n	80064f6 <USBD_StdEPReq+0x2b2>
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	3310      	adds	r3, #16
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	3304      	adds	r3, #4
 80064f4:	e00b      	b.n	800650e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	3304      	adds	r3, #4
 800650e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <USBD_StdEPReq+0x2d8>
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d103      	bne.n	8006524 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e00e      	b.n	8006542 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 f8e9 	bl	8007700 <USBD_LL_IsStallEP>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e002      	b.n	8006542 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2202      	movs	r2, #2
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fbfb 	bl	8006d44 <USBD_CtlSendData>
              break;
 800654e:	e004      	b.n	800655a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb85 	bl	8006c62 <USBD_CtlError>
              break;
 8006558:	bf00      	nop
          }
          break;
 800655a:	e004      	b.n	8006566 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fb7f 	bl	8006c62 <USBD_CtlError>
          break;
 8006564:	bf00      	nop
      }
      break;
 8006566:	e005      	b.n	8006574 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fb79 	bl	8006c62 <USBD_CtlError>
      break;
 8006570:	e000      	b.n	8006574 <USBD_StdEPReq+0x330>
      break;
 8006572:	bf00      	nop
  }

  return ret;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	885b      	ldrh	r3, [r3, #2]
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	2b0e      	cmp	r3, #14
 80065a2:	f200 8152 	bhi.w	800684a <USBD_GetDescriptor+0x2ca>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <USBD_GetDescriptor+0x2c>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	0800661d 	.word	0x0800661d
 80065b0:	08006635 	.word	0x08006635
 80065b4:	08006675 	.word	0x08006675
 80065b8:	0800684b 	.word	0x0800684b
 80065bc:	0800684b 	.word	0x0800684b
 80065c0:	080067eb 	.word	0x080067eb
 80065c4:	08006817 	.word	0x08006817
 80065c8:	0800684b 	.word	0x0800684b
 80065cc:	0800684b 	.word	0x0800684b
 80065d0:	0800684b 	.word	0x0800684b
 80065d4:	0800684b 	.word	0x0800684b
 80065d8:	0800684b 	.word	0x0800684b
 80065dc:	0800684b 	.word	0x0800684b
 80065e0:	0800684b 	.word	0x0800684b
 80065e4:	080065e9 	.word	0x080065e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	7c12      	ldrb	r2, [r2, #16]
 8006600:	f107 0108 	add.w	r1, r7, #8
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
 8006608:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800660a:	e126      	b.n	800685a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fb27 	bl	8006c62 <USBD_CtlError>
        err++;
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	3301      	adds	r3, #1
 8006618:	72fb      	strb	r3, [r7, #11]
      break;
 800661a:	e11e      	b.n	800685a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	7c12      	ldrb	r2, [r2, #16]
 8006628:	f107 0108 	add.w	r1, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
      break;
 8006632:	e112      	b.n	800685a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	7c1b      	ldrb	r3, [r3, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10d      	bne.n	8006658 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f107 0208 	add.w	r2, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	2202      	movs	r2, #2
 8006654:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006656:	e100      	b.n	800685a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	2202      	movs	r2, #2
 8006670:	701a      	strb	r2, [r3, #0]
      break;
 8006672:	e0f2      	b.n	800685a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	885b      	ldrh	r3, [r3, #2]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b05      	cmp	r3, #5
 800667c:	f200 80ac 	bhi.w	80067d8 <USBD_GetDescriptor+0x258>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <USBD_GetDescriptor+0x108>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	080066a1 	.word	0x080066a1
 800668c:	080066d5 	.word	0x080066d5
 8006690:	08006709 	.word	0x08006709
 8006694:	0800673d 	.word	0x0800673d
 8006698:	08006771 	.word	0x08006771
 800669c:	080067a5 	.word	0x080067a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	7c12      	ldrb	r2, [r2, #16]
 80066b8:	f107 0108 	add.w	r1, r7, #8
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
 80066c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c2:	e091      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 facb 	bl	8006c62 <USBD_CtlError>
            err++;
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	3301      	adds	r3, #1
 80066d0:	72fb      	strb	r3, [r7, #11]
          break;
 80066d2:	e089      	b.n	80067e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	7c12      	ldrb	r2, [r2, #16]
 80066ec:	f107 0108 	add.w	r1, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f6:	e077      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fab1 	bl	8006c62 <USBD_CtlError>
            err++;
 8006700:	7afb      	ldrb	r3, [r7, #11]
 8006702:	3301      	adds	r3, #1
 8006704:	72fb      	strb	r3, [r7, #11]
          break;
 8006706:	e06f      	b.n	80067e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	7c12      	ldrb	r2, [r2, #16]
 8006720:	f107 0108 	add.w	r1, r7, #8
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672a:	e05d      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa97 	bl	8006c62 <USBD_CtlError>
            err++;
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	3301      	adds	r3, #1
 8006738:	72fb      	strb	r3, [r7, #11]
          break;
 800673a:	e055      	b.n	80067e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	7c12      	ldrb	r2, [r2, #16]
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675e:	e043      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa7d 	bl	8006c62 <USBD_CtlError>
            err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
          break;
 800676e:	e03b      	b.n	80067e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	7c12      	ldrb	r2, [r2, #16]
 8006788:	f107 0108 	add.w	r1, r7, #8
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006792:	e029      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa63 	bl	8006c62 <USBD_CtlError>
            err++;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	3301      	adds	r3, #1
 80067a0:	72fb      	strb	r3, [r7, #11]
          break;
 80067a2:	e021      	b.n	80067e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	7c12      	ldrb	r2, [r2, #16]
 80067bc:	f107 0108 	add.w	r1, r7, #8
 80067c0:	4610      	mov	r0, r2
 80067c2:	4798      	blx	r3
 80067c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067c6:	e00f      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa49 	bl	8006c62 <USBD_CtlError>
            err++;
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	3301      	adds	r3, #1
 80067d4:	72fb      	strb	r3, [r7, #11]
          break;
 80067d6:	e007      	b.n	80067e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa41 	bl	8006c62 <USBD_CtlError>
          err++;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	3301      	adds	r3, #1
 80067e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067e6:	bf00      	nop
      }
      break;
 80067e8:	e037      	b.n	800685a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	7c1b      	ldrb	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	f107 0208 	add.w	r2, r7, #8
 80067fe:	4610      	mov	r0, r2
 8006800:	4798      	blx	r3
 8006802:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006804:	e029      	b.n	800685a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa2a 	bl	8006c62 <USBD_CtlError>
        err++;
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	3301      	adds	r3, #1
 8006812:	72fb      	strb	r3, [r7, #11]
      break;
 8006814:	e021      	b.n	800685a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7c1b      	ldrb	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	f107 0208 	add.w	r2, r7, #8
 800682a:	4610      	mov	r0, r2
 800682c:	4798      	blx	r3
 800682e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	2207      	movs	r2, #7
 8006836:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006838:	e00f      	b.n	800685a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa10 	bl	8006c62 <USBD_CtlError>
        err++;
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	3301      	adds	r3, #1
 8006846:	72fb      	strb	r3, [r7, #11]
      break;
 8006848:	e007      	b.n	800685a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fa08 	bl	8006c62 <USBD_CtlError>
      err++;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	3301      	adds	r3, #1
 8006856:	72fb      	strb	r3, [r7, #11]
      break;
 8006858:	bf00      	nop
  }

  if (err != 0U)
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11e      	bne.n	800689e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	88db      	ldrh	r3, [r3, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d016      	beq.n	8006896 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006868:	893b      	ldrh	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	88da      	ldrh	r2, [r3, #6]
 8006872:	893b      	ldrh	r3, [r7, #8]
 8006874:	4293      	cmp	r3, r2
 8006876:	bf28      	it	cs
 8006878:	4613      	movcs	r3, r2
 800687a:	b29b      	uxth	r3, r3
 800687c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800687e:	893b      	ldrh	r3, [r7, #8]
 8006880:	461a      	mov	r2, r3
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa5d 	bl	8006d44 <USBD_CtlSendData>
 800688a:	e009      	b.n	80068a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9e7 	bl	8006c62 <USBD_CtlError>
 8006894:	e004      	b.n	80068a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 faae 	bl	8006df8 <USBD_CtlSendStatus>
 800689c:	e000      	b.n	80068a0 <USBD_GetDescriptor+0x320>
    return;
 800689e:	bf00      	nop
  }
}
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	889b      	ldrh	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d131      	bne.n	800691e <USBD_SetAddress+0x76>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d12d      	bne.n	800691e <USBD_SetAddress+0x76>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	885b      	ldrh	r3, [r3, #2]
 80068c6:	2b7f      	cmp	r3, #127	; 0x7f
 80068c8:	d829      	bhi.n	800691e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d104      	bne.n	80068ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f9bc 	bl	8006c62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ea:	e01d      	b.n	8006928 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7bfa      	ldrb	r2, [r7, #15]
 80068f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 ff2d 	bl	8007758 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa7a 	bl	8006df8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2202      	movs	r2, #2
 800690e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006912:	e009      	b.n	8006928 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691c:	e004      	b.n	8006928 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f99e 	bl	8006c62 <USBD_CtlError>
  }
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	885b      	ldrh	r3, [r3, #2]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	4b4e      	ldr	r3, [pc, #312]	; (8006a80 <USBD_SetConfig+0x150>)
 8006946:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006948:	4b4d      	ldr	r3, [pc, #308]	; (8006a80 <USBD_SetConfig+0x150>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d905      	bls.n	800695c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f985 	bl	8006c62 <USBD_CtlError>
    return USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	e08c      	b.n	8006a76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d002      	beq.n	800696e <USBD_SetConfig+0x3e>
 8006968:	2b03      	cmp	r3, #3
 800696a:	d029      	beq.n	80069c0 <USBD_SetConfig+0x90>
 800696c:	e075      	b.n	8006a5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800696e:	4b44      	ldr	r3, [pc, #272]	; (8006a80 <USBD_SetConfig+0x150>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d020      	beq.n	80069b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <USBD_SetConfig+0x150>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006980:	4b3f      	ldr	r3, [pc, #252]	; (8006a80 <USBD_SetConfig+0x150>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fe ffbd 	bl	8005906 <USBD_SetClassConfig>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f962 	bl	8006c62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069a6:	e065      	b.n	8006a74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa25 	bl	8006df8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2203      	movs	r2, #3
 80069b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069b6:	e05d      	b.n	8006a74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa1d 	bl	8006df8 <USBD_CtlSendStatus>
      break;
 80069be:	e059      	b.n	8006a74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069c0:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <USBD_SetConfig+0x150>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d112      	bne.n	80069ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069d0:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <USBD_SetConfig+0x150>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069da:	4b29      	ldr	r3, [pc, #164]	; (8006a80 <USBD_SetConfig+0x150>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fe ffac 	bl	800593e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa06 	bl	8006df8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069ec:	e042      	b.n	8006a74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <USBD_SetConfig+0x150>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d02a      	beq.n	8006a52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fe ff9a 	bl	800593e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <USBD_SetConfig+0x150>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <USBD_SetConfig+0x150>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fe ff73 	bl	8005906 <USBD_SetClassConfig>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00f      	beq.n	8006a4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f918 	bl	8006c62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fe ff7f 	bl	800593e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a48:	e014      	b.n	8006a74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9d4 	bl	8006df8 <USBD_CtlSendStatus>
      break;
 8006a50:	e010      	b.n	8006a74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9d0 	bl	8006df8 <USBD_CtlSendStatus>
      break;
 8006a58:	e00c      	b.n	8006a74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f900 	bl	8006c62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <USBD_SetConfig+0x150>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe ff68 	bl	800593e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	73fb      	strb	r3, [r7, #15]
      break;
 8006a72:	bf00      	nop
  }

  return ret;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2000012c 	.word	0x2000012c

08006a84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	88db      	ldrh	r3, [r3, #6]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d004      	beq.n	8006aa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f8e2 	bl	8006c62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a9e:	e023      	b.n	8006ae8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	dc02      	bgt.n	8006ab2 <USBD_GetConfig+0x2e>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dc03      	bgt.n	8006ab8 <USBD_GetConfig+0x34>
 8006ab0:	e015      	b.n	8006ade <USBD_GetConfig+0x5a>
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d00b      	beq.n	8006ace <USBD_GetConfig+0x4a>
 8006ab6:	e012      	b.n	8006ade <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f93c 	bl	8006d44 <USBD_CtlSendData>
        break;
 8006acc:	e00c      	b.n	8006ae8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f934 	bl	8006d44 <USBD_CtlSendData>
        break;
 8006adc:	e004      	b.n	8006ae8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8be 	bl	8006c62 <USBD_CtlError>
        break;
 8006ae6:	bf00      	nop
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d81e      	bhi.n	8006b46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	88db      	ldrh	r3, [r3, #6]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d004      	beq.n	8006b1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8a5 	bl	8006c62 <USBD_CtlError>
        break;
 8006b18:	e01a      	b.n	8006b50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f043 0202 	orr.w	r2, r3, #2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f900 	bl	8006d44 <USBD_CtlSendData>
      break;
 8006b44:	e004      	b.n	8006b50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f88a 	bl	8006c62 <USBD_CtlError>
      break;
 8006b4e:	bf00      	nop
  }
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	885b      	ldrh	r3, [r3, #2]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d107      	bne.n	8006b7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f940 	bl	8006df8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b78:	e013      	b.n	8006ba2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	885b      	ldrh	r3, [r3, #2]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d10b      	bne.n	8006b9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	889b      	ldrh	r3, [r3, #4]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f930 	bl	8006df8 <USBD_CtlSendStatus>
}
 8006b98:	e003      	b.n	8006ba2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f860 	bl	8006c62 <USBD_CtlError>
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d80b      	bhi.n	8006bda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10c      	bne.n	8006be4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f910 	bl	8006df8 <USBD_CtlSendStatus>
      }
      break;
 8006bd8:	e004      	b.n	8006be4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f840 	bl	8006c62 <USBD_CtlError>
      break;
 8006be2:	e000      	b.n	8006be6 <USBD_ClrFeature+0x3c>
      break;
 8006be4:	bf00      	nop
  }
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fa17 	bl	800604c <SWAPBYTE>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff fa0a 	bl	800604c <SWAPBYTE>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff f9fd 	bl	800604c <SWAPBYTE>
 8006c52:	4603      	mov	r3, r0
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	80da      	strh	r2, [r3, #6]
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c6c:	2180      	movs	r1, #128	; 0x80
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fd08 	bl	8007684 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c74:	2100      	movs	r1, #0
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fd04 	bl	8007684 <USBD_LL_StallEP>
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d036      	beq.n	8006d08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c9e:	6938      	ldr	r0, [r7, #16]
 8006ca0:	f000 f836 	bl	8006d10 <USBD_GetLen>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2203      	movs	r2, #3
 8006ccc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cd4:	e013      	b.n	8006cfe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	4413      	add	r3, r2
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	7812      	ldrb	r2, [r2, #0]
 8006ce0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	613b      	str	r3, [r7, #16]
    idx++;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	3301      	adds	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e7      	bne.n	8006cd6 <USBD_GetString+0x52>
 8006d06:	e000      	b.n	8006d0a <USBD_GetString+0x86>
    return;
 8006d08:	bf00      	nop
  }
}
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d20:	e005      	b.n	8006d2e <USBD_GetLen+0x1e>
  {
    len++;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	3301      	adds	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f5      	bne.n	8006d22 <USBD_GetLen+0x12>
  }

  return len;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fd13 	bl	8007796 <USBD_LL_Transmit>

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fd02 	bl	8007796 <USBD_LL_Transmit>

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2203      	movs	r2, #3
 8006dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fd06 	bl	80077d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	2100      	movs	r1, #0
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fcf5 	bl	80077d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2204      	movs	r2, #4
 8006e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fcc1 	bl	8007796 <USBD_LL_Transmit>

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2205      	movs	r2, #5
 8006e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fccf 	bl	80077d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4912      	ldr	r1, [pc, #72]	; (8006e94 <MX_USB_DEVICE_Init+0x50>)
 8006e4c:	4812      	ldr	r0, [pc, #72]	; (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e4e:	f7fe fcdd 	bl	800580c <USBD_Init>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e58:	f7f9 fc1e 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e5c:	490f      	ldr	r1, [pc, #60]	; (8006e9c <MX_USB_DEVICE_Init+0x58>)
 8006e5e:	480e      	ldr	r0, [pc, #56]	; (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e60:	f7fe fd04 	bl	800586c <USBD_RegisterClass>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e6a:	f7f9 fc15 	bl	8000698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e6e:	490c      	ldr	r1, [pc, #48]	; (8006ea0 <MX_USB_DEVICE_Init+0x5c>)
 8006e70:	4809      	ldr	r0, [pc, #36]	; (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e72:	f7fe fbf5 	bl	8005660 <USBD_CDC_RegisterInterface>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e7c:	f7f9 fc0c 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e80:	4805      	ldr	r0, [pc, #20]	; (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e82:	f7fe fd29 	bl	80058d8 <USBD_Start>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e8c:	f7f9 fc04 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e90:	bf00      	nop
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200000ac 	.word	0x200000ac
 8006e98:	20000130 	.word	0x20000130
 8006e9c:	20000018 	.word	0x20000018
 8006ea0:	20000098 	.word	0x20000098

08006ea4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4905      	ldr	r1, [pc, #20]	; (8006ec0 <CDC_Init_FS+0x1c>)
 8006eac:	4805      	ldr	r0, [pc, #20]	; (8006ec4 <CDC_Init_FS+0x20>)
 8006eae:	f7fe fbf1 	bl	8005694 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006eb2:	4905      	ldr	r1, [pc, #20]	; (8006ec8 <CDC_Init_FS+0x24>)
 8006eb4:	4803      	ldr	r0, [pc, #12]	; (8006ec4 <CDC_Init_FS+0x20>)
 8006eb6:	f7fe fc0f 	bl	80056d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006eba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000c0c 	.word	0x20000c0c
 8006ec4:	20000130 	.word	0x20000130
 8006ec8:	2000040c 	.word	0x2000040c

08006ecc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ed0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	6039      	str	r1, [r7, #0]
 8006ee6:	71fb      	strb	r3, [r7, #7]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b23      	cmp	r3, #35	; 0x23
 8006ef0:	d84a      	bhi.n	8006f88 <CDC_Control_FS+0xac>
 8006ef2:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <CDC_Control_FS+0x1c>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f89 	.word	0x08006f89
 8006efc:	08006f89 	.word	0x08006f89
 8006f00:	08006f89 	.word	0x08006f89
 8006f04:	08006f89 	.word	0x08006f89
 8006f08:	08006f89 	.word	0x08006f89
 8006f0c:	08006f89 	.word	0x08006f89
 8006f10:	08006f89 	.word	0x08006f89
 8006f14:	08006f89 	.word	0x08006f89
 8006f18:	08006f89 	.word	0x08006f89
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	08006f89 	.word	0x08006f89
 8006f24:	08006f89 	.word	0x08006f89
 8006f28:	08006f89 	.word	0x08006f89
 8006f2c:	08006f89 	.word	0x08006f89
 8006f30:	08006f89 	.word	0x08006f89
 8006f34:	08006f89 	.word	0x08006f89
 8006f38:	08006f89 	.word	0x08006f89
 8006f3c:	08006f89 	.word	0x08006f89
 8006f40:	08006f89 	.word	0x08006f89
 8006f44:	08006f89 	.word	0x08006f89
 8006f48:	08006f89 	.word	0x08006f89
 8006f4c:	08006f89 	.word	0x08006f89
 8006f50:	08006f89 	.word	0x08006f89
 8006f54:	08006f89 	.word	0x08006f89
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f89 	.word	0x08006f89
 8006f68:	08006f89 	.word	0x08006f89
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006f89 	.word	0x08006f89
 8006f78:	08006f89 	.word	0x08006f89
 8006f7c:	08006f89 	.word	0x08006f89
 8006f80:	08006f89 	.word	0x08006f89
 8006f84:	08006f89 	.word	0x08006f89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f88:	bf00      	nop
  }

  return (USBD_OK);
 8006f8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4805      	ldr	r0, [pc, #20]	; (8006fbc <CDC_Receive_FS+0x24>)
 8006fa6:	f7fe fb97 	bl	80056d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006faa:	4804      	ldr	r0, [pc, #16]	; (8006fbc <CDC_Receive_FS+0x24>)
 8006fac:	f7fe fbf8 	bl	80057a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006fb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000130 	.word	0x20000130

08006fc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fd0:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <CDC_Transmit_FS+0x48>)
 8006fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e00b      	b.n	8006ffe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4806      	ldr	r0, [pc, #24]	; (8007008 <CDC_Transmit_FS+0x48>)
 8006fee:	f7fe fb51 	bl	8005694 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <CDC_Transmit_FS+0x48>)
 8006ff4:	f7fe fb8e 	bl	8005714 <USBD_CDC_TransmitPacket>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000130 	.word	0x20000130

0800700c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800701e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2212      	movs	r2, #18
 8007040:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	200000cc 	.word	0x200000cc

08007054 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2204      	movs	r2, #4
 8007064:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	200000ec 	.word	0x200000ec

08007078 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4907      	ldr	r1, [pc, #28]	; (80070ac <USBD_FS_ProductStrDescriptor+0x34>)
 800708e:	4808      	ldr	r0, [pc, #32]	; (80070b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007090:	f7ff fdf8 	bl	8006c84 <USBD_GetString>
 8007094:	e004      	b.n	80070a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	4904      	ldr	r1, [pc, #16]	; (80070ac <USBD_FS_ProductStrDescriptor+0x34>)
 800709a:	4805      	ldr	r0, [pc, #20]	; (80070b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800709c:	f7ff fdf2 	bl	8006c84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070a0:	4b02      	ldr	r3, [pc, #8]	; (80070ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	2000140c 	.word	0x2000140c
 80070b0:	080079e4 	.word	0x080079e4

080070b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	4904      	ldr	r1, [pc, #16]	; (80070d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070c4:	4804      	ldr	r0, [pc, #16]	; (80070d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070c6:	f7ff fddd 	bl	8006c84 <USBD_GetString>
  return USBD_StrDesc;
 80070ca:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	2000140c 	.word	0x2000140c
 80070d8:	080079fc 	.word	0x080079fc

080070dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	221a      	movs	r2, #26
 80070ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070ee:	f000 f855 	bl	800719c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070f2:	4b02      	ldr	r3, [pc, #8]	; (80070fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	200000f0 	.word	0x200000f0

08007100 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007116:	4808      	ldr	r0, [pc, #32]	; (8007138 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007118:	f7ff fdb4 	bl	8006c84 <USBD_GetString>
 800711c:	e004      	b.n	8007128 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4904      	ldr	r1, [pc, #16]	; (8007134 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007124:	f7ff fdae 	bl	8006c84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000140c 	.word	0x2000140c
 8007138:	08007a10 	.word	0x08007a10

0800713c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4907      	ldr	r1, [pc, #28]	; (8007170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007152:	4808      	ldr	r0, [pc, #32]	; (8007174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007154:	f7ff fd96 	bl	8006c84 <USBD_GetString>
 8007158:	e004      	b.n	8007164 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4904      	ldr	r1, [pc, #16]	; (8007170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800715e:	4805      	ldr	r0, [pc, #20]	; (8007174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007160:	f7ff fd90 	bl	8006c84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000140c 	.word	0x2000140c
 8007174:	08007a1c 	.word	0x08007a1c

08007178 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	220c      	movs	r2, #12
 8007188:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800718a:	4b03      	ldr	r3, [pc, #12]	; (8007198 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	200000e0 	.word	0x200000e0

0800719c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <Get_SerialNum+0x44>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071a8:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <Get_SerialNum+0x48>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <Get_SerialNum+0x4c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071c2:	2208      	movs	r2, #8
 80071c4:	4909      	ldr	r1, [pc, #36]	; (80071ec <Get_SerialNum+0x50>)
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f814 	bl	80071f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071cc:	2204      	movs	r2, #4
 80071ce:	4908      	ldr	r1, [pc, #32]	; (80071f0 <Get_SerialNum+0x54>)
 80071d0:	68b8      	ldr	r0, [r7, #8]
 80071d2:	f000 f80f 	bl	80071f4 <IntToUnicode>
  }
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	1fff7a10 	.word	0x1fff7a10
 80071e4:	1fff7a14 	.word	0x1fff7a14
 80071e8:	1fff7a18 	.word	0x1fff7a18
 80071ec:	200000f2 	.word	0x200000f2
 80071f0:	20000102 	.word	0x20000102

080071f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]
 800720a:	e027      	b.n	800725c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	0f1b      	lsrs	r3, r3, #28
 8007210:	2b09      	cmp	r3, #9
 8007212:	d80b      	bhi.n	800722c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	0f1b      	lsrs	r3, r3, #28
 8007218:	b2da      	uxtb	r2, r3
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4619      	mov	r1, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	440b      	add	r3, r1
 8007224:	3230      	adds	r2, #48	; 0x30
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e00a      	b.n	8007242 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0f1b      	lsrs	r3, r3, #28
 8007230:	b2da      	uxtb	r2, r3
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4619      	mov	r1, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	440b      	add	r3, r1
 800723c:	3237      	adds	r2, #55	; 0x37
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	3301      	adds	r3, #1
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	3301      	adds	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
 800725c:	7dfa      	ldrb	r2, [r7, #23]
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	429a      	cmp	r2, r3
 8007262:	d3d3      	bcc.n	800720c <IntToUnicode+0x18>
  }
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b0a0      	sub	sp, #128	; 0x80
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800727c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	609a      	str	r2, [r3, #8]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800728c:	f107 0310 	add.w	r3, r7, #16
 8007290:	225c      	movs	r2, #92	; 0x5c
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fb89 	bl	80079ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a2:	d149      	bne.n	8007338 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80072a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80072aa:	2300      	movs	r3, #0
 80072ac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072ae:	f107 0310 	add.w	r3, r7, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fb f994 	bl	80025e0 <HAL_RCCEx_PeriphCLKConfig>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80072be:	f7f9 f9eb 	bl	8000698 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a1d      	ldr	r2, [pc, #116]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30
 80072d2:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e4:	2302      	movs	r3, #2
 80072e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ec:	2303      	movs	r3, #3
 80072ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072f0:	230a      	movs	r3, #10
 80072f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80072f8:	4619      	mov	r1, r3
 80072fa:	4812      	ldr	r0, [pc, #72]	; (8007344 <HAL_PCD_MspInit+0xd0>)
 80072fc:	f7f9 fc20 	bl	8000b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 8007302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007304:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	6353      	str	r3, [r2, #52]	; 0x34
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 8007312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007314:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 8007316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800731a:	6453      	str	r3, [r2, #68]	; 0x44
 800731c:	4b08      	ldr	r3, [pc, #32]	; (8007340 <HAL_PCD_MspInit+0xcc>)
 800731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	2043      	movs	r0, #67	; 0x43
 800732e:	f7f9 fbd0 	bl	8000ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007332:	2043      	movs	r0, #67	; 0x43
 8007334:	f7f9 fbe9 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007338:	bf00      	nop
 800733a:	3780      	adds	r7, #128	; 0x80
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40023800 	.word	0x40023800
 8007344:	40020000 	.word	0x40020000

08007348 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f7fe fb07 	bl	8005972 <USBD_LL_SetupStage>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	4619      	mov	r1, r3
 8007396:	f7fe fb41 	bl	8005a1c <USBD_LL_DataOutStage>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073b4:	78fa      	ldrb	r2, [r7, #3]
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	334c      	adds	r3, #76	; 0x4c
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	4619      	mov	r1, r3
 80073ca:	f7fe fbda 	bl	8005b82 <USBD_LL_DataInStage>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fd0e 	bl	8005e06 <USBD_LL_SOF>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073fa:	2301      	movs	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
 800740a:	e008      	b.n	800741e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d102      	bne.n	800741a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
 8007418:	e001      	b.n	800741e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800741a:	f7f9 f93d 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fcae 	bl	8005d8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fc56 	bl	8005ce6 <USBD_LL_Reset>
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fca9 	bl	8005daa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <HAL_PCD_SuspendCallback+0x48>)
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	4a03      	ldr	r2, [pc, #12]	; (800748c <HAL_PCD_SuspendCallback+0x48>)
 800747e:	f043 0306 	orr.w	r3, r3, #6
 8007482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	e000ed00 	.word	0xe000ed00

08007490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fc99 	bl	8005dd6 <USBD_LL_Resume>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	4611      	mov	r1, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fcf1 	bl	8005eaa <USBD_LL_IsoOUTIncomplete>
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fcad 	bl	8005e46 <USBD_LL_IsoINIncomplete>
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fd03 	bl	8005f0e <USBD_LL_DevConnected>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fd00 	bl	8005f24 <USBD_LL_DevDisconnected>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d13c      	bne.n	80075b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800753c:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <USBD_LL_Init+0x94>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <USBD_LL_Init+0x94>)
 8007548:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <USBD_LL_Init+0x94>)
 800754e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007552:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007554:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <USBD_LL_Init+0x94>)
 8007556:	2206      	movs	r2, #6
 8007558:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800755a:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <USBD_LL_Init+0x94>)
 800755c:	2202      	movs	r2, #2
 800755e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007560:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <USBD_LL_Init+0x94>)
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007566:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <USBD_LL_Init+0x94>)
 8007568:	2202      	movs	r2, #2
 800756a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800756c:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <USBD_LL_Init+0x94>)
 800756e:	2200      	movs	r2, #0
 8007570:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <USBD_LL_Init+0x94>)
 8007574:	2200      	movs	r2, #0
 8007576:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <USBD_LL_Init+0x94>)
 800757a:	2200      	movs	r2, #0
 800757c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800757e:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <USBD_LL_Init+0x94>)
 8007580:	2200      	movs	r2, #0
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <USBD_LL_Init+0x94>)
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800758a:	480d      	ldr	r0, [pc, #52]	; (80075c0 <USBD_LL_Init+0x94>)
 800758c:	f7f9 fc6c 	bl	8000e68 <HAL_PCD_Init>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007596:	f7f9 f87f 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	4808      	ldr	r0, [pc, #32]	; (80075c0 <USBD_LL_Init+0x94>)
 800759e:	f7fa fef8 	bl	8002392 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075a2:	2240      	movs	r2, #64	; 0x40
 80075a4:	2100      	movs	r1, #0
 80075a6:	4806      	ldr	r0, [pc, #24]	; (80075c0 <USBD_LL_Init+0x94>)
 80075a8:	f7fa feac 	bl	8002304 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	2101      	movs	r1, #1
 80075b0:	4803      	ldr	r0, [pc, #12]	; (80075c0 <USBD_LL_Init+0x94>)
 80075b2:	f7fa fea7 	bl	8002304 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2000160c 	.word	0x2000160c

080075c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f9 fd68 	bl	80010b0 <HAL_PCD_Start>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f990 	bl	800790c <USBD_Get_USB_Status>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	461a      	mov	r2, r3
 8007608:	4603      	mov	r3, r0
 800760a:	70fb      	strb	r3, [r7, #3]
 800760c:	460b      	mov	r3, r1
 800760e:	70bb      	strb	r3, [r7, #2]
 8007610:	4613      	mov	r3, r2
 8007612:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007622:	78bb      	ldrb	r3, [r7, #2]
 8007624:	883a      	ldrh	r2, [r7, #0]
 8007626:	78f9      	ldrb	r1, [r7, #3]
 8007628:	f7fa fa66 	bl	8001af8 <HAL_PCD_EP_Open>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f96a 	bl	800790c <USBD_Get_USB_Status>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7fa faaf 	bl	8001bc8 <HAL_PCD_EP_Close>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f94b 	bl	800790c <USBD_Get_USB_Status>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767a:	7bbb      	ldrb	r3, [r7, #14]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fa fb87 	bl	8001db6 <HAL_PCD_EP_SetStall>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f92c 	bl	800790c <USBD_Get_USB_Status>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076dc:	78fa      	ldrb	r2, [r7, #3]
 80076de:	4611      	mov	r1, r2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fa fbcc 	bl	8001e7e <HAL_PCD_EP_ClrStall>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f90d 	bl	800790c <USBD_Get_USB_Status>
 80076f2:	4603      	mov	r3, r0
 80076f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007712:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007718:	2b00      	cmp	r3, #0
 800771a:	da0b      	bge.n	8007734 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	333e      	adds	r3, #62	; 0x3e
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	e00b      	b.n	800774c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800774a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa f999 	bl	8001aae <HAL_PCD_SetAddress>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 f8c2 	bl	800790c <USBD_Get_USB_Status>
 8007788:	4603      	mov	r3, r0
 800778a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800778c:	7bbb      	ldrb	r3, [r7, #14]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b086      	sub	sp, #24
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	460b      	mov	r3, r1
 80077a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077b4:	7af9      	ldrb	r1, [r7, #11]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	f7fa fab2 	bl	8001d22 <HAL_PCD_EP_Transmit>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f8a1 	bl	800790c <USBD_Get_USB_Status>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	460b      	mov	r3, r1
 80077e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077f6:	7af9      	ldrb	r1, [r7, #11]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	f7fa fa2e 	bl	8001c5c <HAL_PCD_EP_Receive>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f880 	bl	800790c <USBD_Get_USB_Status>
 800780c:	4603      	mov	r3, r0
 800780e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007810:	7dbb      	ldrb	r3, [r7, #22]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fa fa5e 	bl	8001cf2 <HAL_PCD_EP_GetRxCount>
 8007836:	4603      	mov	r3, r0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_PCDEx_LPM_Callback+0x18>
 8007852:	2b01      	cmp	r3, #1
 8007854:	d01f      	beq.n	8007896 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007856:	e03b      	b.n	80078d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007860:	f7f8 fe78 	bl	8000554 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007864:	4b1c      	ldr	r3, [pc, #112]	; (80078d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800786a:	f023 0306 	bic.w	r3, r3, #6
 800786e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe faa1 	bl	8005dd6 <USBD_LL_Resume>
    break;
 8007894:	e01c      	b.n	80078d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fa78 	bl	8005daa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80078c8:	f043 0306 	orr.w	r3, r3, #6
 80078cc:	6113      	str	r3, [r2, #16]
    break;
 80078ce:	bf00      	nop
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	e000ed00 	.word	0xe000ed00

080078dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078e4:	4b03      	ldr	r3, [pc, #12]	; (80078f4 <USBD_static_malloc+0x18>)
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20001b18 	.word	0x20001b18

080078f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d817      	bhi.n	8007950 <USBD_Get_USB_Status+0x44>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <USBD_Get_USB_Status+0x1c>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007939 	.word	0x08007939
 800792c:	0800793f 	.word	0x0800793f
 8007930:	08007945 	.word	0x08007945
 8007934:	0800794b 	.word	0x0800794b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
    break;
 800793c:	e00b      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800793e:	2303      	movs	r3, #3
 8007940:	73fb      	strb	r3, [r7, #15]
    break;
 8007942:	e008      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007944:	2301      	movs	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e005      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e002      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	bf00      	nop
  }
  return usb_status;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <__libc_init_array>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	4d0d      	ldr	r5, [pc, #52]	; (800799c <__libc_init_array+0x38>)
 8007968:	4c0d      	ldr	r4, [pc, #52]	; (80079a0 <__libc_init_array+0x3c>)
 800796a:	1b64      	subs	r4, r4, r5
 800796c:	10a4      	asrs	r4, r4, #2
 800796e:	2600      	movs	r6, #0
 8007970:	42a6      	cmp	r6, r4
 8007972:	d109      	bne.n	8007988 <__libc_init_array+0x24>
 8007974:	4d0b      	ldr	r5, [pc, #44]	; (80079a4 <__libc_init_array+0x40>)
 8007976:	4c0c      	ldr	r4, [pc, #48]	; (80079a8 <__libc_init_array+0x44>)
 8007978:	f000 f820 	bl	80079bc <_init>
 800797c:	1b64      	subs	r4, r4, r5
 800797e:	10a4      	asrs	r4, r4, #2
 8007980:	2600      	movs	r6, #0
 8007982:	42a6      	cmp	r6, r4
 8007984:	d105      	bne.n	8007992 <__libc_init_array+0x2e>
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	f855 3b04 	ldr.w	r3, [r5], #4
 800798c:	4798      	blx	r3
 800798e:	3601      	adds	r6, #1
 8007990:	e7ee      	b.n	8007970 <__libc_init_array+0xc>
 8007992:	f855 3b04 	ldr.w	r3, [r5], #4
 8007996:	4798      	blx	r3
 8007998:	3601      	adds	r6, #1
 800799a:	e7f2      	b.n	8007982 <__libc_init_array+0x1e>
 800799c:	08007a44 	.word	0x08007a44
 80079a0:	08007a44 	.word	0x08007a44
 80079a4:	08007a44 	.word	0x08007a44
 80079a8:	08007a48 	.word	0x08007a48

080079ac <memset>:
 80079ac:	4402      	add	r2, r0
 80079ae:	4603      	mov	r3, r0
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d100      	bne.n	80079b6 <memset+0xa>
 80079b4:	4770      	bx	lr
 80079b6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ba:	e7f9      	b.n	80079b0 <memset+0x4>

080079bc <_init>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr

080079c8 <_fini>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr
