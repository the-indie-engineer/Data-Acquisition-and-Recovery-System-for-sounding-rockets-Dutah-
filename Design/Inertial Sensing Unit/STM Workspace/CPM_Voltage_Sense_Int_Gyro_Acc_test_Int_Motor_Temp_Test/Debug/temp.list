
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f20  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002168  08002168  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002170  08002170  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002170  08002170  00012170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  080021e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080021e8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006677  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001583  00000000  00000000  00026717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  00027ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000498  00000000  00000000  000281f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213fa  00000000  00000000  00028688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000687f  00000000  00000000  00049a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c71f1  00000000  00000000  00050301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001174f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019bc  00000000  00000000  00117548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080020cc 	.word	0x080020cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	080020cc 	.word	0x080020cc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000508:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	d013      	beq.n	800053c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000518:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800051c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000520:	2b00      	cmp	r3, #0
 8000522:	d00b      	beq.n	800053c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000524:	e000      	b.n	8000528 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000526:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000532:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 f9ec 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f80c 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f87c 	bl	8000654 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World \n");
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <main+0x20>)
 800055e:	f001 f95d 	bl	800181c <puts>
	  HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fa53 	bl	8000a10 <HAL_Delay>
  {
 800056a:	e7f7      	b.n	800055c <main+0x10>
 800056c:	080020e4 	.word	0x080020e4

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f8d6 	bl	8001730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <SystemClock_Config+0xdc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a2b      	ldr	r2, [pc, #172]	; (800064c <SystemClock_Config+0xdc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xdc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <SystemClock_Config+0xe0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a25      	ldr	r2, [pc, #148]	; (8000650 <SystemClock_Config+0xe0>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e4:	23b4      	movs	r3, #180	; 0xb4
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fdd1 	bl	80011a0 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 f86a 	bl	80006dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000608:	f000 fb38 	bl	8000c7c <HAL_PWREx_EnableOverDrive>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000612:	f000 f863 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fb71 	bl	8000d1c <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000640:	f000 f84c 	bl	80006dc <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_GPIO_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e009      	b.n	80006ca <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff1c 	bl	80004fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbf1      	blt.n	80006b6 <_write+0x12>
	}
	return len;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <HAL_MspInit+0x58>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <HAL_MspInit+0x58>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	; 0x44
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_MspInit+0x58>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x58>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <HAL_MspInit+0x58>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x58>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2005      	movs	r0, #5
 800072c:	f000 fa6f 	bl	8000c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000730:	2005      	movs	r0, #5
 8000732:	f000 fa88 	bl	8000c46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f91e 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00a      	b.n	80007ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007b8:	f3af 8000 	nop.w
 80007bc:	4601      	mov	r1, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	60ba      	str	r2, [r7, #8]
 80007c4:	b2ca      	uxtb	r2, r1
 80007c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbf0      	blt.n	80007b8 <_read+0x12>
	}

return len;
 80007d6:	687b      	ldr	r3, [r7, #4]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	return -1;
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000808:	605a      	str	r2, [r3, #4]
	return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_isatty>:

int _isatty(int file)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
	return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <_sbrk+0x5c>)
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <_sbrk+0x60>)
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d102      	bne.n	800086a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <_sbrk+0x64>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <_sbrk+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000878:	f000 ff30 	bl	80016dc <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e009      	b.n	800089c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <_sbrk+0x64>)
 8000898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20020000 	.word	0x20020000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	2000008c 	.word	0x2000008c
 80008b0:	200000b0 	.word	0x200000b0

080008b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000902:	f7ff ffd7 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f000 feef 	bl	80016e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090a:	f7ff fe1f 	bl	800054c <main>
  bx  lr    
 800090e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800091c:	08002178 	.word	0x08002178
  ldr r2, =_sbss
 8000920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000924:	200000ac 	.word	0x200000ac

08000928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_Init+0x40>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_Init+0x40>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x40>)
 800094e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f94f 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff fec2 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023c00 	.word	0x40023c00

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f967 	bl	8000c62 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f92f 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000098 	.word	0x20000098

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000098 	.word	0x20000098

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff ffee 	bl	80009f8 <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffde 	bl	80009f8 <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008

08000a58 <__NVIC_SetPriorityGrouping>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff29 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff3e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff31 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa2 	bl	8000bb4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x90>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x90>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x90>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_PWREx_EnableOverDrive+0x94>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca8:	f7ff fea6 	bl	80009f8 <HAL_GetTick>
 8000cac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cae:	e009      	b.n	8000cc4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cb0:	f7ff fea2 	bl	80009f8 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cbe:	d901      	bls.n	8000cc4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e01f      	b.n	8000d04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d1ee      	bne.n	8000cb0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff fe8e 	bl	80009f8 <HAL_GetTick>
 8000cdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cde:	e009      	b.n	8000cf4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ce0:	f7ff fe8a 	bl	80009f8 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cee:	d901      	bls.n	8000cf4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e007      	b.n	8000d04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d00:	d1ee      	bne.n	8000ce0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	420e0040 	.word	0x420e0040
 8000d14:	40007000 	.word	0x40007000
 8000d18:	420e0044 	.word	0x420e0044

08000d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e0cc      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d30:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d90c      	bls.n	8000d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3e:	4b65      	ldr	r3, [pc, #404]	; (8000ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d46:	4b63      	ldr	r3, [pc, #396]	; (8000ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d001      	beq.n	8000d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e0b8      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d020      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d70:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a58      	ldr	r2, [pc, #352]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d88:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	494d      	ldr	r1, [pc, #308]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d044      	beq.n	8000e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d119      	bne.n	8000dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e07f      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d003      	beq.n	8000dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d107      	bne.n	8000dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d109      	bne.n	8000dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e06f      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e067      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f023 0203 	bic.w	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4934      	ldr	r1, [pc, #208]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e0c:	f7ff fdf4 	bl	80009f8 <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e12:	e00a      	b.n	8000e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e14:	f7ff fdf0 	bl	80009f8 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e04f      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 020c 	and.w	r2, r3, #12
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d1eb      	bne.n	8000e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d20c      	bcs.n	8000e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d001      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e032      	b.n	8000eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	4916      	ldr	r1, [pc, #88]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d009      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ea2:	f000 f821 	bl	8000ee8 <HAL_RCC_GetSysClockFreq>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	490a      	ldr	r1, [pc, #40]	; (8000edc <HAL_RCC_ClockConfig+0x1c0>)
 8000eb4:	5ccb      	ldrb	r3, [r1, r3]
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fd54 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	080020f4 	.word	0x080020f4
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b087      	sub	sp, #28
 8000eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000ef0:	2600      	movs	r6, #0
 8000ef2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8000ef8:	2600      	movs	r6, #0
 8000efa:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8000efc:	2600      	movs	r6, #0
 8000efe:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000f00:	2600      	movs	r6, #0
 8000f02:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f04:	4ea3      	ldr	r6, [pc, #652]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8000f06:	68b6      	ldr	r6, [r6, #8]
 8000f08:	f006 060c 	and.w	r6, r6, #12
 8000f0c:	2e0c      	cmp	r6, #12
 8000f0e:	f200 8137 	bhi.w	8001180 <HAL_RCC_GetSysClockFreq+0x298>
 8000f12:	f20f 0c08 	addw	ip, pc, #8
 8000f16:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f51 	.word	0x08000f51
 8000f20:	08001181 	.word	0x08001181
 8000f24:	08001181 	.word	0x08001181
 8000f28:	08001181 	.word	0x08001181
 8000f2c:	08000f57 	.word	0x08000f57
 8000f30:	08001181 	.word	0x08001181
 8000f34:	08001181 	.word	0x08001181
 8000f38:	08001181 	.word	0x08001181
 8000f3c:	08000f5d 	.word	0x08000f5d
 8000f40:	08001181 	.word	0x08001181
 8000f44:	08001181 	.word	0x08001181
 8000f48:	08001181 	.word	0x08001181
 8000f4c:	08001073 	.word	0x08001073
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f50:	4b91      	ldr	r3, [pc, #580]	; (8001198 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8000f52:	613b      	str	r3, [r7, #16]
       break;
 8000f54:	e117      	b.n	8001186 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f56:	4b91      	ldr	r3, [pc, #580]	; (800119c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8000f58:	613b      	str	r3, [r7, #16]
      break;
 8000f5a:	e114      	b.n	8001186 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f5c:	4b8d      	ldr	r3, [pc, #564]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f64:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f66:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d024      	beq.n	8000fbc <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f72:	4b88      	ldr	r3, [pc, #544]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	099b      	lsrs	r3, r3, #6
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000f82:	f04f 0500 	mov.w	r5, #0
 8000f86:	ea02 0004 	and.w	r0, r2, r4
 8000f8a:	ea03 0105 	and.w	r1, r3, r5
 8000f8e:	4b83      	ldr	r3, [pc, #524]	; (800119c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8000f90:	fb03 f201 	mul.w	r2, r3, r1
 8000f94:	2300      	movs	r3, #0
 8000f96:	fb03 f300 	mul.w	r3, r3, r0
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a7f      	ldr	r2, [pc, #508]	; (800119c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8000f9e:	fba0 0102 	umull	r0, r1, r0, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	f7ff f929 	bl	8000204 <__aeabi_uldivmod>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e04c      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbc:	4b75      	ldr	r3, [pc, #468]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000fcc:	f04f 0100 	mov.w	r1, #0
 8000fd0:	ea02 0800 	and.w	r8, r2, r0
 8000fd4:	ea03 0901 	and.w	r9, r3, r1
 8000fd8:	4640      	mov	r0, r8
 8000fda:	4649      	mov	r1, r9
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	014b      	lsls	r3, r1, #5
 8000fe6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fea:	0142      	lsls	r2, r0, #5
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	ebb0 0008 	subs.w	r0, r0, r8
 8000ff4:	eb61 0109 	sbc.w	r1, r1, r9
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	018b      	lsls	r3, r1, #6
 8001002:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001006:	0182      	lsls	r2, r0, #6
 8001008:	1a12      	subs	r2, r2, r0
 800100a:	eb63 0301 	sbc.w	r3, r3, r1
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	00d9      	lsls	r1, r3, #3
 8001018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800101c:	00d0      	lsls	r0, r2, #3
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	eb12 0208 	adds.w	r2, r2, r8
 8001026:	eb43 0309 	adc.w	r3, r3, r9
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	f04f 0100 	mov.w	r1, #0
 8001032:	0299      	lsls	r1, r3, #10
 8001034:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001038:	0290      	lsls	r0, r2, #10
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	461a      	mov	r2, r3
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	f7ff f8db 	bl	8000204 <__aeabi_uldivmod>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4613      	mov	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	3301      	adds	r3, #1
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	613b      	str	r3, [r7, #16]
      break;
 8001070:	e089      	b.n	8001186 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001072:	4948      	ldr	r1, [pc, #288]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001074:	6849      	ldr	r1, [r1, #4]
 8001076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800107a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800107c:	4945      	ldr	r1, [pc, #276]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800107e:	6849      	ldr	r1, [r1, #4]
 8001080:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001084:	2900      	cmp	r1, #0
 8001086:	d024      	beq.n	80010d2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001088:	4942      	ldr	r1, [pc, #264]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800108a:	6849      	ldr	r1, [r1, #4]
 800108c:	0989      	lsrs	r1, r1, #6
 800108e:	4608      	mov	r0, r1
 8001090:	f04f 0100 	mov.w	r1, #0
 8001094:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001098:	f04f 0500 	mov.w	r5, #0
 800109c:	ea00 0204 	and.w	r2, r0, r4
 80010a0:	ea01 0305 	and.w	r3, r1, r5
 80010a4:	493d      	ldr	r1, [pc, #244]	; (800119c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80010a6:	fb01 f003 	mul.w	r0, r1, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	fb01 f102 	mul.w	r1, r1, r2
 80010b0:	1844      	adds	r4, r0, r1
 80010b2:	493a      	ldr	r1, [pc, #232]	; (800119c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80010b4:	fba2 0101 	umull	r0, r1, r2, r1
 80010b8:	1863      	adds	r3, r4, r1
 80010ba:	4619      	mov	r1, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	461a      	mov	r2, r3
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	f7ff f89e 	bl	8000204 <__aeabi_uldivmod>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e04a      	b.n	8001168 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	099b      	lsrs	r3, r3, #6
 80010d8:	461a      	mov	r2, r3
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80010e2:	f04f 0100 	mov.w	r1, #0
 80010e6:	ea02 0400 	and.w	r4, r2, r0
 80010ea:	ea03 0501 	and.w	r5, r3, r1
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	014b      	lsls	r3, r1, #5
 80010fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001100:	0142      	lsls	r2, r0, #5
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	1b00      	subs	r0, r0, r4
 8001108:	eb61 0105 	sbc.w	r1, r1, r5
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	018b      	lsls	r3, r1, #6
 8001116:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800111a:	0182      	lsls	r2, r0, #6
 800111c:	1a12      	subs	r2, r2, r0
 800111e:	eb63 0301 	sbc.w	r3, r3, r1
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	f04f 0100 	mov.w	r1, #0
 800112a:	00d9      	lsls	r1, r3, #3
 800112c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001130:	00d0      	lsls	r0, r2, #3
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	1912      	adds	r2, r2, r4
 8001138:	eb45 0303 	adc.w	r3, r5, r3
 800113c:	f04f 0000 	mov.w	r0, #0
 8001140:	f04f 0100 	mov.w	r1, #0
 8001144:	0299      	lsls	r1, r3, #10
 8001146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800114a:	0290      	lsls	r0, r2, #10
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	461a      	mov	r2, r3
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	f7ff f852 	bl	8000204 <__aeabi_uldivmod>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4613      	mov	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	0f1b      	lsrs	r3, r3, #28
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	fbb2 f3f3 	udiv	r3, r2, r3
 800117c:	613b      	str	r3, [r7, #16]
      break;
 800117e:	e002      	b.n	8001186 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001182:	613b      	str	r3, [r7, #16]
      break;
 8001184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001186:	693b      	ldr	r3, [r7, #16]
}
 8001188:	4618      	mov	r0, r3
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	00f42400 	.word	0x00f42400
 800119c:	017d7840 	.word	0x017d7840

080011a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e28d      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8083 	beq.w	80012c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011c0:	4b94      	ldr	r3, [pc, #592]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d019      	beq.n	8001200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011cc:	4b91      	ldr	r3, [pc, #580]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011d8:	4b8e      	ldr	r3, [pc, #568]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e4:	d00c      	beq.n	8001200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	d112      	bne.n	8001218 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b84      	ldr	r3, [pc, #528]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d05b      	beq.n	80012c4 <HAL_RCC_OscConfig+0x124>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d157      	bne.n	80012c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e25a      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x90>
 8001222:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7b      	ldr	r2, [pc, #492]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e01d      	b.n	800126c <HAL_RCC_OscConfig+0xcc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0xb4>
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a75      	ldr	r2, [pc, #468]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a72      	ldr	r2, [pc, #456]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e00b      	b.n	800126c <HAL_RCC_OscConfig+0xcc>
 8001254:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 800125a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a6b      	ldr	r2, [pc, #428]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fbc0 	bl	80009f8 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fbbc 	bl	80009f8 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e21f      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0xdc>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fbac 	bl	80009f8 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fba8 	bl	80009f8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e20b      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x104>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d06f      	beq.n	80013b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d017      	beq.n	800130e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d105      	bne.n	80012f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012ea:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x186>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1d3      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_RCC_OscConfig+0x278>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fb55 	bl	80009f8 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fb51 	bl	80009f8 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1b4      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4925      	ldr	r1, [pc, #148]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_RCC_OscConfig+0x278>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fb34 	bl	80009f8 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fb30 	bl	80009f8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e193      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d036      	beq.n	800142c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_RCC_OscConfig+0x27c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb14 	bl	80009f8 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb10 	bl	80009f8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e173      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80013e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x234>
 80013f2:	e01b      	b.n	800142c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x27c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff fafd 	bl	80009f8 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	e00e      	b.n	8001420 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff faf9 	bl	80009f8 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d907      	bls.n	8001420 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e15c      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
 8001414:	40023800 	.word	0x40023800
 8001418:	42470000 	.word	0x42470000
 800141c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b8a      	ldr	r3, [pc, #552]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ea      	bne.n	8001402 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 8097 	beq.w	8001568 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b83      	ldr	r3, [pc, #524]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a7e      	ldr	r2, [pc, #504]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b7c      	ldr	r3, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b79      	ldr	r3, [pc, #484]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d118      	bne.n	80014a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001476:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a75      	ldr	r2, [pc, #468]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001482:	f7ff fab9 	bl	80009f8 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148a:	f7ff fab5 	bl	80009f8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e118      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d106      	bne.n	80014be <HAL_RCC_OscConfig+0x31e>
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	4a65      	ldr	r2, [pc, #404]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6713      	str	r3, [r2, #112]	; 0x70
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x358>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x340>
 80014c6:	4b61      	ldr	r3, [pc, #388]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	4a60      	ldr	r2, [pc, #384]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
 80014d2:	4b5e      	ldr	r3, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	4a5d      	ldr	r2, [pc, #372]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x358>
 80014e0:	4b5a      	ldr	r3, [pc, #360]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a59      	ldr	r2, [pc, #356]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	4b57      	ldr	r3, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a56      	ldr	r2, [pc, #344]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff fa7a 	bl	80009f8 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff fa76 	bl	80009f8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0d7      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0ee      	beq.n	8001508 <HAL_RCC_OscConfig+0x368>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fa64 	bl	80009f8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fa60 	bl	80009f8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0c1      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154a:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ee      	bne.n	8001534 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a3a      	ldr	r2, [pc, #232]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ad 	beq.w	80016cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d060      	beq.n	8001640 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d145      	bne.n	8001612 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4b4>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fa34 	bl	80009f8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fa30 	bl	80009f8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e093      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	071b      	lsls	r3, r3, #28
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x4b4>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fa05 	bl	80009f8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fa01 	bl	80009f8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e064      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x452>
 8001610:	e05c      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x4b4>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff f9ee 	bl	80009f8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff f9ea 	bl	80009f8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e04d      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x480>
 800163e:	e045      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e040      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000
 8001654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_RCC_OscConfig+0x538>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d030      	beq.n	80016c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d129      	bne.n	80016c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d122      	bne.n	80016c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001688:	4013      	ands	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001690:	4293      	cmp	r3, r2
 8001692:	d119      	bne.n	80016c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d10f      	bne.n	80016c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <__errno>:
 80016dc:	4b01      	ldr	r3, [pc, #4]	; (80016e4 <__errno+0x8>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000000c 	.word	0x2000000c

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	4d0d      	ldr	r5, [pc, #52]	; (8001720 <__libc_init_array+0x38>)
 80016ec:	4c0d      	ldr	r4, [pc, #52]	; (8001724 <__libc_init_array+0x3c>)
 80016ee:	1b64      	subs	r4, r4, r5
 80016f0:	10a4      	asrs	r4, r4, #2
 80016f2:	2600      	movs	r6, #0
 80016f4:	42a6      	cmp	r6, r4
 80016f6:	d109      	bne.n	800170c <__libc_init_array+0x24>
 80016f8:	4d0b      	ldr	r5, [pc, #44]	; (8001728 <__libc_init_array+0x40>)
 80016fa:	4c0c      	ldr	r4, [pc, #48]	; (800172c <__libc_init_array+0x44>)
 80016fc:	f000 fce6 	bl	80020cc <_init>
 8001700:	1b64      	subs	r4, r4, r5
 8001702:	10a4      	asrs	r4, r4, #2
 8001704:	2600      	movs	r6, #0
 8001706:	42a6      	cmp	r6, r4
 8001708:	d105      	bne.n	8001716 <__libc_init_array+0x2e>
 800170a:	bd70      	pop	{r4, r5, r6, pc}
 800170c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001710:	4798      	blx	r3
 8001712:	3601      	adds	r6, #1
 8001714:	e7ee      	b.n	80016f4 <__libc_init_array+0xc>
 8001716:	f855 3b04 	ldr.w	r3, [r5], #4
 800171a:	4798      	blx	r3
 800171c:	3601      	adds	r6, #1
 800171e:	e7f2      	b.n	8001706 <__libc_init_array+0x1e>
 8001720:	08002170 	.word	0x08002170
 8001724:	08002170 	.word	0x08002170
 8001728:	08002170 	.word	0x08002170
 800172c:	08002174 	.word	0x08002174

08001730 <memset>:
 8001730:	4402      	add	r2, r0
 8001732:	4603      	mov	r3, r0
 8001734:	4293      	cmp	r3, r2
 8001736:	d100      	bne.n	800173a <memset+0xa>
 8001738:	4770      	bx	lr
 800173a:	f803 1b01 	strb.w	r1, [r3], #1
 800173e:	e7f9      	b.n	8001734 <memset+0x4>

08001740 <_puts_r>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	460e      	mov	r6, r1
 8001744:	4605      	mov	r5, r0
 8001746:	b118      	cbz	r0, 8001750 <_puts_r+0x10>
 8001748:	6983      	ldr	r3, [r0, #24]
 800174a:	b90b      	cbnz	r3, 8001750 <_puts_r+0x10>
 800174c:	f000 fa48 	bl	8001be0 <__sinit>
 8001750:	69ab      	ldr	r3, [r5, #24]
 8001752:	68ac      	ldr	r4, [r5, #8]
 8001754:	b913      	cbnz	r3, 800175c <_puts_r+0x1c>
 8001756:	4628      	mov	r0, r5
 8001758:	f000 fa42 	bl	8001be0 <__sinit>
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <_puts_r+0xd0>)
 800175e:	429c      	cmp	r4, r3
 8001760:	d120      	bne.n	80017a4 <_puts_r+0x64>
 8001762:	686c      	ldr	r4, [r5, #4]
 8001764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001766:	07db      	lsls	r3, r3, #31
 8001768:	d405      	bmi.n	8001776 <_puts_r+0x36>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	0598      	lsls	r0, r3, #22
 800176e:	d402      	bmi.n	8001776 <_puts_r+0x36>
 8001770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001772:	f000 fad3 	bl	8001d1c <__retarget_lock_acquire_recursive>
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	0719      	lsls	r1, r3, #28
 800177a:	d51d      	bpl.n	80017b8 <_puts_r+0x78>
 800177c:	6923      	ldr	r3, [r4, #16]
 800177e:	b1db      	cbz	r3, 80017b8 <_puts_r+0x78>
 8001780:	3e01      	subs	r6, #1
 8001782:	68a3      	ldr	r3, [r4, #8]
 8001784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001788:	3b01      	subs	r3, #1
 800178a:	60a3      	str	r3, [r4, #8]
 800178c:	bb39      	cbnz	r1, 80017de <_puts_r+0x9e>
 800178e:	2b00      	cmp	r3, #0
 8001790:	da38      	bge.n	8001804 <_puts_r+0xc4>
 8001792:	4622      	mov	r2, r4
 8001794:	210a      	movs	r1, #10
 8001796:	4628      	mov	r0, r5
 8001798:	f000 f848 	bl	800182c <__swbuf_r>
 800179c:	3001      	adds	r0, #1
 800179e:	d011      	beq.n	80017c4 <_puts_r+0x84>
 80017a0:	250a      	movs	r5, #10
 80017a2:	e011      	b.n	80017c8 <_puts_r+0x88>
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <_puts_r+0xd4>)
 80017a6:	429c      	cmp	r4, r3
 80017a8:	d101      	bne.n	80017ae <_puts_r+0x6e>
 80017aa:	68ac      	ldr	r4, [r5, #8]
 80017ac:	e7da      	b.n	8001764 <_puts_r+0x24>
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <_puts_r+0xd8>)
 80017b0:	429c      	cmp	r4, r3
 80017b2:	bf08      	it	eq
 80017b4:	68ec      	ldreq	r4, [r5, #12]
 80017b6:	e7d5      	b.n	8001764 <_puts_r+0x24>
 80017b8:	4621      	mov	r1, r4
 80017ba:	4628      	mov	r0, r5
 80017bc:	f000 f888 	bl	80018d0 <__swsetup_r>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d0dd      	beq.n	8001780 <_puts_r+0x40>
 80017c4:	f04f 35ff 	mov.w	r5, #4294967295
 80017c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017ca:	07da      	lsls	r2, r3, #31
 80017cc:	d405      	bmi.n	80017da <_puts_r+0x9a>
 80017ce:	89a3      	ldrh	r3, [r4, #12]
 80017d0:	059b      	lsls	r3, r3, #22
 80017d2:	d402      	bmi.n	80017da <_puts_r+0x9a>
 80017d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017d6:	f000 faa2 	bl	8001d1e <__retarget_lock_release_recursive>
 80017da:	4628      	mov	r0, r5
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da04      	bge.n	80017ec <_puts_r+0xac>
 80017e2:	69a2      	ldr	r2, [r4, #24]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dc06      	bgt.n	80017f6 <_puts_r+0xb6>
 80017e8:	290a      	cmp	r1, #10
 80017ea:	d004      	beq.n	80017f6 <_puts_r+0xb6>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	6022      	str	r2, [r4, #0]
 80017f2:	7019      	strb	r1, [r3, #0]
 80017f4:	e7c5      	b.n	8001782 <_puts_r+0x42>
 80017f6:	4622      	mov	r2, r4
 80017f8:	4628      	mov	r0, r5
 80017fa:	f000 f817 	bl	800182c <__swbuf_r>
 80017fe:	3001      	adds	r0, #1
 8001800:	d1bf      	bne.n	8001782 <_puts_r+0x42>
 8001802:	e7df      	b.n	80017c4 <_puts_r+0x84>
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	250a      	movs	r5, #10
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	6022      	str	r2, [r4, #0]
 800180c:	701d      	strb	r5, [r3, #0]
 800180e:	e7db      	b.n	80017c8 <_puts_r+0x88>
 8001810:	08002128 	.word	0x08002128
 8001814:	08002148 	.word	0x08002148
 8001818:	08002108 	.word	0x08002108

0800181c <puts>:
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <puts+0xc>)
 800181e:	4601      	mov	r1, r0
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f7ff bf8d 	b.w	8001740 <_puts_r>
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c

0800182c <__swbuf_r>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	460e      	mov	r6, r1
 8001830:	4614      	mov	r4, r2
 8001832:	4605      	mov	r5, r0
 8001834:	b118      	cbz	r0, 800183e <__swbuf_r+0x12>
 8001836:	6983      	ldr	r3, [r0, #24]
 8001838:	b90b      	cbnz	r3, 800183e <__swbuf_r+0x12>
 800183a:	f000 f9d1 	bl	8001be0 <__sinit>
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <__swbuf_r+0x98>)
 8001840:	429c      	cmp	r4, r3
 8001842:	d12b      	bne.n	800189c <__swbuf_r+0x70>
 8001844:	686c      	ldr	r4, [r5, #4]
 8001846:	69a3      	ldr	r3, [r4, #24]
 8001848:	60a3      	str	r3, [r4, #8]
 800184a:	89a3      	ldrh	r3, [r4, #12]
 800184c:	071a      	lsls	r2, r3, #28
 800184e:	d52f      	bpl.n	80018b0 <__swbuf_r+0x84>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	b36b      	cbz	r3, 80018b0 <__swbuf_r+0x84>
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	1ac0      	subs	r0, r0, r3
 800185a:	6963      	ldr	r3, [r4, #20]
 800185c:	b2f6      	uxtb	r6, r6
 800185e:	4283      	cmp	r3, r0
 8001860:	4637      	mov	r7, r6
 8001862:	dc04      	bgt.n	800186e <__swbuf_r+0x42>
 8001864:	4621      	mov	r1, r4
 8001866:	4628      	mov	r0, r5
 8001868:	f000 f926 	bl	8001ab8 <_fflush_r>
 800186c:	bb30      	cbnz	r0, 80018bc <__swbuf_r+0x90>
 800186e:	68a3      	ldr	r3, [r4, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60a3      	str	r3, [r4, #8]
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	6022      	str	r2, [r4, #0]
 800187a:	701e      	strb	r6, [r3, #0]
 800187c:	6963      	ldr	r3, [r4, #20]
 800187e:	3001      	adds	r0, #1
 8001880:	4283      	cmp	r3, r0
 8001882:	d004      	beq.n	800188e <__swbuf_r+0x62>
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	07db      	lsls	r3, r3, #31
 8001888:	d506      	bpl.n	8001898 <__swbuf_r+0x6c>
 800188a:	2e0a      	cmp	r6, #10
 800188c:	d104      	bne.n	8001898 <__swbuf_r+0x6c>
 800188e:	4621      	mov	r1, r4
 8001890:	4628      	mov	r0, r5
 8001892:	f000 f911 	bl	8001ab8 <_fflush_r>
 8001896:	b988      	cbnz	r0, 80018bc <__swbuf_r+0x90>
 8001898:	4638      	mov	r0, r7
 800189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <__swbuf_r+0x9c>)
 800189e:	429c      	cmp	r4, r3
 80018a0:	d101      	bne.n	80018a6 <__swbuf_r+0x7a>
 80018a2:	68ac      	ldr	r4, [r5, #8]
 80018a4:	e7cf      	b.n	8001846 <__swbuf_r+0x1a>
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <__swbuf_r+0xa0>)
 80018a8:	429c      	cmp	r4, r3
 80018aa:	bf08      	it	eq
 80018ac:	68ec      	ldreq	r4, [r5, #12]
 80018ae:	e7ca      	b.n	8001846 <__swbuf_r+0x1a>
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f000 f80c 	bl	80018d0 <__swsetup_r>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d0cb      	beq.n	8001854 <__swbuf_r+0x28>
 80018bc:	f04f 37ff 	mov.w	r7, #4294967295
 80018c0:	e7ea      	b.n	8001898 <__swbuf_r+0x6c>
 80018c2:	bf00      	nop
 80018c4:	08002128 	.word	0x08002128
 80018c8:	08002148 	.word	0x08002148
 80018cc:	08002108 	.word	0x08002108

080018d0 <__swsetup_r>:
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <__swsetup_r+0xcc>)
 80018d2:	b570      	push	{r4, r5, r6, lr}
 80018d4:	681d      	ldr	r5, [r3, #0]
 80018d6:	4606      	mov	r6, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	b125      	cbz	r5, 80018e6 <__swsetup_r+0x16>
 80018dc:	69ab      	ldr	r3, [r5, #24]
 80018de:	b913      	cbnz	r3, 80018e6 <__swsetup_r+0x16>
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 f97d 	bl	8001be0 <__sinit>
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <__swsetup_r+0xd0>)
 80018e8:	429c      	cmp	r4, r3
 80018ea:	d10f      	bne.n	800190c <__swsetup_r+0x3c>
 80018ec:	686c      	ldr	r4, [r5, #4]
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018f4:	0719      	lsls	r1, r3, #28
 80018f6:	d42c      	bmi.n	8001952 <__swsetup_r+0x82>
 80018f8:	06dd      	lsls	r5, r3, #27
 80018fa:	d411      	bmi.n	8001920 <__swsetup_r+0x50>
 80018fc:	2309      	movs	r3, #9
 80018fe:	6033      	str	r3, [r6, #0]
 8001900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001904:	81a3      	strh	r3, [r4, #12]
 8001906:	f04f 30ff 	mov.w	r0, #4294967295
 800190a:	e03e      	b.n	800198a <__swsetup_r+0xba>
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <__swsetup_r+0xd4>)
 800190e:	429c      	cmp	r4, r3
 8001910:	d101      	bne.n	8001916 <__swsetup_r+0x46>
 8001912:	68ac      	ldr	r4, [r5, #8]
 8001914:	e7eb      	b.n	80018ee <__swsetup_r+0x1e>
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <__swsetup_r+0xd8>)
 8001918:	429c      	cmp	r4, r3
 800191a:	bf08      	it	eq
 800191c:	68ec      	ldreq	r4, [r5, #12]
 800191e:	e7e6      	b.n	80018ee <__swsetup_r+0x1e>
 8001920:	0758      	lsls	r0, r3, #29
 8001922:	d512      	bpl.n	800194a <__swsetup_r+0x7a>
 8001924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001926:	b141      	cbz	r1, 800193a <__swsetup_r+0x6a>
 8001928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800192c:	4299      	cmp	r1, r3
 800192e:	d002      	beq.n	8001936 <__swsetup_r+0x66>
 8001930:	4630      	mov	r0, r6
 8001932:	f000 fa59 	bl	8001de8 <_free_r>
 8001936:	2300      	movs	r3, #0
 8001938:	6363      	str	r3, [r4, #52]	; 0x34
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	6063      	str	r3, [r4, #4]
 8001946:	6923      	ldr	r3, [r4, #16]
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	81a3      	strh	r3, [r4, #12]
 8001952:	6923      	ldr	r3, [r4, #16]
 8001954:	b94b      	cbnz	r3, 800196a <__swsetup_r+0x9a>
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800195c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001960:	d003      	beq.n	800196a <__swsetup_r+0x9a>
 8001962:	4621      	mov	r1, r4
 8001964:	4630      	mov	r0, r6
 8001966:	f000 f9ff 	bl	8001d68 <__smakebuf_r>
 800196a:	89a0      	ldrh	r0, [r4, #12]
 800196c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001970:	f010 0301 	ands.w	r3, r0, #1
 8001974:	d00a      	beq.n	800198c <__swsetup_r+0xbc>
 8001976:	2300      	movs	r3, #0
 8001978:	60a3      	str	r3, [r4, #8]
 800197a:	6963      	ldr	r3, [r4, #20]
 800197c:	425b      	negs	r3, r3
 800197e:	61a3      	str	r3, [r4, #24]
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	b943      	cbnz	r3, 8001996 <__swsetup_r+0xc6>
 8001984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001988:	d1ba      	bne.n	8001900 <__swsetup_r+0x30>
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	0781      	lsls	r1, r0, #30
 800198e:	bf58      	it	pl
 8001990:	6963      	ldrpl	r3, [r4, #20]
 8001992:	60a3      	str	r3, [r4, #8]
 8001994:	e7f4      	b.n	8001980 <__swsetup_r+0xb0>
 8001996:	2000      	movs	r0, #0
 8001998:	e7f7      	b.n	800198a <__swsetup_r+0xba>
 800199a:	bf00      	nop
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	08002128 	.word	0x08002128
 80019a4:	08002148 	.word	0x08002148
 80019a8:	08002108 	.word	0x08002108

080019ac <__sflush_r>:
 80019ac:	898a      	ldrh	r2, [r1, #12]
 80019ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b2:	4605      	mov	r5, r0
 80019b4:	0710      	lsls	r0, r2, #28
 80019b6:	460c      	mov	r4, r1
 80019b8:	d458      	bmi.n	8001a6c <__sflush_r+0xc0>
 80019ba:	684b      	ldr	r3, [r1, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dc05      	bgt.n	80019cc <__sflush_r+0x20>
 80019c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc02      	bgt.n	80019cc <__sflush_r+0x20>
 80019c6:	2000      	movs	r0, #0
 80019c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ce:	2e00      	cmp	r6, #0
 80019d0:	d0f9      	beq.n	80019c6 <__sflush_r+0x1a>
 80019d2:	2300      	movs	r3, #0
 80019d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019d8:	682f      	ldr	r7, [r5, #0]
 80019da:	602b      	str	r3, [r5, #0]
 80019dc:	d032      	beq.n	8001a44 <__sflush_r+0x98>
 80019de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	075a      	lsls	r2, r3, #29
 80019e4:	d505      	bpl.n	80019f2 <__sflush_r+0x46>
 80019e6:	6863      	ldr	r3, [r4, #4]
 80019e8:	1ac0      	subs	r0, r0, r3
 80019ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019ec:	b10b      	cbz	r3, 80019f2 <__sflush_r+0x46>
 80019ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f0:	1ac0      	subs	r0, r0, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	4602      	mov	r2, r0
 80019f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019f8:	6a21      	ldr	r1, [r4, #32]
 80019fa:	4628      	mov	r0, r5
 80019fc:	47b0      	blx	r6
 80019fe:	1c43      	adds	r3, r0, #1
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	d106      	bne.n	8001a12 <__sflush_r+0x66>
 8001a04:	6829      	ldr	r1, [r5, #0]
 8001a06:	291d      	cmp	r1, #29
 8001a08:	d82c      	bhi.n	8001a64 <__sflush_r+0xb8>
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <__sflush_r+0x108>)
 8001a0c:	40ca      	lsrs	r2, r1
 8001a0e:	07d6      	lsls	r6, r2, #31
 8001a10:	d528      	bpl.n	8001a64 <__sflush_r+0xb8>
 8001a12:	2200      	movs	r2, #0
 8001a14:	6062      	str	r2, [r4, #4]
 8001a16:	04d9      	lsls	r1, r3, #19
 8001a18:	6922      	ldr	r2, [r4, #16]
 8001a1a:	6022      	str	r2, [r4, #0]
 8001a1c:	d504      	bpl.n	8001a28 <__sflush_r+0x7c>
 8001a1e:	1c42      	adds	r2, r0, #1
 8001a20:	d101      	bne.n	8001a26 <__sflush_r+0x7a>
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	b903      	cbnz	r3, 8001a28 <__sflush_r+0x7c>
 8001a26:	6560      	str	r0, [r4, #84]	; 0x54
 8001a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a2a:	602f      	str	r7, [r5, #0]
 8001a2c:	2900      	cmp	r1, #0
 8001a2e:	d0ca      	beq.n	80019c6 <__sflush_r+0x1a>
 8001a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a34:	4299      	cmp	r1, r3
 8001a36:	d002      	beq.n	8001a3e <__sflush_r+0x92>
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f000 f9d5 	bl	8001de8 <_free_r>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	6360      	str	r0, [r4, #52]	; 0x34
 8001a42:	e7c1      	b.n	80019c8 <__sflush_r+0x1c>
 8001a44:	6a21      	ldr	r1, [r4, #32]
 8001a46:	2301      	movs	r3, #1
 8001a48:	4628      	mov	r0, r5
 8001a4a:	47b0      	blx	r6
 8001a4c:	1c41      	adds	r1, r0, #1
 8001a4e:	d1c7      	bne.n	80019e0 <__sflush_r+0x34>
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0c4      	beq.n	80019e0 <__sflush_r+0x34>
 8001a56:	2b1d      	cmp	r3, #29
 8001a58:	d001      	beq.n	8001a5e <__sflush_r+0xb2>
 8001a5a:	2b16      	cmp	r3, #22
 8001a5c:	d101      	bne.n	8001a62 <__sflush_r+0xb6>
 8001a5e:	602f      	str	r7, [r5, #0]
 8001a60:	e7b1      	b.n	80019c6 <__sflush_r+0x1a>
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a68:	81a3      	strh	r3, [r4, #12]
 8001a6a:	e7ad      	b.n	80019c8 <__sflush_r+0x1c>
 8001a6c:	690f      	ldr	r7, [r1, #16]
 8001a6e:	2f00      	cmp	r7, #0
 8001a70:	d0a9      	beq.n	80019c6 <__sflush_r+0x1a>
 8001a72:	0793      	lsls	r3, r2, #30
 8001a74:	680e      	ldr	r6, [r1, #0]
 8001a76:	bf08      	it	eq
 8001a78:	694b      	ldreq	r3, [r1, #20]
 8001a7a:	600f      	str	r7, [r1, #0]
 8001a7c:	bf18      	it	ne
 8001a7e:	2300      	movne	r3, #0
 8001a80:	eba6 0807 	sub.w	r8, r6, r7
 8001a84:	608b      	str	r3, [r1, #8]
 8001a86:	f1b8 0f00 	cmp.w	r8, #0
 8001a8a:	dd9c      	ble.n	80019c6 <__sflush_r+0x1a>
 8001a8c:	6a21      	ldr	r1, [r4, #32]
 8001a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a90:	4643      	mov	r3, r8
 8001a92:	463a      	mov	r2, r7
 8001a94:	4628      	mov	r0, r5
 8001a96:	47b0      	blx	r6
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	dc06      	bgt.n	8001aaa <__sflush_r+0xfe>
 8001a9c:	89a3      	ldrh	r3, [r4, #12]
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	81a3      	strh	r3, [r4, #12]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	e78e      	b.n	80019c8 <__sflush_r+0x1c>
 8001aaa:	4407      	add	r7, r0
 8001aac:	eba8 0800 	sub.w	r8, r8, r0
 8001ab0:	e7e9      	b.n	8001a86 <__sflush_r+0xda>
 8001ab2:	bf00      	nop
 8001ab4:	20400001 	.word	0x20400001

08001ab8 <_fflush_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	690b      	ldr	r3, [r1, #16]
 8001abc:	4605      	mov	r5, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	b913      	cbnz	r3, 8001ac8 <_fflush_r+0x10>
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	b118      	cbz	r0, 8001ad2 <_fflush_r+0x1a>
 8001aca:	6983      	ldr	r3, [r0, #24]
 8001acc:	b90b      	cbnz	r3, 8001ad2 <_fflush_r+0x1a>
 8001ace:	f000 f887 	bl	8001be0 <__sinit>
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <_fflush_r+0x6c>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d11b      	bne.n	8001b10 <_fflush_r+0x58>
 8001ad8:	686c      	ldr	r4, [r5, #4]
 8001ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ef      	beq.n	8001ac2 <_fflush_r+0xa>
 8001ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ae4:	07d0      	lsls	r0, r2, #31
 8001ae6:	d404      	bmi.n	8001af2 <_fflush_r+0x3a>
 8001ae8:	0599      	lsls	r1, r3, #22
 8001aea:	d402      	bmi.n	8001af2 <_fflush_r+0x3a>
 8001aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aee:	f000 f915 	bl	8001d1c <__retarget_lock_acquire_recursive>
 8001af2:	4628      	mov	r0, r5
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff ff59 	bl	80019ac <__sflush_r>
 8001afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001afc:	07da      	lsls	r2, r3, #31
 8001afe:	4605      	mov	r5, r0
 8001b00:	d4e0      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	059b      	lsls	r3, r3, #22
 8001b06:	d4dd      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b0a:	f000 f908 	bl	8001d1e <__retarget_lock_release_recursive>
 8001b0e:	e7d9      	b.n	8001ac4 <_fflush_r+0xc>
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <_fflush_r+0x70>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d101      	bne.n	8001b1a <_fflush_r+0x62>
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	e7df      	b.n	8001ada <_fflush_r+0x22>
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <_fflush_r+0x74>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	68ec      	ldreq	r4, [r5, #12]
 8001b22:	e7da      	b.n	8001ada <_fflush_r+0x22>
 8001b24:	08002128 	.word	0x08002128
 8001b28:	08002148 	.word	0x08002148
 8001b2c:	08002108 	.word	0x08002108

08001b30 <std>:
 8001b30:	2300      	movs	r3, #0
 8001b32:	b510      	push	{r4, lr}
 8001b34:	4604      	mov	r4, r0
 8001b36:	e9c0 3300 	strd	r3, r3, [r0]
 8001b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b3e:	6083      	str	r3, [r0, #8]
 8001b40:	8181      	strh	r1, [r0, #12]
 8001b42:	6643      	str	r3, [r0, #100]	; 0x64
 8001b44:	81c2      	strh	r2, [r0, #14]
 8001b46:	6183      	str	r3, [r0, #24]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	305c      	adds	r0, #92	; 0x5c
 8001b4e:	f7ff fdef 	bl	8001730 <memset>
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <std+0x38>)
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <std+0x3c>)
 8001b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <std+0x40>)
 8001b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <std+0x44>)
 8001b60:	6224      	str	r4, [r4, #32]
 8001b62:	6323      	str	r3, [r4, #48]	; 0x30
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	bf00      	nop
 8001b68:	08001f5d 	.word	0x08001f5d
 8001b6c:	08001f7f 	.word	0x08001f7f
 8001b70:	08001fb7 	.word	0x08001fb7
 8001b74:	08001fdb 	.word	0x08001fdb

08001b78 <_cleanup_r>:
 8001b78:	4901      	ldr	r1, [pc, #4]	; (8001b80 <_cleanup_r+0x8>)
 8001b7a:	f000 b8af 	b.w	8001cdc <_fwalk_reent>
 8001b7e:	bf00      	nop
 8001b80:	08001ab9 	.word	0x08001ab9

08001b84 <__sfmoreglue>:
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	1e4a      	subs	r2, r1, #1
 8001b88:	2568      	movs	r5, #104	; 0x68
 8001b8a:	4355      	muls	r5, r2
 8001b8c:	460e      	mov	r6, r1
 8001b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b92:	f000 f979 	bl	8001e88 <_malloc_r>
 8001b96:	4604      	mov	r4, r0
 8001b98:	b140      	cbz	r0, 8001bac <__sfmoreglue+0x28>
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8001ba0:	300c      	adds	r0, #12
 8001ba2:	60a0      	str	r0, [r4, #8]
 8001ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ba8:	f7ff fdc2 	bl	8001730 <memset>
 8001bac:	4620      	mov	r0, r4
 8001bae:	bd70      	pop	{r4, r5, r6, pc}

08001bb0 <__sfp_lock_acquire>:
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <__sfp_lock_acquire+0x8>)
 8001bb2:	f000 b8b3 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8001bb6:	bf00      	nop
 8001bb8:	200000a4 	.word	0x200000a4

08001bbc <__sfp_lock_release>:
 8001bbc:	4801      	ldr	r0, [pc, #4]	; (8001bc4 <__sfp_lock_release+0x8>)
 8001bbe:	f000 b8ae 	b.w	8001d1e <__retarget_lock_release_recursive>
 8001bc2:	bf00      	nop
 8001bc4:	200000a4 	.word	0x200000a4

08001bc8 <__sinit_lock_acquire>:
 8001bc8:	4801      	ldr	r0, [pc, #4]	; (8001bd0 <__sinit_lock_acquire+0x8>)
 8001bca:	f000 b8a7 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8001bce:	bf00      	nop
 8001bd0:	2000009f 	.word	0x2000009f

08001bd4 <__sinit_lock_release>:
 8001bd4:	4801      	ldr	r0, [pc, #4]	; (8001bdc <__sinit_lock_release+0x8>)
 8001bd6:	f000 b8a2 	b.w	8001d1e <__retarget_lock_release_recursive>
 8001bda:	bf00      	nop
 8001bdc:	2000009f 	.word	0x2000009f

08001be0 <__sinit>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	4604      	mov	r4, r0
 8001be4:	f7ff fff0 	bl	8001bc8 <__sinit_lock_acquire>
 8001be8:	69a3      	ldr	r3, [r4, #24]
 8001bea:	b11b      	cbz	r3, 8001bf4 <__sinit+0x14>
 8001bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf0:	f7ff bff0 	b.w	8001bd4 <__sinit_lock_release>
 8001bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <__sinit+0x68>)
 8001bfc:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <__sinit+0x6c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c02:	42a3      	cmp	r3, r4
 8001c04:	bf04      	itt	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	61a3      	streq	r3, [r4, #24]
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 f820 	bl	8001c50 <__sfp>
 8001c10:	6060      	str	r0, [r4, #4]
 8001c12:	4620      	mov	r0, r4
 8001c14:	f000 f81c 	bl	8001c50 <__sfp>
 8001c18:	60a0      	str	r0, [r4, #8]
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 f818 	bl	8001c50 <__sfp>
 8001c20:	2200      	movs	r2, #0
 8001c22:	60e0      	str	r0, [r4, #12]
 8001c24:	2104      	movs	r1, #4
 8001c26:	6860      	ldr	r0, [r4, #4]
 8001c28:	f7ff ff82 	bl	8001b30 <std>
 8001c2c:	68a0      	ldr	r0, [r4, #8]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2109      	movs	r1, #9
 8001c32:	f7ff ff7d 	bl	8001b30 <std>
 8001c36:	68e0      	ldr	r0, [r4, #12]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	2112      	movs	r1, #18
 8001c3c:	f7ff ff78 	bl	8001b30 <std>
 8001c40:	2301      	movs	r3, #1
 8001c42:	61a3      	str	r3, [r4, #24]
 8001c44:	e7d2      	b.n	8001bec <__sinit+0xc>
 8001c46:	bf00      	nop
 8001c48:	08002104 	.word	0x08002104
 8001c4c:	08001b79 	.word	0x08001b79

08001c50 <__sfp>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	4607      	mov	r7, r0
 8001c54:	f7ff ffac 	bl	8001bb0 <__sfp_lock_acquire>
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <__sfp+0x84>)
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	69b3      	ldr	r3, [r6, #24]
 8001c5e:	b913      	cbnz	r3, 8001c66 <__sfp+0x16>
 8001c60:	4630      	mov	r0, r6
 8001c62:	f7ff ffbd 	bl	8001be0 <__sinit>
 8001c66:	3648      	adds	r6, #72	; 0x48
 8001c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	d503      	bpl.n	8001c78 <__sfp+0x28>
 8001c70:	6833      	ldr	r3, [r6, #0]
 8001c72:	b30b      	cbz	r3, 8001cb8 <__sfp+0x68>
 8001c74:	6836      	ldr	r6, [r6, #0]
 8001c76:	e7f7      	b.n	8001c68 <__sfp+0x18>
 8001c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c7c:	b9d5      	cbnz	r5, 8001cb4 <__sfp+0x64>
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <__sfp+0x88>)
 8001c80:	60e3      	str	r3, [r4, #12]
 8001c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c86:	6665      	str	r5, [r4, #100]	; 0x64
 8001c88:	f000 f847 	bl	8001d1a <__retarget_lock_init_recursive>
 8001c8c:	f7ff ff96 	bl	8001bbc <__sfp_lock_release>
 8001c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c98:	6025      	str	r5, [r4, #0]
 8001c9a:	61a5      	str	r5, [r4, #24]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ca4:	f7ff fd44 	bl	8001730 <memset>
 8001ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb4:	3468      	adds	r4, #104	; 0x68
 8001cb6:	e7d9      	b.n	8001c6c <__sfp+0x1c>
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4638      	mov	r0, r7
 8001cbc:	f7ff ff62 	bl	8001b84 <__sfmoreglue>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	6030      	str	r0, [r6, #0]
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d1d5      	bne.n	8001c74 <__sfp+0x24>
 8001cc8:	f7ff ff78 	bl	8001bbc <__sfp_lock_release>
 8001ccc:	230c      	movs	r3, #12
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	e7ee      	b.n	8001cb0 <__sfp+0x60>
 8001cd2:	bf00      	nop
 8001cd4:	08002104 	.word	0x08002104
 8001cd8:	ffff0001 	.word	0xffff0001

08001cdc <_fwalk_reent>:
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce0:	4606      	mov	r6, r0
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ce8:	2700      	movs	r7, #0
 8001cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cee:	f1b9 0901 	subs.w	r9, r9, #1
 8001cf2:	d505      	bpl.n	8001d00 <_fwalk_reent+0x24>
 8001cf4:	6824      	ldr	r4, [r4, #0]
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d1f7      	bne.n	8001cea <_fwalk_reent+0xe>
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d00:	89ab      	ldrh	r3, [r5, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d907      	bls.n	8001d16 <_fwalk_reent+0x3a>
 8001d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	d003      	beq.n	8001d16 <_fwalk_reent+0x3a>
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4630      	mov	r0, r6
 8001d12:	47c0      	blx	r8
 8001d14:	4307      	orrs	r7, r0
 8001d16:	3568      	adds	r5, #104	; 0x68
 8001d18:	e7e9      	b.n	8001cee <_fwalk_reent+0x12>

08001d1a <__retarget_lock_init_recursive>:
 8001d1a:	4770      	bx	lr

08001d1c <__retarget_lock_acquire_recursive>:
 8001d1c:	4770      	bx	lr

08001d1e <__retarget_lock_release_recursive>:
 8001d1e:	4770      	bx	lr

08001d20 <__swhatbuf_r>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	460e      	mov	r6, r1
 8001d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d28:	2900      	cmp	r1, #0
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	da07      	bge.n	8001d42 <__swhatbuf_r+0x22>
 8001d32:	2300      	movs	r3, #0
 8001d34:	602b      	str	r3, [r5, #0]
 8001d36:	89b3      	ldrh	r3, [r6, #12]
 8001d38:	061a      	lsls	r2, r3, #24
 8001d3a:	d410      	bmi.n	8001d5e <__swhatbuf_r+0x3e>
 8001d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d40:	e00e      	b.n	8001d60 <__swhatbuf_r+0x40>
 8001d42:	466a      	mov	r2, sp
 8001d44:	f000 f970 	bl	8002028 <_fstat_r>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	dbf2      	blt.n	8001d32 <__swhatbuf_r+0x12>
 8001d4c:	9a01      	ldr	r2, [sp, #4]
 8001d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d56:	425a      	negs	r2, r3
 8001d58:	415a      	adcs	r2, r3
 8001d5a:	602a      	str	r2, [r5, #0]
 8001d5c:	e7ee      	b.n	8001d3c <__swhatbuf_r+0x1c>
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	2000      	movs	r0, #0
 8001d62:	6023      	str	r3, [r4, #0]
 8001d64:	b016      	add	sp, #88	; 0x58
 8001d66:	bd70      	pop	{r4, r5, r6, pc}

08001d68 <__smakebuf_r>:
 8001d68:	898b      	ldrh	r3, [r1, #12]
 8001d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d6c:	079d      	lsls	r5, r3, #30
 8001d6e:	4606      	mov	r6, r0
 8001d70:	460c      	mov	r4, r1
 8001d72:	d507      	bpl.n	8001d84 <__smakebuf_r+0x1c>
 8001d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	6123      	str	r3, [r4, #16]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	6163      	str	r3, [r4, #20]
 8001d80:	b002      	add	sp, #8
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	ab01      	add	r3, sp, #4
 8001d86:	466a      	mov	r2, sp
 8001d88:	f7ff ffca 	bl	8001d20 <__swhatbuf_r>
 8001d8c:	9900      	ldr	r1, [sp, #0]
 8001d8e:	4605      	mov	r5, r0
 8001d90:	4630      	mov	r0, r6
 8001d92:	f000 f879 	bl	8001e88 <_malloc_r>
 8001d96:	b948      	cbnz	r0, 8001dac <__smakebuf_r+0x44>
 8001d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d9c:	059a      	lsls	r2, r3, #22
 8001d9e:	d4ef      	bmi.n	8001d80 <__smakebuf_r+0x18>
 8001da0:	f023 0303 	bic.w	r3, r3, #3
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	81a3      	strh	r3, [r4, #12]
 8001daa:	e7e3      	b.n	8001d74 <__smakebuf_r+0xc>
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <__smakebuf_r+0x7c>)
 8001dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	6020      	str	r0, [r4, #0]
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	9b00      	ldr	r3, [sp, #0]
 8001dbc:	6163      	str	r3, [r4, #20]
 8001dbe:	9b01      	ldr	r3, [sp, #4]
 8001dc0:	6120      	str	r0, [r4, #16]
 8001dc2:	b15b      	cbz	r3, 8001ddc <__smakebuf_r+0x74>
 8001dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f000 f93f 	bl	800204c <_isatty_r>
 8001dce:	b128      	cbz	r0, 8001ddc <__smakebuf_r+0x74>
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	81a3      	strh	r3, [r4, #12]
 8001ddc:	89a0      	ldrh	r0, [r4, #12]
 8001dde:	4305      	orrs	r5, r0
 8001de0:	81a5      	strh	r5, [r4, #12]
 8001de2:	e7cd      	b.n	8001d80 <__smakebuf_r+0x18>
 8001de4:	08001b79 	.word	0x08001b79

08001de8 <_free_r>:
 8001de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dea:	2900      	cmp	r1, #0
 8001dec:	d048      	beq.n	8001e80 <_free_r+0x98>
 8001dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001df2:	9001      	str	r0, [sp, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f1a1 0404 	sub.w	r4, r1, #4
 8001dfa:	bfb8      	it	lt
 8001dfc:	18e4      	addlt	r4, r4, r3
 8001dfe:	f000 f947 	bl	8002090 <__malloc_lock>
 8001e02:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <_free_r+0x9c>)
 8001e04:	9801      	ldr	r0, [sp, #4]
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	4615      	mov	r5, r2
 8001e0a:	b933      	cbnz	r3, 8001e1a <_free_r+0x32>
 8001e0c:	6063      	str	r3, [r4, #4]
 8001e0e:	6014      	str	r4, [r2, #0]
 8001e10:	b003      	add	sp, #12
 8001e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e16:	f000 b941 	b.w	800209c <__malloc_unlock>
 8001e1a:	42a3      	cmp	r3, r4
 8001e1c:	d90b      	bls.n	8001e36 <_free_r+0x4e>
 8001e1e:	6821      	ldr	r1, [r4, #0]
 8001e20:	1862      	adds	r2, r4, r1
 8001e22:	4293      	cmp	r3, r2
 8001e24:	bf04      	itt	eq
 8001e26:	681a      	ldreq	r2, [r3, #0]
 8001e28:	685b      	ldreq	r3, [r3, #4]
 8001e2a:	6063      	str	r3, [r4, #4]
 8001e2c:	bf04      	itt	eq
 8001e2e:	1852      	addeq	r2, r2, r1
 8001e30:	6022      	streq	r2, [r4, #0]
 8001e32:	602c      	str	r4, [r5, #0]
 8001e34:	e7ec      	b.n	8001e10 <_free_r+0x28>
 8001e36:	461a      	mov	r2, r3
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	b10b      	cbz	r3, 8001e40 <_free_r+0x58>
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	d9fa      	bls.n	8001e36 <_free_r+0x4e>
 8001e40:	6811      	ldr	r1, [r2, #0]
 8001e42:	1855      	adds	r5, r2, r1
 8001e44:	42a5      	cmp	r5, r4
 8001e46:	d10b      	bne.n	8001e60 <_free_r+0x78>
 8001e48:	6824      	ldr	r4, [r4, #0]
 8001e4a:	4421      	add	r1, r4
 8001e4c:	1854      	adds	r4, r2, r1
 8001e4e:	42a3      	cmp	r3, r4
 8001e50:	6011      	str	r1, [r2, #0]
 8001e52:	d1dd      	bne.n	8001e10 <_free_r+0x28>
 8001e54:	681c      	ldr	r4, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	6053      	str	r3, [r2, #4]
 8001e5a:	4421      	add	r1, r4
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	e7d7      	b.n	8001e10 <_free_r+0x28>
 8001e60:	d902      	bls.n	8001e68 <_free_r+0x80>
 8001e62:	230c      	movs	r3, #12
 8001e64:	6003      	str	r3, [r0, #0]
 8001e66:	e7d3      	b.n	8001e10 <_free_r+0x28>
 8001e68:	6825      	ldr	r5, [r4, #0]
 8001e6a:	1961      	adds	r1, r4, r5
 8001e6c:	428b      	cmp	r3, r1
 8001e6e:	bf04      	itt	eq
 8001e70:	6819      	ldreq	r1, [r3, #0]
 8001e72:	685b      	ldreq	r3, [r3, #4]
 8001e74:	6063      	str	r3, [r4, #4]
 8001e76:	bf04      	itt	eq
 8001e78:	1949      	addeq	r1, r1, r5
 8001e7a:	6021      	streq	r1, [r4, #0]
 8001e7c:	6054      	str	r4, [r2, #4]
 8001e7e:	e7c7      	b.n	8001e10 <_free_r+0x28>
 8001e80:	b003      	add	sp, #12
 8001e82:	bd30      	pop	{r4, r5, pc}
 8001e84:	20000090 	.word	0x20000090

08001e88 <_malloc_r>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	1ccd      	adds	r5, r1, #3
 8001e8c:	f025 0503 	bic.w	r5, r5, #3
 8001e90:	3508      	adds	r5, #8
 8001e92:	2d0c      	cmp	r5, #12
 8001e94:	bf38      	it	cc
 8001e96:	250c      	movcc	r5, #12
 8001e98:	2d00      	cmp	r5, #0
 8001e9a:	4606      	mov	r6, r0
 8001e9c:	db01      	blt.n	8001ea2 <_malloc_r+0x1a>
 8001e9e:	42a9      	cmp	r1, r5
 8001ea0:	d903      	bls.n	8001eaa <_malloc_r+0x22>
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	6033      	str	r3, [r6, #0]
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eaa:	f000 f8f1 	bl	8002090 <__malloc_lock>
 8001eae:	4921      	ldr	r1, [pc, #132]	; (8001f34 <_malloc_r+0xac>)
 8001eb0:	680a      	ldr	r2, [r1, #0]
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	b99c      	cbnz	r4, 8001ede <_malloc_r+0x56>
 8001eb6:	4f20      	ldr	r7, [pc, #128]	; (8001f38 <_malloc_r+0xb0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b923      	cbnz	r3, 8001ec6 <_malloc_r+0x3e>
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	4630      	mov	r0, r6
 8001ec0:	f000 f83c 	bl	8001f3c <_sbrk_r>
 8001ec4:	6038      	str	r0, [r7, #0]
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f000 f837 	bl	8001f3c <_sbrk_r>
 8001ece:	1c43      	adds	r3, r0, #1
 8001ed0:	d123      	bne.n	8001f1a <_malloc_r+0x92>
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	6033      	str	r3, [r6, #0]
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f000 f8e0 	bl	800209c <__malloc_unlock>
 8001edc:	e7e3      	b.n	8001ea6 <_malloc_r+0x1e>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	1b5b      	subs	r3, r3, r5
 8001ee2:	d417      	bmi.n	8001f14 <_malloc_r+0x8c>
 8001ee4:	2b0b      	cmp	r3, #11
 8001ee6:	d903      	bls.n	8001ef0 <_malloc_r+0x68>
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	441c      	add	r4, r3
 8001eec:	6025      	str	r5, [r4, #0]
 8001eee:	e004      	b.n	8001efa <_malloc_r+0x72>
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	42a2      	cmp	r2, r4
 8001ef4:	bf0c      	ite	eq
 8001ef6:	600b      	streq	r3, [r1, #0]
 8001ef8:	6053      	strne	r3, [r2, #4]
 8001efa:	4630      	mov	r0, r6
 8001efc:	f000 f8ce 	bl	800209c <__malloc_unlock>
 8001f00:	f104 000b 	add.w	r0, r4, #11
 8001f04:	1d23      	adds	r3, r4, #4
 8001f06:	f020 0007 	bic.w	r0, r0, #7
 8001f0a:	1ac2      	subs	r2, r0, r3
 8001f0c:	d0cc      	beq.n	8001ea8 <_malloc_r+0x20>
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	50a3      	str	r3, [r4, r2]
 8001f12:	e7c9      	b.n	8001ea8 <_malloc_r+0x20>
 8001f14:	4622      	mov	r2, r4
 8001f16:	6864      	ldr	r4, [r4, #4]
 8001f18:	e7cc      	b.n	8001eb4 <_malloc_r+0x2c>
 8001f1a:	1cc4      	adds	r4, r0, #3
 8001f1c:	f024 0403 	bic.w	r4, r4, #3
 8001f20:	42a0      	cmp	r0, r4
 8001f22:	d0e3      	beq.n	8001eec <_malloc_r+0x64>
 8001f24:	1a21      	subs	r1, r4, r0
 8001f26:	4630      	mov	r0, r6
 8001f28:	f000 f808 	bl	8001f3c <_sbrk_r>
 8001f2c:	3001      	adds	r0, #1
 8001f2e:	d1dd      	bne.n	8001eec <_malloc_r+0x64>
 8001f30:	e7cf      	b.n	8001ed2 <_malloc_r+0x4a>
 8001f32:	bf00      	nop
 8001f34:	20000090 	.word	0x20000090
 8001f38:	20000094 	.word	0x20000094

08001f3c <_sbrk_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4d06      	ldr	r5, [pc, #24]	; (8001f58 <_sbrk_r+0x1c>)
 8001f40:	2300      	movs	r3, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	602b      	str	r3, [r5, #0]
 8001f48:	f7fe fc7e 	bl	8000848 <_sbrk>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d102      	bne.n	8001f56 <_sbrk_r+0x1a>
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	b103      	cbz	r3, 8001f56 <_sbrk_r+0x1a>
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
 8001f58:	200000a8 	.word	0x200000a8

08001f5c <__sread>:
 8001f5c:	b510      	push	{r4, lr}
 8001f5e:	460c      	mov	r4, r1
 8001f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f64:	f000 f8a0 	bl	80020a8 <_read_r>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	bfab      	itete	ge
 8001f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8001f70:	181b      	addge	r3, r3, r0
 8001f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f76:	bfac      	ite	ge
 8001f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f7a:	81a3      	strhlt	r3, [r4, #12]
 8001f7c:	bd10      	pop	{r4, pc}

08001f7e <__swrite>:
 8001f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f82:	461f      	mov	r7, r3
 8001f84:	898b      	ldrh	r3, [r1, #12]
 8001f86:	05db      	lsls	r3, r3, #23
 8001f88:	4605      	mov	r5, r0
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	4616      	mov	r6, r2
 8001f8e:	d505      	bpl.n	8001f9c <__swrite+0x1e>
 8001f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f94:	2302      	movs	r3, #2
 8001f96:	2200      	movs	r2, #0
 8001f98:	f000 f868 	bl	800206c <_lseek_r>
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	4632      	mov	r2, r6
 8001faa:	463b      	mov	r3, r7
 8001fac:	4628      	mov	r0, r5
 8001fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb2:	f000 b817 	b.w	8001fe4 <_write_r>

08001fb6 <__sseek>:
 8001fb6:	b510      	push	{r4, lr}
 8001fb8:	460c      	mov	r4, r1
 8001fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fbe:	f000 f855 	bl	800206c <_lseek_r>
 8001fc2:	1c43      	adds	r3, r0, #1
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	bf15      	itete	ne
 8001fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fd2:	81a3      	strheq	r3, [r4, #12]
 8001fd4:	bf18      	it	ne
 8001fd6:	81a3      	strhne	r3, [r4, #12]
 8001fd8:	bd10      	pop	{r4, pc}

08001fda <__sclose>:
 8001fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fde:	f000 b813 	b.w	8002008 <_close_r>
	...

08001fe4 <_write_r>:
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4d07      	ldr	r5, [pc, #28]	; (8002004 <_write_r+0x20>)
 8001fe8:	4604      	mov	r4, r0
 8001fea:	4608      	mov	r0, r1
 8001fec:	4611      	mov	r1, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	602a      	str	r2, [r5, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f7fe fb56 	bl	80006a4 <_write>
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d102      	bne.n	8002002 <_write_r+0x1e>
 8001ffc:	682b      	ldr	r3, [r5, #0]
 8001ffe:	b103      	cbz	r3, 8002002 <_write_r+0x1e>
 8002000:	6023      	str	r3, [r4, #0]
 8002002:	bd38      	pop	{r3, r4, r5, pc}
 8002004:	200000a8 	.word	0x200000a8

08002008 <_close_r>:
 8002008:	b538      	push	{r3, r4, r5, lr}
 800200a:	4d06      	ldr	r5, [pc, #24]	; (8002024 <_close_r+0x1c>)
 800200c:	2300      	movs	r3, #0
 800200e:	4604      	mov	r4, r0
 8002010:	4608      	mov	r0, r1
 8002012:	602b      	str	r3, [r5, #0]
 8002014:	f7fe fbe4 	bl	80007e0 <_close>
 8002018:	1c43      	adds	r3, r0, #1
 800201a:	d102      	bne.n	8002022 <_close_r+0x1a>
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	b103      	cbz	r3, 8002022 <_close_r+0x1a>
 8002020:	6023      	str	r3, [r4, #0]
 8002022:	bd38      	pop	{r3, r4, r5, pc}
 8002024:	200000a8 	.word	0x200000a8

08002028 <_fstat_r>:
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4d07      	ldr	r5, [pc, #28]	; (8002048 <_fstat_r+0x20>)
 800202c:	2300      	movs	r3, #0
 800202e:	4604      	mov	r4, r0
 8002030:	4608      	mov	r0, r1
 8002032:	4611      	mov	r1, r2
 8002034:	602b      	str	r3, [r5, #0]
 8002036:	f7fe fbdf 	bl	80007f8 <_fstat>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	d102      	bne.n	8002044 <_fstat_r+0x1c>
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	b103      	cbz	r3, 8002044 <_fstat_r+0x1c>
 8002042:	6023      	str	r3, [r4, #0]
 8002044:	bd38      	pop	{r3, r4, r5, pc}
 8002046:	bf00      	nop
 8002048:	200000a8 	.word	0x200000a8

0800204c <_isatty_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4d06      	ldr	r5, [pc, #24]	; (8002068 <_isatty_r+0x1c>)
 8002050:	2300      	movs	r3, #0
 8002052:	4604      	mov	r4, r0
 8002054:	4608      	mov	r0, r1
 8002056:	602b      	str	r3, [r5, #0]
 8002058:	f7fe fbde 	bl	8000818 <_isatty>
 800205c:	1c43      	adds	r3, r0, #1
 800205e:	d102      	bne.n	8002066 <_isatty_r+0x1a>
 8002060:	682b      	ldr	r3, [r5, #0]
 8002062:	b103      	cbz	r3, 8002066 <_isatty_r+0x1a>
 8002064:	6023      	str	r3, [r4, #0]
 8002066:	bd38      	pop	{r3, r4, r5, pc}
 8002068:	200000a8 	.word	0x200000a8

0800206c <_lseek_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4d07      	ldr	r5, [pc, #28]	; (800208c <_lseek_r+0x20>)
 8002070:	4604      	mov	r4, r0
 8002072:	4608      	mov	r0, r1
 8002074:	4611      	mov	r1, r2
 8002076:	2200      	movs	r2, #0
 8002078:	602a      	str	r2, [r5, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	f7fe fbd7 	bl	800082e <_lseek>
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d102      	bne.n	800208a <_lseek_r+0x1e>
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	b103      	cbz	r3, 800208a <_lseek_r+0x1e>
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	bd38      	pop	{r3, r4, r5, pc}
 800208c:	200000a8 	.word	0x200000a8

08002090 <__malloc_lock>:
 8002090:	4801      	ldr	r0, [pc, #4]	; (8002098 <__malloc_lock+0x8>)
 8002092:	f7ff be43 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8002096:	bf00      	nop
 8002098:	200000a0 	.word	0x200000a0

0800209c <__malloc_unlock>:
 800209c:	4801      	ldr	r0, [pc, #4]	; (80020a4 <__malloc_unlock+0x8>)
 800209e:	f7ff be3e 	b.w	8001d1e <__retarget_lock_release_recursive>
 80020a2:	bf00      	nop
 80020a4:	200000a0 	.word	0x200000a0

080020a8 <_read_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	4d07      	ldr	r5, [pc, #28]	; (80020c8 <_read_r+0x20>)
 80020ac:	4604      	mov	r4, r0
 80020ae:	4608      	mov	r0, r1
 80020b0:	4611      	mov	r1, r2
 80020b2:	2200      	movs	r2, #0
 80020b4:	602a      	str	r2, [r5, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f7fe fb75 	bl	80007a6 <_read>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_read_r+0x1e>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_read_r+0x1e>
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	200000a8 	.word	0x200000a8

080020cc <_init>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	bf00      	nop
 80020d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d2:	bc08      	pop	{r3}
 80020d4:	469e      	mov	lr, r3
 80020d6:	4770      	bx	lr

080020d8 <_fini>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	bf00      	nop
 80020dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020de:	bc08      	pop	{r3}
 80020e0:	469e      	mov	lr, r3
 80020e2:	4770      	bx	lr
