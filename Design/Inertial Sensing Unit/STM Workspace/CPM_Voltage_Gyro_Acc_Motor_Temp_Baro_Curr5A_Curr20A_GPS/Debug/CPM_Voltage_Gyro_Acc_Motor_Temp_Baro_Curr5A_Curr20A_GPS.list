
CPM_Voltage_Gyro_Acc_Motor_Temp_Baro_Curr5A_Curr20A_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c94  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08008e60  08008e60  00018e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc0  08008fc0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc8  08008fc8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  2000008c  0800905c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  0800905c  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017828  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317b  00000000  00000000  000378e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a8d  00000000  00000000  0003d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c5f  00000000  00000000  00061bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e18b7  00000000  00000000  0007b834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d0eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a7c  00000000  00000000  0015d13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008e44 	.word	0x08008e44

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	08008e44 	.word	0x08008e44

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b974 	b.w	8000f20 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468e      	mov	lr, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d14d      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	4694      	mov	ip, r2
 8000c62:	d969      	bls.n	8000d38 <__udivmoddi4+0xe8>
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	b152      	cbz	r2, 8000c80 <__udivmoddi4+0x30>
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	f1c2 0120 	rsb	r1, r2, #32
 8000c72:	fa20 f101 	lsr.w	r1, r0, r1
 8000c76:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	0c21      	lsrs	r1, r4, #16
 8000c86:	fbbe f6f8 	udiv	r6, lr, r8
 8000c8a:	fa1f f78c 	uxth.w	r7, ip
 8000c8e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c96:	fb06 f107 	mul.w	r1, r6, r7
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca6:	f080 811f 	bcs.w	8000ee8 <__udivmoddi4+0x298>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 811c 	bls.w	8000ee8 <__udivmoddi4+0x298>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 f707 	mul.w	r7, r0, r7
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x92>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	f080 810a 	bcs.w	8000eec <__udivmoddi4+0x29c>
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	f240 8107 	bls.w	8000eec <__udivmoddi4+0x29c>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce6:	1be4      	subs	r4, r4, r7
 8000ce8:	2600      	movs	r6, #0
 8000cea:	b11d      	cbz	r5, 8000cf4 <__udivmoddi4+0xa4>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0xc2>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80ef 	beq.w	8000ee2 <__udivmoddi4+0x292>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x160>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xd4>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80f9 	bhi.w	8000f16 <__udivmoddi4+0x2c6>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0e0      	beq.n	8000cf4 <__udivmoddi4+0xa4>
 8000d32:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d36:	e7dd      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000d38:	b902      	cbnz	r2, 8000d3c <__udivmoddi4+0xec>
 8000d3a:	deff      	udf	#255	; 0xff
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	f040 8092 	bne.w	8000e6a <__udivmoddi4+0x21a>
 8000d46:	eba1 010c 	sub.w	r1, r1, ip
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2601      	movs	r6, #1
 8000d54:	0c20      	lsrs	r0, r4, #16
 8000d56:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d5a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d62:	fb0e f003 	mul.w	r0, lr, r3
 8000d66:	4288      	cmp	r0, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x12c>
 8000d6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x12a>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2c0>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	1a09      	subs	r1, r1, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1110 	mls	r1, r7, r0, r1
 8000d88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x156>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x154>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000da4:	4608      	mov	r0, r1
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dae:	e79c      	b.n	8000cea <__udivmoddi4+0x9a>
 8000db0:	f1c6 0720 	rsb	r7, r6, #32
 8000db4:	40b3      	lsls	r3, r6
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa20 f407 	lsr.w	r4, r0, r7
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	40f9      	lsrs	r1, r7
 8000dca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dce:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd6:	0c20      	lsrs	r0, r4, #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fb09 1118 	mls	r1, r9, r8, r1
 8000de0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de4:	fb08 f00e 	mul.w	r0, r8, lr
 8000de8:	4288      	cmp	r0, r1
 8000dea:	fa02 f206 	lsl.w	r2, r2, r6
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b8>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2bc>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2bc>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1a09      	subs	r1, r1, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e10:	fb09 1110 	mls	r1, r9, r0, r1
 8000e14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e1c:	458e      	cmp	lr, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1e2>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2a:	458e      	cmp	lr, r1
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e36:	fba0 9402 	umull	r9, r4, r0, r2
 8000e3a:	eba1 010e 	sub.w	r1, r1, lr
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46a6      	mov	lr, r4
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x212>
 8000e4a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e52:	fa01 f707 	lsl.w	r7, r1, r7
 8000e56:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5a:	40f1      	lsrs	r1, r6
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	f1c2 0320 	rsb	r3, r2, #32
 8000e6e:	40d8      	lsrs	r0, r3
 8000e70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e74:	fa21 f303 	lsr.w	r3, r1, r3
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e88:	fb07 3610 	mls	r6, r7, r0, r3
 8000e8c:	0c0b      	lsrs	r3, r1, #16
 8000e8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e92:	fb00 f60e 	mul.w	r6, r0, lr
 8000e96:	429e      	cmp	r6, r3
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x260>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b8>
 8000ea8:	429e      	cmp	r6, r3
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b8>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	b289      	uxth	r1, r1
 8000eb4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x28a>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed6:	3e02      	subs	r6, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0x104>
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e705      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6f8      	b.n	8000ce2 <__udivmoddi4+0x92>
 8000ef0:	454b      	cmp	r3, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f8>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f8>
 8000f00:	4646      	mov	r6, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x28a>
 8000f04:	4620      	mov	r0, r4
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1e2>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b8>
 8000f10:	3b02      	subs	r3, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x12c>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e709      	b.n	8000d2e <__udivmoddi4+0xde>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x156>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000f2a:	23aa      	movs	r3, #170	; 0xaa
 8000f2c:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2316      	movs	r3, #22
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <read_calliberation_data+0x12c>)
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	21ee      	movs	r1, #238	; 0xee
 8000f42:	4844      	ldr	r0, [pc, #272]	; (8001054 <read_calliberation_data+0x130>)
 8000f44:	f004 f984 	bl	8005250 <HAL_I2C_Mem_Read>
	temp=Callib_Data;
 8000f48:	4b41      	ldr	r3, [pc, #260]	; (8001050 <read_calliberation_data+0x12c>)
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b42      	ldr	r3, [pc, #264]	; (8001058 <read_calliberation_data+0x134>)
 8000f4e:	701a      	strb	r2, [r3, #0]
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <read_calliberation_data+0x12c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <read_calliberation_data+0x12c>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b3e      	ldr	r3, [pc, #248]	; (800105c <read_calliberation_data+0x138>)
 8000f64:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000f66:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <read_calliberation_data+0x12c>)
 8000f68:	789b      	ldrb	r3, [r3, #2]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <read_calliberation_data+0x12c>)
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <read_calliberation_data+0x13c>)
 8000f7a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <read_calliberation_data+0x12c>)
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <read_calliberation_data+0x12c>)
 8000f86:	795b      	ldrb	r3, [r3, #5]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	4b35      	ldr	r3, [pc, #212]	; (8001064 <read_calliberation_data+0x140>)
 8000f90:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <read_calliberation_data+0x12c>)
 8000f94:	799b      	ldrb	r3, [r3, #6]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <read_calliberation_data+0x12c>)
 8000f9c:	79db      	ldrb	r3, [r3, #7]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <read_calliberation_data+0x144>)
 8000fa8:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <read_calliberation_data+0x12c>)
 8000fac:	7a1b      	ldrb	r3, [r3, #8]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <read_calliberation_data+0x12c>)
 8000fb4:	7a5b      	ldrb	r3, [r3, #9]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <read_calliberation_data+0x148>)
 8000fc0:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <read_calliberation_data+0x12c>)
 8000fc4:	7a9b      	ldrb	r3, [r3, #10]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <read_calliberation_data+0x12c>)
 8000fcc:	7adb      	ldrb	r3, [r3, #11]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <read_calliberation_data+0x14c>)
 8000fd8:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <read_calliberation_data+0x12c>)
 8000fdc:	7b1b      	ldrb	r3, [r3, #12]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <read_calliberation_data+0x12c>)
 8000fe4:	7b5b      	ldrb	r3, [r3, #13]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <read_calliberation_data+0x150>)
 8000fee:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <read_calliberation_data+0x12c>)
 8000ff2:	7b9b      	ldrb	r3, [r3, #14]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <read_calliberation_data+0x12c>)
 8000ffa:	7bdb      	ldrb	r3, [r3, #15]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <read_calliberation_data+0x154>)
 8001004:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <read_calliberation_data+0x12c>)
 8001008:	7c1b      	ldrb	r3, [r3, #16]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <read_calliberation_data+0x12c>)
 8001010:	7c5b      	ldrb	r3, [r3, #17]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <read_calliberation_data+0x158>)
 800101a:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <read_calliberation_data+0x12c>)
 800101e:	7c9b      	ldrb	r3, [r3, #18]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <read_calliberation_data+0x12c>)
 8001026:	7cdb      	ldrb	r3, [r3, #19]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <read_calliberation_data+0x15c>)
 8001030:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <read_calliberation_data+0x12c>)
 8001034:	7d1b      	ldrb	r3, [r3, #20]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <read_calliberation_data+0x12c>)
 800103c:	7d5b      	ldrb	r3, [r3, #21]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <read_calliberation_data+0x160>)
 8001046:	801a      	strh	r2, [r3, #0]

}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200000f4 	.word	0x200000f4
 8001054:	20000230 	.word	0x20000230
 8001058:	200000f0 	.word	0x200000f0
 800105c:	200000a8 	.word	0x200000a8
 8001060:	200000aa 	.word	0x200000aa
 8001064:	200000ac 	.word	0x200000ac
 8001068:	200000ae 	.word	0x200000ae
 800106c:	200000b0 	.word	0x200000b0
 8001070:	200000b2 	.word	0x200000b2
 8001074:	200000b4 	.word	0x200000b4
 8001078:	200000b6 	.word	0x200000b6
 800107c:	200000b8 	.word	0x200000b8
 8001080:	200000ba 	.word	0x200000ba
 8001084:	200000bc 	.word	0x200000bc

08001088 <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800108e:	232e      	movs	r3, #46	; 0x2e
 8001090:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	22f4      	movs	r2, #244	; 0xf4
 80010a4:	21ee      	movs	r1, #238	; 0xee
 80010a6:	4810      	ldr	r0, [pc, #64]	; (80010e8 <Get_UTemp+0x60>)
 80010a8:	f003 ffd8 	bl	800505c <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010ac:	2005      	movs	r0, #5
 80010ae:	f002 fc1b 	bl	80038e8 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <Get_UTemp+0x64>)
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	22f6      	movs	r2, #246	; 0xf6
 80010c4:	21ee      	movs	r1, #238	; 0xee
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <Get_UTemp+0x60>)
 80010c8:	f004 f8c2 	bl	8005250 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <Get_UTemp+0x64>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <Get_UTemp+0x64>)
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000230 	.word	0x20000230
 80010ec:	20000110 	.word	0x20000110

080010f0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80010f4:	f7ff ffc8 	bl	8001088 <Get_UTemp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <BMP180_GetTemp+0x108>)
 80010fe:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <BMP180_GetTemp+0x108>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a3d      	ldr	r2, [pc, #244]	; (80011fc <BMP180_GetTemp+0x10c>)
 8001106:	8812      	ldrh	r2, [r2, #0]
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9d6 	bl	80004bc <__aeabi_i2d>
 8001110:	4604      	mov	r4, r0
 8001112:	460d      	mov	r5, r1
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <BMP180_GetTemp+0x110>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f9cf 	bl	80004bc <__aeabi_i2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <BMP180_GetTemp+0x114>)
 8001124:	f7ff fb5e 	bl	80007e4 <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa2e 	bl	8000590 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fcd8 	bl	8000af0 <__aeabi_d2iz>
 8001140:	4603      	mov	r3, r0
 8001142:	4a31      	ldr	r2, [pc, #196]	; (8001208 <BMP180_GetTemp+0x118>)
 8001144:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <BMP180_GetTemp+0x11c>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9b5 	bl	80004bc <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <BMP180_GetTemp+0x120>)
 8001158:	f7ff fa1a 	bl	8000590 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4614      	mov	r4, r2
 8001162:	461d      	mov	r5, r3
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <BMP180_GetTemp+0x124>)
 8001166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116a:	461a      	mov	r2, r3
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <BMP180_GetTemp+0x118>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9a2 	bl	80004bc <__aeabi_i2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff fb30 	bl	80007e4 <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fcb0 	bl	8000af0 <__aeabi_d2iz>
 8001190:	4603      	mov	r3, r0
 8001192:	4a21      	ldr	r2, [pc, #132]	; (8001218 <BMP180_GetTemp+0x128>)
 8001194:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <BMP180_GetTemp+0x118>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <BMP180_GetTemp+0x128>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a1e      	ldr	r2, [pc, #120]	; (800121c <BMP180_GetTemp+0x12c>)
 80011a2:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <BMP180_GetTemp+0x12c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3308      	adds	r3, #8
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f986 	bl	80004bc <__aeabi_i2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <BMP180_GetTemp+0x130>)
 80011b6:	f7ff fb15 	bl	80007e4 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fc95 	bl	8000af0 <__aeabi_d2iz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a16      	ldr	r2, [pc, #88]	; (8001224 <BMP180_GetTemp+0x134>)
 80011ca:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <BMP180_GetTemp+0x134>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f973 	bl	80004bc <__aeabi_i2d>
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <BMP180_GetTemp+0x138>)
 80011dc:	f7ff fb02 	bl	80007e4 <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcca 	bl	8000b80 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	ee07 3a90 	vmov	s15, r3
}
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	200000c0 	.word	0x200000c0
 80011fc:	200000b2 	.word	0x200000b2
 8001200:	200000b0 	.word	0x200000b0
 8001204:	40e00000 	.word	0x40e00000
 8001208:	200000c8 	.word	0x200000c8
 800120c:	200000ba 	.word	0x200000ba
 8001210:	40a00000 	.word	0x40a00000
 8001214:	200000bc 	.word	0x200000bc
 8001218:	200000cc 	.word	0x200000cc
 800121c:	200000d8 	.word	0x200000d8
 8001220:	40300000 	.word	0x40300000
 8001224:	200000ec 	.word	0x200000ec
 8001228:	40240000 	.word	0x40240000

0800122c <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af04      	add	r7, sp, #16
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	019b      	lsls	r3, r3, #6
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3334      	adds	r3, #52	; 0x34
 800123e:	b2db      	uxtb	r3, r3
 8001240:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2301      	movs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f107 030f 	add.w	r3, r7, #15
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	22f4      	movs	r2, #244	; 0xf4
 8001256:	21ee      	movs	r1, #238	; 0xee
 8001258:	4820      	ldr	r0, [pc, #128]	; (80012dc <Get_UPress+0xb0>)
 800125a:	f003 feff 	bl	800505c <HAL_I2C_Mem_Write>
	}
	if(PCF==3|PCF==1) //Open
		{
			Press_RAW[1]=1;
		}*/
	switch (oss)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d81b      	bhi.n	800129c <Get_UPress+0x70>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <Get_UPress+0x40>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001285 	.word	0x08001285
 8001274:	0800128d 	.word	0x0800128d
 8001278:	08001295 	.word	0x08001295
	{
		case (0):
			HAL_Delay (5);
 800127c:	2005      	movs	r0, #5
 800127e:	f002 fb33 	bl	80038e8 <HAL_Delay>
			break;
 8001282:	e00b      	b.n	800129c <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001284:	2008      	movs	r0, #8
 8001286:	f002 fb2f 	bl	80038e8 <HAL_Delay>
			break;
 800128a:	e007      	b.n	800129c <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 800128c:	200e      	movs	r0, #14
 800128e:	f002 fb2b 	bl	80038e8 <HAL_Delay>
			break;
 8001292:	e003      	b.n	800129c <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001294:	201a      	movs	r0, #26
 8001296:	f002 fb27 	bl	80038e8 <HAL_Delay>
			break;
 800129a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	2303      	movs	r3, #3
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <Get_UPress+0xb4>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f6      	movs	r2, #246	; 0xf6
 80012ae:	21ee      	movs	r1, #238	; 0xee
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <Get_UPress+0xb0>)
 80012b2:	f003 ffcd 	bl	8005250 <HAL_I2C_Mem_Read>
	//i2c_err=Press_RAW[1]&0x07;
	//i2c_err=Press_RAW;
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <Get_UPress+0xb4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <Get_UPress+0xb4>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4413      	add	r3, r2
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <Get_UPress+0xb4>)
 80012c6:	7892      	ldrb	r2, [r2, #2]
 80012c8:	441a      	add	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f1c3 0308 	rsb	r3, r3, #8
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000230 	.word	0x20000230
 80012e0:	2000010c 	.word	0x2000010c

080012e4 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff9d 	bl	800122c <Get_UPress>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4ba8      	ldr	r3, [pc, #672]	; (8001598 <BMP180_GetPress+0x2b4>)
 80012f8:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80012fa:	4ba8      	ldr	r3, [pc, #672]	; (800159c <BMP180_GetPress+0x2b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4aa8      	ldr	r2, [pc, #672]	; (80015a0 <BMP180_GetPress+0x2bc>)
 8001300:	8812      	ldrh	r2, [r2, #0]
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f8d9 	bl	80004bc <__aeabi_i2d>
 800130a:	4604      	mov	r4, r0
 800130c:	460d      	mov	r5, r1
 800130e:	4ba5      	ldr	r3, [pc, #660]	; (80015a4 <BMP180_GetPress+0x2c0>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f8d2 	bl	80004bc <__aeabi_i2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4ba2      	ldr	r3, [pc, #648]	; (80015a8 <BMP180_GetPress+0x2c4>)
 800131e:	f7ff fa61 	bl	80007e4 <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4620      	mov	r0, r4
 8001328:	4629      	mov	r1, r5
 800132a:	f7ff f931 	bl	8000590 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fbdb 	bl	8000af0 <__aeabi_d2iz>
 800133a:	4603      	mov	r3, r0
 800133c:	4a9b      	ldr	r2, [pc, #620]	; (80015ac <BMP180_GetPress+0x2c8>)
 800133e:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001340:	4b9b      	ldr	r3, [pc, #620]	; (80015b0 <BMP180_GetPress+0x2cc>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8b8 	bl	80004bc <__aeabi_i2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b98      	ldr	r3, [pc, #608]	; (80015b4 <BMP180_GetPress+0x2d0>)
 8001352:	f7ff f91d 	bl	8000590 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4614      	mov	r4, r2
 800135c:	461d      	mov	r5, r3
 800135e:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <BMP180_GetPress+0x2d4>)
 8001360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001364:	461a      	mov	r2, r3
 8001366:	4b91      	ldr	r3, [pc, #580]	; (80015ac <BMP180_GetPress+0x2c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8a5 	bl	80004bc <__aeabi_i2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7ff fa33 	bl	80007e4 <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbb3 	bl	8000af0 <__aeabi_d2iz>
 800138a:	4603      	mov	r3, r0
 800138c:	4a8b      	ldr	r2, [pc, #556]	; (80015bc <BMP180_GetPress+0x2d8>)
 800138e:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001390:	4b86      	ldr	r3, [pc, #536]	; (80015ac <BMP180_GetPress+0x2c8>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b89      	ldr	r3, [pc, #548]	; (80015bc <BMP180_GetPress+0x2d8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4413      	add	r3, r2
 800139a:	4a89      	ldr	r2, [pc, #548]	; (80015c0 <BMP180_GetPress+0x2dc>)
 800139c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <BMP180_GetPress+0x2dc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013a6:	4a87      	ldr	r2, [pc, #540]	; (80015c4 <BMP180_GetPress+0x2e0>)
 80013a8:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013aa:	4b87      	ldr	r3, [pc, #540]	; (80015c8 <BMP180_GetPress+0x2e4>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f883 	bl	80004bc <__aeabi_i2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <BMP180_GetPress+0x2e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <BMP180_GetPress+0x2e0>)
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f878 	bl	80004bc <__aeabi_i2d>
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <BMP180_GetPress+0x2e8>)
 80013d2:	f7ff fa07 	bl	80007e4 <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4620      	mov	r0, r4
 80013dc:	4629      	mov	r1, r5
 80013de:	f7ff f8d7 	bl	8000590 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <BMP180_GetPress+0x2d0>)
 80013f0:	f7ff f9f8 	bl	80007e4 <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb78 	bl	8000af0 <__aeabi_d2iz>
 8001400:	4603      	mov	r3, r0
 8001402:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <BMP180_GetPress+0x2c8>)
 8001404:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <BMP180_GetPress+0x2ec>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	461a      	mov	r2, r3
 800140e:	4b6d      	ldr	r3, [pc, #436]	; (80015c4 <BMP180_GetPress+0x2e0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f850 	bl	80004bc <__aeabi_i2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <BMP180_GetPress+0x2d0>)
 8001422:	f7ff f9df 	bl	80007e4 <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb5f 	bl	8000af0 <__aeabi_d2iz>
 8001432:	4603      	mov	r3, r0
 8001434:	4a61      	ldr	r2, [pc, #388]	; (80015bc <BMP180_GetPress+0x2d8>)
 8001436:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001438:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <BMP180_GetPress+0x2c8>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <BMP180_GetPress+0x2d8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	4a64      	ldr	r2, [pc, #400]	; (80015d4 <BMP180_GetPress+0x2f0>)
 8001444:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001446:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <BMP180_GetPress+0x2f4>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	009a      	lsls	r2, r3, #2
 800144e:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <BMP180_GetPress+0x2f0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	441a      	add	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	3302      	adds	r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <BMP180_GetPress+0x17e>
 8001460:	3303      	adds	r3, #3
 8001462:	109b      	asrs	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <BMP180_GetPress+0x2f8>)
 8001468:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800146a:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <BMP180_GetPress+0x2fc>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	461a      	mov	r2, r3
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <BMP180_GetPress+0x2e0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f81e 	bl	80004bc <__aeabi_i2d>
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <BMP180_GetPress+0x300>)
 8001486:	f7ff f9ad 	bl	80007e4 <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fb2d 	bl	8000af0 <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	4a44      	ldr	r2, [pc, #272]	; (80015ac <BMP180_GetPress+0x2c8>)
 800149a:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800149c:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <BMP180_GetPress+0x304>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f80a 	bl	80004bc <__aeabi_i2d>
 80014a8:	4604      	mov	r4, r0
 80014aa:	460d      	mov	r5, r1
 80014ac:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <BMP180_GetPress+0x2e0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <BMP180_GetPress+0x2e0>)
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffff 	bl	80004bc <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <BMP180_GetPress+0x2e8>)
 80014c4:	f7ff f98e 	bl	80007e4 <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7ff f85e 	bl	8000590 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b42      	ldr	r3, [pc, #264]	; (80015ec <BMP180_GetPress+0x308>)
 80014e2:	f7ff f97f 	bl	80007e4 <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff faff 	bl	8000af0 <__aeabi_d2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <BMP180_GetPress+0x2d8>)
 80014f6:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80014f8:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <BMP180_GetPress+0x2c8>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <BMP180_GetPress+0x2d8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4413      	add	r3, r2
 8001502:	3302      	adds	r3, #2
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ffd9 	bl	80004bc <__aeabi_i2d>
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <BMP180_GetPress+0x30c>)
 8001510:	f7ff f968 	bl	80007e4 <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fae8 	bl	8000af0 <__aeabi_d2iz>
 8001520:	4603      	mov	r3, r0
 8001522:	4a2c      	ldr	r2, [pc, #176]	; (80015d4 <BMP180_GetPress+0x2f0>)
 8001524:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <BMP180_GetPress+0x310>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <BMP180_GetPress+0x2f0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ffaf 	bl	800049c <__aeabi_ui2d>
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <BMP180_GetPress+0x2c4>)
 8001544:	f7ff f94e 	bl	80007e4 <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff faf6 	bl	8000b40 <__aeabi_d2uiz>
 8001554:	4603      	mov	r3, r0
 8001556:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <BMP180_GetPress+0x314>)
 8001558:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <BMP180_GetPress+0x2b4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <BMP180_GetPress+0x2f8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f24c 3150 	movw	r1, #50000	; 0xc350
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	fa41 f202 	asr.w	r2, r1, r2
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <BMP180_GetPress+0x318>)
 8001576:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <BMP180_GetPress+0x318>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db41      	blt.n	8001604 <BMP180_GetPress+0x320>
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <BMP180_GetPress+0x318>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	005a      	lsls	r2, r3, #1
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <BMP180_GetPress+0x314>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <BMP180_GetPress+0x31c>)
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e040      	b.n	8001618 <BMP180_GetPress+0x334>
 8001596:	bf00      	nop
 8001598:	200000c4 	.word	0x200000c4
 800159c:	200000c0 	.word	0x200000c0
 80015a0:	200000b2 	.word	0x200000b2
 80015a4:	200000b0 	.word	0x200000b0
 80015a8:	40e00000 	.word	0x40e00000
 80015ac:	200000c8 	.word	0x200000c8
 80015b0:	200000ba 	.word	0x200000ba
 80015b4:	40a00000 	.word	0x40a00000
 80015b8:	200000bc 	.word	0x200000bc
 80015bc:	200000cc 	.word	0x200000cc
 80015c0:	200000d8 	.word	0x200000d8
 80015c4:	200000e0 	.word	0x200000e0
 80015c8:	200000b6 	.word	0x200000b6
 80015cc:	40b00000 	.word	0x40b00000
 80015d0:	200000aa 	.word	0x200000aa
 80015d4:	200000d0 	.word	0x200000d0
 80015d8:	200000a8 	.word	0x200000a8
 80015dc:	200000d4 	.word	0x200000d4
 80015e0:	200000ac 	.word	0x200000ac
 80015e4:	40c00000 	.word	0x40c00000
 80015e8:	200000b4 	.word	0x200000b4
 80015ec:	40f00000 	.word	0x40f00000
 80015f0:	40100000 	.word	0x40100000
 80015f4:	200000ae 	.word	0x200000ae
 80015f8:	200000dc 	.word	0x200000dc
 80015fc:	200000e4 	.word	0x200000e4
 8001600:	200000e8 	.word	0x200000e8
	else Press = (B7/B4)*2;
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <BMP180_GetPress+0x43c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <BMP180_GetPress+0x440>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	461a      	mov	r2, r3
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <BMP180_GetPress+0x444>)
 8001616:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001618:	4b43      	ldr	r3, [pc, #268]	; (8001728 <BMP180_GetPress+0x444>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff4d 	bl	80004bc <__aeabi_i2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <BMP180_GetPress+0x448>)
 8001628:	f7ff f8dc 	bl	80007e4 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4614      	mov	r4, r2
 8001632:	461d      	mov	r5, r3
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <BMP180_GetPress+0x444>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff3f 	bl	80004bc <__aeabi_i2d>
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b3a      	ldr	r3, [pc, #232]	; (800172c <BMP180_GetPress+0x448>)
 8001644:	f7ff f8ce 	bl	80007e4 <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe ff9e 	bl	8000590 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fa48 	bl	8000af0 <__aeabi_d2iz>
 8001660:	4603      	mov	r3, r0
 8001662:	4a33      	ldr	r2, [pc, #204]	; (8001730 <BMP180_GetPress+0x44c>)
 8001664:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <BMP180_GetPress+0x44c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f640 32de 	movw	r2, #3038	; 0xbde
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff22 	bl	80004bc <__aeabi_i2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <BMP180_GetPress+0x450>)
 800167e:	f7ff f8b1 	bl	80007e4 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa31 	bl	8000af0 <__aeabi_d2iz>
 800168e:	4603      	mov	r3, r0
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <BMP180_GetPress+0x44c>)
 8001692:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <BMP180_GetPress+0x444>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <BMP180_GetPress+0x454>)
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff0c 	bl	80004bc <__aeabi_i2d>
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <BMP180_GetPress+0x450>)
 80016aa:	f7ff f89b 	bl	80007e4 <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa1b 	bl	8000af0 <__aeabi_d2iz>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <BMP180_GetPress+0x458>)
 80016be:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <BMP180_GetPress+0x444>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fef9 	bl	80004bc <__aeabi_i2d>
 80016ca:	4604      	mov	r4, r0
 80016cc:	460d      	mov	r5, r1
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <BMP180_GetPress+0x44c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <BMP180_GetPress+0x458>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe feed 	bl	80004bc <__aeabi_i2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <BMP180_GetPress+0x45c>)
 80016e8:	f7ff f87c 	bl	80007e4 <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fd96 	bl	8000224 <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff f9f6 	bl	8000af0 <__aeabi_d2iz>
 8001704:	4603      	mov	r3, r0
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <BMP180_GetPress+0x444>)
 8001708:	6013      	str	r3, [r2, #0]
	return Press;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <BMP180_GetPress+0x444>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	200000e4 	.word	0x200000e4
 8001724:	200000dc 	.word	0x200000dc
 8001728:	200000e8 	.word	0x200000e8
 800172c:	40700000 	.word	0x40700000
 8001730:	200000c8 	.word	0x200000c8
 8001734:	40f00000 	.word	0x40f00000
 8001738:	ffffe343 	.word	0xffffe343
 800173c:	200000cc 	.word	0x200000cc
 8001740:	40300000 	.word	0x40300000
 8001744:	00000000 	.word	0x00000000

08001748 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fdc7 	bl	80012e4 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <BMP180_GetAlt+0x88>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001762:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80017d4 <BMP180_GetAlt+0x8c>
 8001766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176a:	ee16 0a90 	vmov	r0, s13
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80017c0 <BMP180_GetAlt+0x78>
 800177a:	ec43 2b10 	vmov	d0, r2, r3
 800177e:	f006 fc47 	bl	8008010 <pow>
 8001782:	ec53 2b10 	vmov	r2, r3, d0
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	4913      	ldr	r1, [pc, #76]	; (80017d8 <BMP180_GetAlt+0x90>)
 800178c:	f7fe fd48 	bl	8000220 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a30b      	add	r3, pc, #44	; (adr r3, 80017c8 <BMP180_GetAlt+0x80>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fef7 	bl	8000590 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f9e9 	bl	8000b80 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	cc745124 	.word	0xcc745124
 80017c4:	3fc85b95 	.word	0x3fc85b95
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40e5a540 	.word	0x40e5a540
 80017d0:	200000e8 	.word	0x200000e8
 80017d4:	47c5e680 	.word	0x47c5e680
 80017d8:	3ff00000 	.word	0x3ff00000

080017dc <BMP180_Start>:

void BMP180_Start (void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80017e0:	f7ff fba0 	bl	8000f24 <read_calliberation_data>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80017f4:	2200      	movs	r2, #0
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	4834      	ldr	r0, [pc, #208]	; (80018cc <Max6675_Read_Temp+0xe4>)
 80017fa:	f003 fad1 	bl	8004da0 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80017fe:	2332      	movs	r3, #50	; 0x32
 8001800:	2201      	movs	r2, #1
 8001802:	4933      	ldr	r1, [pc, #204]	; (80018d0 <Max6675_Read_Temp+0xe8>)
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <Max6675_Read_Temp+0xec>)
 8001806:	f005 f966 	bl	8006ad6 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 800180a:	2201      	movs	r2, #1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	482f      	ldr	r0, [pc, #188]	; (80018cc <Max6675_Read_Temp+0xe4>)
 8001810:	f003 fac6 	bl	8004da0 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <Max6675_Read_Temp+0xe8>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <Max6675_Read_Temp+0xf0>)
 8001820:	701a      	strb	r2, [r3, #0]
Error=0;
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <Max6675_Read_Temp+0xf4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <Max6675_Read_Temp+0xf0>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d02b      	beq.n	8001888 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <Max6675_Read_Temp+0xf0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d120      	bne.n	800187a <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001838:	4829      	ldr	r0, [pc, #164]	; (80018e0 <Max6675_Read_Temp+0xf8>)
 800183a:	f005 fd7f 	bl	800733c <HAL_TIM_Base_Start>
		while(timer_val<1)
 800183e:	e011      	b.n	8001864 <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <Max6675_Read_Temp+0xf0>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d103      	bne.n	8001850 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <Max6675_Read_Temp+0xf4>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
				break;
 800184e:	e00d      	b.n	800186c <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <Max6675_Read_Temp+0xf8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <Max6675_Read_Temp+0xfc>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0b5b      	lsrs	r3, r3, #13
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <Max6675_Read_Temp+0x100>)
 8001862:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <Max6675_Read_Temp+0x100>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0e9      	beq.n	8001840 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <Max6675_Read_Temp+0x100>)
 800186e:	2200      	movs	r2, #0
 8001870:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <Max6675_Read_Temp+0xf4>)
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e006      	b.n	8001888 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <Max6675_Read_Temp+0xf0>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d102      	bne.n	8001888 <Max6675_Read_Temp+0xa0>
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <Max6675_Read_Temp+0xf4>)
 8001884:	2203      	movs	r2, #3
 8001886:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <Max6675_Read_Temp+0xe8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <Max6675_Read_Temp+0xe8>)
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	10db      	asrs	r3, r3, #3
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a0:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 80018a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 80018b4:	20fa      	movs	r0, #250	; 0xfa
 80018b6:	f002 f817 	bl	80038e8 <HAL_Delay>
return Temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	ee07 3a90 	vmov	s15, r3
}
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020000 	.word	0x40020000
 80018d0:	20000114 	.word	0x20000114
 80018d4:	20000284 	.word	0x20000284
 80018d8:	20000116 	.word	0x20000116
 80018dc:	20000117 	.word	0x20000117
 80018e0:	200002dc 	.word	0x200002dc
 80018e4:	d1b71759 	.word	0xd1b71759
 80018e8:	20000450 	.word	0x20000450
 80018ec:	00000000 	.word	0x00000000

080018f0 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b08c      	sub	sp, #48	; 0x30
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
	inx = 0;
 80018fc:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <decodeGGA+0x17c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001906:	e004      	b.n	8001912 <decodeGGA+0x22>
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <decodeGGA+0x17c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <decodeGGA+0x17c>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b56      	ldr	r3, [pc, #344]	; (8001a6c <decodeGGA+0x17c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b2c      	cmp	r3, #44	; 0x2c
 8001920:	d1f2      	bne.n	8001908 <decodeGGA+0x18>
	inx++;
 8001922:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <decodeGGA+0x17c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <decodeGGA+0x17c>)
 800192a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 800192c:	e004      	b.n	8001938 <decodeGGA+0x48>
 800192e:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <decodeGGA+0x17c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <decodeGGA+0x17c>)
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <decodeGGA+0x17c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b2c      	cmp	r3, #44	; 0x2c
 8001946:	d1f2      	bne.n	800192e <decodeGGA+0x3e>
	inx++;
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <decodeGGA+0x17c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <decodeGGA+0x17c>)
 8001950:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001952:	e004      	b.n	800195e <decodeGGA+0x6e>
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <decodeGGA+0x17c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <decodeGGA+0x17c>)
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <decodeGGA+0x17c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b2c      	cmp	r3, #44	; 0x2c
 800196c:	d1f2      	bne.n	8001954 <decodeGGA+0x64>
	inx++;
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <decodeGGA+0x17c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <decodeGGA+0x17c>)
 8001976:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001978:	e004      	b.n	8001984 <decodeGGA+0x94>
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <decodeGGA+0x17c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <decodeGGA+0x17c>)
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <decodeGGA+0x17c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b2c      	cmp	r3, #44	; 0x2c
 8001992:	d1f2      	bne.n	800197a <decodeGGA+0x8a>
	inx++;
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <decodeGGA+0x17c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a34      	ldr	r2, [pc, #208]	; (8001a6c <decodeGGA+0x17c>)
 800199c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 800199e:	e004      	b.n	80019aa <decodeGGA+0xba>
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <decodeGGA+0x17c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <decodeGGA+0x17c>)
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <decodeGGA+0x17c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b2c      	cmp	r3, #44	; 0x2c
 80019b8:	d1f2      	bne.n	80019a0 <decodeGGA+0xb0>
	inx++;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <decodeGGA+0x17c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <decodeGGA+0x17c>)
 80019c2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80019c4:	e004      	b.n	80019d0 <decodeGGA+0xe0>
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <decodeGGA+0x17c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <decodeGGA+0x17c>)
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <decodeGGA+0x17c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b2c      	cmp	r3, #44	; 0x2c
 80019de:	d1f2      	bne.n	80019c6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <decodeGGA+0x17c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <decodeGGA+0x17c>)
 80019e8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <decodeGGA+0x17c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b31      	cmp	r3, #49	; 0x31
 80019f8:	d00f      	beq.n	8001a1a <decodeGGA+0x12a>
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <decodeGGA+0x17c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b32      	cmp	r3, #50	; 0x32
 8001a08:	d007      	beq.n	8001a1a <decodeGGA+0x12a>
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <decodeGGA+0x17c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b36      	cmp	r3, #54	; 0x36
 8001a18:	d106      	bne.n	8001a28 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <decodeGGA+0x17c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001a26:	e009      	b.n	8001a3c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2fd      	b.n	800202e <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <decodeGGA+0x17c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <decodeGGA+0x17c>)
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <decodeGGA+0x17c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b2c      	cmp	r3, #44	; 0x2c
 8001a4a:	d1f2      	bne.n	8001a32 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <decodeGGA+0x17c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <decodeGGA+0x17c>)
 8001a54:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f006 fa42 	bl	8007ee8 <memset>
	i=0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001a68:	e016      	b.n	8001a98 <decodeGGA+0x1a8>
 8001a6a:	bf00      	nop
 8001a6c:	20000118 	.word	0x20000118
	{
		buffer[i] = GGAbuffer[inx];
 8001a70:	4bab      	ldr	r3, [pc, #684]	; (8001d20 <decodeGGA+0x430>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	7819      	ldrb	r1, [r3, #0]
 8001a7c:	f107 020c 	add.w	r2, r7, #12
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	4413      	add	r3, r2
 8001a84:	460a      	mov	r2, r1
 8001a86:	701a      	strb	r2, [r3, #0]
		i++;
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001a8e:	4ba4      	ldr	r3, [pc, #656]	; (8001d20 <decodeGGA+0x430>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4aa2      	ldr	r2, [pc, #648]	; (8001d20 <decodeGGA+0x430>)
 8001a96:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001a98:	4ba1      	ldr	r3, [pc, #644]	; (8001d20 <decodeGGA+0x430>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b2c      	cmp	r3, #44	; 0x2c
 8001aa6:	d1e3      	bne.n	8001a70 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4618      	mov	r0, r3
 8001aae:	f006 f9ed 	bl	8007e8c <atoi>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a9b      	ldr	r2, [pc, #620]	; (8001d24 <decodeGGA+0x434>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	1312      	asrs	r2, r2, #12
 8001abc:	17db      	asrs	r3, r3, #31
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <decodeGGA+0x438>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4999      	ldr	r1, [pc, #612]	; (8001d2c <decodeGGA+0x43c>)
 8001ac6:	fb81 0103 	smull	r0, r1, r1, r3
 8001aca:	1149      	asrs	r1, r1, #5
 8001acc:	17db      	asrs	r3, r3, #31
 8001ace:	1acb      	subs	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a97      	ldr	r2, [pc, #604]	; (8001d30 <decodeGGA+0x440>)
 8001ad4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 f9d6 	bl	8007e8c <atoi>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <decodeGGA+0x43c>)
 8001ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae8:	1152      	asrs	r2, r2, #5
 8001aea:	17db      	asrs	r3, r3, #31
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a8f      	ldr	r2, [pc, #572]	; (8001d2c <decodeGGA+0x43c>)
 8001af0:	fb82 1203 	smull	r1, r2, r2, r3
 8001af4:	1151      	asrs	r1, r2, #5
 8001af6:	17da      	asrs	r2, r3, #31
 8001af8:	1a8a      	subs	r2, r1, r2
 8001afa:	2164      	movs	r1, #100	; 0x64
 8001afc:	fb01 f202 	mul.w	r2, r1, r2
 8001b00:	1a9a      	subs	r2, r3, r2
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <decodeGGA+0x438>)
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <decodeGGA+0x43c>)
 8001b08:	fb83 0301 	smull	r0, r3, r3, r1
 8001b0c:	1158      	asrs	r0, r3, #5
 8001b0e:	17cb      	asrs	r3, r1, #31
 8001b10:	1ac3      	subs	r3, r0, r3
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	fb00 f303 	mul.w	r3, r0, r3
 8001b18:	1acb      	subs	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a85      	ldr	r2, [pc, #532]	; (8001d34 <decodeGGA+0x444>)
 8001b1e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001b20:	4b84      	ldr	r3, [pc, #528]	; (8001d34 <decodeGGA+0x444>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b3b      	cmp	r3, #59	; 0x3b
 8001b26:	dd09      	ble.n	8001b3c <decodeGGA+0x24c>
	{
		min = min-60;
 8001b28:	4b82      	ldr	r3, [pc, #520]	; (8001d34 <decodeGGA+0x444>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b3c      	subs	r3, #60	; 0x3c
 8001b2e:	4a81      	ldr	r2, [pc, #516]	; (8001d34 <decodeGGA+0x444>)
 8001b30:	6013      	str	r3, [r2, #0]
		hr++;
 8001b32:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <decodeGGA+0x440>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a7d      	ldr	r2, [pc, #500]	; (8001d30 <decodeGGA+0x440>)
 8001b3a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001b3c:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <decodeGGA+0x440>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da09      	bge.n	8001b58 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001b44:	4b7a      	ldr	r3, [pc, #488]	; (8001d30 <decodeGGA+0x440>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3318      	adds	r3, #24
 8001b4a:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <decodeGGA+0x440>)
 8001b4c:	6013      	str	r3, [r2, #0]
		daychange--;
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <decodeGGA+0x448>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a78      	ldr	r2, [pc, #480]	; (8001d38 <decodeGGA+0x448>)
 8001b56:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001b58:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <decodeGGA+0x440>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b17      	cmp	r3, #23
 8001b5e:	dd09      	ble.n	8001b74 <decodeGGA+0x284>
	{
		hr=hr-24;
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <decodeGGA+0x440>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3b18      	subs	r3, #24
 8001b66:	4a72      	ldr	r2, [pc, #456]	; (8001d30 <decodeGGA+0x440>)
 8001b68:	6013      	str	r3, [r2, #0]
		daychange++;
 8001b6a:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <decodeGGA+0x448>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a71      	ldr	r2, [pc, #452]	; (8001d38 <decodeGGA+0x448>)
 8001b72:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001b74:	4b6e      	ldr	r3, [pc, #440]	; (8001d30 <decodeGGA+0x440>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <decodeGGA+0x444>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 f97f 	bl	8007e8c <atoi>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <decodeGGA+0x43c>)
 8001b92:	fb83 1302 	smull	r1, r3, r3, r2
 8001b96:	1159      	asrs	r1, r3, #5
 8001b98:	17d3      	asrs	r3, r2, #31
 8001b9a:	1acb      	subs	r3, r1, r3
 8001b9c:	2164      	movs	r1, #100	; 0x64
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001ba8:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <decodeGGA+0x430>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a5c      	ldr	r2, [pc, #368]	; (8001d20 <decodeGGA+0x430>)
 8001bb0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 f994 	bl	8007ee8 <memset>
	i=0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001bc4:	e013      	b.n	8001bee <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <decodeGGA+0x430>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	7819      	ldrb	r1, [r3, #0]
 8001bd2:	f107 020c 	add.w	r2, r7, #12
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	4413      	add	r3, r2
 8001bda:	460a      	mov	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
		i++;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	3301      	adds	r3, #1
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001be4:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <decodeGGA+0x430>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <decodeGGA+0x430>)
 8001bec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001bee:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <decodeGGA+0x430>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b2c      	cmp	r3, #44	; 0x2c
 8001bfc:	d1e3      	bne.n	8001bc6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fb00 	bl	8000208 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d801      	bhi.n	8001c12 <decodeGGA+0x322>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e20d      	b.n	800202e <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f006 f938 	bl	8007e8c <atoi>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001c24:	e002      	b.n	8001c2c <decodeGGA+0x33c>
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	3301      	adds	r3, #1
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2c:	f107 020c 	add.w	r2, r7, #12
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	4413      	add	r3, r2
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b2e      	cmp	r3, #46	; 0x2e
 8001c38:	d1f5      	bne.n	8001c26 <decodeGGA+0x336>
	j++;
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fadf 	bl	8000208 <strlen>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	4413      	add	r3, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 f916 	bl	8007e8c <atoi>
 8001c60:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001c62:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc28 	bl	80004bc <__aeabi_i2d>
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <decodeGGA+0x44c>)
 8001c72:	f7fe fdb7 	bl	80007e4 <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	69f8      	ldr	r0, [r7, #28]
 8001c80:	f7fe fc1c 	bl	80004bc <__aeabi_i2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc15 	bl	80004bc <__aeabi_i2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ec43 2b11 	vmov	d1, r2, r3
 8001c9a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001d18 <decodeGGA+0x428>
 8001c9e:	f006 f9b7 	bl	8008010 <pow>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fd9b 	bl	80007e4 <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4640      	mov	r0, r8
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	f7fe fab5 	bl	8000224 <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff5d 	bl	8000b80 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	601a      	str	r2, [r3, #0]
	inx++;  
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <decodeGGA+0x430>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <decodeGGA+0x430>)
 8001cd8:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <decodeGGA+0x430>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <decodeGGA+0x430>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <decodeGGA+0x430>)
 8001cf2:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <decodeGGA+0x430>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <decodeGGA+0x430>)
 8001cfc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	220c      	movs	r2, #12
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 f8ee 	bl	8007ee8 <memset>
	i=0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001d10:	e02a      	b.n	8001d68 <decodeGGA+0x478>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40240000 	.word	0x40240000
 8001d20:	20000118 	.word	0x20000118
 8001d24:	68db8bad 	.word	0x68db8bad
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	51eb851f 	.word	0x51eb851f
 8001d30:	2000011c 	.word	0x2000011c
 8001d34:	20000120 	.word	0x20000120
 8001d38:	20000130 	.word	0x20000130
 8001d3c:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001d40:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <decodeGGA+0x680>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	7819      	ldrb	r1, [r3, #0]
 8001d4c:	f107 020c 	add.w	r2, r7, #12
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	4413      	add	r3, r2
 8001d54:	460a      	mov	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
		i++;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001d5e:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <decodeGGA+0x680>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a82      	ldr	r2, [pc, #520]	; (8001f70 <decodeGGA+0x680>)
 8001d66:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001d68:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <decodeGGA+0x680>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b2c      	cmp	r3, #44	; 0x2c
 8001d76:	d1e3      	bne.n	8001d40 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f006 f885 	bl	8007e8c <atoi>
 8001d82:	4603      	mov	r3, r0
 8001d84:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001d8a:	e002      	b.n	8001d92 <decodeGGA+0x4a2>
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	3301      	adds	r3, #1
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d92:	f107 020c 	add.w	r2, r7, #12
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d9e:	d1f5      	bne.n	8001d8c <decodeGGA+0x49c>
	j++;
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	3301      	adds	r3, #1
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fa2c 	bl	8000208 <strlen>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f006 f863 	bl	8007e8c <atoi>
 8001dc6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001dc8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb75 	bl	80004bc <__aeabi_i2d>
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <decodeGGA+0x684>)
 8001dd8:	f7fe fd04 	bl	80007e4 <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4690      	mov	r8, r2
 8001de2:	4699      	mov	r9, r3
 8001de4:	69f8      	ldr	r0, [r7, #28]
 8001de6:	f7fe fb69 	bl	80004bc <__aeabi_i2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	3302      	adds	r3, #2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb62 	bl	80004bc <__aeabi_i2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	ec43 2b11 	vmov	d1, r2, r3
 8001e00:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001f68 <decodeGGA+0x678>
 8001e04:	f006 f904 	bl	8008010 <pow>
 8001e08:	ec53 2b10 	vmov	r2, r3, d0
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fce8 	bl	80007e4 <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4640      	mov	r0, r8
 8001e1a:	4649      	mov	r1, r9
 8001e1c:	f7fe fa02 	bl	8000224 <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe feaa 	bl	8000b80 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]
	inx++;
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <decodeGGA+0x680>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <decodeGGA+0x680>)
 8001e3e:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <decodeGGA+0x680>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <decodeGGA+0x680>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a46      	ldr	r2, [pc, #280]	; (8001f70 <decodeGGA+0x680>)
 8001e58:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001e5a:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <decodeGGA+0x680>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a43      	ldr	r2, [pc, #268]	; (8001f70 <decodeGGA+0x680>)
 8001e62:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001e64:	4b42      	ldr	r3, [pc, #264]	; (8001f70 <decodeGGA+0x680>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a41      	ldr	r2, [pc, #260]	; (8001f70 <decodeGGA+0x680>)
 8001e6c:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <decodeGGA+0x680>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	4a3e      	ldr	r2, [pc, #248]	; (8001f70 <decodeGGA+0x680>)
 8001e76:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f006 f831 	bl	8007ee8 <memset>
	i=0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001e8a:	e013      	b.n	8001eb4 <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <decodeGGA+0x680>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	7819      	ldrb	r1, [r3, #0]
 8001e98:	f107 020c 	add.w	r2, r7, #12
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	701a      	strb	r2, [r3, #0]
		i++;
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <decodeGGA+0x680>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <decodeGGA+0x680>)
 8001eb2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <decodeGGA+0x680>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ec2:	d1e3      	bne.n	8001e8c <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 ffdf 	bl	8007e8c <atoi>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <decodeGGA+0x680>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <decodeGGA+0x680>)
 8001edc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001ede:	e004      	b.n	8001eea <decodeGGA+0x5fa>
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <decodeGGA+0x680>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <decodeGGA+0x680>)
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <decodeGGA+0x680>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ef8:	d1f2      	bne.n	8001ee0 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <decodeGGA+0x680>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <decodeGGA+0x680>)
 8001f02:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	220c      	movs	r2, #12
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 ffeb 	bl	8007ee8 <memset>
	i=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001f16:	e013      	b.n	8001f40 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <decodeGGA+0x680>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	7819      	ldrb	r1, [r3, #0]
 8001f24:	f107 020c 	add.w	r2, r7, #12
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	701a      	strb	r2, [r3, #0]
		i++;
 8001f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f32:	3301      	adds	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <decodeGGA+0x680>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <decodeGGA+0x680>)
 8001f3e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <decodeGGA+0x680>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f4e:	d1e3      	bne.n	8001f18 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 ff99 	bl	8007e8c <atoi>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001f62:	e00c      	b.n	8001f7e <decodeGGA+0x68e>
 8001f64:	f3af 8000 	nop.w
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	40240000 	.word	0x40240000
 8001f70:	20000118 	.word	0x20000118
 8001f74:	40590000 	.word	0x40590000
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7e:	f107 020c 	add.w	r2, r7, #12
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b2e      	cmp	r3, #46	; 0x2e
 8001f8a:	d1f5      	bne.n	8001f78 <decodeGGA+0x688>
	j++;
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	3301      	adds	r3, #1
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe f936 	bl	8000208 <strlen>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	f107 020c 	add.w	r2, r7, #12
 8001faa:	4413      	add	r3, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f005 ff6d 	bl	8007e8c <atoi>
 8001fb2:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001fb4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fa7f 	bl	80004bc <__aeabi_i2d>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	460d      	mov	r5, r1
 8001fc2:	69f8      	ldr	r0, [r7, #28]
 8001fc4:	f7fe fa7a 	bl	80004bc <__aeabi_i2d>
 8001fc8:	4680      	mov	r8, r0
 8001fca:	4689      	mov	r9, r1
 8001fcc:	6a38      	ldr	r0, [r7, #32]
 8001fce:	f7fe fa75 	bl	80004bc <__aeabi_i2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	ec43 2b11 	vmov	d1, r2, r3
 8001fda:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002038 <decodeGGA+0x748>
 8001fde:	f006 f817 	bl	8008010 <pow>
 8001fe2:	ec53 2b10 	vmov	r2, r3, d0
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	4649      	mov	r1, r9
 8001fea:	f7fe fbfb 	bl	80007e4 <__aeabi_ddiv>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f7fe f915 	bl	8000224 <__adddf3>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fdbd 	bl	8000b80 <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
 8002008:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	621a      	str	r2, [r3, #32]

	inx++;
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <decodeGGA+0x750>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <decodeGGA+0x750>)
 8002018:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <decodeGGA+0x750>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800202c:	2300      	movs	r3, #0

}
 800202e:	4618      	mov	r0, r3
 8002030:	3730      	adds	r7, #48	; 0x30
 8002032:	46bd      	mov	sp, r7
 8002034:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002038:	00000000 	.word	0x00000000
 800203c:	40240000 	.word	0x40240000
 8002040:	20000118 	.word	0x20000118
 8002044:	00000000 	.word	0x00000000

08002048 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800204c:	b090      	sub	sp, #64	; 0x40
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
	inx = 0;
 8002054:	4b94      	ldr	r3, [pc, #592]	; (80022a8 <decodeRMC+0x260>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800205e:	e004      	b.n	800206a <decodeRMC+0x22>
 8002060:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <decodeRMC+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a90      	ldr	r2, [pc, #576]	; (80022a8 <decodeRMC+0x260>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b8f      	ldr	r3, [pc, #572]	; (80022a8 <decodeRMC+0x260>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b2c      	cmp	r3, #44	; 0x2c
 8002078:	d1f2      	bne.n	8002060 <decodeRMC+0x18>
	inx++;
 800207a:	4b8b      	ldr	r3, [pc, #556]	; (80022a8 <decodeRMC+0x260>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a89      	ldr	r2, [pc, #548]	; (80022a8 <decodeRMC+0x260>)
 8002082:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8002084:	e004      	b.n	8002090 <decodeRMC+0x48>
 8002086:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <decodeRMC+0x260>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a86      	ldr	r2, [pc, #536]	; (80022a8 <decodeRMC+0x260>)
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <decodeRMC+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b2c      	cmp	r3, #44	; 0x2c
 800209e:	d1f2      	bne.n	8002086 <decodeRMC+0x3e>
	inx++;
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <decodeRMC+0x260>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a80      	ldr	r2, [pc, #512]	; (80022a8 <decodeRMC+0x260>)
 80020a8:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80020aa:	4b7f      	ldr	r3, [pc, #508]	; (80022a8 <decodeRMC+0x260>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b41      	cmp	r3, #65	; 0x41
 80020b8:	d10d      	bne.n	80020d6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80020c0:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <decodeRMC+0x260>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <decodeRMC+0x260>)
 80020c8:	6013      	str	r3, [r2, #0]
	inx++;
 80020ca:	4b77      	ldr	r3, [pc, #476]	; (80022a8 <decodeRMC+0x260>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <decodeRMC+0x260>)
 80020d2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80020d4:	e009      	b.n	80020ea <decodeRMC+0xa2>
		rmc->isValid =0;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
		return 1;
 80020dc:	2301      	movs	r3, #1
 80020de:	e1d8      	b.n	8002492 <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80020e0:	4b71      	ldr	r3, [pc, #452]	; (80022a8 <decodeRMC+0x260>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a70      	ldr	r2, [pc, #448]	; (80022a8 <decodeRMC+0x260>)
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <decodeRMC+0x260>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b2c      	cmp	r3, #44	; 0x2c
 80020f8:	d1f2      	bne.n	80020e0 <decodeRMC+0x98>
	inx++;
 80020fa:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <decodeRMC+0x260>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <decodeRMC+0x260>)
 8002102:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8002104:	e004      	b.n	8002110 <decodeRMC+0xc8>
 8002106:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <decodeRMC+0x260>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <decodeRMC+0x260>)
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <decodeRMC+0x260>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b2c      	cmp	r3, #44	; 0x2c
 800211e:	d1f2      	bne.n	8002106 <decodeRMC+0xbe>
	inx++;
 8002120:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <decodeRMC+0x260>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a60      	ldr	r2, [pc, #384]	; (80022a8 <decodeRMC+0x260>)
 8002128:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800212a:	e004      	b.n	8002136 <decodeRMC+0xee>
 800212c:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <decodeRMC+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a5d      	ldr	r2, [pc, #372]	; (80022a8 <decodeRMC+0x260>)
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <decodeRMC+0x260>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b2c      	cmp	r3, #44	; 0x2c
 8002144:	d1f2      	bne.n	800212c <decodeRMC+0xe4>
	inx++;
 8002146:	4b58      	ldr	r3, [pc, #352]	; (80022a8 <decodeRMC+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <decodeRMC+0x260>)
 800214e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002150:	e004      	b.n	800215c <decodeRMC+0x114>
 8002152:	4b55      	ldr	r3, [pc, #340]	; (80022a8 <decodeRMC+0x260>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a53      	ldr	r2, [pc, #332]	; (80022a8 <decodeRMC+0x260>)
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <decodeRMC+0x260>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b2c      	cmp	r3, #44	; 0x2c
 800216a:	d1f2      	bne.n	8002152 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <decodeRMC+0x260>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	4a4d      	ldr	r2, [pc, #308]	; (80022a8 <decodeRMC+0x260>)
 8002174:	6013      	str	r3, [r2, #0]
	i=0;
 8002176:	2300      	movs	r3, #0
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	220c      	movs	r2, #12
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f005 feb0 	bl	8007ee8 <memset>
	while (RMCbuffer[inx] != ',')
 8002188:	e013      	b.n	80021b2 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <decodeRMC+0x260>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	7819      	ldrb	r1, [r3, #0]
 8002196:	f107 0208 	add.w	r2, r7, #8
 800219a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219c:	4413      	add	r3, r2
 800219e:	460a      	mov	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
		i++;
 80021a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a4:	3301      	adds	r3, #1
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80021a8:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <decodeRMC+0x260>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a3e      	ldr	r2, [pc, #248]	; (80022a8 <decodeRMC+0x260>)
 80021b0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <decodeRMC+0x260>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b2c      	cmp	r3, #44	; 0x2c
 80021c0:	d1e3      	bne.n	800218a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d056      	beq.n	800227a <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	4618      	mov	r0, r3
 80021d2:	f005 fe5b 	bl	8007e8c <atoi>
 80021d6:	4603      	mov	r3, r0
 80021d8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80021de:	e002      	b.n	80021e6 <decodeRMC+0x19e>
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	3301      	adds	r3, #1
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e6:	f107 0208 	add.w	r2, r7, #8
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b2e      	cmp	r3, #46	; 0x2e
 80021f2:	d1f5      	bne.n	80021e0 <decodeRMC+0x198>
		j++;
 80021f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f6:	3301      	adds	r3, #1
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f802 	bl	8000208 <strlen>
 8002204:	4602      	mov	r2, r0
 8002206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	f107 0208 	add.w	r2, r7, #8
 8002212:	4413      	add	r3, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f005 fe39 	bl	8007e8c <atoi>
 800221a:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 800221c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f94b 	bl	80004bc <__aeabi_i2d>
 8002226:	4604      	mov	r4, r0
 8002228:	460d      	mov	r5, r1
 800222a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222c:	f7fe f946 	bl	80004bc <__aeabi_i2d>
 8002230:	4680      	mov	r8, r0
 8002232:	4689      	mov	r9, r1
 8002234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002236:	f7fe f941 	bl	80004bc <__aeabi_i2d>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	ec43 2b11 	vmov	d1, r2, r3
 8002242:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80022a0 <decodeRMC+0x258>
 8002246:	f005 fee3 	bl	8008010 <pow>
 800224a:	ec53 2b10 	vmov	r2, r3, d0
 800224e:	4640      	mov	r0, r8
 8002250:	4649      	mov	r1, r9
 8002252:	f7fe fac7 	bl	80007e4 <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fd ffe1 	bl	8000224 <__adddf3>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe fc89 	bl	8000b80 <__aeabi_d2f>
 800226e:	4603      	mov	r3, r0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	e003      	b.n	8002282 <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <decodeRMC+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <decodeRMC+0x260>)
 800228a:	6013      	str	r3, [r2, #0]
	i=0;
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	220c      	movs	r2, #12
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f005 fe25 	bl	8007ee8 <memset>
	while (RMCbuffer[inx] != ',')
 800229e:	e019      	b.n	80022d4 <decodeRMC+0x28c>
 80022a0:	00000000 	.word	0x00000000
 80022a4:	40240000 	.word	0x40240000
 80022a8:	20000118 	.word	0x20000118
	{
		buffer[i] = RMCbuffer[inx];
 80022ac:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <decodeRMC+0x460>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	7819      	ldrb	r1, [r3, #0]
 80022b8:	f107 0208 	add.w	r2, r7, #8
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	4413      	add	r3, r2
 80022c0:	460a      	mov	r2, r1
 80022c2:	701a      	strb	r2, [r3, #0]
		i++;
 80022c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c6:	3301      	adds	r3, #1
 80022c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80022ca:	4b77      	ldr	r3, [pc, #476]	; (80024a8 <decodeRMC+0x460>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <decodeRMC+0x460>)
 80022d2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80022d4:	4b74      	ldr	r3, [pc, #464]	; (80024a8 <decodeRMC+0x460>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b2c      	cmp	r3, #44	; 0x2c
 80022e2:	d1e3      	bne.n	80022ac <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d056      	beq.n	800239c <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fdca 	bl	8007e8c <atoi>
 80022f8:	4603      	mov	r3, r0
 80022fa:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8002300:	e002      	b.n	8002308 <decodeRMC+0x2c0>
 8002302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002304:	3301      	adds	r3, #1
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
 8002308:	f107 0208 	add.w	r2, r7, #8
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b2e      	cmp	r3, #46	; 0x2e
 8002314:	d1f5      	bne.n	8002302 <decodeRMC+0x2ba>
		j++;
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	3301      	adds	r3, #1
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ff71 	bl	8000208 <strlen>
 8002326:	4602      	mov	r2, r0
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	f107 0208 	add.w	r2, r7, #8
 8002334:	4413      	add	r3, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fda8 	bl	8007e8c <atoi>
 800233c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800233e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f8ba 	bl	80004bc <__aeabi_i2d>
 8002348:	4604      	mov	r4, r0
 800234a:	460d      	mov	r5, r1
 800234c:	69b8      	ldr	r0, [r7, #24]
 800234e:	f7fe f8b5 	bl	80004bc <__aeabi_i2d>
 8002352:	4680      	mov	r8, r0
 8002354:	4689      	mov	r9, r1
 8002356:	69f8      	ldr	r0, [r7, #28]
 8002358:	f7fe f8b0 	bl	80004bc <__aeabi_i2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	ec43 2b11 	vmov	d1, r2, r3
 8002364:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80024a0 <decodeRMC+0x458>
 8002368:	f005 fe52 	bl	8008010 <pow>
 800236c:	ec53 2b10 	vmov	r2, r3, d0
 8002370:	4640      	mov	r0, r8
 8002372:	4649      	mov	r1, r9
 8002374:	f7fe fa36 	bl	80007e4 <__aeabi_ddiv>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fd ff50 	bl	8000224 <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fbf8 	bl	8000b80 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	e003      	b.n	80023a4 <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <decodeRMC+0x460>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <decodeRMC+0x460>)
 80023ac:	6013      	str	r3, [r2, #0]
	i=0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	220c      	movs	r2, #12
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f005 fd94 	bl	8007ee8 <memset>
	while (RMCbuffer[inx] != ',')
 80023c0:	e013      	b.n	80023ea <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <decodeRMC+0x460>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	7819      	ldrb	r1, [r3, #0]
 80023ce:	f107 0208 	add.w	r2, r7, #8
 80023d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d4:	4413      	add	r3, r2
 80023d6:	460a      	mov	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
		i++;
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	3301      	adds	r3, #1
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <decodeRMC+0x460>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <decodeRMC+0x460>)
 80023e8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <decodeRMC+0x460>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b2c      	cmp	r3, #44	; 0x2c
 80023f8:	d1e3      	bne.n	80023c2 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	4618      	mov	r0, r3
 8002400:	f005 fd44 	bl	8007e8c <atoi>
 8002404:	4603      	mov	r3, r0
 8002406:	4a29      	ldr	r2, [pc, #164]	; (80024ac <decodeRMC+0x464>)
 8002408:	fb82 1203 	smull	r1, r2, r2, r3
 800240c:	1312      	asrs	r2, r2, #12
 800240e:	17db      	asrs	r3, r3, #31
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <decodeRMC+0x468>)
 8002414:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f005 fd36 	bl	8007e8c <atoi>
 8002420:	4603      	mov	r3, r0
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <decodeRMC+0x46c>)
 8002424:	fb82 1203 	smull	r1, r2, r2, r3
 8002428:	1152      	asrs	r2, r2, #5
 800242a:	17db      	asrs	r3, r3, #31
 800242c:	1ad2      	subs	r2, r2, r3
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <decodeRMC+0x46c>)
 8002430:	fb83 1302 	smull	r1, r3, r3, r2
 8002434:	1159      	asrs	r1, r3, #5
 8002436:	17d3      	asrs	r3, r2, #31
 8002438:	1acb      	subs	r3, r1, r3
 800243a:	2164      	movs	r1, #100	; 0x64
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <decodeRMC+0x470>)
 8002444:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4618      	mov	r0, r3
 800244c:	f005 fd1e 	bl	8007e8c <atoi>
 8002450:	4602      	mov	r2, r0
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <decodeRMC+0x46c>)
 8002454:	fb83 1302 	smull	r1, r3, r3, r2
 8002458:	1159      	asrs	r1, r3, #5
 800245a:	17d3      	asrs	r3, r2, #31
 800245c:	1acb      	subs	r3, r1, r3
 800245e:	2164      	movs	r1, #100	; 0x64
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <decodeRMC+0x474>)
 8002468:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <decodeRMC+0x468>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <decodeRMC+0x478>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <decodeRMC+0x468>)
 8002476:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <decodeRMC+0x468>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <decodeRMC+0x470>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <decodeRMC+0x474>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	609a      	str	r2, [r3, #8]

	return 0;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3740      	adds	r7, #64	; 0x40
 8002496:	46bd      	mov	sp, r7
 8002498:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	00000000 	.word	0x00000000
 80024a4:	40240000 	.word	0x40240000
 80024a8:	20000118 	.word	0x20000118
 80024ac:	68db8bad 	.word	0x68db8bad
 80024b0:	20000124 	.word	0x20000124
 80024b4:	51eb851f 	.word	0x51eb851f
 80024b8:	20000128 	.word	0x20000128
 80024bc:	2000012c 	.word	0x2000012c
 80024c0:	20000130 	.word	0x20000130

080024c4 <barometer_sensor.0>:

  Ringbuf_init();
  HAL_Delay(500);

  void barometer_sensor()
  {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 80024ce:	f7fe fe0f 	bl	80010f0 <BMP180_GetTemp>
 80024d2:	eef0 7a40 	vmov.f32	s15, s0
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <barometer_sensor.0+0x40>)
 80024d8:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe ff01 	bl	80012e4 <BMP180_GetPress>
 80024e2:	eef0 7a40 	vmov.f32	s15, s0
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <barometer_sensor.0+0x44>)
 80024e8:	edc3 7a00 	vstr	s15, [r3]
  	  Altitude = BMP180_GetAlt(0);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff f92b 	bl	8001748 <BMP180_GetAlt>
 80024f2:	eef0 7a40 	vmov.f32	s15, s0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <barometer_sensor.0+0x48>)
 80024f8:	edc3 7a00 	vstr	s15, [r3]
  }
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000045c 	.word	0x2000045c
 8002508:	20000460 	.word	0x20000460
 800250c:	20000464 	.word	0x20000464

08002510 <main>:
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
int main(void)
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800251c:	f001 f972 	bl	8003804 <HAL_Init>
  SystemClock_Config();
 8002520:	f000 f966 	bl	80027f0 <SystemClock_Config>
  MX_GPIO_Init();
 8002524:	f000 fb74 	bl	8002c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8002528:	f000 fb52 	bl	8002bd0 <MX_DMA_Init>
  MX_ADC1_Init();
 800252c:	f000 f9d2 	bl	80028d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002530:	f000 fa3e 	bl	80029b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002534:	f000 fa98 	bl	8002a68 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002538:	f000 face 	bl	8002ad8 <MX_TIM1_Init>
  MX_I2C2_Init();
 800253c:	f000 fa66 	bl	8002a0c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002540:	f000 fb1c 	bl	8002b7c <MX_USART1_UART_Init>
  HAL_ADC_Init(&hadc1);
 8002544:	4835      	ldr	r0, [pc, #212]	; (800261c <main+0x10c>)
 8002546:	f001 f9f3 	bl	8003930 <HAL_ADC_Init>
  MPU6050_Init();
 800254a:	f000 fbd3 	bl	8002cf4 <MPU6050_Init>
  BMP180_Start();
 800254e:	f7ff f945 	bl	80017dc <BMP180_Start>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 3);
 8002552:	2203      	movs	r2, #3
 8002554:	4932      	ldr	r1, [pc, #200]	; (8002620 <main+0x110>)
 8002556:	4831      	ldr	r0, [pc, #196]	; (800261c <main+0x10c>)
 8002558:	f001 fa2e 	bl	80039b8 <HAL_ADC_Start_DMA>
  Ringbuf_init();
 800255c:	f000 ff94 	bl	8003488 <Ringbuf_init>
  HAL_Delay(500);
 8002560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002564:	f001 f9c0 	bl	80038e8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(5);
 8002568:	2005      	movs	r0, #5
 800256a:	f001 f9bd 	bl	80038e8 <HAL_Delay>
	  	  if(Wait_for("GGA")==1)
 800256e:	482d      	ldr	r0, [pc, #180]	; (8002624 <main+0x114>)
 8002570:	f001 f896 	bl	80036a0 <Wait_for>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <main+0x7a>
	  	  {
	  		  Copy_upto("*", GGA);
 800257a:	492b      	ldr	r1, [pc, #172]	; (8002628 <main+0x118>)
 800257c:	482b      	ldr	r0, [pc, #172]	; (800262c <main+0x11c>)
 800257e:	f001 f80f 	bl	80035a0 <Copy_upto>
	  		  decodeGGA(GGA, &gpsData.ggastruct);
 8002582:	492b      	ldr	r1, [pc, #172]	; (8002630 <main+0x120>)
 8002584:	4828      	ldr	r0, [pc, #160]	; (8002628 <main+0x118>)
 8002586:	f7ff f9b3 	bl	80018f0 <decodeGGA>
	  	  }
	  	  if (Wait_for("RMC")==1)
 800258a:	482a      	ldr	r0, [pc, #168]	; (8002634 <main+0x124>)
 800258c:	f001 f888 	bl	80036a0 <Wait_for>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <main+0x96>
	  	  {
	  		  Copy_upto("*",RMC);
 8002596:	4928      	ldr	r1, [pc, #160]	; (8002638 <main+0x128>)
 8002598:	4824      	ldr	r0, [pc, #144]	; (800262c <main+0x11c>)
 800259a:	f001 f801 	bl	80035a0 <Copy_upto>
	  		  decodeRMC(RMC, &gpsData.rmcstruct);
 800259e:	4927      	ldr	r1, [pc, #156]	; (800263c <main+0x12c>)
 80025a0:	4825      	ldr	r0, [pc, #148]	; (8002638 <main+0x128>)
 80025a2:	f7ff fd51 	bl	8002048 <decodeRMC>
	  	  }

	  temperature=Max6675_Read_Temp();
 80025a6:	f7ff f91f 	bl	80017e8 <Max6675_Read_Temp>
 80025aa:	eef0 7a40 	vmov.f32	s15, s0
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <main+0x130>)
 80025b0:	edc3 7a00 	vstr	s15, [r3]

	  barometer_sensor();
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	469c      	mov	ip, r3
 80025b8:	f7ff ff84 	bl	80024c4 <barometer_sensor.0>
	  current_sensor5();
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	469c      	mov	ip, r3
 80025c0:	f000 f856 	bl	8002670 <current_sensor5.1>
	  current_sensor20();
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	469c      	mov	ip, r3
 80025c8:	f000 f8b2 	bl	8002730 <current_sensor20.2>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <main+0x134>)
 80025ce:	491e      	ldr	r1, [pc, #120]	; (8002648 <main+0x138>)
 80025d0:	481e      	ldr	r0, [pc, #120]	; (800264c <main+0x13c>)
 80025d2:	f000 fbf7 	bl	8002dc4 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <main+0x140>)
 80025d8:	491e      	ldr	r1, [pc, #120]	; (8002654 <main+0x144>)
 80025da:	481f      	ldr	r0, [pc, #124]	; (8002658 <main+0x148>)
 80025dc:	f000 fc74 	bl	8002ec8 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);

	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, CV_Voltage_ui);
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <main+0x14c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	2140      	movs	r1, #64	; 0x40
 80025e8:	481d      	ldr	r0, [pc, #116]	; (8002660 <main+0x150>)
 80025ea:	f002 fbd9 	bl	8004da0 <HAL_GPIO_WritePin>
	  CpmVoltage = dmaOut[0]*(5.0/4096.0);
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <main+0x110>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff62 	bl	80004bc <__aeabi_i2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <main+0x154>)
 80025fe:	f7fd ffc7 	bl	8000590 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fab9 	bl	8000b80 <__aeabi_d2f>
 800260e:	4603      	mov	r3, r0
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <main+0x158>)
 8002612:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8002614:	2064      	movs	r0, #100	; 0x64
 8002616:	f001 f967 	bl	80038e8 <HAL_Delay>
	  HAL_Delay(5);
 800261a:	e7a5      	b.n	8002568 <main+0x58>
 800261c:	20000134 	.word	0x20000134
 8002620:	20000454 	.word	0x20000454
 8002624:	08008e60 	.word	0x08008e60
 8002628:	2000033c 	.word	0x2000033c
 800262c:	08008e64 	.word	0x08008e64
 8002630:	20000404 	.word	0x20000404
 8002634:	08008e68 	.word	0x08008e68
 8002638:	200003a0 	.word	0x200003a0
 800263c:	20000430 	.word	0x20000430
 8002640:	2000044c 	.word	0x2000044c
 8002644:	2000032c 	.word	0x2000032c
 8002648:	20000328 	.word	0x20000328
 800264c:	20000324 	.word	0x20000324
 8002650:	20000338 	.word	0x20000338
 8002654:	20000334 	.word	0x20000334
 8002658:	20000330 	.word	0x20000330
 800265c:	20000448 	.word	0x20000448
 8002660:	40020000 	.word	0x40020000
 8002664:	3f540000 	.word	0x3f540000
 8002668:	20000004 	.word	0x20000004
 800266c:	00000000 	.word	0x00000000

08002670 <current_sensor5.1>:
  {
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 800267a:	4b27      	ldr	r3, [pc, #156]	; (8002718 <current_sensor5.1+0xa8>)
 800267c:	885a      	ldrh	r2, [r3, #2]
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <current_sensor5.1+0xac>)
 8002680:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <current_sensor5.1+0xac>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	ee17 0a90 	vmov	r0, s15
 8002692:	f7fd ff25 	bl	80004e0 <__aeabi_f2d>
 8002696:	a31c      	add	r3, pc, #112	; (adr r3, 8002708 <current_sensor5.1+0x98>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd ff78 	bl	8000590 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	a319      	add	r3, pc, #100	; (adr r3, 8002710 <current_sensor5.1+0xa0>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fe f899 	bl	80007e4 <__aeabi_ddiv>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4614      	mov	r4, r2
 80026b8:	461d      	mov	r5, r3
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <current_sensor5.1+0xb0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ff0e 	bl	80004e0 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4620      	mov	r0, r4
 80026ca:	4629      	mov	r1, r5
 80026cc:	f7fd ff60 	bl	8000590 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7fe fa52 	bl	8000b80 <__aeabi_d2f>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <current_sensor5.1+0xb4>)
 80026e0:	6013      	str	r3, [r2, #0]
  	  current5 =(1 - rawVoltage5)/sensitivity5;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <current_sensor5.1+0xb4>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <current_sensor5.1+0xb8>)
 80026f2:	ed93 7a00 	vldr	s14, [r3]
 80026f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <current_sensor5.1+0xbc>)
 80026fc:	edc3 7a00 	vstr	s15, [r3]
  }
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bdb0      	pop	{r4, r5, r7, pc}
 8002708:	66666666 	.word	0x66666666
 800270c:	400a6666 	.word	0x400a6666
 8002710:	00000000 	.word	0x00000000
 8002714:	40affe00 	.word	0x40affe00
 8002718:	20000454 	.word	0x20000454
 800271c:	20000468 	.word	0x20000468
 8002720:	2000000c 	.word	0x2000000c
 8002724:	2000046c 	.word	0x2000046c
 8002728:	20000008 	.word	0x20000008
 800272c:	20000470 	.word	0x20000470

08002730 <current_sensor20.2>:
  {
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <current_sensor20.2+0xa8>)
 800273c:	889a      	ldrh	r2, [r3, #4]
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <current_sensor20.2+0xac>)
 8002740:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <current_sensor20.2+0xac>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274e:	ee17 0a90 	vmov	r0, s15
 8002752:	f7fd fec5 	bl	80004e0 <__aeabi_f2d>
 8002756:	a31c      	add	r3, pc, #112	; (adr r3, 80027c8 <current_sensor20.2+0x98>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd ff18 	bl	8000590 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	a319      	add	r3, pc, #100	; (adr r3, 80027d0 <current_sensor20.2+0xa0>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fe f839 	bl	80007e4 <__aeabi_ddiv>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4614      	mov	r4, r2
 8002778:	461d      	mov	r5, r3
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <current_sensor20.2+0xb0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd feae 	bl	80004e0 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	f7fd ff00 	bl	8000590 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe f9f2 	bl	8000b80 <__aeabi_d2f>
 800279c:	4603      	mov	r3, r0
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <current_sensor20.2+0xb4>)
 80027a0:	6013      	str	r3, [r2, #0]
  	  current20 =(1 - rawVoltage20)/sensitivity20;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <current_sensor20.2+0xb4>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <current_sensor20.2+0xb8>)
 80027b2:	ed93 7a00 	vldr	s14, [r3]
 80027b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <current_sensor20.2+0xbc>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
  }
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bdb0      	pop	{r4, r5, r7, pc}
 80027c8:	66666666 	.word	0x66666666
 80027cc:	400a6666 	.word	0x400a6666
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40affe00 	.word	0x40affe00
 80027d8:	20000454 	.word	0x20000454
 80027dc:	20000474 	.word	0x20000474
 80027e0:	20000014 	.word	0x20000014
 80027e4:	20000478 	.word	0x20000478
 80027e8:	20000010 	.word	0x20000010
 80027ec:	2000047c 	.word	0x2000047c

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b094      	sub	sp, #80	; 0x50
 80027f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	2234      	movs	r2, #52	; 0x34
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 fb72 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <SystemClock_Config+0xdc>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <SystemClock_Config+0xdc>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <SystemClock_Config+0xdc>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002830:	2300      	movs	r3, #0
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <SystemClock_Config+0xe0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <SystemClock_Config+0xe0>)
 800283a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <SystemClock_Config+0xe0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800284c:	2302      	movs	r3, #2
 800284e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002850:	2301      	movs	r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002854:	2310      	movs	r3, #16
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002858:	2302      	movs	r3, #2
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800285c:	2300      	movs	r3, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002860:	2308      	movs	r3, #8
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002864:	23b4      	movs	r3, #180	; 0xb4
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002868:	2302      	movs	r3, #2
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800286c:	2302      	movs	r3, #2
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002870:	2302      	movs	r3, #2
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fe05 	bl	8006488 <HAL_RCC_OscConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002884:	f000 fa30 	bl	8002ce8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002888:	f003 fa64 	bl	8005d54 <HAL_PWREx_EnableOverDrive>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002892:	f000 fa29 	bl	8002ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002896:	230f      	movs	r3, #15
 8002898:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289a:	2302      	movs	r3, #2
 800289c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	2105      	movs	r1, #5
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fa9d 	bl	8005df4 <HAL_RCC_ClockConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028c0:	f000 fa12 	bl	8002ce8 <Error_Handler>
  }
}
 80028c4:	bf00      	nop
 80028c6:	3750      	adds	r7, #80	; 0x50
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000

080028d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028da:	463b      	mov	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <MX_ADC1_Init+0xd0>)
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <MX_ADC1_Init+0xd4>)
 80028ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <MX_ADC1_Init+0xd0>)
 80028ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <MX_ADC1_Init+0xd0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <MX_ADC1_Init+0xd0>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002902:	2201      	movs	r2, #1
 8002904:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002910:	2200      	movs	r2, #0
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002916:	4a25      	ldr	r2, [pc, #148]	; (80029ac <MX_ADC1_Init+0xd8>)
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <MX_ADC1_Init+0xd0>)
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002922:	2203      	movs	r2, #3
 8002924:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002930:	2201      	movs	r2, #1
 8002932:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002934:	481b      	ldr	r0, [pc, #108]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002936:	f000 fffb 	bl	8003930 <HAL_ADC_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002940:	f000 f9d2 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002948:	2301      	movs	r3, #1
 800294a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002950:	463b      	mov	r3, r7
 8002952:	4619      	mov	r1, r3
 8002954:	4813      	ldr	r0, [pc, #76]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002956:	f001 f95d 	bl	8003c14 <HAL_ADC_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002960:	f000 f9c2 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002964:	2301      	movs	r3, #1
 8002966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002968:	2302      	movs	r3, #2
 800296a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800296c:	463b      	mov	r3, r7
 800296e:	4619      	mov	r1, r3
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <MX_ADC1_Init+0xd0>)
 8002972:	f001 f94f 	bl	8003c14 <HAL_ADC_ConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800297c:	f000 f9b4 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002980:	2304      	movs	r3, #4
 8002982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002984:	2303      	movs	r3, #3
 8002986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002988:	463b      	mov	r3, r7
 800298a:	4619      	mov	r1, r3
 800298c:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_ADC1_Init+0xd0>)
 800298e:	f001 f941 	bl	8003c14 <HAL_ADC_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002998:	f000 f9a6 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000134 	.word	0x20000134
 80029a8:	40012000 	.word	0x40012000
 80029ac:	0f000001 	.word	0x0f000001

080029b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <MX_I2C1_Init+0x54>)
 80029b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_I2C1_Init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029ee:	f002 f9f1 	bl	8004dd4 <HAL_I2C_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029f8:	f000 f976 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200001dc 	.word	0x200001dc
 8002a04:	40005400 	.word	0x40005400
 8002a08:	000186a0 	.word	0x000186a0

08002a0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <MX_I2C2_Init+0x54>)
 8002a14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <MX_I2C2_Init+0x58>)
 8002a1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a48:	4804      	ldr	r0, [pc, #16]	; (8002a5c <MX_I2C2_Init+0x50>)
 8002a4a:	f002 f9c3 	bl	8004dd4 <HAL_I2C_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a54:	f000 f948 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000230 	.word	0x20000230
 8002a60:	40005800 	.word	0x40005800
 8002a64:	00061a80 	.word	0x00061a80

08002a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a6e:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <MX_SPI1_Init+0x6c>)
 8002a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002ab6:	220a      	movs	r2, #10
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_SPI1_Init+0x68>)
 8002abc:	f003 ff82 	bl	80069c4 <HAL_SPI_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002ac6:	f000 f90f 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000284 	.word	0x20000284
 8002ad4:	40013000 	.word	0x40013000

08002ad8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002af6:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <MX_TIM1_Init+0xa0>)
 8002af8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002afc:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8002b00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b22:	4814      	ldr	r0, [pc, #80]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b24:	f004 fbba 	bl	800729c <HAL_TIM_Base_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002b2e:	f000 f8db 	bl	8002ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480d      	ldr	r0, [pc, #52]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b40:	f004 fc64 	bl	800740c <HAL_TIM_ConfigClockSource>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002b4a:	f000 f8cd 	bl	8002ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b56:	463b      	mov	r3, r7
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <MX_TIM1_Init+0x9c>)
 8002b5c:	f004 fe58 	bl	8007810 <HAL_TIMEx_MasterConfigSynchronization>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002b66:	f000 f8bf 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200002dc 	.word	0x200002dc
 8002b78:	40010000 	.word	0x40010000

08002b7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <MX_USART1_UART_Init+0x50>)
 8002b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002bb4:	f004 fea8 	bl	8007908 <HAL_UART_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bbe:	f000 f893 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000490 	.word	0x20000490
 8002bcc:	40011000 	.word	0x40011000

08002bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_DMA_Init+0x3c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <MX_DMA_Init+0x3c>)
 8002be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_DMA_Init+0x3c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2038      	movs	r0, #56	; 0x38
 8002bf8:	f001 fb97 	bl	800432a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002bfc:	2038      	movs	r0, #56	; 0x38
 8002bfe:	f001 fbb0 	bl	8004362 <HAL_NVIC_EnableIRQ>

}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <MX_GPIO_Init+0xd0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin, GPIO_PIN_RESET);
 8002c96:	2200      	movs	r2, #0
 8002c98:	21c0      	movs	r1, #192	; 0xc0
 8002c9a:	4812      	ldr	r0, [pc, #72]	; (8002ce4 <MX_GPIO_Init+0xd4>)
 8002c9c:	f002 f880 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <MX_GPIO_Init+0xd4>)
 8002cb8:	f001 fede 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MT_CS_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin;
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MT_CS_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <MX_GPIO_Init+0xd4>)
 8002cd4:	f001 fed0 	bl	8004a78 <HAL_GPIO_Init>

}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	; 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
}
 8002cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <Error_Handler+0x8>
	...

08002cf4 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	2301      	movs	r3, #1
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <MPU6050_Init+0xc0>)
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2275      	movs	r2, #117	; 0x75
 8002d0c:	21d0      	movs	r1, #208	; 0xd0
 8002d0e:	482a      	ldr	r0, [pc, #168]	; (8002db8 <MPU6050_Init+0xc4>)
 8002d10:	f002 fa9e 	bl	8005250 <HAL_I2C_Mem_Read>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <MPU6050_Init+0xc8>)
 8002d1a:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <MPU6050_Init+0xc0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b68      	cmp	r3, #104	; 0x68
 8002d22:	d140      	bne.n	8002da6 <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	2301      	movs	r3, #1
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	226b      	movs	r2, #107	; 0x6b
 8002d3c:	21d0      	movs	r1, #208	; 0xd0
 8002d3e:	481e      	ldr	r0, [pc, #120]	; (8002db8 <MPU6050_Init+0xc4>)
 8002d40:	f002 f98c 	bl	800505c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d46:	2207      	movs	r2, #7
 8002d48:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d4e:	9302      	str	r3, [sp, #8]
 8002d50:	2301      	movs	r3, #1
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	2219      	movs	r2, #25
 8002d5c:	21d0      	movs	r1, #208	; 0xd0
 8002d5e:	4816      	ldr	r0, [pc, #88]	; (8002db8 <MPU6050_Init+0xc4>)
 8002d60:	f002 f97c 	bl	800505c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6e:	9302      	str	r3, [sp, #8]
 8002d70:	2301      	movs	r3, #1
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	221c      	movs	r2, #28
 8002d7c:	21d0      	movs	r1, #208	; 0xd0
 8002d7e:	480e      	ldr	r0, [pc, #56]	; (8002db8 <MPU6050_Init+0xc4>)
 8002d80:	f002 f96c 	bl	800505c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8e:	9302      	str	r3, [sp, #8]
 8002d90:	2301      	movs	r3, #1
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <MPU6050_Init+0xcc>)
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	221b      	movs	r2, #27
 8002d9c:	21d0      	movs	r1, #208	; 0xd0
 8002d9e:	4806      	ldr	r0, [pc, #24]	; (8002db8 <MPU6050_Init+0xc4>)
 8002da0:	f002 f95c 	bl	800505c <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 8002da4:	e002      	b.n	8002dac <MPU6050_Init+0xb8>
	else check=-1;
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <MPU6050_Init+0xc0>)
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	701a      	strb	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000048c 	.word	0x2000048c
 8002db8:	200001dc 	.word	0x200001dc
 8002dbc:	20000018 	.word	0x20000018
 8002dc0:	2000048d 	.word	0x2000048d

08002dc4 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	2306      	movs	r3, #6
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2301      	movs	r3, #1
 8002de2:	223b      	movs	r2, #59	; 0x3b
 8002de4:	21d0      	movs	r1, #208	; 0xd0
 8002de6:	4832      	ldr	r0, [pc, #200]	; (8002eb0 <MPU6050_Read_Accel+0xec>)
 8002de8:	f002 fa32 	bl	8005250 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002dec:	7c3b      	ldrb	r3, [r7, #16]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	7c7b      	ldrb	r3, [r7, #17]
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <MPU6050_Read_Accel+0xf0>)
 8002dfc:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002dfe:	7cbb      	ldrb	r3, [r7, #18]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	b21a      	sxth	r2, r3
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <MPU6050_Read_Accel+0xf4>)
 8002e0e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002e10:	7d3b      	ldrb	r3, [r7, #20]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	b21a      	sxth	r2, r3
 8002e16:	7d7b      	ldrb	r3, [r7, #21]
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b21a      	sxth	r2, r3
 8002e1e:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <MPU6050_Read_Accel+0xf8>)
 8002e20:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 8002e22:	7c7b      	ldrb	r3, [r7, #17]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <MPU6050_Read_Accel+0xfc>)
 8002e2e:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <MPU6050_Read_Accel+0xf0>)
 8002e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb40 	bl	80004bc <__aeabi_i2d>
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <MPU6050_Read_Accel+0x100>)
 8002e42:	f7fd fccf 	bl	80007e4 <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fe97 	bl	8000b80 <__aeabi_d2f>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <MPU6050_Read_Accel+0xf4>)
 8002e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb2c 	bl	80004bc <__aeabi_i2d>
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <MPU6050_Read_Accel+0x100>)
 8002e6a:	f7fd fcbb 	bl	80007e4 <__aeabi_ddiv>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fe83 	bl	8000b80 <__aeabi_d2f>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MPU6050_Read_Accel+0xf8>)
 8002e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fb18 	bl	80004bc <__aeabi_i2d>
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MPU6050_Read_Accel+0x100>)
 8002e92:	f7fd fca7 	bl	80007e4 <__aeabi_ddiv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fe6f 	bl	8000b80 <__aeabi_d2f>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	601a      	str	r2, [r3, #0]

}
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200001dc 	.word	0x200001dc
 8002eb4:	20000480 	.word	0x20000480
 8002eb8:	20000482 	.word	0x20000482
 8002ebc:	20000484 	.word	0x20000484
 8002ec0:	20000018 	.word	0x20000018
 8002ec4:	40d00000 	.word	0x40d00000

08002ec8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed8:	9302      	str	r3, [sp, #8]
 8002eda:	2306      	movs	r3, #6
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	2243      	movs	r2, #67	; 0x43
 8002ee8:	21d0      	movs	r1, #208	; 0xd0
 8002eea:	4831      	ldr	r0, [pc, #196]	; (8002fb0 <MPU6050_Read_Gyro+0xe8>)
 8002eec:	f002 f9b0 	bl	8005250 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002ef0:	7c3b      	ldrb	r3, [r7, #16]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	7c7b      	ldrb	r3, [r7, #17]
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <MPU6050_Read_Gyro+0xec>)
 8002f00:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002f02:	7cbb      	ldrb	r3, [r7, #18]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b21a      	sxth	r2, r3
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <MPU6050_Read_Gyro+0xf0>)
 8002f12:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002f14:	7d3b      	ldrb	r3, [r7, #20]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	7d7b      	ldrb	r3, [r7, #21]
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b21a      	sxth	r2, r3
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <MPU6050_Read_Gyro+0xf4>)
 8002f24:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <MPU6050_Read_Gyro+0xec>)
 8002f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fac5 	bl	80004bc <__aeabi_i2d>
 8002f32:	a31d      	add	r3, pc, #116	; (adr r3, 8002fa8 <MPU6050_Read_Gyro+0xe0>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fc54 	bl	80007e4 <__aeabi_ddiv>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fe1c 	bl	8000b80 <__aeabi_d2f>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MPU6050_Read_Gyro+0xf0>)
 8002f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd fab1 	bl	80004bc <__aeabi_i2d>
 8002f5a:	a313      	add	r3, pc, #76	; (adr r3, 8002fa8 <MPU6050_Read_Gyro+0xe0>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fc40 	bl	80007e4 <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fe08 	bl	8000b80 <__aeabi_d2f>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MPU6050_Read_Gyro+0xf4>)
 8002f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fa9d 	bl	80004bc <__aeabi_i2d>
 8002f82:	a309      	add	r3, pc, #36	; (adr r3, 8002fa8 <MPU6050_Read_Gyro+0xe0>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fc2c 	bl	80007e4 <__aeabi_ddiv>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd fdf4 	bl	8000b80 <__aeabi_d2f>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40606000 	.word	0x40606000
 8002fb0:	200001dc 	.word	0x200001dc
 8002fb4:	20000486 	.word	0x20000486
 8002fb8:	20000488 	.word	0x20000488
 8002fbc:	2000048a 	.word	0x2000048a

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_MspInit+0x58>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_MspInit+0x58>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_MspInit+0x58>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_MspInit+0x58>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <HAL_MspInit+0x58>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_MspInit+0x58>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	2005      	movs	r0, #5
 8003004:	f001 f991 	bl	800432a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003008:	2005      	movs	r0, #5
 800300a:	f001 f9aa 	bl	8004362 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_ADC_MspInit+0xdc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d157      	bne.n	80030ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4b2e      	ldr	r3, [pc, #184]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a2d      	ldr	r2, [pc, #180]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003076:	2313      	movs	r3, #19
 8003078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800307a:	2303      	movs	r3, #3
 800307c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	481d      	ldr	r0, [pc, #116]	; (8003100 <HAL_ADC_MspInit+0xe4>)
 800308a:	f001 fcf5 	bl	8004a78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_ADC_MspInit+0xec>)
 8003092:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 8003096:	2200      	movs	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030d4:	f001 f960 	bl	8004398 <HAL_DMA_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030de:	f7ff fe03 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40012000 	.word	0x40012000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020000 	.word	0x40020000
 8003104:	2000017c 	.word	0x2000017c
 8003108:	40026410 	.word	0x40026410

0800310c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	; 0x30
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 031c 	add.w	r3, r7, #28
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a42      	ldr	r2, [pc, #264]	; (8003234 <HAL_I2C_MspInit+0x128>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12c      	bne.n	8003188 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a40      	ldr	r2, [pc, #256]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800314a:	23c0      	movs	r3, #192	; 0xc0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800314e:	2312      	movs	r3, #18
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800315a:	2304      	movs	r3, #4
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 031c 	add.w	r3, r7, #28
 8003162:	4619      	mov	r1, r3
 8003164:	4835      	ldr	r0, [pc, #212]	; (800323c <HAL_I2C_MspInit+0x130>)
 8003166:	f001 fc87 	bl	8004a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	4b32      	ldr	r3, [pc, #200]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a31      	ldr	r2, [pc, #196]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003186:	e050      	b.n	800322a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <HAL_I2C_MspInit+0x134>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d14b      	bne.n	800322a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a27      	ldr	r2, [pc, #156]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d0:	2312      	movs	r3, #18
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031dc:	2304      	movs	r3, #4
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	4815      	ldr	r0, [pc, #84]	; (800323c <HAL_I2C_MspInit+0x130>)
 80031e8:	f001 fc46 	bl	8004a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f2:	2312      	movs	r3, #18
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fa:	2303      	movs	r3, #3
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031fe:	2304      	movs	r3, #4
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	480e      	ldr	r0, [pc, #56]	; (8003244 <HAL_I2C_MspInit+0x138>)
 800320a:	f001 fc35 	bl	8004a78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_I2C_MspInit+0x12c>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
}
 800322a:	bf00      	nop
 800322c:	3730      	adds	r7, #48	; 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40005400 	.word	0x40005400
 8003238:	40023800 	.word	0x40023800
 800323c:	40020400 	.word	0x40020400
 8003240:	40005800 	.word	0x40005800
 8003244:	40020800 	.word	0x40020800

08003248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a28      	ldr	r2, [pc, #160]	; (8003308 <HAL_SPI_MspInit+0xc0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d149      	bne.n	80032fe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_SPI_MspInit+0xc4>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a26      	ldr	r2, [pc, #152]	; (800330c <HAL_SPI_MspInit+0xc4>)
 8003274:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_SPI_MspInit+0xc4>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_SPI_MspInit+0xc4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_SPI_MspInit+0xc4>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_SPI_MspInit+0xc4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_SPI_MspInit+0xc4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_SPI_MspInit+0xc4>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_SPI_MspInit+0xc4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032be:	2320      	movs	r3, #32
 80032c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ca:	2303      	movs	r3, #3
 80032cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ce:	2305      	movs	r3, #5
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	480d      	ldr	r0, [pc, #52]	; (8003310 <HAL_SPI_MspInit+0xc8>)
 80032da:	f001 fbcd 	bl	8004a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032de:	2310      	movs	r3, #16
 80032e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ee:	2305      	movs	r3, #5
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	4619      	mov	r1, r3
 80032f8:	4806      	ldr	r0, [pc, #24]	; (8003314 <HAL_SPI_MspInit+0xcc>)
 80032fa:	f001 fbbd 	bl	8004a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032fe:	bf00      	nop
 8003300:	3728      	adds	r7, #40	; 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40013000 	.word	0x40013000
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400

08003318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_TIM_Base_MspInit+0x3c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10d      	bne.n	8003346 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_TIM_Base_MspInit+0x40>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_TIM_Base_MspInit+0x40>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6453      	str	r3, [r2, #68]	; 0x44
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_TIM_Base_MspInit+0x40>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40023800 	.word	0x40023800

0800335c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_UART_MspInit+0x84>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d12c      	bne.n	80033d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <HAL_UART_MspInit+0x88>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <HAL_UART_MspInit+0x88>)
 8003388:	f043 0310 	orr.w	r3, r3, #16
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_UART_MspInit+0x88>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_UART_MspInit+0x88>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_UART_MspInit+0x88>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_UART_MspInit+0x88>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033c8:	2307      	movs	r3, #7
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	4805      	ldr	r0, [pc, #20]	; (80033e8 <HAL_UART_MspInit+0x8c>)
 80033d4:	f001 fb50 	bl	8004a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033d8:	bf00      	nop
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40011000 	.word	0x40011000
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020000 	.word	0x40020000

080033ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033f0:	e7fe      	b.n	80033f0 <NMI_Handler+0x4>

080033f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f6:	e7fe      	b.n	80033f6 <HardFault_Handler+0x4>

080033f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033fc:	e7fe      	b.n	80033fc <MemManage_Handler+0x4>

080033fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003402:	e7fe      	b.n	8003402 <BusFault_Handler+0x4>

08003404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <UsageFault_Handler+0x4>

0800340a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003438:	f000 fa36 	bl	80038a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}

08003440 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <DMA2_Stream0_IRQHandler+0x10>)
 8003456:	f001 f8a5 	bl	80045a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	2000017c 	.word	0x2000017c

08003464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <SystemInit+0x20>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <SystemInit+0x20>)
 8003470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <Ringbuf_init+0x3c>)
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <Ringbuf_init+0x40>)
 8003490:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <Ringbuf_init+0x44>)
 8003494:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <Ringbuf_init+0x48>)
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <Ringbuf_init+0x4c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <Ringbuf_init+0x4c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <Ringbuf_init+0x4c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <Ringbuf_init+0x4c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	60da      	str	r2, [r3, #12]
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	200008e8 	.word	0x200008e8
 80034c8:	200004d8 	.word	0x200004d8
 80034cc:	200008ec 	.word	0x200008ec
 80034d0:	200006e0 	.word	0x200006e0
 80034d4:	20000490 	.word	0x20000490

080034d8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <Uart_read+0x54>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <Uart_read+0x54>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d102      	bne.n	80034f8 <Uart_read+0x20>
  {
    return -1;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	e013      	b.n	8003520 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <Uart_read+0x54>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <Uart_read+0x54>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003504:	5cd3      	ldrb	r3, [r2, r3]
 8003506:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <Uart_read+0x54>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <Uart_read+0x54>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 800351e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	200008e8 	.word	0x200008e8

08003530 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <IsDataAvailable+0x30>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800353c:	b29a      	uxth	r2, r3
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <IsDataAvailable+0x30>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003546:	b29b      	uxth	r3, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003550:	b29b      	uxth	r3, r3
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	200008e8 	.word	0x200008e8

08003564 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <Uart_peek+0x38>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <Uart_peek+0x38>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003578:	429a      	cmp	r2, r3
 800357a:	d102      	bne.n	8003582 <Uart_peek+0x1e>
  {
    return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	e006      	b.n	8003590 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <Uart_peek+0x38>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <Uart_peek+0x38>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800358e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	200008e8 	.word	0x200008e8

080035a0 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fc fe2a 	bl	8000208 <strlen>
 80035b4:	4603      	mov	r3, r0
 80035b6:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80035bc:	e01e      	b.n	80035fc <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <Copy_upto+0xf8>)
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	4b35      	ldr	r3, [pc, #212]	; (8003698 <Copy_upto+0xf8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6838      	ldr	r0, [r7, #0]
 80035ce:	4403      	add	r3, r0
 80035d0:	5c8a      	ldrb	r2, [r1, r2]
 80035d2:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <Copy_upto+0xf8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <Copy_upto+0xf8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	3301      	adds	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80035f0:	bf00      	nop
 80035f2:	f7ff ff9d 	bl	8003530 <IsDataAvailable>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0fa      	beq.n	80035f2 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80035fc:	f7ff ffb2 	bl	8003564 <Uart_peek>
 8003600:	4601      	mov	r1, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	4299      	cmp	r1, r3
 800360c:	d1d7      	bne.n	80035be <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 800360e:	e027      	b.n	8003660 <Copy_upto+0xc0>
	{
		so_far++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8003616:	f7ff ff5f 	bl	80034d8 <Uart_read>
 800361a:	4601      	mov	r1, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	613a      	str	r2, [r7, #16]
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	b2ca      	uxtb	r2, r1
 800362a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d101      	bne.n	8003638 <Copy_upto+0x98>
 8003634:	2301      	movs	r3, #1
 8003636:	e02a      	b.n	800368e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8003638:	4b18      	ldr	r3, [pc, #96]	; (800369c <Copy_upto+0xfc>)
 800363a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800363e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003640:	bf00      	nop
 8003642:	f7ff ff75 	bl	8003530 <IsDataAvailable>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <Copy_upto+0xb4>
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <Copy_upto+0xfc>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f6      	bne.n	8003642 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <Copy_upto+0xfc>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <Copy_upto+0xc0>
 800365c:	2300      	movs	r3, #0
 800365e:	e016      	b.n	800368e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8003660:	f7ff ff80 	bl	8003564 <Uart_peek>
 8003664:	4601      	mov	r1, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	4299      	cmp	r1, r3
 8003670:	d0ce      	beq.n	8003610 <Copy_upto+0x70>
	}

	if (so_far != len)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	429a      	cmp	r2, r3
 8003678:	d002      	beq.n	8003680 <Copy_upto+0xe0>
	{
		so_far = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
		goto again;
 800367e:	e79d      	b.n	80035bc <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	429a      	cmp	r2, r3
 8003686:	d101      	bne.n	800368c <Copy_upto+0xec>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <Copy_upto+0xee>
	else return 0;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200008e8 	.word	0x200008e8
 800369c:	200004d4 	.word	0x200004d4

080036a0 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fc fdab 	bl	8000208 <strlen>
 80036b2:	4603      	mov	r3, r0
 80036b4:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <Wait_for+0x108>)
 80036b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036bc:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80036be:	bf00      	nop
 80036c0:	f7ff ff36 	bl	8003530 <IsDataAvailable>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <Wait_for+0x32>
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <Wait_for+0x108>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f6      	bne.n	80036c0 <Wait_for+0x20>
	if (timeout == 0) return 0;
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <Wait_for+0x108>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d119      	bne.n	800370e <Wait_for+0x6e>
 80036da:	2300      	movs	r3, #0
 80036dc:	e060      	b.n	80037a0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80036de:	4b33      	ldr	r3, [pc, #204]	; (80037ac <Wait_for+0x10c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <Wait_for+0x10c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d00b      	beq.n	800370a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <Wait_for+0x10c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <Wait_for+0x10c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003708:	e001      	b.n	800370e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800370a:	2300      	movs	r3, #0
 800370c:	e048      	b.n	80037a0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800370e:	f7ff ff29 	bl	8003564 <Uart_peek>
 8003712:	4601      	mov	r1, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4299      	cmp	r1, r3
 800371e:	d1de      	bne.n	80036de <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003720:	e027      	b.n	8003772 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <Wait_for+0x10c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <Wait_for+0x10c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d101      	bne.n	800374a <Wait_for+0xaa>
 8003746:	2301      	movs	r3, #1
 8003748:	e02a      	b.n	80037a0 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <Wait_for+0x108>)
 800374c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003750:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003752:	bf00      	nop
 8003754:	f7ff feec 	bl	8003530 <IsDataAvailable>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <Wait_for+0xc6>
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <Wait_for+0x108>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f6      	bne.n	8003754 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <Wait_for+0x108>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <Wait_for+0xd2>
 800376e:	2300      	movs	r3, #0
 8003770:	e016      	b.n	80037a0 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003772:	f7ff fef7 	bl	8003564 <Uart_peek>
 8003776:	4601      	mov	r1, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4299      	cmp	r1, r3
 8003782:	d0ce      	beq.n	8003722 <Wait_for+0x82>
	}

	if (so_far != len)
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	d002      	beq.n	8003792 <Wait_for+0xf2>
	{
		so_far = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
		goto again;
 8003790:	e791      	b.n	80036b6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d101      	bne.n	800379e <Wait_for+0xfe>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <Wait_for+0x100>
	else return 0;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200004d4 	.word	0x200004d4
 80037ac:	200008e8 	.word	0x200008e8

080037b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037b4:	480d      	ldr	r0, [pc, #52]	; (80037ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037b6:	490e      	ldr	r1, [pc, #56]	; (80037f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037b8:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037bc:	e002      	b.n	80037c4 <LoopCopyDataInit>

080037be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037c2:	3304      	adds	r3, #4

080037c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c8:	d3f9      	bcc.n	80037be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037cc:	4c0b      	ldr	r4, [pc, #44]	; (80037fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d0:	e001      	b.n	80037d6 <LoopFillZerobss>

080037d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d4:	3204      	adds	r2, #4

080037d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d8:	d3fb      	bcc.n	80037d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037da:	f7ff fe43 	bl	8003464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037de:	f004 fb5f 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037e2:	f7fe fe95 	bl	8002510 <main>
  bx  lr    
 80037e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80037f4:	08008fd0 	.word	0x08008fd0
  ldr r2, =_sbss
 80037f8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80037fc:	200008f4 	.word	0x200008f4

08003800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003800:	e7fe      	b.n	8003800 <ADC_IRQHandler>
	...

08003804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_Init+0x40>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_Init+0x40>)
 800380e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_Init+0x40>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_Init+0x40>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_Init+0x40>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_Init+0x40>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800382c:	2003      	movs	r0, #3
 800382e:	f000 fd71 	bl	8004314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003832:	200f      	movs	r0, #15
 8003834:	f000 f808 	bl	8003848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003838:	f7ff fbc2 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00

08003848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_InitTick+0x54>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_InitTick+0x58>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fd89 	bl	800437e <HAL_SYSTICK_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00e      	b.n	8003894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d80a      	bhi.n	8003892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800387c:	2200      	movs	r2, #0
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	f000 fd51 	bl	800432a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003888:	4a06      	ldr	r2, [pc, #24]	; (80038a4 <HAL_InitTick+0x5c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000001c 	.word	0x2000001c
 80038a0:	20000024 	.word	0x20000024
 80038a4:	20000020 	.word	0x20000020

080038a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_IncTick+0x20>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_IncTick+0x24>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <HAL_IncTick+0x24>)
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000024 	.word	0x20000024
 80038cc:	200008f0 	.word	0x200008f0

080038d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return uwTick;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_GetTick+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	200008f0 	.word	0x200008f0

080038e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff ffee 	bl	80038d0 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d005      	beq.n	800390e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_Delay+0x44>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800390e:	bf00      	nop
 8003910:	f7ff ffde 	bl	80038d0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d8f7      	bhi.n	8003910 <HAL_Delay+0x28>
  {
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000024 	.word	0x20000024

08003930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e033      	b.n	80039ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fb64 	bl	800301c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	d118      	bne.n	80039a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003976:	f023 0302 	bic.w	r3, r3, #2
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa78 	bl	8003e78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
 800399e:	e001      	b.n	80039a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_Start_DMA+0x1e>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0e9      	b.n	8003baa <HAL_ADC_Start_DMA+0x1f2>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d018      	beq.n	8003a1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039fc:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_ADC_Start_DMA+0x1fc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6d      	ldr	r2, [pc, #436]	; (8003bb8 <HAL_ADC_Start_DMA+0x200>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0c9a      	lsrs	r2, r3, #18
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a10:	e002      	b.n	8003a18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f9      	bne.n	8003a12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2c:	d107      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 80a1 	bne.w	8003b90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d106      	bne.n	8003a9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f023 0206 	bic.w	r2, r3, #6
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
 8003a9a:	e002      	b.n	8003aa2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aaa:	4b44      	ldr	r3, [pc, #272]	; (8003bbc <HAL_ADC_Start_DMA+0x204>)
 8003aac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <HAL_ADC_Start_DMA+0x208>)
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4a42      	ldr	r2, [pc, #264]	; (8003bc4 <HAL_ADC_Start_DMA+0x20c>)
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <HAL_ADC_Start_DMA+0x210>)
 8003ac4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ace:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ade:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	334c      	adds	r3, #76	; 0x4c
 8003afa:	4619      	mov	r1, r3
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f000 fcf8 	bl	80044f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d12a      	bne.n	8003b66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <HAL_ADC_Start_DMA+0x214>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d015      	beq.n	8003b46 <HAL_ADC_Start_DMA+0x18e>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <HAL_ADC_Start_DMA+0x218>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d105      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x178>
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_ADC_Start_DMA+0x204>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <HAL_ADC_Start_DMA+0x21c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d136      	bne.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_ADC_Start_DMA+0x204>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d130      	bne.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d129      	bne.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	e020      	b.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_ADC_Start_DMA+0x214>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d114      	bne.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f043 0210 	orr.w	r2, r3, #16
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000001c 	.word	0x2000001c
 8003bb8:	431bde83 	.word	0x431bde83
 8003bbc:	40012300 	.word	0x40012300
 8003bc0:	08004071 	.word	0x08004071
 8003bc4:	0800412b 	.word	0x0800412b
 8003bc8:	08004147 	.word	0x08004147
 8003bcc:	40012000 	.word	0x40012000
 8003bd0:	40012100 	.word	0x40012100
 8003bd4:	40012200 	.word	0x40012200

08003bd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x1c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e113      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x244>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b09      	cmp	r3, #9
 8003c3e:	d925      	bls.n	8003c8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68d9      	ldr	r1, [r3, #12]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	3b1e      	subs	r3, #30
 8003c56:	2207      	movs	r2, #7
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	400a      	ands	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68d9      	ldr	r1, [r3, #12]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4403      	add	r3, r0
 8003c7e:	3b1e      	subs	r3, #30
 8003c80:	409a      	lsls	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	e022      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6919      	ldr	r1, [r3, #16]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	400a      	ands	r2, r1
 8003cae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6919      	ldr	r1, [r3, #16]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4403      	add	r3, r0
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d824      	bhi.n	8003d24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	3b05      	subs	r3, #5
 8003cec:	221f      	movs	r2, #31
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4618      	mov	r0, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	3b05      	subs	r3, #5
 8003d16:	fa00 f203 	lsl.w	r2, r0, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34
 8003d22:	e04c      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d824      	bhi.n	8003d76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3b23      	subs	r3, #35	; 0x23
 8003d3e:	221f      	movs	r2, #31
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43da      	mvns	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	3b23      	subs	r3, #35	; 0x23
 8003d68:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
 8003d74:	e023      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	3b41      	subs	r3, #65	; 0x41
 8003d88:	221f      	movs	r2, #31
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	400a      	ands	r2, r1
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4618      	mov	r0, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	3b41      	subs	r3, #65	; 0x41
 8003db2:	fa00 f203 	lsl.w	r2, r0, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dbe:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_ADC_ConfigChannel+0x250>)
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_ADC_ConfigChannel+0x254>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10f      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x1d8>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b12      	cmp	r3, #18
 8003dd2:	d10b      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <HAL_ADC_ConfigChannel+0x254>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d12b      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x23a>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <HAL_ADC_ConfigChannel+0x258>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0x1f4>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b11      	cmp	r3, #17
 8003e06:	d122      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <HAL_ADC_ConfigChannel+0x258>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_ADC_ConfigChannel+0x25c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <HAL_ADC_ConfigChannel+0x260>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	0c9a      	lsrs	r2, r3, #18
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e40:	e002      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f9      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40012300 	.word	0x40012300
 8003e68:	40012000 	.word	0x40012000
 8003e6c:	10000012 	.word	0x10000012
 8003e70:	2000001c 	.word	0x2000001c
 8003e74:	431bde83 	.word	0x431bde83

08003e78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e80:	4b79      	ldr	r3, [pc, #484]	; (8004068 <ADC_Init+0x1f0>)
 8003e82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6899      	ldr	r1, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	4a58      	ldr	r2, [pc, #352]	; (800406c <ADC_Init+0x1f4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6899      	ldr	r1, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6899      	ldr	r1, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e00f      	b.n	8003f76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0202 	bic.w	r2, r2, #2
 8003f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7e1b      	ldrb	r3, [r3, #24]
 8003f90:	005a      	lsls	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01b      	beq.n	8003fdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	035a      	lsls	r2, r3, #13
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e007      	b.n	8003fec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	3b01      	subs	r3, #1
 8004008:	051a      	lsls	r2, r3, #20
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6899      	ldr	r1, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800402e:	025a      	lsls	r2, r3, #9
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6899      	ldr	r1, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	029a      	lsls	r2, r3, #10
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012300 	.word	0x40012300
 800406c:	0f000001 	.word	0x0f000001

08004070 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d13c      	bne.n	8004104 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d12b      	bne.n	80040fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d127      	bne.n	80040fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d119      	bne.n	80040fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0220 	bic.w	r2, r2, #32
 80040d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fd6b 	bl	8003bd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004102:	e00e      	b.n	8004122 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fd75 	bl	8003c00 <HAL_ADC_ErrorCallback>
}
 8004116:	e004      	b.n	8004122 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fd57 	bl	8003bec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2240      	movs	r2, #64	; 0x40
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0204 	orr.w	r2, r3, #4
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff fd4a 	bl	8003c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004190:	4013      	ands	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800419c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041a6:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <__NVIC_SetPriorityGrouping+0x44>)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	60d3      	str	r3, [r2, #12]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <__NVIC_GetPriorityGrouping+0x18>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f003 0307 	and.w	r3, r3, #7
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	db0b      	blt.n	8004202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	4907      	ldr	r1, [pc, #28]	; (8004210 <__NVIC_EnableIRQ+0x38>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2001      	movs	r0, #1
 80041fa:	fa00 f202 	lsl.w	r2, r0, r2
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e100 	.word	0xe000e100

08004214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db0a      	blt.n	800423e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	490c      	ldr	r1, [pc, #48]	; (8004260 <__NVIC_SetPriority+0x4c>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	440b      	add	r3, r1
 8004238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800423c:	e00a      	b.n	8004254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4908      	ldr	r1, [pc, #32]	; (8004264 <__NVIC_SetPriority+0x50>)
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	3b04      	subs	r3, #4
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	440b      	add	r3, r1
 8004252:	761a      	strb	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f1c3 0307 	rsb	r3, r3, #7
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf28      	it	cs
 8004286:	2304      	movcs	r3, #4
 8004288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3304      	adds	r3, #4
 800428e:	2b06      	cmp	r3, #6
 8004290:	d902      	bls.n	8004298 <NVIC_EncodePriority+0x30>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3b03      	subs	r3, #3
 8004296:	e000      	b.n	800429a <NVIC_EncodePriority+0x32>
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	401a      	ands	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b0:	f04f 31ff 	mov.w	r1, #4294967295
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43d9      	mvns	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	4313      	orrs	r3, r2
         );
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3724      	adds	r7, #36	; 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e0:	d301      	bcc.n	80042e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042e2:	2301      	movs	r3, #1
 80042e4:	e00f      	b.n	8004306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <SysTick_Config+0x40>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ee:	210f      	movs	r1, #15
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	f7ff ff8e 	bl	8004214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <SysTick_Config+0x40>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042fe:	4b04      	ldr	r3, [pc, #16]	; (8004310 <SysTick_Config+0x40>)
 8004300:	2207      	movs	r2, #7
 8004302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	e000e010 	.word	0xe000e010

08004314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ff29 	bl	8004174 <__NVIC_SetPriorityGrouping>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800433c:	f7ff ff3e 	bl	80041bc <__NVIC_GetPriorityGrouping>
 8004340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	6978      	ldr	r0, [r7, #20]
 8004348:	f7ff ff8e 	bl	8004268 <NVIC_EncodePriority>
 800434c:	4602      	mov	r2, r0
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff5d 	bl	8004214 <__NVIC_SetPriority>
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff31 	bl	80041d8 <__NVIC_EnableIRQ>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ffa2 	bl	80042d0 <SysTick_Config>
 800438c:	4603      	mov	r3, r0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043a4:	f7ff fa94 	bl	80038d0 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e099      	b.n	80044e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043d4:	e00f      	b.n	80043f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043d6:	f7ff fa7b 	bl	80038d0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	d908      	bls.n	80043f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e078      	b.n	80044e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e8      	bne.n	80043d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_DMA_Init+0x158>)
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b04      	cmp	r3, #4
 800444e:	d107      	bne.n	8004460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4313      	orrs	r3, r2
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0307 	bic.w	r3, r3, #7
 8004476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b04      	cmp	r3, #4
 8004488:	d117      	bne.n	80044ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fa6f 	bl	8004980 <DMA_CheckFifoParam>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2240      	movs	r2, #64	; 0x40
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044b6:	2301      	movs	r3, #1
 80044b8:	e016      	b.n	80044e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa26 	bl	8004914 <DMA_CalcBaseAndBitshift>
 80044c8:	4603      	mov	r3, r0
 80044ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	223f      	movs	r2, #63	; 0x3f
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	f010803f 	.word	0xf010803f

080044f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_DMA_Start_IT+0x26>
 8004516:	2302      	movs	r3, #2
 8004518:	e040      	b.n	800459c <HAL_DMA_Start_IT+0xa8>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d12f      	bne.n	800458e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b8 	bl	80048b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	223f      	movs	r2, #63	; 0x3f
 800454e:	409a      	lsls	r2, r3
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0216 	orr.w	r2, r2, #22
 8004562:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e005      	b.n	800459a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004596:	2302      	movs	r3, #2
 8004598:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045b0:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <HAL_DMA_IRQHandler+0x248>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a8e      	ldr	r2, [pc, #568]	; (80047f0 <HAL_DMA_IRQHandler+0x24c>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0a9b      	lsrs	r3, r3, #10
 80045bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	2208      	movs	r2, #8
 80045d0:	409a      	lsls	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01a      	beq.n	8004610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	2208      	movs	r2, #8
 80045fe:	409a      	lsls	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	2201      	movs	r2, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f043 0202 	orr.w	r2, r3, #2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	2204      	movs	r2, #4
 800464c:	409a      	lsls	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d012      	beq.n	800467c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	2204      	movs	r2, #4
 800466a:	409a      	lsls	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	2210      	movs	r2, #16
 8004682:	409a      	lsls	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d043      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03c      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	2210      	movs	r2, #16
 80046a0:	409a      	lsls	r2, r3
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d024      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
 80046d2:	e01f      	b.n	8004714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01b      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
 80046e4:	e016      	b.n	8004714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0208 	bic.w	r2, r2, #8
 8004702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004718:	2220      	movs	r2, #32
 800471a:	409a      	lsls	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 808f 	beq.w	8004844 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8087 	beq.w	8004844 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	2220      	movs	r2, #32
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b05      	cmp	r3, #5
 800474c:	d136      	bne.n	80047bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0216 	bic.w	r2, r2, #22
 800475c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800476c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <HAL_DMA_IRQHandler+0x1da>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0208 	bic.w	r2, r2, #8
 800478c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	223f      	movs	r2, #63	; 0x3f
 8004794:	409a      	lsls	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d07e      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
        }
        return;
 80047ba:	e079      	b.n	80048b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d031      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
 80047e8:	e02c      	b.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
 80047ea:	bf00      	nop
 80047ec:	2000001c 	.word	0x2000001c
 80047f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d023      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
 8004804:	e01e      	b.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0210 	bic.w	r2, r2, #16
 8004822:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	2b00      	cmp	r3, #0
 800484a:	d032      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d022      	beq.n	800489e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2205      	movs	r2, #5
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	3301      	adds	r3, #1
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	d307      	bcc.n	800488c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f2      	bne.n	8004870 <HAL_DMA_IRQHandler+0x2cc>
 800488a:	e000      	b.n	800488e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800488c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
 80048ae:	e000      	b.n	80048b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048b0:	bf00      	nop
    }
  }
}
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d108      	bne.n	80048f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048f6:	e007      	b.n	8004908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	3b10      	subs	r3, #16
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <DMA_CalcBaseAndBitshift+0x64>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <DMA_CalcBaseAndBitshift+0x68>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d909      	bls.n	8004956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	659a      	str	r2, [r3, #88]	; 0x58
 8004954:	e007      	b.n	8004966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	aaaaaaab 	.word	0xaaaaaaab
 800497c:	08008e84 	.word	0x08008e84

08004980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11f      	bne.n	80049da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d856      	bhi.n	8004a4e <DMA_CheckFifoParam+0xce>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <DMA_CheckFifoParam+0x28>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049cb 	.word	0x080049cb
 80049b0:	080049b9 	.word	0x080049b9
 80049b4:	08004a4f 	.word	0x08004a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d046      	beq.n	8004a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e043      	b.n	8004a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049d2:	d140      	bne.n	8004a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e03d      	b.n	8004a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e2:	d121      	bne.n	8004a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d837      	bhi.n	8004a5a <DMA_CheckFifoParam+0xda>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <DMA_CheckFifoParam+0x70>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a07 	.word	0x08004a07
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a19 	.word	0x08004a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e030      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d025      	beq.n	8004a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a16:	e022      	b.n	8004a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a20:	d11f      	bne.n	8004a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a26:	e01c      	b.n	8004a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d903      	bls.n	8004a36 <DMA_CheckFifoParam+0xb6>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d003      	beq.n	8004a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a34:	e018      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3a:	e015      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e00b      	b.n	8004a66 <DMA_CheckFifoParam+0xe6>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e00a      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
 8004a54:	e008      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a56:	bf00      	nop
 8004a58:	e006      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e004      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a66:	bf00      	nop
    }
  } 
  
  return status; 
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	; 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	e165      	b.n	8004d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a94:	2201      	movs	r2, #1
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	f040 8154 	bne.w	8004d5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d005      	beq.n	8004aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d130      	bne.n	8004b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b00:	2201      	movs	r2, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 0201 	and.w	r2, r3, #1
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d017      	beq.n	8004b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d123      	bne.n	8004bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	08da      	lsrs	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3208      	adds	r2, #8
 8004b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	08da      	lsrs	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3208      	adds	r2, #8
 8004bb6:	69b9      	ldr	r1, [r7, #24]
 8004bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 0203 	and.w	r2, r3, #3
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80ae 	beq.w	8004d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4b5d      	ldr	r3, [pc, #372]	; (8004d78 <HAL_GPIO_Init+0x300>)
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	4a5c      	ldr	r2, [pc, #368]	; (8004d78 <HAL_GPIO_Init+0x300>)
 8004c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c0e:	4b5a      	ldr	r3, [pc, #360]	; (8004d78 <HAL_GPIO_Init+0x300>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c1a:	4a58      	ldr	r2, [pc, #352]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	3302      	adds	r3, #2
 8004c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	220f      	movs	r2, #15
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a4f      	ldr	r2, [pc, #316]	; (8004d80 <HAL_GPIO_Init+0x308>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d025      	beq.n	8004c92 <HAL_GPIO_Init+0x21a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4e      	ldr	r2, [pc, #312]	; (8004d84 <HAL_GPIO_Init+0x30c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01f      	beq.n	8004c8e <HAL_GPIO_Init+0x216>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a4d      	ldr	r2, [pc, #308]	; (8004d88 <HAL_GPIO_Init+0x310>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d019      	beq.n	8004c8a <HAL_GPIO_Init+0x212>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a4c      	ldr	r2, [pc, #304]	; (8004d8c <HAL_GPIO_Init+0x314>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_GPIO_Init+0x20e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a4b      	ldr	r2, [pc, #300]	; (8004d90 <HAL_GPIO_Init+0x318>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00d      	beq.n	8004c82 <HAL_GPIO_Init+0x20a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4a      	ldr	r2, [pc, #296]	; (8004d94 <HAL_GPIO_Init+0x31c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <HAL_GPIO_Init+0x206>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a49      	ldr	r2, [pc, #292]	; (8004d98 <HAL_GPIO_Init+0x320>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_GPIO_Init+0x202>
 8004c76:	2306      	movs	r3, #6
 8004c78:	e00c      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e00a      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c7e:	2305      	movs	r3, #5
 8004c80:	e008      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c82:	2304      	movs	r3, #4
 8004c84:	e006      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c86:	2303      	movs	r3, #3
 8004c88:	e004      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e002      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <HAL_GPIO_Init+0x21c>
 8004c92:	2300      	movs	r3, #0
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	f002 0203 	and.w	r2, r2, #3
 8004c9a:	0092      	lsls	r2, r2, #2
 8004c9c:	4093      	lsls	r3, r2
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ca4:	4935      	ldr	r1, [pc, #212]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	3302      	adds	r3, #2
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cd6:	4a31      	ldr	r2, [pc, #196]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d54:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <HAL_GPIO_Init+0x324>)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	f67f ae96 	bls.w	8004a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	3724      	adds	r7, #36	; 0x24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	40020000 	.word	0x40020000
 8004d84:	40020400 	.word	0x40020400
 8004d88:	40020800 	.word	0x40020800
 8004d8c:	40020c00 	.word	0x40020c00
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40021400 	.word	0x40021400
 8004d98:	40021800 	.word	0x40021800
 8004d9c:	40013c00 	.word	0x40013c00

08004da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
 8004dac:	4613      	mov	r3, r2
 8004dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db0:	787b      	ldrb	r3, [r7, #1]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004db6:	887a      	ldrh	r2, [r7, #2]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dbc:	e003      	b.n	8004dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	041a      	lsls	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	619a      	str	r2, [r3, #24]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e12b      	b.n	800503e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fe f986 	bl	800310c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	; 0x24
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e38:	f001 f8ce 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a81      	ldr	r2, [pc, #516]	; (8005048 <HAL_I2C_Init+0x274>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d807      	bhi.n	8004e58 <HAL_I2C_Init+0x84>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a80      	ldr	r2, [pc, #512]	; (800504c <HAL_I2C_Init+0x278>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bf94      	ite	ls
 8004e50:	2301      	movls	r3, #1
 8004e52:	2300      	movhi	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e006      	b.n	8004e66 <HAL_I2C_Init+0x92>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a7d      	ldr	r2, [pc, #500]	; (8005050 <HAL_I2C_Init+0x27c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	bf94      	ite	ls
 8004e60:	2301      	movls	r3, #1
 8004e62:	2300      	movhi	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0e7      	b.n	800503e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a78      	ldr	r2, [pc, #480]	; (8005054 <HAL_I2C_Init+0x280>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0c9b      	lsrs	r3, r3, #18
 8004e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a6a      	ldr	r2, [pc, #424]	; (8005048 <HAL_I2C_Init+0x274>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d802      	bhi.n	8004ea8 <HAL_I2C_Init+0xd4>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	e009      	b.n	8004ebc <HAL_I2C_Init+0xe8>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	4a69      	ldr	r2, [pc, #420]	; (8005058 <HAL_I2C_Init+0x284>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	3301      	adds	r3, #1
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	495c      	ldr	r1, [pc, #368]	; (8005048 <HAL_I2C_Init+0x274>)
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d819      	bhi.n	8004f10 <HAL_I2C_Init+0x13c>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e59      	subs	r1, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ef0:	400b      	ands	r3, r1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_I2C_Init+0x138>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1e59      	subs	r1, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0a:	e051      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	e04f      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d111      	bne.n	8004f3c <HAL_I2C_Init+0x168>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e58      	subs	r0, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	440b      	add	r3, r1
 8004f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e012      	b.n	8004f62 <HAL_I2C_Init+0x18e>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1e58      	subs	r0, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6859      	ldr	r1, [r3, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	0099      	lsls	r1, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Init+0x196>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e022      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10e      	bne.n	8004f90 <HAL_I2C_Init+0x1bc>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1e58      	subs	r0, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6859      	ldr	r1, [r3, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	440b      	add	r3, r1
 8004f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8e:	e00f      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1e58      	subs	r0, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	0099      	lsls	r1, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	6809      	ldr	r1, [r1, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6911      	ldr	r1, [r2, #16]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68d2      	ldr	r2, [r2, #12]
 8004fea:	4311      	orrs	r1, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	000186a0 	.word	0x000186a0
 800504c:	001e847f 	.word	0x001e847f
 8005050:	003d08ff 	.word	0x003d08ff
 8005054:	431bde83 	.word	0x431bde83
 8005058:	10624dd3 	.word	0x10624dd3

0800505c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	817b      	strh	r3, [r7, #10]
 800506e:	460b      	mov	r3, r1
 8005070:	813b      	strh	r3, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005076:	f7fe fc2b 	bl	80038d0 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b20      	cmp	r3, #32
 8005086:	f040 80d9 	bne.w	800523c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2319      	movs	r3, #25
 8005090:	2201      	movs	r2, #1
 8005092:	496d      	ldr	r1, [pc, #436]	; (8005248 <HAL_I2C_Mem_Write+0x1ec>)
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fc7f 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
 80050a2:	e0cc      	b.n	800523e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_I2C_Mem_Write+0x56>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e0c5      	b.n	800523e <HAL_I2C_Mem_Write+0x1e2>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d007      	beq.n	80050d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2221      	movs	r2, #33	; 0x21
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2240      	movs	r2, #64	; 0x40
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a4d      	ldr	r2, [pc, #308]	; (800524c <HAL_I2C_Mem_Write+0x1f0>)
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800511a:	88f8      	ldrh	r0, [r7, #6]
 800511c:	893a      	ldrh	r2, [r7, #8]
 800511e:	8979      	ldrh	r1, [r7, #10]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	4603      	mov	r3, r0
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fab6 	bl	800569c <I2C_RequestMemoryWrite>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d052      	beq.n	80051dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e081      	b.n	800523e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fd00 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b04      	cmp	r3, #4
 8005150:	d107      	bne.n	8005162 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e06b      	b.n	800523e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d11b      	bne.n	80051dc <HAL_I2C_Mem_Write+0x180>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d017      	beq.n	80051dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1aa      	bne.n	800513a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fcec 	bl	8005bc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d107      	bne.n	800520c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e016      	b.n	800523e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800523c:	2302      	movs	r3, #2
  }
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	00100002 	.word	0x00100002
 800524c:	ffff0000 	.word	0xffff0000

08005250 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	461a      	mov	r2, r3
 800525e:	4603      	mov	r3, r0
 8005260:	817b      	strh	r3, [r7, #10]
 8005262:	460b      	mov	r3, r1
 8005264:	813b      	strh	r3, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800526a:	f7fe fb31 	bl	80038d0 <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 8208 	bne.w	800568e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2319      	movs	r3, #25
 8005284:	2201      	movs	r2, #1
 8005286:	497b      	ldr	r1, [pc, #492]	; (8005474 <HAL_I2C_Mem_Read+0x224>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fb85 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
 8005296:	e1fb      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_I2C_Mem_Read+0x56>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e1f4      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d007      	beq.n	80052cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2222      	movs	r2, #34	; 0x22
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a5b      	ldr	r2, [pc, #364]	; (8005478 <HAL_I2C_Mem_Read+0x228>)
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530e:	88f8      	ldrh	r0, [r7, #6]
 8005310:	893a      	ldrh	r2, [r7, #8]
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4603      	mov	r3, r0
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fa52 	bl	80057c8 <I2C_RequestMemoryRead>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e1b0      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d113      	bne.n	800535e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e184      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	2b01      	cmp	r3, #1
 8005364:	d11b      	bne.n	800539e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e164      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d11b      	bne.n	80053de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	e144      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053f4:	e138      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	f200 80f1 	bhi.w	80055e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b01      	cmp	r3, #1
 8005406:	d123      	bne.n	8005450 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fc1b 	bl	8005c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e139      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800544e:	e10b      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	2b02      	cmp	r3, #2
 8005456:	d14e      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2200      	movs	r2, #0
 8005460:	4906      	ldr	r1, [pc, #24]	; (800547c <HAL_I2C_Mem_Read+0x22c>)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fa98 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e10e      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
 8005472:	bf00      	nop
 8005474:	00100002 	.word	0x00100002
 8005478:	ffff0000 	.word	0xffff0000
 800547c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054f4:	e0b8      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2200      	movs	r2, #0
 80054fe:	4966      	ldr	r1, [pc, #408]	; (8005698 <HAL_I2C_Mem_Read+0x448>)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fa49 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0bf      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2200      	movs	r2, #0
 800555a:	494f      	ldr	r1, [pc, #316]	; (8005698 <HAL_I2C_Mem_Read+0x448>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fa1b 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e091      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e0:	e042      	b.n	8005668 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fb2e 	bl	8005c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e04c      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d118      	bne.n	8005668 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f aec2 	bne.w	80053f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e000      	b.n	8005690 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800568e:	2302      	movs	r3, #2
  }
}
 8005690:	4618      	mov	r0, r3
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	00010004 	.word	0x00010004

0800569c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	817b      	strh	r3, [r7, #10]
 80056ae:	460b      	mov	r3, r1
 80056b0:	813b      	strh	r3, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f960 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00d      	beq.n	80056fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d103      	bne.n	80056f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e05f      	b.n	80057ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	6a3a      	ldr	r2, [r7, #32]
 800570e:	492d      	ldr	r1, [pc, #180]	; (80057c4 <I2C_RequestMemoryWrite+0x128>)
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f998 	bl	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e04c      	b.n	80057ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	6a39      	ldr	r1, [r7, #32]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fa02 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b04      	cmp	r3, #4
 800574c:	d107      	bne.n	800575e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e02b      	b.n	80057ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005768:	893b      	ldrh	r3, [r7, #8]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	611a      	str	r2, [r3, #16]
 8005772:	e021      	b.n	80057b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	b29b      	uxth	r3, r3
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	6a39      	ldr	r1, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f9dc 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b04      	cmp	r3, #4
 8005798:	d107      	bne.n	80057aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e005      	b.n	80057ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	00010002 	.word	0x00010002

080057c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	4608      	mov	r0, r1
 80057d2:	4611      	mov	r1, r2
 80057d4:	461a      	mov	r2, r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	817b      	strh	r3, [r7, #10]
 80057da:	460b      	mov	r3, r1
 80057dc:	813b      	strh	r3, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005800:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	2200      	movs	r2, #0
 800580a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f8c2 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d103      	bne.n	8005832 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0aa      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005836:	897b      	ldrh	r3, [r7, #10]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005844:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	4952      	ldr	r1, [pc, #328]	; (8005994 <I2C_RequestMemoryRead+0x1cc>)
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f8fa 	bl	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e097      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005874:	6a39      	ldr	r1, [r7, #32]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f964 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b04      	cmp	r3, #4
 8005888:	d107      	bne.n	800589a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005898:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e076      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d105      	bne.n	80058b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058a4:	893b      	ldrh	r3, [r7, #8]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	e021      	b.n	80058f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058b0:	893b      	ldrh	r3, [r7, #8]
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c0:	6a39      	ldr	r1, [r7, #32]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f93e 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d107      	bne.n	80058e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e050      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ea:	893b      	ldrh	r3, [r7, #8]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	6a39      	ldr	r1, [r7, #32]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f923 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	2b04      	cmp	r3, #4
 800590a:	d107      	bne.n	800591c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e035      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2200      	movs	r2, #0
 8005938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f82b 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d103      	bne.n	8005960 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e013      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <I2C_RequestMemoryRead+0x1cc>)
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f863 	bl	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	00010002 	.word	0x00010002

08005998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a8:	e025      	b.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d021      	beq.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fd ff8d 	bl	80038d0 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d116      	bne.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e023      	b.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10d      	bne.n	8005a1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	43da      	mvns	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf0c      	ite	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	2300      	movne	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	e00c      	b.n	8005a36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d0b6      	beq.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a54:	e051      	b.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d123      	bne.n	8005aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0204 	orr.w	r2, r3, #4
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e046      	b.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d021      	beq.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab6:	f7fd ff0b 	bl	80038d0 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d116      	bne.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0220 	orr.w	r2, r3, #32
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e020      	b.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10c      	bne.n	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	43da      	mvns	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e00b      	b.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	43da      	mvns	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d18d      	bne.n	8005a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b50:	e02d      	b.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f8ce 	bl	8005cf4 <I2C_IsAcknowledgeFailed>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e02d      	b.n	8005bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d021      	beq.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fd feb1 	bl	80038d0 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d116      	bne.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e007      	b.n	8005bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d1ca      	bne.n	8005b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd2:	e02d      	b.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f88d 	bl	8005cf4 <I2C_IsAcknowledgeFailed>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e02d      	b.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d021      	beq.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bec:	f7fd fe70 	bl	80038d0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d302      	bcc.n	8005c02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d116      	bne.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e007      	b.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d1ca      	bne.n	8005bd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c54:	e042      	b.n	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d119      	bne.n	8005c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0210 	mvn.w	r2, #16
 8005c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e029      	b.n	8005cec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fd fe1a 	bl	80038d0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d116      	bne.n	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	f043 0220 	orr.w	r2, r3, #32
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e007      	b.n	8005cec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d1b5      	bne.n	8005c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0a:	d11b      	bne.n	8005d44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	f043 0204 	orr.w	r2, r3, #4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d5e:	2300      	movs	r3, #0
 8005d60:	603b      	str	r3, [r7, #0]
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	4a1f      	ldr	r2, [pc, #124]	; (8005de4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d80:	f7fd fda6 	bl	80038d0 <HAL_GetTick>
 8005d84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d86:	e009      	b.n	8005d9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d88:	f7fd fda2 	bl	80038d0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d96:	d901      	bls.n	8005d9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e01f      	b.n	8005ddc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d9c:	4b13      	ldr	r3, [pc, #76]	; (8005dec <HAL_PWREx_EnableOverDrive+0x98>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d1ee      	bne.n	8005d88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005db0:	f7fd fd8e 	bl	80038d0 <HAL_GetTick>
 8005db4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005db6:	e009      	b.n	8005dcc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005db8:	f7fd fd8a 	bl	80038d0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc6:	d901      	bls.n	8005dcc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e007      	b.n	8005ddc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <HAL_PWREx_EnableOverDrive+0x98>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd8:	d1ee      	bne.n	8005db8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40023800 	.word	0x40023800
 8005de8:	420e0040 	.word	0x420e0040
 8005dec:	40007000 	.word	0x40007000
 8005df0:	420e0044 	.word	0x420e0044

08005df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0cc      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e08:	4b68      	ldr	r3, [pc, #416]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d90c      	bls.n	8005e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b65      	ldr	r3, [pc, #404]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	4b63      	ldr	r3, [pc, #396]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0b8      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e48:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4a58      	ldr	r2, [pc, #352]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e60:	4b53      	ldr	r3, [pc, #332]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a52      	ldr	r2, [pc, #328]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e6c:	4b50      	ldr	r3, [pc, #320]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	494d      	ldr	r1, [pc, #308]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d044      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d107      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	4b47      	ldr	r3, [pc, #284]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d119      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e07f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e067      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed2:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 0203 	bic.w	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4934      	ldr	r1, [pc, #208]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee4:	f7fd fcf4 	bl	80038d0 <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eec:	f7fd fcf0 	bl	80038d0 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e04f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f02:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 020c 	and.w	r2, r3, #12
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d1eb      	bne.n	8005eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f14:	4b25      	ldr	r3, [pc, #148]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d20c      	bcs.n	8005f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b22      	ldr	r3, [pc, #136]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b20      	ldr	r3, [pc, #128]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e032      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4916      	ldr	r1, [pc, #88]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f66:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	490e      	ldr	r1, [pc, #56]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f7a:	f000 f855 	bl	8006028 <HAL_RCC_GetSysClockFreq>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	490a      	ldr	r1, [pc, #40]	; (8005fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f8c:	5ccb      	ldrb	r3, [r1, r3]
 8005f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f96:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <HAL_RCC_ClockConfig+0x1c8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd fc54 	bl	8003848 <HAL_InitTick>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023c00 	.word	0x40023c00
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	08008e6c 	.word	0x08008e6c
 8005fb8:	2000001c 	.word	0x2000001c
 8005fbc:	20000020 	.word	0x20000020

08005fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	2000001c 	.word	0x2000001c

08005fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fdc:	f7ff fff0 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0a9b      	lsrs	r3, r3, #10
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	08008e7c 	.word	0x08008e7c

08006000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006004:	f7ff ffdc 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0b5b      	lsrs	r3, r3, #13
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4903      	ldr	r1, [pc, #12]	; (8006024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	08008e7c 	.word	0x08008e7c

08006028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800602c:	b0ae      	sub	sp, #184	; 0xb8
 800602e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800604e:	4bcb      	ldr	r3, [pc, #812]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	2b0c      	cmp	r3, #12
 8006058:	f200 8206 	bhi.w	8006468 <HAL_RCC_GetSysClockFreq+0x440>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <HAL_RCC_GetSysClockFreq+0x3c>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006099 	.word	0x08006099
 8006068:	08006469 	.word	0x08006469
 800606c:	08006469 	.word	0x08006469
 8006070:	08006469 	.word	0x08006469
 8006074:	080060a1 	.word	0x080060a1
 8006078:	08006469 	.word	0x08006469
 800607c:	08006469 	.word	0x08006469
 8006080:	08006469 	.word	0x08006469
 8006084:	080060a9 	.word	0x080060a9
 8006088:	08006469 	.word	0x08006469
 800608c:	08006469 	.word	0x08006469
 8006090:	08006469 	.word	0x08006469
 8006094:	08006299 	.word	0x08006299
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006098:	4bb9      	ldr	r3, [pc, #740]	; (8006380 <HAL_RCC_GetSysClockFreq+0x358>)
 800609a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800609e:	e1e7      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060a0:	4bb8      	ldr	r3, [pc, #736]	; (8006384 <HAL_RCC_GetSysClockFreq+0x35c>)
 80060a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80060a6:	e1e3      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060a8:	4bb4      	ldr	r3, [pc, #720]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060b4:	4bb1      	ldr	r3, [pc, #708]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d071      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c0:	4bae      	ldr	r3, [pc, #696]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	099b      	lsrs	r3, r3, #6
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80060d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060e6:	4622      	mov	r2, r4
 80060e8:	462b      	mov	r3, r5
 80060ea:	f04f 0000 	mov.w	r0, #0
 80060ee:	f04f 0100 	mov.w	r1, #0
 80060f2:	0159      	lsls	r1, r3, #5
 80060f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060f8:	0150      	lsls	r0, r2, #5
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4621      	mov	r1, r4
 8006100:	1a51      	subs	r1, r2, r1
 8006102:	6439      	str	r1, [r7, #64]	; 0x40
 8006104:	4629      	mov	r1, r5
 8006106:	eb63 0301 	sbc.w	r3, r3, r1
 800610a:	647b      	str	r3, [r7, #68]	; 0x44
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006118:	4649      	mov	r1, r9
 800611a:	018b      	lsls	r3, r1, #6
 800611c:	4641      	mov	r1, r8
 800611e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006122:	4641      	mov	r1, r8
 8006124:	018a      	lsls	r2, r1, #6
 8006126:	4641      	mov	r1, r8
 8006128:	1a51      	subs	r1, r2, r1
 800612a:	63b9      	str	r1, [r7, #56]	; 0x38
 800612c:	4649      	mov	r1, r9
 800612e:	eb63 0301 	sbc.w	r3, r3, r1
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006140:	4649      	mov	r1, r9
 8006142:	00cb      	lsls	r3, r1, #3
 8006144:	4641      	mov	r1, r8
 8006146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800614a:	4641      	mov	r1, r8
 800614c:	00ca      	lsls	r2, r1, #3
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	4603      	mov	r3, r0
 8006154:	4622      	mov	r2, r4
 8006156:	189b      	adds	r3, r3, r2
 8006158:	633b      	str	r3, [r7, #48]	; 0x30
 800615a:	462b      	mov	r3, r5
 800615c:	460a      	mov	r2, r1
 800615e:	eb42 0303 	adc.w	r3, r2, r3
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006170:	4629      	mov	r1, r5
 8006172:	024b      	lsls	r3, r1, #9
 8006174:	4621      	mov	r1, r4
 8006176:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800617a:	4621      	mov	r1, r4
 800617c:	024a      	lsls	r2, r1, #9
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006186:	2200      	movs	r2, #0
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006190:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006194:	f7fa fd44 	bl	8000c20 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a2:	e067      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a4:	4b75      	ldr	r3, [pc, #468]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	099b      	lsrs	r3, r3, #6
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80061b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80061be:	2300      	movs	r3, #0
 80061c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80061c6:	4622      	mov	r2, r4
 80061c8:	462b      	mov	r3, r5
 80061ca:	f04f 0000 	mov.w	r0, #0
 80061ce:	f04f 0100 	mov.w	r1, #0
 80061d2:	0159      	lsls	r1, r3, #5
 80061d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d8:	0150      	lsls	r0, r2, #5
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4621      	mov	r1, r4
 80061e0:	1a51      	subs	r1, r2, r1
 80061e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80061e4:	4629      	mov	r1, r5
 80061e6:	eb63 0301 	sbc.w	r3, r3, r1
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80061f8:	4649      	mov	r1, r9
 80061fa:	018b      	lsls	r3, r1, #6
 80061fc:	4641      	mov	r1, r8
 80061fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006202:	4641      	mov	r1, r8
 8006204:	018a      	lsls	r2, r1, #6
 8006206:	4641      	mov	r1, r8
 8006208:	ebb2 0a01 	subs.w	sl, r2, r1
 800620c:	4649      	mov	r1, r9
 800620e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800621e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006226:	4692      	mov	sl, r2
 8006228:	469b      	mov	fp, r3
 800622a:	4623      	mov	r3, r4
 800622c:	eb1a 0303 	adds.w	r3, sl, r3
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	462b      	mov	r3, r5
 8006234:	eb4b 0303 	adc.w	r3, fp, r3
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006246:	4629      	mov	r1, r5
 8006248:	028b      	lsls	r3, r1, #10
 800624a:	4621      	mov	r1, r4
 800624c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006250:	4621      	mov	r1, r4
 8006252:	028a      	lsls	r2, r1, #10
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800625c:	2200      	movs	r2, #0
 800625e:	673b      	str	r3, [r7, #112]	; 0x70
 8006260:	677a      	str	r2, [r7, #116]	; 0x74
 8006262:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006266:	f7fa fcdb 	bl	8000c20 <__aeabi_uldivmod>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4613      	mov	r3, r2
 8006270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006274:	4b41      	ldr	r3, [pc, #260]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	3301      	adds	r3, #1
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800628a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006296:	e0eb      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006298:	4b38      	ldr	r3, [pc, #224]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062a4:	4b35      	ldr	r3, [pc, #212]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d06b      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062b0:	4b32      	ldr	r3, [pc, #200]	; (800637c <HAL_RCC_GetSysClockFreq+0x354>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	099b      	lsrs	r3, r3, #6
 80062b6:	2200      	movs	r2, #0
 80062b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c2:	663b      	str	r3, [r7, #96]	; 0x60
 80062c4:	2300      	movs	r3, #0
 80062c6:	667b      	str	r3, [r7, #100]	; 0x64
 80062c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80062cc:	4622      	mov	r2, r4
 80062ce:	462b      	mov	r3, r5
 80062d0:	f04f 0000 	mov.w	r0, #0
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	0159      	lsls	r1, r3, #5
 80062da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062de:	0150      	lsls	r0, r2, #5
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4621      	mov	r1, r4
 80062e6:	1a51      	subs	r1, r2, r1
 80062e8:	61b9      	str	r1, [r7, #24]
 80062ea:	4629      	mov	r1, r5
 80062ec:	eb63 0301 	sbc.w	r3, r3, r1
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80062fe:	4659      	mov	r1, fp
 8006300:	018b      	lsls	r3, r1, #6
 8006302:	4651      	mov	r1, sl
 8006304:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006308:	4651      	mov	r1, sl
 800630a:	018a      	lsls	r2, r1, #6
 800630c:	4651      	mov	r1, sl
 800630e:	ebb2 0801 	subs.w	r8, r2, r1
 8006312:	4659      	mov	r1, fp
 8006314:	eb63 0901 	sbc.w	r9, r3, r1
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006324:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006328:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632c:	4690      	mov	r8, r2
 800632e:	4699      	mov	r9, r3
 8006330:	4623      	mov	r3, r4
 8006332:	eb18 0303 	adds.w	r3, r8, r3
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	462b      	mov	r3, r5
 800633a:	eb49 0303 	adc.w	r3, r9, r3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800634c:	4629      	mov	r1, r5
 800634e:	024b      	lsls	r3, r1, #9
 8006350:	4621      	mov	r1, r4
 8006352:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006356:	4621      	mov	r1, r4
 8006358:	024a      	lsls	r2, r1, #9
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006362:	2200      	movs	r2, #0
 8006364:	65bb      	str	r3, [r7, #88]	; 0x58
 8006366:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006368:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800636c:	f7fa fc58 	bl	8000c20 <__aeabi_uldivmod>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4613      	mov	r3, r2
 8006376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800637a:	e065      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x420>
 800637c:	40023800 	.word	0x40023800
 8006380:	00f42400 	.word	0x00f42400
 8006384:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <HAL_RCC_GetSysClockFreq+0x458>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	099b      	lsrs	r3, r3, #6
 800638e:	2200      	movs	r2, #0
 8006390:	4618      	mov	r0, r3
 8006392:	4611      	mov	r1, r2
 8006394:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006398:	653b      	str	r3, [r7, #80]	; 0x50
 800639a:	2300      	movs	r3, #0
 800639c:	657b      	str	r3, [r7, #84]	; 0x54
 800639e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80063a2:	4642      	mov	r2, r8
 80063a4:	464b      	mov	r3, r9
 80063a6:	f04f 0000 	mov.w	r0, #0
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	0159      	lsls	r1, r3, #5
 80063b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063b4:	0150      	lsls	r0, r2, #5
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4641      	mov	r1, r8
 80063bc:	1a51      	subs	r1, r2, r1
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	4649      	mov	r1, r9
 80063c2:	eb63 0301 	sbc.w	r3, r3, r1
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80063d4:	4659      	mov	r1, fp
 80063d6:	018b      	lsls	r3, r1, #6
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063de:	4651      	mov	r1, sl
 80063e0:	018a      	lsls	r2, r1, #6
 80063e2:	4651      	mov	r1, sl
 80063e4:	1a54      	subs	r4, r2, r1
 80063e6:	4659      	mov	r1, fp
 80063e8:	eb63 0501 	sbc.w	r5, r3, r1
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	00eb      	lsls	r3, r5, #3
 80063f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063fa:	00e2      	lsls	r2, r4, #3
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	4643      	mov	r3, r8
 8006402:	18e3      	adds	r3, r4, r3
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	464b      	mov	r3, r9
 8006408:	eb45 0303 	adc.w	r3, r5, r3
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800641a:	4629      	mov	r1, r5
 800641c:	028b      	lsls	r3, r1, #10
 800641e:	4621      	mov	r1, r4
 8006420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006424:	4621      	mov	r1, r4
 8006426:	028a      	lsls	r2, r1, #10
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006430:	2200      	movs	r2, #0
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48
 8006434:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006436:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800643a:	f7fa fbf1 	bl	8000c20 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4613      	mov	r3, r2
 8006444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <HAL_RCC_GetSysClockFreq+0x458>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	0f1b      	lsrs	r3, r3, #28
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800645a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006466:	e003      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_RCC_GetSysClockFreq+0x45c>)
 800646a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800646e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006470:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006474:	4618      	mov	r0, r3
 8006476:	37b8      	adds	r7, #184	; 0xb8
 8006478:	46bd      	mov	sp, r7
 800647a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647e:	bf00      	nop
 8006480:	40023800 	.word	0x40023800
 8006484:	00f42400 	.word	0x00f42400

08006488 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e28d      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8083 	beq.w	80065ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064a8:	4b94      	ldr	r3, [pc, #592]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 030c 	and.w	r3, r3, #12
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d019      	beq.n	80064e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064b4:	4b91      	ldr	r3, [pc, #580]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d106      	bne.n	80064ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064c0:	4b8e      	ldr	r3, [pc, #568]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064cc:	d00c      	beq.n	80064e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ce:	4b8b      	ldr	r3, [pc, #556]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064d6:	2b0c      	cmp	r3, #12
 80064d8:	d112      	bne.n	8006500 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064da:	4b88      	ldr	r3, [pc, #544]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e6:	d10b      	bne.n	8006500 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e8:	4b84      	ldr	r3, [pc, #528]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05b      	beq.n	80065ac <HAL_RCC_OscConfig+0x124>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d157      	bne.n	80065ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e25a      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d106      	bne.n	8006518 <HAL_RCC_OscConfig+0x90>
 800650a:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a7b      	ldr	r2, [pc, #492]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	e01d      	b.n	8006554 <HAL_RCC_OscConfig+0xcc>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0xb4>
 8006522:	4b76      	ldr	r3, [pc, #472]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a75      	ldr	r2, [pc, #468]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4b73      	ldr	r3, [pc, #460]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a72      	ldr	r2, [pc, #456]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e00b      	b.n	8006554 <HAL_RCC_OscConfig+0xcc>
 800653c:	4b6f      	ldr	r3, [pc, #444]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a6e      	ldr	r2, [pc, #440]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4b6c      	ldr	r3, [pc, #432]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6b      	ldr	r2, [pc, #428]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800654e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d013      	beq.n	8006584 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fd f9b8 	bl	80038d0 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006564:	f7fd f9b4 	bl	80038d0 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b64      	cmp	r3, #100	; 0x64
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e21f      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b61      	ldr	r3, [pc, #388]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0f0      	beq.n	8006564 <HAL_RCC_OscConfig+0xdc>
 8006582:	e014      	b.n	80065ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fd f9a4 	bl	80038d0 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800658c:	f7fd f9a0 	bl	80038d0 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e20b      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659e:	4b57      	ldr	r3, [pc, #348]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x104>
 80065aa:	e000      	b.n	80065ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d06f      	beq.n	800669a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065ba:	4b50      	ldr	r3, [pc, #320]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d017      	beq.n	80065f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065c6:	4b4d      	ldr	r3, [pc, #308]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d105      	bne.n	80065de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065d2:	4b4a      	ldr	r3, [pc, #296]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065de:	4b47      	ldr	r3, [pc, #284]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065e6:	2b0c      	cmp	r3, #12
 80065e8:	d11c      	bne.n	8006624 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ea:	4b44      	ldr	r3, [pc, #272]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d116      	bne.n	8006624 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065f6:	4b41      	ldr	r3, [pc, #260]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_RCC_OscConfig+0x186>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d001      	beq.n	800660e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e1d3      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660e:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4937      	ldr	r1, [pc, #220]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800661e:	4313      	orrs	r3, r2
 8006620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006622:	e03a      	b.n	800669a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d020      	beq.n	800666e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800662c:	4b34      	ldr	r3, [pc, #208]	; (8006700 <HAL_RCC_OscConfig+0x278>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fd f94d 	bl	80038d0 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800663a:	f7fd f949 	bl	80038d0 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e1b4      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664c:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006658:	4b28      	ldr	r3, [pc, #160]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4925      	ldr	r1, [pc, #148]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]
 800666c:	e015      	b.n	800669a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <HAL_RCC_OscConfig+0x278>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fd f92c 	bl	80038d0 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800667c:	f7fd f928 	bl	80038d0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e193      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668e:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d036      	beq.n	8006714 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ae:	4b15      	ldr	r3, [pc, #84]	; (8006704 <HAL_RCC_OscConfig+0x27c>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fd f90c 	bl	80038d0 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066bc:	f7fd f908 	bl	80038d0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e173      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ce:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <HAL_RCC_OscConfig+0x274>)
 80066d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x234>
 80066da:	e01b      	b.n	8006714 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <HAL_RCC_OscConfig+0x27c>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7fd f8f5 	bl	80038d0 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e8:	e00e      	b.n	8006708 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ea:	f7fd f8f1 	bl	80038d0 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d907      	bls.n	8006708 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e15c      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
 80066fc:	40023800 	.word	0x40023800
 8006700:	42470000 	.word	0x42470000
 8006704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006708:	4b8a      	ldr	r3, [pc, #552]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800670a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1ea      	bne.n	80066ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8097 	beq.w	8006850 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006726:	4b83      	ldr	r3, [pc, #524]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006732:	2300      	movs	r3, #0
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	4b7f      	ldr	r3, [pc, #508]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	4a7e      	ldr	r2, [pc, #504]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800673c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006740:	6413      	str	r3, [r2, #64]	; 0x40
 8006742:	4b7c      	ldr	r3, [pc, #496]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800674e:	2301      	movs	r3, #1
 8006750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006752:	4b79      	ldr	r3, [pc, #484]	; (8006938 <HAL_RCC_OscConfig+0x4b0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675a:	2b00      	cmp	r3, #0
 800675c:	d118      	bne.n	8006790 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800675e:	4b76      	ldr	r3, [pc, #472]	; (8006938 <HAL_RCC_OscConfig+0x4b0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a75      	ldr	r2, [pc, #468]	; (8006938 <HAL_RCC_OscConfig+0x4b0>)
 8006764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800676a:	f7fd f8b1 	bl	80038d0 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006772:	f7fd f8ad 	bl	80038d0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e118      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006784:	4b6c      	ldr	r3, [pc, #432]	; (8006938 <HAL_RCC_OscConfig+0x4b0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d106      	bne.n	80067a6 <HAL_RCC_OscConfig+0x31e>
 8006798:	4b66      	ldr	r3, [pc, #408]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a65      	ldr	r2, [pc, #404]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
 80067a4:	e01c      	b.n	80067e0 <HAL_RCC_OscConfig+0x358>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCC_OscConfig+0x340>
 80067ae:	4b61      	ldr	r3, [pc, #388]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a60      	ldr	r2, [pc, #384]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067b4:	f043 0304 	orr.w	r3, r3, #4
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	4b5e      	ldr	r3, [pc, #376]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a5d      	ldr	r2, [pc, #372]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
 80067c6:	e00b      	b.n	80067e0 <HAL_RCC_OscConfig+0x358>
 80067c8:	4b5a      	ldr	r3, [pc, #360]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	4a59      	ldr	r2, [pc, #356]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	6713      	str	r3, [r2, #112]	; 0x70
 80067d4:	4b57      	ldr	r3, [pc, #348]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	4a56      	ldr	r2, [pc, #344]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80067da:	f023 0304 	bic.w	r3, r3, #4
 80067de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d015      	beq.n	8006814 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e8:	f7fd f872 	bl	80038d0 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f0:	f7fd f86e 	bl	80038d0 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e0d7      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006806:	4b4b      	ldr	r3, [pc, #300]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0ee      	beq.n	80067f0 <HAL_RCC_OscConfig+0x368>
 8006812:	e014      	b.n	800683e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006814:	f7fd f85c 	bl	80038d0 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800681a:	e00a      	b.n	8006832 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800681c:	f7fd f858 	bl	80038d0 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f241 3288 	movw	r2, #5000	; 0x1388
 800682a:	4293      	cmp	r3, r2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e0c1      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006832:	4b40      	ldr	r3, [pc, #256]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1ee      	bne.n	800681c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d105      	bne.n	8006850 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006844:	4b3b      	ldr	r3, [pc, #236]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	4a3a      	ldr	r2, [pc, #232]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800684a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800684e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80ad 	beq.w	80069b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800685a:	4b36      	ldr	r3, [pc, #216]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	2b08      	cmp	r3, #8
 8006864:	d060      	beq.n	8006928 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d145      	bne.n	80068fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686e:	4b33      	ldr	r3, [pc, #204]	; (800693c <HAL_RCC_OscConfig+0x4b4>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fd f82c 	bl	80038d0 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687c:	f7fd f828 	bl	80038d0 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e093      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688e:	4b29      	ldr	r3, [pc, #164]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	019b      	lsls	r3, r3, #6
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	3b01      	subs	r3, #1
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	071b      	lsls	r3, r3, #28
 80068c6:	491b      	ldr	r1, [pc, #108]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068cc:	4b1b      	ldr	r3, [pc, #108]	; (800693c <HAL_RCC_OscConfig+0x4b4>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d2:	f7fc fffd 	bl	80038d0 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068da:	f7fc fff9 	bl	80038d0 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e064      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x452>
 80068f8:	e05c      	b.n	80069b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <HAL_RCC_OscConfig+0x4b4>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006900:	f7fc ffe6 	bl	80038d0 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006908:	f7fc ffe2 	bl	80038d0 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e04d      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCC_OscConfig+0x4ac>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x480>
 8006926:	e045      	b.n	80069b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e040      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
 8006934:	40023800 	.word	0x40023800
 8006938:	40007000 	.word	0x40007000
 800693c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006940:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <HAL_RCC_OscConfig+0x538>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d030      	beq.n	80069b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006958:	429a      	cmp	r2, r3
 800695a:	d129      	bne.n	80069b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d122      	bne.n	80069b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006970:	4013      	ands	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006978:	4293      	cmp	r3, r2
 800697a:	d119      	bne.n	80069b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	3b01      	subs	r3, #1
 800698a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800698c:	429a      	cmp	r2, r3
 800698e:	d10f      	bne.n	80069b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d107      	bne.n	80069b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40023800 	.word	0x40023800

080069c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e07b      	b.n	8006ace <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d108      	bne.n	80069f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e6:	d009      	beq.n	80069fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	61da      	str	r2, [r3, #28]
 80069ee:	e005      	b.n	80069fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fc fc16 	bl	8003248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	ea42 0103 	orr.w	r1, r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0104 	and.w	r1, r3, #4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	f003 0210 	and.w	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69da      	ldr	r2, [r3, #28]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006abc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b088      	sub	sp, #32
 8006ada:	af02      	add	r7, sp, #8
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af2:	d112      	bne.n	8006b1a <HAL_SPI_Receive+0x44>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10e      	bne.n	8006b1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2204      	movs	r2, #4
 8006b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f8f1 	bl	8006cf8 <HAL_SPI_TransmitReceive>
 8006b16:	4603      	mov	r3, r0
 8006b18:	e0ea      	b.n	8006cf0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_SPI_Receive+0x52>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e0e3      	b.n	8006cf0 <HAL_SPI_Receive+0x21a>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b30:	f7fc fece 	bl	80038d0 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d002      	beq.n	8006b48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b42:	2302      	movs	r3, #2
 8006b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b46:	e0ca      	b.n	8006cde <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_SPI_Receive+0x7e>
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b58:	e0c1      	b.n	8006cde <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	88fa      	ldrh	r2, [r7, #6]
 8006b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba0:	d10f      	bne.n	8006bc2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d007      	beq.n	8006be0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d162      	bne.n	8006cae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006be8:	e02e      	b.n	8006c48 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d115      	bne.n	8006c24 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f103 020c 	add.w	r2, r3, #12
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c22:	e011      	b.n	8006c48 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c24:	f7fc fe54 	bl	80038d0 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d803      	bhi.n	8006c3c <HAL_SPI_Receive+0x166>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d102      	bne.n	8006c42 <HAL_SPI_Receive+0x16c>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c46:	e04a      	b.n	8006cde <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1cb      	bne.n	8006bea <HAL_SPI_Receive+0x114>
 8006c52:	e031      	b.n	8006cb8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d113      	bne.n	8006c8a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	b292      	uxth	r2, r2
 8006c6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	1c9a      	adds	r2, r3, #2
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c88:	e011      	b.n	8006cae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c8a:	f7fc fe21 	bl	80038d0 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d803      	bhi.n	8006ca2 <HAL_SPI_Receive+0x1cc>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d102      	bne.n	8006ca8 <HAL_SPI_Receive+0x1d2>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006cac:	e017      	b.n	8006cde <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1cd      	bne.n	8006c54 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fa45 	bl	800714c <SPI_EndRxTransaction>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
 8006cda:	e000      	b.n	8006cde <HAL_SPI_Receive+0x208>
  }

error :
 8006cdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	; 0x30
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d06:	2301      	movs	r3, #1
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_TransmitReceive+0x26>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e18a      	b.n	8007034 <HAL_SPI_TransmitReceive+0x33c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d26:	f7fc fdd3 	bl	80038d0 <HAL_GetTick>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d3c:	887b      	ldrh	r3, [r7, #2]
 8006d3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d00f      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0x70>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d4e:	d107      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x68>
 8006d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d003      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d66:	e15b      	b.n	8007020 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_SPI_TransmitReceive+0x82>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <HAL_SPI_TransmitReceive+0x82>
 8006d74:	887b      	ldrh	r3, [r7, #2]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d80:	e14e      	b.n	8007020 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d003      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2205      	movs	r2, #5
 8006d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	887a      	ldrh	r2, [r7, #2]
 8006da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	887a      	ldrh	r2, [r7, #2]
 8006dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	887a      	ldrh	r2, [r7, #2]
 8006db8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	887a      	ldrh	r2, [r7, #2]
 8006dbe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d007      	beq.n	8006dea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df2:	d178      	bne.n	8006ee6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x10a>
 8006dfc:	8b7b      	ldrh	r3, [r7, #26]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d166      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	1c9a      	adds	r2, r3, #2
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e26:	e053      	b.n	8006ed0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d11b      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x176>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d016      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x176>
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d113      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x1b8>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d014      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	b292      	uxth	r2, r2
 8006e92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	1c9a      	adds	r2, r3, #2
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eac:	2301      	movs	r3, #1
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eb0:	f7fc fd0e 	bl	80038d0 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d807      	bhi.n	8006ed0 <HAL_SPI_TransmitReceive+0x1d8>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d003      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ece:	e0a7      	b.n	8007020 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1a6      	bne.n	8006e28 <HAL_SPI_TransmitReceive+0x130>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1a1      	bne.n	8006e28 <HAL_SPI_TransmitReceive+0x130>
 8006ee4:	e07c      	b.n	8006fe0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_TransmitReceive+0x1fc>
 8006eee:	8b7b      	ldrh	r3, [r7, #26]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d16b      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f1a:	e057      	b.n	8006fcc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d11c      	bne.n	8006f64 <HAL_SPI_TransmitReceive+0x26c>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d017      	beq.n	8006f64 <HAL_SPI_TransmitReceive+0x26c>
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d114      	bne.n	8006f64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d119      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x2ae>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d014      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fa6:	f7fc fc93 	bl	80038d0 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d803      	bhi.n	8006fbe <HAL_SPI_TransmitReceive+0x2c6>
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d102      	bne.n	8006fc4 <HAL_SPI_TransmitReceive+0x2cc>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fca:	e029      	b.n	8007020 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1a2      	bne.n	8006f1c <HAL_SPI_TransmitReceive+0x224>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d19d      	bne.n	8006f1c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f917 	bl	8007218 <SPI_EndRxTxTransaction>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ffc:	e010      	b.n	8007020 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	e000      	b.n	8007020 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800701e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007034:	4618      	mov	r0, r3
 8007036:	3730      	adds	r7, #48	; 0x30
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800704c:	f7fc fc40 	bl	80038d0 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4413      	add	r3, r2
 800705a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800705c:	f7fc fc38 	bl	80038d0 <HAL_GetTick>
 8007060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007062:	4b39      	ldr	r3, [pc, #228]	; (8007148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	015b      	lsls	r3, r3, #5
 8007068:	0d1b      	lsrs	r3, r3, #20
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007072:	e054      	b.n	800711e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d050      	beq.n	800711e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800707c:	f7fc fc28 	bl	80038d0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	429a      	cmp	r2, r3
 800708a:	d902      	bls.n	8007092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d13d      	bne.n	800710e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070aa:	d111      	bne.n	80070d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b4:	d004      	beq.n	80070c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070be:	d107      	bne.n	80070d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d8:	d10f      	bne.n	80070fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e017      	b.n	800713e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3b01      	subs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4013      	ands	r3, r2
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	bf0c      	ite	eq
 800712e:	2301      	moveq	r3, #1
 8007130:	2300      	movne	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	429a      	cmp	r2, r3
 800713a:	d19b      	bne.n	8007074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	2000001c 	.word	0x2000001c

0800714c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007160:	d111      	bne.n	8007186 <SPI_EndRxTransaction+0x3a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716a:	d004      	beq.n	8007176 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007174:	d107      	bne.n	8007186 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800718e:	d12a      	bne.n	80071e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007198:	d012      	beq.n	80071c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff ff49 	bl	800703c <SPI_WaitFlagStateUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d02d      	beq.n	800720c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	f043 0220 	orr.w	r2, r3, #32
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e026      	b.n	800720e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2200      	movs	r2, #0
 80071c8:	2101      	movs	r1, #1
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff ff36 	bl	800703c <SPI_WaitFlagStateUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01a      	beq.n	800720c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f043 0220 	orr.w	r2, r3, #32
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e013      	b.n	800720e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2101      	movs	r1, #1
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff ff23 	bl	800703c <SPI_WaitFlagStateUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e000      	b.n	800720e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <SPI_EndRxTxTransaction+0x7c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <SPI_EndRxTxTransaction+0x80>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	0d5b      	lsrs	r3, r3, #21
 8007230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007234:	fb02 f303 	mul.w	r3, r2, r3
 8007238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007242:	d112      	bne.n	800726a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2200      	movs	r2, #0
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff fef4 	bl	800703c <SPI_WaitFlagStateUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f043 0220 	orr.w	r2, r3, #32
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e00f      	b.n	800728a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3b01      	subs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d0f2      	beq.n	800726a <SPI_EndRxTxTransaction+0x52>
 8007284:	e000      	b.n	8007288 <SPI_EndRxTxTransaction+0x70>
        break;
 8007286:	bf00      	nop
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	2000001c 	.word	0x2000001c
 8007298:	165e9f81 	.word	0x165e9f81

0800729c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e041      	b.n	8007332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fc f828 	bl	8003318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f000 f95e 	bl	800759c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d001      	beq.n	8007354 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e046      	b.n	80073e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <HAL_TIM_Base_Start+0xb4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d022      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736e:	d01d      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <HAL_TIM_Base_Start+0xb8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d018      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <HAL_TIM_Base_Start+0xbc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d013      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <HAL_TIM_Base_Start+0xc0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00e      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <HAL_TIM_Base_Start+0xc4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d009      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <HAL_TIM_Base_Start+0xc8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_Base_Start+0x70>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a18      	ldr	r2, [pc, #96]	; (8007408 <HAL_TIM_Base_Start+0xcc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d111      	bne.n	80073d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d010      	beq.n	80073e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0201 	orr.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ce:	e007      	b.n	80073e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40010400 	.word	0x40010400
 8007404:	40014000 	.word	0x40014000
 8007408:	40001800 	.word	0x40001800

0800740c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_TIM_ConfigClockSource+0x1c>
 8007424:	2302      	movs	r3, #2
 8007426:	e0b4      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x186>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800744e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007460:	d03e      	beq.n	80074e0 <HAL_TIM_ConfigClockSource+0xd4>
 8007462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007466:	f200 8087 	bhi.w	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 800746a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746e:	f000 8086 	beq.w	800757e <HAL_TIM_ConfigClockSource+0x172>
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007476:	d87f      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 8007478:	2b70      	cmp	r3, #112	; 0x70
 800747a:	d01a      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0xa6>
 800747c:	2b70      	cmp	r3, #112	; 0x70
 800747e:	d87b      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 8007480:	2b60      	cmp	r3, #96	; 0x60
 8007482:	d050      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x11a>
 8007484:	2b60      	cmp	r3, #96	; 0x60
 8007486:	d877      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 8007488:	2b50      	cmp	r3, #80	; 0x50
 800748a:	d03c      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0xfa>
 800748c:	2b50      	cmp	r3, #80	; 0x50
 800748e:	d873      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d058      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x13a>
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d86f      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 8007498:	2b30      	cmp	r3, #48	; 0x30
 800749a:	d064      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x15a>
 800749c:	2b30      	cmp	r3, #48	; 0x30
 800749e:	d86b      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d060      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x15a>
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d867      	bhi.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d05c      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x15a>
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d05a      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x15a>
 80074b0:	e062      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6899      	ldr	r1, [r3, #8]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f000 f985 	bl	80077d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	609a      	str	r2, [r3, #8]
      break;
 80074de:	e04f      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6899      	ldr	r1, [r3, #8]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f000 f96e 	bl	80077d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007502:	609a      	str	r2, [r3, #8]
      break;
 8007504:	e03c      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6859      	ldr	r1, [r3, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	461a      	mov	r2, r3
 8007514:	f000 f8e2 	bl	80076dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2150      	movs	r1, #80	; 0x50
 800751e:	4618      	mov	r0, r3
 8007520:	f000 f93b 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 8007524:	e02c      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6859      	ldr	r1, [r3, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	461a      	mov	r2, r3
 8007534:	f000 f901 	bl	800773a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2160      	movs	r1, #96	; 0x60
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f92b 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 8007544:	e01c      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	461a      	mov	r2, r3
 8007554:	f000 f8c2 	bl	80076dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2140      	movs	r1, #64	; 0x40
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f91b 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 8007564:	e00c      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f000 f912 	bl	800779a <TIM_ITRx_SetConfig>
      break;
 8007576:	e003      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
      break;
 800757c:	e000      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800757e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a40      	ldr	r2, [pc, #256]	; (80076b0 <TIM_Base_SetConfig+0x114>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d013      	beq.n	80075dc <TIM_Base_SetConfig+0x40>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ba:	d00f      	beq.n	80075dc <TIM_Base_SetConfig+0x40>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a3d      	ldr	r2, [pc, #244]	; (80076b4 <TIM_Base_SetConfig+0x118>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00b      	beq.n	80075dc <TIM_Base_SetConfig+0x40>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a3c      	ldr	r2, [pc, #240]	; (80076b8 <TIM_Base_SetConfig+0x11c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d007      	beq.n	80075dc <TIM_Base_SetConfig+0x40>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a3b      	ldr	r2, [pc, #236]	; (80076bc <TIM_Base_SetConfig+0x120>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_Base_SetConfig+0x40>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a3a      	ldr	r2, [pc, #232]	; (80076c0 <TIM_Base_SetConfig+0x124>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d108      	bne.n	80075ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a2f      	ldr	r2, [pc, #188]	; (80076b0 <TIM_Base_SetConfig+0x114>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d02b      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fc:	d027      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a2c      	ldr	r2, [pc, #176]	; (80076b4 <TIM_Base_SetConfig+0x118>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d023      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <TIM_Base_SetConfig+0x11c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01f      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <TIM_Base_SetConfig+0x120>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01b      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <TIM_Base_SetConfig+0x124>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d017      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <TIM_Base_SetConfig+0x128>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <TIM_Base_SetConfig+0x12c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00f      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a26      	ldr	r2, [pc, #152]	; (80076cc <TIM_Base_SetConfig+0x130>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00b      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a25      	ldr	r2, [pc, #148]	; (80076d0 <TIM_Base_SetConfig+0x134>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d007      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a24      	ldr	r2, [pc, #144]	; (80076d4 <TIM_Base_SetConfig+0x138>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d003      	beq.n	800764e <TIM_Base_SetConfig+0xb2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a23      	ldr	r2, [pc, #140]	; (80076d8 <TIM_Base_SetConfig+0x13c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d108      	bne.n	8007660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <TIM_Base_SetConfig+0x114>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0xf8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d103      	bne.n	800769c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	615a      	str	r2, [r3, #20]
}
 80076a2:	bf00      	nop
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40014400 	.word	0x40014400
 80076cc:	40014800 	.word	0x40014800
 80076d0:	40001800 	.word	0x40001800
 80076d4:	40001c00 	.word	0x40001c00
 80076d8:	40002000 	.word	0x40002000

080076dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f023 030a 	bic.w	r3, r3, #10
 8007718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800773a:	b480      	push	{r7}
 800773c:	b087      	sub	sp, #28
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f023 0210 	bic.w	r2, r3, #16
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	031b      	lsls	r3, r3, #12
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4313      	orrs	r3, r2
 8007780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	621a      	str	r2, [r3, #32]
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f043 0307 	orr.w	r3, r3, #7
 80077bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	609a      	str	r2, [r3, #8]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	021a      	lsls	r2, r3, #8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	609a      	str	r2, [r3, #8]
}
 8007804:	bf00      	nop
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007824:	2302      	movs	r3, #2
 8007826:	e05a      	b.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a21      	ldr	r2, [pc, #132]	; (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d022      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007874:	d01d      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1d      	ldr	r2, [pc, #116]	; (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d018      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00e      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a18      	ldr	r2, [pc, #96]	; (80078fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a17      	ldr	r2, [pc, #92]	; (8007900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a15      	ldr	r2, [pc, #84]	; (8007904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10c      	bne.n	80078cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40000400 	.word	0x40000400
 80078f4:	40000800 	.word	0x40000800
 80078f8:	40000c00 	.word	0x40000c00
 80078fc:	40010400 	.word	0x40010400
 8007900:	40014000 	.word	0x40014000
 8007904:	40001800 	.word	0x40001800

08007908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e03f      	b.n	800799a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fb fd14 	bl	800335c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	; 0x24
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800794a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f829 	bl	80079a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695a      	ldr	r2, [r3, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a8:	b0c0      	sub	sp, #256	; 0x100
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c0:	68d9      	ldr	r1, [r3, #12]
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	ea40 0301 	orr.w	r3, r0, r1
 80079cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	431a      	orrs	r2, r3
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079fc:	f021 010c 	bic.w	r1, r1, #12
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a1e:	6999      	ldr	r1, [r3, #24]
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	ea40 0301 	orr.w	r3, r0, r1
 8007a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b8f      	ldr	r3, [pc, #572]	; (8007c70 <UART_SetConfig+0x2cc>)
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d005      	beq.n	8007a44 <UART_SetConfig+0xa0>
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4b8d      	ldr	r3, [pc, #564]	; (8007c74 <UART_SetConfig+0x2d0>)
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d104      	bne.n	8007a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a44:	f7fe fadc 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 8007a48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a4c:	e003      	b.n	8007a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a4e:	f7fe fac3 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8007a52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a60:	f040 810c 	bne.w	8007c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a76:	4622      	mov	r2, r4
 8007a78:	462b      	mov	r3, r5
 8007a7a:	1891      	adds	r1, r2, r2
 8007a7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a7e:	415b      	adcs	r3, r3
 8007a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a86:	4621      	mov	r1, r4
 8007a88:	eb12 0801 	adds.w	r8, r2, r1
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	eb43 0901 	adc.w	r9, r3, r1
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aa6:	4690      	mov	r8, r2
 8007aa8:	4699      	mov	r9, r3
 8007aaa:	4623      	mov	r3, r4
 8007aac:	eb18 0303 	adds.w	r3, r8, r3
 8007ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ab4:	462b      	mov	r3, r5
 8007ab6:	eb49 0303 	adc.w	r3, r9, r3
 8007aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	18db      	adds	r3, r3, r3
 8007ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad8:	4613      	mov	r3, r2
 8007ada:	eb42 0303 	adc.w	r3, r2, r3
 8007ade:	657b      	str	r3, [r7, #84]	; 0x54
 8007ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ae8:	f7f9 f89a 	bl	8000c20 <__aeabi_uldivmod>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4b61      	ldr	r3, [pc, #388]	; (8007c78 <UART_SetConfig+0x2d4>)
 8007af2:	fba3 2302 	umull	r2, r3, r3, r2
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	011c      	lsls	r4, r3, #4
 8007afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	1891      	adds	r1, r2, r2
 8007b12:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b14:	415b      	adcs	r3, r3
 8007b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8007b22:	4649      	mov	r1, r9
 8007b24:	eb43 0b01 	adc.w	fp, r3, r1
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b3c:	4692      	mov	sl, r2
 8007b3e:	469b      	mov	fp, r3
 8007b40:	4643      	mov	r3, r8
 8007b42:	eb1a 0303 	adds.w	r3, sl, r3
 8007b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8007b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	18db      	adds	r3, r3, r3
 8007b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b6e:	4613      	mov	r3, r2
 8007b70:	eb42 0303 	adc.w	r3, r2, r3
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
 8007b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b7e:	f7f9 f84f 	bl	8000c20 <__aeabi_uldivmod>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <UART_SetConfig+0x2d4>)
 8007b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	2264      	movs	r2, #100	; 0x64
 8007b92:	fb02 f303 	mul.w	r3, r2, r3
 8007b96:	1acb      	subs	r3, r1, r3
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b9e:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <UART_SetConfig+0x2d4>)
 8007ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bac:	441c      	add	r4, r3
 8007bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	1891      	adds	r1, r2, r2
 8007bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bc8:	415b      	adcs	r3, r3
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	1851      	adds	r1, r2, r1
 8007bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	414b      	adcs	r3, r1
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007be8:	4659      	mov	r1, fp
 8007bea:	00cb      	lsls	r3, r1, #3
 8007bec:	4651      	mov	r1, sl
 8007bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bf2:	4651      	mov	r1, sl
 8007bf4:	00ca      	lsls	r2, r1, #3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c04:	464b      	mov	r3, r9
 8007c06:	460a      	mov	r2, r1
 8007c08:	eb42 0303 	adc.w	r3, r2, r3
 8007c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c24:	460b      	mov	r3, r1
 8007c26:	18db      	adds	r3, r3, r3
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	eb42 0303 	adc.w	r3, r2, r3
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c3a:	f7f8 fff1 	bl	8000c20 <__aeabi_uldivmod>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4b0d      	ldr	r3, [pc, #52]	; (8007c78 <UART_SetConfig+0x2d4>)
 8007c44:	fba3 1302 	umull	r1, r3, r3, r2
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	2164      	movs	r1, #100	; 0x64
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	3332      	adds	r3, #50	; 0x32
 8007c56:	4a08      	ldr	r2, [pc, #32]	; (8007c78 <UART_SetConfig+0x2d4>)
 8007c58:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	f003 0207 	and.w	r2, r3, #7
 8007c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4422      	add	r2, r4
 8007c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c6c:	e105      	b.n	8007e7a <UART_SetConfig+0x4d6>
 8007c6e:	bf00      	nop
 8007c70:	40011000 	.word	0x40011000
 8007c74:	40011400 	.word	0x40011400
 8007c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c8e:	4642      	mov	r2, r8
 8007c90:	464b      	mov	r3, r9
 8007c92:	1891      	adds	r1, r2, r2
 8007c94:	6239      	str	r1, [r7, #32]
 8007c96:	415b      	adcs	r3, r3
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	1854      	adds	r4, r2, r1
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	eb43 0501 	adc.w	r5, r3, r1
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	00eb      	lsls	r3, r5, #3
 8007cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cb6:	00e2      	lsls	r2, r4, #3
 8007cb8:	4614      	mov	r4, r2
 8007cba:	461d      	mov	r5, r3
 8007cbc:	4643      	mov	r3, r8
 8007cbe:	18e3      	adds	r3, r4, r3
 8007cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	eb45 0303 	adc.w	r3, r5, r3
 8007cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007cea:	4629      	mov	r1, r5
 8007cec:	008b      	lsls	r3, r1, #2
 8007cee:	4621      	mov	r1, r4
 8007cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	008a      	lsls	r2, r1, #2
 8007cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007cfc:	f7f8 ff90 	bl	8000c20 <__aeabi_uldivmod>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4b60      	ldr	r3, [pc, #384]	; (8007e88 <UART_SetConfig+0x4e4>)
 8007d06:	fba3 2302 	umull	r2, r3, r3, r2
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	011c      	lsls	r4, r3, #4
 8007d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	1891      	adds	r1, r2, r2
 8007d26:	61b9      	str	r1, [r7, #24]
 8007d28:	415b      	adcs	r3, r3
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d30:	4641      	mov	r1, r8
 8007d32:	1851      	adds	r1, r2, r1
 8007d34:	6139      	str	r1, [r7, #16]
 8007d36:	4649      	mov	r1, r9
 8007d38:	414b      	adcs	r3, r1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d48:	4659      	mov	r1, fp
 8007d4a:	00cb      	lsls	r3, r1, #3
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d52:	4651      	mov	r1, sl
 8007d54:	00ca      	lsls	r2, r1, #3
 8007d56:	4610      	mov	r0, r2
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	189b      	adds	r3, r3, r2
 8007d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d64:	464b      	mov	r3, r9
 8007d66:	460a      	mov	r2, r1
 8007d68:	eb42 0303 	adc.w	r3, r2, r3
 8007d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d88:	4649      	mov	r1, r9
 8007d8a:	008b      	lsls	r3, r1, #2
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d92:	4641      	mov	r1, r8
 8007d94:	008a      	lsls	r2, r1, #2
 8007d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d9a:	f7f8 ff41 	bl	8000c20 <__aeabi_uldivmod>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <UART_SetConfig+0x4e4>)
 8007da4:	fba3 1302 	umull	r1, r3, r3, r2
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	2164      	movs	r1, #100	; 0x64
 8007dac:	fb01 f303 	mul.w	r3, r1, r3
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	3332      	adds	r3, #50	; 0x32
 8007db6:	4a34      	ldr	r2, [pc, #208]	; (8007e88 <UART_SetConfig+0x4e4>)
 8007db8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dc2:	441c      	add	r4, r3
 8007dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc8:	2200      	movs	r2, #0
 8007dca:	673b      	str	r3, [r7, #112]	; 0x70
 8007dcc:	677a      	str	r2, [r7, #116]	; 0x74
 8007dce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	1891      	adds	r1, r2, r2
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	415b      	adcs	r3, r3
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007de2:	4641      	mov	r1, r8
 8007de4:	1851      	adds	r1, r2, r1
 8007de6:	6039      	str	r1, [r7, #0]
 8007de8:	4649      	mov	r1, r9
 8007dea:	414b      	adcs	r3, r1
 8007dec:	607b      	str	r3, [r7, #4]
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	00cb      	lsls	r3, r1, #3
 8007dfe:	4651      	mov	r1, sl
 8007e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e04:	4651      	mov	r1, sl
 8007e06:	00ca      	lsls	r2, r1, #3
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	4642      	mov	r2, r8
 8007e10:	189b      	adds	r3, r3, r2
 8007e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e14:	464b      	mov	r3, r9
 8007e16:	460a      	mov	r2, r1
 8007e18:	eb42 0303 	adc.w	r3, r2, r3
 8007e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	663b      	str	r3, [r7, #96]	; 0x60
 8007e28:	667a      	str	r2, [r7, #100]	; 0x64
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e36:	4649      	mov	r1, r9
 8007e38:	008b      	lsls	r3, r1, #2
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e40:	4641      	mov	r1, r8
 8007e42:	008a      	lsls	r2, r1, #2
 8007e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e48:	f7f8 feea 	bl	8000c20 <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <UART_SetConfig+0x4e4>)
 8007e52:	fba3 1302 	umull	r1, r3, r3, r2
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	2164      	movs	r1, #100	; 0x64
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	3332      	adds	r3, #50	; 0x32
 8007e64:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <UART_SetConfig+0x4e4>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4422      	add	r2, r4
 8007e78:	609a      	str	r2, [r3, #8]
}
 8007e7a:	bf00      	nop
 8007e7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e80:	46bd      	mov	sp, r7
 8007e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e86:	bf00      	nop
 8007e88:	51eb851f 	.word	0x51eb851f

08007e8c <atoi>:
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f000 b8b4 	b.w	8007ffc <strtol>

08007e94 <__errno>:
 8007e94:	4b01      	ldr	r3, [pc, #4]	; (8007e9c <__errno+0x8>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	20000028 	.word	0x20000028

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f000 ffc6 	bl	8008e44 <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	08008fc8 	.word	0x08008fc8
 8007edc:	08008fc8 	.word	0x08008fc8
 8007ee0:	08008fc8 	.word	0x08008fc8
 8007ee4:	08008fcc 	.word	0x08008fcc

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <_strtol_l.constprop.0>:
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efe:	d001      	beq.n	8007f04 <_strtol_l.constprop.0+0xc>
 8007f00:	2b24      	cmp	r3, #36	; 0x24
 8007f02:	d906      	bls.n	8007f12 <_strtol_l.constprop.0+0x1a>
 8007f04:	f7ff ffc6 	bl	8007e94 <__errno>
 8007f08:	2316      	movs	r3, #22
 8007f0a:	6003      	str	r3, [r0, #0]
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007ff8 <_strtol_l.constprop.0+0x100>
 8007f16:	460d      	mov	r5, r1
 8007f18:	462e      	mov	r6, r5
 8007f1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f22:	f017 0708 	ands.w	r7, r7, #8
 8007f26:	d1f7      	bne.n	8007f18 <_strtol_l.constprop.0+0x20>
 8007f28:	2c2d      	cmp	r4, #45	; 0x2d
 8007f2a:	d132      	bne.n	8007f92 <_strtol_l.constprop.0+0x9a>
 8007f2c:	782c      	ldrb	r4, [r5, #0]
 8007f2e:	2701      	movs	r7, #1
 8007f30:	1cb5      	adds	r5, r6, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d05b      	beq.n	8007fee <_strtol_l.constprop.0+0xf6>
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d109      	bne.n	8007f4e <_strtol_l.constprop.0+0x56>
 8007f3a:	2c30      	cmp	r4, #48	; 0x30
 8007f3c:	d107      	bne.n	8007f4e <_strtol_l.constprop.0+0x56>
 8007f3e:	782c      	ldrb	r4, [r5, #0]
 8007f40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f44:	2c58      	cmp	r4, #88	; 0x58
 8007f46:	d14d      	bne.n	8007fe4 <_strtol_l.constprop.0+0xec>
 8007f48:	786c      	ldrb	r4, [r5, #1]
 8007f4a:	2310      	movs	r3, #16
 8007f4c:	3502      	adds	r5, #2
 8007f4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f56:	f04f 0c00 	mov.w	ip, #0
 8007f5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f5e:	4666      	mov	r6, ip
 8007f60:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f68:	f1be 0f09 	cmp.w	lr, #9
 8007f6c:	d816      	bhi.n	8007f9c <_strtol_l.constprop.0+0xa4>
 8007f6e:	4674      	mov	r4, lr
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	dd24      	ble.n	8007fbe <_strtol_l.constprop.0+0xc6>
 8007f74:	f1bc 0f00 	cmp.w	ip, #0
 8007f78:	db1e      	blt.n	8007fb8 <_strtol_l.constprop.0+0xc0>
 8007f7a:	45b1      	cmp	r9, r6
 8007f7c:	d31c      	bcc.n	8007fb8 <_strtol_l.constprop.0+0xc0>
 8007f7e:	d101      	bne.n	8007f84 <_strtol_l.constprop.0+0x8c>
 8007f80:	45a2      	cmp	sl, r4
 8007f82:	db19      	blt.n	8007fb8 <_strtol_l.constprop.0+0xc0>
 8007f84:	fb06 4603 	mla	r6, r6, r3, r4
 8007f88:	f04f 0c01 	mov.w	ip, #1
 8007f8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f90:	e7e8      	b.n	8007f64 <_strtol_l.constprop.0+0x6c>
 8007f92:	2c2b      	cmp	r4, #43	; 0x2b
 8007f94:	bf04      	itt	eq
 8007f96:	782c      	ldrbeq	r4, [r5, #0]
 8007f98:	1cb5      	addeq	r5, r6, #2
 8007f9a:	e7ca      	b.n	8007f32 <_strtol_l.constprop.0+0x3a>
 8007f9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fa0:	f1be 0f19 	cmp.w	lr, #25
 8007fa4:	d801      	bhi.n	8007faa <_strtol_l.constprop.0+0xb2>
 8007fa6:	3c37      	subs	r4, #55	; 0x37
 8007fa8:	e7e2      	b.n	8007f70 <_strtol_l.constprop.0+0x78>
 8007faa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fae:	f1be 0f19 	cmp.w	lr, #25
 8007fb2:	d804      	bhi.n	8007fbe <_strtol_l.constprop.0+0xc6>
 8007fb4:	3c57      	subs	r4, #87	; 0x57
 8007fb6:	e7db      	b.n	8007f70 <_strtol_l.constprop.0+0x78>
 8007fb8:	f04f 3cff 	mov.w	ip, #4294967295
 8007fbc:	e7e6      	b.n	8007f8c <_strtol_l.constprop.0+0x94>
 8007fbe:	f1bc 0f00 	cmp.w	ip, #0
 8007fc2:	da05      	bge.n	8007fd0 <_strtol_l.constprop.0+0xd8>
 8007fc4:	2322      	movs	r3, #34	; 0x22
 8007fc6:	6003      	str	r3, [r0, #0]
 8007fc8:	4646      	mov	r6, r8
 8007fca:	b942      	cbnz	r2, 8007fde <_strtol_l.constprop.0+0xe6>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	e79e      	b.n	8007f0e <_strtol_l.constprop.0+0x16>
 8007fd0:	b107      	cbz	r7, 8007fd4 <_strtol_l.constprop.0+0xdc>
 8007fd2:	4276      	negs	r6, r6
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	d0f9      	beq.n	8007fcc <_strtol_l.constprop.0+0xd4>
 8007fd8:	f1bc 0f00 	cmp.w	ip, #0
 8007fdc:	d000      	beq.n	8007fe0 <_strtol_l.constprop.0+0xe8>
 8007fde:	1e69      	subs	r1, r5, #1
 8007fe0:	6011      	str	r1, [r2, #0]
 8007fe2:	e7f3      	b.n	8007fcc <_strtol_l.constprop.0+0xd4>
 8007fe4:	2430      	movs	r4, #48	; 0x30
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1b1      	bne.n	8007f4e <_strtol_l.constprop.0+0x56>
 8007fea:	2308      	movs	r3, #8
 8007fec:	e7af      	b.n	8007f4e <_strtol_l.constprop.0+0x56>
 8007fee:	2c30      	cmp	r4, #48	; 0x30
 8007ff0:	d0a5      	beq.n	8007f3e <_strtol_l.constprop.0+0x46>
 8007ff2:	230a      	movs	r3, #10
 8007ff4:	e7ab      	b.n	8007f4e <_strtol_l.constprop.0+0x56>
 8007ff6:	bf00      	nop
 8007ff8:	08008e8d 	.word	0x08008e8d

08007ffc <strtol>:
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	460a      	mov	r2, r1
 8008000:	4601      	mov	r1, r0
 8008002:	4802      	ldr	r0, [pc, #8]	; (800800c <strtol+0x10>)
 8008004:	6800      	ldr	r0, [r0, #0]
 8008006:	f7ff bf77 	b.w	8007ef8 <_strtol_l.constprop.0>
 800800a:	bf00      	nop
 800800c:	20000028 	.word	0x20000028

08008010 <pow>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	ed2d 8b02 	vpush	{d8}
 8008016:	eeb0 8a40 	vmov.f32	s16, s0
 800801a:	eef0 8a60 	vmov.f32	s17, s1
 800801e:	ec55 4b11 	vmov	r4, r5, d1
 8008022:	f000 f865 	bl	80080f0 <__ieee754_pow>
 8008026:	4622      	mov	r2, r4
 8008028:	462b      	mov	r3, r5
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	ec57 6b10 	vmov	r6, r7, d0
 8008032:	f7f8 fd47 	bl	8000ac4 <__aeabi_dcmpun>
 8008036:	2800      	cmp	r0, #0
 8008038:	d13b      	bne.n	80080b2 <pow+0xa2>
 800803a:	ec51 0b18 	vmov	r0, r1, d8
 800803e:	2200      	movs	r2, #0
 8008040:	2300      	movs	r3, #0
 8008042:	f7f8 fd0d 	bl	8000a60 <__aeabi_dcmpeq>
 8008046:	b1b8      	cbz	r0, 8008078 <pow+0x68>
 8008048:	2200      	movs	r2, #0
 800804a:	2300      	movs	r3, #0
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f7f8 fd06 	bl	8000a60 <__aeabi_dcmpeq>
 8008054:	2800      	cmp	r0, #0
 8008056:	d146      	bne.n	80080e6 <pow+0xd6>
 8008058:	ec45 4b10 	vmov	d0, r4, r5
 800805c:	f000 fe61 	bl	8008d22 <finite>
 8008060:	b338      	cbz	r0, 80080b2 <pow+0xa2>
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 fd03 	bl	8000a74 <__aeabi_dcmplt>
 800806e:	b300      	cbz	r0, 80080b2 <pow+0xa2>
 8008070:	f7ff ff10 	bl	8007e94 <__errno>
 8008074:	2322      	movs	r3, #34	; 0x22
 8008076:	e01b      	b.n	80080b0 <pow+0xa0>
 8008078:	ec47 6b10 	vmov	d0, r6, r7
 800807c:	f000 fe51 	bl	8008d22 <finite>
 8008080:	b9e0      	cbnz	r0, 80080bc <pow+0xac>
 8008082:	eeb0 0a48 	vmov.f32	s0, s16
 8008086:	eef0 0a68 	vmov.f32	s1, s17
 800808a:	f000 fe4a 	bl	8008d22 <finite>
 800808e:	b1a8      	cbz	r0, 80080bc <pow+0xac>
 8008090:	ec45 4b10 	vmov	d0, r4, r5
 8008094:	f000 fe45 	bl	8008d22 <finite>
 8008098:	b180      	cbz	r0, 80080bc <pow+0xac>
 800809a:	4632      	mov	r2, r6
 800809c:	463b      	mov	r3, r7
 800809e:	4630      	mov	r0, r6
 80080a0:	4639      	mov	r1, r7
 80080a2:	f7f8 fd0f 	bl	8000ac4 <__aeabi_dcmpun>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0e2      	beq.n	8008070 <pow+0x60>
 80080aa:	f7ff fef3 	bl	8007e94 <__errno>
 80080ae:	2321      	movs	r3, #33	; 0x21
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	ecbd 8b02 	vpop	{d8}
 80080b6:	ec47 6b10 	vmov	d0, r6, r7
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	2200      	movs	r2, #0
 80080be:	2300      	movs	r3, #0
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fccc 	bl	8000a60 <__aeabi_dcmpeq>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0f2      	beq.n	80080b2 <pow+0xa2>
 80080cc:	eeb0 0a48 	vmov.f32	s0, s16
 80080d0:	eef0 0a68 	vmov.f32	s1, s17
 80080d4:	f000 fe25 	bl	8008d22 <finite>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d0ea      	beq.n	80080b2 <pow+0xa2>
 80080dc:	ec45 4b10 	vmov	d0, r4, r5
 80080e0:	f000 fe1f 	bl	8008d22 <finite>
 80080e4:	e7c3      	b.n	800806e <pow+0x5e>
 80080e6:	4f01      	ldr	r7, [pc, #4]	; (80080ec <pow+0xdc>)
 80080e8:	2600      	movs	r6, #0
 80080ea:	e7e2      	b.n	80080b2 <pow+0xa2>
 80080ec:	3ff00000 	.word	0x3ff00000

080080f0 <__ieee754_pow>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	ed2d 8b06 	vpush	{d8-d10}
 80080f8:	b089      	sub	sp, #36	; 0x24
 80080fa:	ed8d 1b00 	vstr	d1, [sp]
 80080fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008102:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008106:	ea58 0102 	orrs.w	r1, r8, r2
 800810a:	ec57 6b10 	vmov	r6, r7, d0
 800810e:	d115      	bne.n	800813c <__ieee754_pow+0x4c>
 8008110:	19b3      	adds	r3, r6, r6
 8008112:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008116:	4152      	adcs	r2, r2
 8008118:	4299      	cmp	r1, r3
 800811a:	4b89      	ldr	r3, [pc, #548]	; (8008340 <__ieee754_pow+0x250>)
 800811c:	4193      	sbcs	r3, r2
 800811e:	f080 84d2 	bcs.w	8008ac6 <__ieee754_pow+0x9d6>
 8008122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008126:	4630      	mov	r0, r6
 8008128:	4639      	mov	r1, r7
 800812a:	f7f8 f87b 	bl	8000224 <__adddf3>
 800812e:	ec41 0b10 	vmov	d0, r0, r1
 8008132:	b009      	add	sp, #36	; 0x24
 8008134:	ecbd 8b06 	vpop	{d8-d10}
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	4b81      	ldr	r3, [pc, #516]	; (8008344 <__ieee754_pow+0x254>)
 800813e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008142:	429c      	cmp	r4, r3
 8008144:	ee10 aa10 	vmov	sl, s0
 8008148:	463d      	mov	r5, r7
 800814a:	dc06      	bgt.n	800815a <__ieee754_pow+0x6a>
 800814c:	d101      	bne.n	8008152 <__ieee754_pow+0x62>
 800814e:	2e00      	cmp	r6, #0
 8008150:	d1e7      	bne.n	8008122 <__ieee754_pow+0x32>
 8008152:	4598      	cmp	r8, r3
 8008154:	dc01      	bgt.n	800815a <__ieee754_pow+0x6a>
 8008156:	d10f      	bne.n	8008178 <__ieee754_pow+0x88>
 8008158:	b172      	cbz	r2, 8008178 <__ieee754_pow+0x88>
 800815a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800815e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008162:	ea55 050a 	orrs.w	r5, r5, sl
 8008166:	d1dc      	bne.n	8008122 <__ieee754_pow+0x32>
 8008168:	e9dd 3200 	ldrd	r3, r2, [sp]
 800816c:	18db      	adds	r3, r3, r3
 800816e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008172:	4152      	adcs	r2, r2
 8008174:	429d      	cmp	r5, r3
 8008176:	e7d0      	b.n	800811a <__ieee754_pow+0x2a>
 8008178:	2d00      	cmp	r5, #0
 800817a:	da3b      	bge.n	80081f4 <__ieee754_pow+0x104>
 800817c:	4b72      	ldr	r3, [pc, #456]	; (8008348 <__ieee754_pow+0x258>)
 800817e:	4598      	cmp	r8, r3
 8008180:	dc51      	bgt.n	8008226 <__ieee754_pow+0x136>
 8008182:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008186:	4598      	cmp	r8, r3
 8008188:	f340 84ac 	ble.w	8008ae4 <__ieee754_pow+0x9f4>
 800818c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008190:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008194:	2b14      	cmp	r3, #20
 8008196:	dd0f      	ble.n	80081b8 <__ieee754_pow+0xc8>
 8008198:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800819c:	fa22 f103 	lsr.w	r1, r2, r3
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	4293      	cmp	r3, r2
 80081a6:	f040 849d 	bne.w	8008ae4 <__ieee754_pow+0x9f4>
 80081aa:	f001 0101 	and.w	r1, r1, #1
 80081ae:	f1c1 0302 	rsb	r3, r1, #2
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	b182      	cbz	r2, 80081d8 <__ieee754_pow+0xe8>
 80081b6:	e05f      	b.n	8008278 <__ieee754_pow+0x188>
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	d15b      	bne.n	8008274 <__ieee754_pow+0x184>
 80081bc:	f1c3 0314 	rsb	r3, r3, #20
 80081c0:	fa48 f103 	asr.w	r1, r8, r3
 80081c4:	fa01 f303 	lsl.w	r3, r1, r3
 80081c8:	4543      	cmp	r3, r8
 80081ca:	f040 8488 	bne.w	8008ade <__ieee754_pow+0x9ee>
 80081ce:	f001 0101 	and.w	r1, r1, #1
 80081d2:	f1c1 0302 	rsb	r3, r1, #2
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	4b5c      	ldr	r3, [pc, #368]	; (800834c <__ieee754_pow+0x25c>)
 80081da:	4598      	cmp	r8, r3
 80081dc:	d132      	bne.n	8008244 <__ieee754_pow+0x154>
 80081de:	f1b9 0f00 	cmp.w	r9, #0
 80081e2:	f280 8478 	bge.w	8008ad6 <__ieee754_pow+0x9e6>
 80081e6:	4959      	ldr	r1, [pc, #356]	; (800834c <__ieee754_pow+0x25c>)
 80081e8:	4632      	mov	r2, r6
 80081ea:	463b      	mov	r3, r7
 80081ec:	2000      	movs	r0, #0
 80081ee:	f7f8 faf9 	bl	80007e4 <__aeabi_ddiv>
 80081f2:	e79c      	b.n	800812e <__ieee754_pow+0x3e>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d13d      	bne.n	8008278 <__ieee754_pow+0x188>
 80081fc:	4b51      	ldr	r3, [pc, #324]	; (8008344 <__ieee754_pow+0x254>)
 80081fe:	4598      	cmp	r8, r3
 8008200:	d1ea      	bne.n	80081d8 <__ieee754_pow+0xe8>
 8008202:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008206:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800820a:	ea53 030a 	orrs.w	r3, r3, sl
 800820e:	f000 845a 	beq.w	8008ac6 <__ieee754_pow+0x9d6>
 8008212:	4b4f      	ldr	r3, [pc, #316]	; (8008350 <__ieee754_pow+0x260>)
 8008214:	429c      	cmp	r4, r3
 8008216:	dd08      	ble.n	800822a <__ieee754_pow+0x13a>
 8008218:	f1b9 0f00 	cmp.w	r9, #0
 800821c:	f2c0 8457 	blt.w	8008ace <__ieee754_pow+0x9de>
 8008220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008224:	e783      	b.n	800812e <__ieee754_pow+0x3e>
 8008226:	2302      	movs	r3, #2
 8008228:	e7e5      	b.n	80081f6 <__ieee754_pow+0x106>
 800822a:	f1b9 0f00 	cmp.w	r9, #0
 800822e:	f04f 0000 	mov.w	r0, #0
 8008232:	f04f 0100 	mov.w	r1, #0
 8008236:	f6bf af7a 	bge.w	800812e <__ieee754_pow+0x3e>
 800823a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800823e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008242:	e774      	b.n	800812e <__ieee754_pow+0x3e>
 8008244:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008248:	d106      	bne.n	8008258 <__ieee754_pow+0x168>
 800824a:	4632      	mov	r2, r6
 800824c:	463b      	mov	r3, r7
 800824e:	4630      	mov	r0, r6
 8008250:	4639      	mov	r1, r7
 8008252:	f7f8 f99d 	bl	8000590 <__aeabi_dmul>
 8008256:	e76a      	b.n	800812e <__ieee754_pow+0x3e>
 8008258:	4b3e      	ldr	r3, [pc, #248]	; (8008354 <__ieee754_pow+0x264>)
 800825a:	4599      	cmp	r9, r3
 800825c:	d10c      	bne.n	8008278 <__ieee754_pow+0x188>
 800825e:	2d00      	cmp	r5, #0
 8008260:	db0a      	blt.n	8008278 <__ieee754_pow+0x188>
 8008262:	ec47 6b10 	vmov	d0, r6, r7
 8008266:	b009      	add	sp, #36	; 0x24
 8008268:	ecbd 8b06 	vpop	{d8-d10}
 800826c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	f000 bc6c 	b.w	8008b4c <__ieee754_sqrt>
 8008274:	2300      	movs	r3, #0
 8008276:	9304      	str	r3, [sp, #16]
 8008278:	ec47 6b10 	vmov	d0, r6, r7
 800827c:	f000 fd48 	bl	8008d10 <fabs>
 8008280:	ec51 0b10 	vmov	r0, r1, d0
 8008284:	f1ba 0f00 	cmp.w	sl, #0
 8008288:	d129      	bne.n	80082de <__ieee754_pow+0x1ee>
 800828a:	b124      	cbz	r4, 8008296 <__ieee754_pow+0x1a6>
 800828c:	4b2f      	ldr	r3, [pc, #188]	; (800834c <__ieee754_pow+0x25c>)
 800828e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008292:	429a      	cmp	r2, r3
 8008294:	d123      	bne.n	80082de <__ieee754_pow+0x1ee>
 8008296:	f1b9 0f00 	cmp.w	r9, #0
 800829a:	da05      	bge.n	80082a8 <__ieee754_pow+0x1b8>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	2000      	movs	r0, #0
 80082a2:	492a      	ldr	r1, [pc, #168]	; (800834c <__ieee754_pow+0x25c>)
 80082a4:	f7f8 fa9e 	bl	80007e4 <__aeabi_ddiv>
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	f6bf af40 	bge.w	800812e <__ieee754_pow+0x3e>
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80082b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80082b8:	4323      	orrs	r3, r4
 80082ba:	d108      	bne.n	80082ce <__ieee754_pow+0x1de>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4610      	mov	r0, r2
 80082c2:	4619      	mov	r1, r3
 80082c4:	f7f7 ffac 	bl	8000220 <__aeabi_dsub>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	e78f      	b.n	80081ee <__ieee754_pow+0xfe>
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	f47f af2c 	bne.w	800812e <__ieee754_pow+0x3e>
 80082d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082da:	4619      	mov	r1, r3
 80082dc:	e727      	b.n	800812e <__ieee754_pow+0x3e>
 80082de:	0feb      	lsrs	r3, r5, #31
 80082e0:	3b01      	subs	r3, #1
 80082e2:	9306      	str	r3, [sp, #24]
 80082e4:	9a06      	ldr	r2, [sp, #24]
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	d102      	bne.n	80082f2 <__ieee754_pow+0x202>
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	e7e6      	b.n	80082c0 <__ieee754_pow+0x1d0>
 80082f2:	4b19      	ldr	r3, [pc, #100]	; (8008358 <__ieee754_pow+0x268>)
 80082f4:	4598      	cmp	r8, r3
 80082f6:	f340 80fb 	ble.w	80084f0 <__ieee754_pow+0x400>
 80082fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80082fe:	4598      	cmp	r8, r3
 8008300:	4b13      	ldr	r3, [pc, #76]	; (8008350 <__ieee754_pow+0x260>)
 8008302:	dd0c      	ble.n	800831e <__ieee754_pow+0x22e>
 8008304:	429c      	cmp	r4, r3
 8008306:	dc0f      	bgt.n	8008328 <__ieee754_pow+0x238>
 8008308:	f1b9 0f00 	cmp.w	r9, #0
 800830c:	da0f      	bge.n	800832e <__ieee754_pow+0x23e>
 800830e:	2000      	movs	r0, #0
 8008310:	b009      	add	sp, #36	; 0x24
 8008312:	ecbd 8b06 	vpop	{d8-d10}
 8008316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f000 bcf0 	b.w	8008cfe <__math_oflow>
 800831e:	429c      	cmp	r4, r3
 8008320:	dbf2      	blt.n	8008308 <__ieee754_pow+0x218>
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <__ieee754_pow+0x25c>)
 8008324:	429c      	cmp	r4, r3
 8008326:	dd19      	ble.n	800835c <__ieee754_pow+0x26c>
 8008328:	f1b9 0f00 	cmp.w	r9, #0
 800832c:	dcef      	bgt.n	800830e <__ieee754_pow+0x21e>
 800832e:	2000      	movs	r0, #0
 8008330:	b009      	add	sp, #36	; 0x24
 8008332:	ecbd 8b06 	vpop	{d8-d10}
 8008336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	f000 bcd7 	b.w	8008cec <__math_uflow>
 800833e:	bf00      	nop
 8008340:	fff00000 	.word	0xfff00000
 8008344:	7ff00000 	.word	0x7ff00000
 8008348:	433fffff 	.word	0x433fffff
 800834c:	3ff00000 	.word	0x3ff00000
 8008350:	3fefffff 	.word	0x3fefffff
 8008354:	3fe00000 	.word	0x3fe00000
 8008358:	41e00000 	.word	0x41e00000
 800835c:	4b60      	ldr	r3, [pc, #384]	; (80084e0 <__ieee754_pow+0x3f0>)
 800835e:	2200      	movs	r2, #0
 8008360:	f7f7 ff5e 	bl	8000220 <__aeabi_dsub>
 8008364:	a354      	add	r3, pc, #336	; (adr r3, 80084b8 <__ieee754_pow+0x3c8>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	4604      	mov	r4, r0
 800836c:	460d      	mov	r5, r1
 800836e:	f7f8 f90f 	bl	8000590 <__aeabi_dmul>
 8008372:	a353      	add	r3, pc, #332	; (adr r3, 80084c0 <__ieee754_pow+0x3d0>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	4606      	mov	r6, r0
 800837a:	460f      	mov	r7, r1
 800837c:	4620      	mov	r0, r4
 800837e:	4629      	mov	r1, r5
 8008380:	f7f8 f906 	bl	8000590 <__aeabi_dmul>
 8008384:	4b57      	ldr	r3, [pc, #348]	; (80084e4 <__ieee754_pow+0x3f4>)
 8008386:	4682      	mov	sl, r0
 8008388:	468b      	mov	fp, r1
 800838a:	2200      	movs	r2, #0
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	f7f8 f8fe 	bl	8000590 <__aeabi_dmul>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	a14b      	add	r1, pc, #300	; (adr r1, 80084c8 <__ieee754_pow+0x3d8>)
 800839a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800839e:	f7f7 ff3f 	bl	8000220 <__aeabi_dsub>
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	f7f8 f8f3 	bl	8000590 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	2000      	movs	r0, #0
 80083b0:	494d      	ldr	r1, [pc, #308]	; (80084e8 <__ieee754_pow+0x3f8>)
 80083b2:	f7f7 ff35 	bl	8000220 <__aeabi_dsub>
 80083b6:	4622      	mov	r2, r4
 80083b8:	4680      	mov	r8, r0
 80083ba:	4689      	mov	r9, r1
 80083bc:	462b      	mov	r3, r5
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 f8e5 	bl	8000590 <__aeabi_dmul>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4640      	mov	r0, r8
 80083cc:	4649      	mov	r1, r9
 80083ce:	f7f8 f8df 	bl	8000590 <__aeabi_dmul>
 80083d2:	a33f      	add	r3, pc, #252	; (adr r3, 80084d0 <__ieee754_pow+0x3e0>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f8 f8da 	bl	8000590 <__aeabi_dmul>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4650      	mov	r0, sl
 80083e2:	4659      	mov	r1, fp
 80083e4:	f7f7 ff1c 	bl	8000220 <__aeabi_dsub>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4680      	mov	r8, r0
 80083ee:	4689      	mov	r9, r1
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f7 ff16 	bl	8000224 <__adddf3>
 80083f8:	2000      	movs	r0, #0
 80083fa:	4632      	mov	r2, r6
 80083fc:	463b      	mov	r3, r7
 80083fe:	4604      	mov	r4, r0
 8008400:	460d      	mov	r5, r1
 8008402:	f7f7 ff0d 	bl	8000220 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f7 ff07 	bl	8000220 <__aeabi_dsub>
 8008412:	9b04      	ldr	r3, [sp, #16]
 8008414:	9a06      	ldr	r2, [sp, #24]
 8008416:	3b01      	subs	r3, #1
 8008418:	4313      	orrs	r3, r2
 800841a:	4682      	mov	sl, r0
 800841c:	468b      	mov	fp, r1
 800841e:	f040 81e7 	bne.w	80087f0 <__ieee754_pow+0x700>
 8008422:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80084d8 <__ieee754_pow+0x3e8>
 8008426:	eeb0 8a47 	vmov.f32	s16, s14
 800842a:	eef0 8a67 	vmov.f32	s17, s15
 800842e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008432:	2600      	movs	r6, #0
 8008434:	4632      	mov	r2, r6
 8008436:	463b      	mov	r3, r7
 8008438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800843c:	f7f7 fef0 	bl	8000220 <__aeabi_dsub>
 8008440:	4622      	mov	r2, r4
 8008442:	462b      	mov	r3, r5
 8008444:	f7f8 f8a4 	bl	8000590 <__aeabi_dmul>
 8008448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844c:	4680      	mov	r8, r0
 800844e:	4689      	mov	r9, r1
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	f7f8 f89c 	bl	8000590 <__aeabi_dmul>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f7 fee0 	bl	8000224 <__adddf3>
 8008464:	4632      	mov	r2, r6
 8008466:	463b      	mov	r3, r7
 8008468:	4680      	mov	r8, r0
 800846a:	4689      	mov	r9, r1
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 f88e 	bl	8000590 <__aeabi_dmul>
 8008474:	460b      	mov	r3, r1
 8008476:	4604      	mov	r4, r0
 8008478:	460d      	mov	r5, r1
 800847a:	4602      	mov	r2, r0
 800847c:	4649      	mov	r1, r9
 800847e:	4640      	mov	r0, r8
 8008480:	f7f7 fed0 	bl	8000224 <__adddf3>
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <__ieee754_pow+0x3fc>)
 8008486:	4299      	cmp	r1, r3
 8008488:	ec45 4b19 	vmov	d9, r4, r5
 800848c:	4606      	mov	r6, r0
 800848e:	460f      	mov	r7, r1
 8008490:	468b      	mov	fp, r1
 8008492:	f340 82f1 	ble.w	8008a78 <__ieee754_pow+0x988>
 8008496:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800849a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800849e:	4303      	orrs	r3, r0
 80084a0:	f000 81e4 	beq.w	800886c <__ieee754_pow+0x77c>
 80084a4:	ec51 0b18 	vmov	r0, r1, d8
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	f7f8 fae2 	bl	8000a74 <__aeabi_dcmplt>
 80084b0:	3800      	subs	r0, #0
 80084b2:	bf18      	it	ne
 80084b4:	2001      	movne	r0, #1
 80084b6:	e72b      	b.n	8008310 <__ieee754_pow+0x220>
 80084b8:	60000000 	.word	0x60000000
 80084bc:	3ff71547 	.word	0x3ff71547
 80084c0:	f85ddf44 	.word	0xf85ddf44
 80084c4:	3e54ae0b 	.word	0x3e54ae0b
 80084c8:	55555555 	.word	0x55555555
 80084cc:	3fd55555 	.word	0x3fd55555
 80084d0:	652b82fe 	.word	0x652b82fe
 80084d4:	3ff71547 	.word	0x3ff71547
 80084d8:	00000000 	.word	0x00000000
 80084dc:	bff00000 	.word	0xbff00000
 80084e0:	3ff00000 	.word	0x3ff00000
 80084e4:	3fd00000 	.word	0x3fd00000
 80084e8:	3fe00000 	.word	0x3fe00000
 80084ec:	408fffff 	.word	0x408fffff
 80084f0:	4bd5      	ldr	r3, [pc, #852]	; (8008848 <__ieee754_pow+0x758>)
 80084f2:	402b      	ands	r3, r5
 80084f4:	2200      	movs	r2, #0
 80084f6:	b92b      	cbnz	r3, 8008504 <__ieee754_pow+0x414>
 80084f8:	4bd4      	ldr	r3, [pc, #848]	; (800884c <__ieee754_pow+0x75c>)
 80084fa:	f7f8 f849 	bl	8000590 <__aeabi_dmul>
 80084fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008502:	460c      	mov	r4, r1
 8008504:	1523      	asrs	r3, r4, #20
 8008506:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800850a:	4413      	add	r3, r2
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	4bd0      	ldr	r3, [pc, #832]	; (8008850 <__ieee754_pow+0x760>)
 8008510:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008514:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008518:	429c      	cmp	r4, r3
 800851a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800851e:	dd08      	ble.n	8008532 <__ieee754_pow+0x442>
 8008520:	4bcc      	ldr	r3, [pc, #816]	; (8008854 <__ieee754_pow+0x764>)
 8008522:	429c      	cmp	r4, r3
 8008524:	f340 8162 	ble.w	80087ec <__ieee754_pow+0x6fc>
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	3301      	adds	r3, #1
 800852c:	9305      	str	r3, [sp, #20]
 800852e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008532:	2400      	movs	r4, #0
 8008534:	00e3      	lsls	r3, r4, #3
 8008536:	9307      	str	r3, [sp, #28]
 8008538:	4bc7      	ldr	r3, [pc, #796]	; (8008858 <__ieee754_pow+0x768>)
 800853a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800853e:	ed93 7b00 	vldr	d7, [r3]
 8008542:	4629      	mov	r1, r5
 8008544:	ec53 2b17 	vmov	r2, r3, d7
 8008548:	eeb0 9a47 	vmov.f32	s18, s14
 800854c:	eef0 9a67 	vmov.f32	s19, s15
 8008550:	4682      	mov	sl, r0
 8008552:	f7f7 fe65 	bl	8000220 <__aeabi_dsub>
 8008556:	4652      	mov	r2, sl
 8008558:	4606      	mov	r6, r0
 800855a:	460f      	mov	r7, r1
 800855c:	462b      	mov	r3, r5
 800855e:	ec51 0b19 	vmov	r0, r1, d9
 8008562:	f7f7 fe5f 	bl	8000224 <__adddf3>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	2000      	movs	r0, #0
 800856c:	49bb      	ldr	r1, [pc, #748]	; (800885c <__ieee754_pow+0x76c>)
 800856e:	f7f8 f939 	bl	80007e4 <__aeabi_ddiv>
 8008572:	ec41 0b1a 	vmov	d10, r0, r1
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4630      	mov	r0, r6
 800857c:	4639      	mov	r1, r7
 800857e:	f7f8 f807 	bl	8000590 <__aeabi_dmul>
 8008582:	2300      	movs	r3, #0
 8008584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800858e:	46ab      	mov	fp, r5
 8008590:	106d      	asrs	r5, r5, #1
 8008592:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008596:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800859a:	ec41 0b18 	vmov	d8, r0, r1
 800859e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80085a2:	2200      	movs	r2, #0
 80085a4:	4640      	mov	r0, r8
 80085a6:	4649      	mov	r1, r9
 80085a8:	4614      	mov	r4, r2
 80085aa:	461d      	mov	r5, r3
 80085ac:	f7f7 fff0 	bl	8000590 <__aeabi_dmul>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4630      	mov	r0, r6
 80085b6:	4639      	mov	r1, r7
 80085b8:	f7f7 fe32 	bl	8000220 <__aeabi_dsub>
 80085bc:	ec53 2b19 	vmov	r2, r3, d9
 80085c0:	4606      	mov	r6, r0
 80085c2:	460f      	mov	r7, r1
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f7 fe2a 	bl	8000220 <__aeabi_dsub>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	f7f7 fe24 	bl	8000220 <__aeabi_dsub>
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	f7f7 ffd8 	bl	8000590 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f7 fe1a 	bl	8000220 <__aeabi_dsub>
 80085ec:	ec53 2b1a 	vmov	r2, r3, d10
 80085f0:	f7f7 ffce 	bl	8000590 <__aeabi_dmul>
 80085f4:	ec53 2b18 	vmov	r2, r3, d8
 80085f8:	ec41 0b19 	vmov	d9, r0, r1
 80085fc:	ec51 0b18 	vmov	r0, r1, d8
 8008600:	f7f7 ffc6 	bl	8000590 <__aeabi_dmul>
 8008604:	a37c      	add	r3, pc, #496	; (adr r3, 80087f8 <__ieee754_pow+0x708>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	4604      	mov	r4, r0
 800860c:	460d      	mov	r5, r1
 800860e:	f7f7 ffbf 	bl	8000590 <__aeabi_dmul>
 8008612:	a37b      	add	r3, pc, #492	; (adr r3, 8008800 <__ieee754_pow+0x710>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f7 fe04 	bl	8000224 <__adddf3>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f7 ffb6 	bl	8000590 <__aeabi_dmul>
 8008624:	a378      	add	r3, pc, #480	; (adr r3, 8008808 <__ieee754_pow+0x718>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fdfb 	bl	8000224 <__adddf3>
 800862e:	4622      	mov	r2, r4
 8008630:	462b      	mov	r3, r5
 8008632:	f7f7 ffad 	bl	8000590 <__aeabi_dmul>
 8008636:	a376      	add	r3, pc, #472	; (adr r3, 8008810 <__ieee754_pow+0x720>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 fdf2 	bl	8000224 <__adddf3>
 8008640:	4622      	mov	r2, r4
 8008642:	462b      	mov	r3, r5
 8008644:	f7f7 ffa4 	bl	8000590 <__aeabi_dmul>
 8008648:	a373      	add	r3, pc, #460	; (adr r3, 8008818 <__ieee754_pow+0x728>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 fde9 	bl	8000224 <__adddf3>
 8008652:	4622      	mov	r2, r4
 8008654:	462b      	mov	r3, r5
 8008656:	f7f7 ff9b 	bl	8000590 <__aeabi_dmul>
 800865a:	a371      	add	r3, pc, #452	; (adr r3, 8008820 <__ieee754_pow+0x730>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f7 fde0 	bl	8000224 <__adddf3>
 8008664:	4622      	mov	r2, r4
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	462b      	mov	r3, r5
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 ff8e 	bl	8000590 <__aeabi_dmul>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f7 ff88 	bl	8000590 <__aeabi_dmul>
 8008680:	4642      	mov	r2, r8
 8008682:	4604      	mov	r4, r0
 8008684:	460d      	mov	r5, r1
 8008686:	464b      	mov	r3, r9
 8008688:	ec51 0b18 	vmov	r0, r1, d8
 800868c:	f7f7 fdca 	bl	8000224 <__adddf3>
 8008690:	ec53 2b19 	vmov	r2, r3, d9
 8008694:	f7f7 ff7c 	bl	8000590 <__aeabi_dmul>
 8008698:	4622      	mov	r2, r4
 800869a:	462b      	mov	r3, r5
 800869c:	f7f7 fdc2 	bl	8000224 <__adddf3>
 80086a0:	4642      	mov	r2, r8
 80086a2:	4682      	mov	sl, r0
 80086a4:	468b      	mov	fp, r1
 80086a6:	464b      	mov	r3, r9
 80086a8:	4640      	mov	r0, r8
 80086aa:	4649      	mov	r1, r9
 80086ac:	f7f7 ff70 	bl	8000590 <__aeabi_dmul>
 80086b0:	4b6b      	ldr	r3, [pc, #428]	; (8008860 <__ieee754_pow+0x770>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	4606      	mov	r6, r0
 80086b6:	460f      	mov	r7, r1
 80086b8:	f7f7 fdb4 	bl	8000224 <__adddf3>
 80086bc:	4652      	mov	r2, sl
 80086be:	465b      	mov	r3, fp
 80086c0:	f7f7 fdb0 	bl	8000224 <__adddf3>
 80086c4:	2000      	movs	r0, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	460d      	mov	r5, r1
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f7 ff5d 	bl	8000590 <__aeabi_dmul>
 80086d6:	4b62      	ldr	r3, [pc, #392]	; (8008860 <__ieee754_pow+0x770>)
 80086d8:	4680      	mov	r8, r0
 80086da:	4689      	mov	r9, r1
 80086dc:	2200      	movs	r2, #0
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f7 fd9d 	bl	8000220 <__aeabi_dsub>
 80086e6:	4632      	mov	r2, r6
 80086e8:	463b      	mov	r3, r7
 80086ea:	f7f7 fd99 	bl	8000220 <__aeabi_dsub>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4650      	mov	r0, sl
 80086f4:	4659      	mov	r1, fp
 80086f6:	f7f7 fd93 	bl	8000220 <__aeabi_dsub>
 80086fa:	ec53 2b18 	vmov	r2, r3, d8
 80086fe:	f7f7 ff47 	bl	8000590 <__aeabi_dmul>
 8008702:	4622      	mov	r2, r4
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	462b      	mov	r3, r5
 800870a:	ec51 0b19 	vmov	r0, r1, d9
 800870e:	f7f7 ff3f 	bl	8000590 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f7 fd83 	bl	8000224 <__adddf3>
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f7 fd7b 	bl	8000224 <__adddf3>
 800872e:	a33e      	add	r3, pc, #248	; (adr r3, 8008828 <__ieee754_pow+0x738>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	2000      	movs	r0, #0
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	f7f7 ff29 	bl	8000590 <__aeabi_dmul>
 800873e:	4642      	mov	r2, r8
 8008740:	ec41 0b18 	vmov	d8, r0, r1
 8008744:	464b      	mov	r3, r9
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 fd69 	bl	8000220 <__aeabi_dsub>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f7 fd63 	bl	8000220 <__aeabi_dsub>
 800875a:	a335      	add	r3, pc, #212	; (adr r3, 8008830 <__ieee754_pow+0x740>)
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f7f7 ff16 	bl	8000590 <__aeabi_dmul>
 8008764:	a334      	add	r3, pc, #208	; (adr r3, 8008838 <__ieee754_pow+0x748>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	4606      	mov	r6, r0
 800876c:	460f      	mov	r7, r1
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f7 ff0d 	bl	8000590 <__aeabi_dmul>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f7 fd51 	bl	8000224 <__adddf3>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	4b37      	ldr	r3, [pc, #220]	; (8008864 <__ieee754_pow+0x774>)
 8008786:	4413      	add	r3, r2
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 fd4a 	bl	8000224 <__adddf3>
 8008790:	4682      	mov	sl, r0
 8008792:	9805      	ldr	r0, [sp, #20]
 8008794:	468b      	mov	fp, r1
 8008796:	f7f7 fe91 	bl	80004bc <__aeabi_i2d>
 800879a:	9a07      	ldr	r2, [sp, #28]
 800879c:	4b32      	ldr	r3, [pc, #200]	; (8008868 <__ieee754_pow+0x778>)
 800879e:	4413      	add	r3, r2
 80087a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	4652      	mov	r2, sl
 80087aa:	465b      	mov	r3, fp
 80087ac:	ec51 0b18 	vmov	r0, r1, d8
 80087b0:	f7f7 fd38 	bl	8000224 <__adddf3>
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	f7f7 fd34 	bl	8000224 <__adddf3>
 80087bc:	4632      	mov	r2, r6
 80087be:	463b      	mov	r3, r7
 80087c0:	f7f7 fd30 	bl	8000224 <__adddf3>
 80087c4:	2000      	movs	r0, #0
 80087c6:	4632      	mov	r2, r6
 80087c8:	463b      	mov	r3, r7
 80087ca:	4604      	mov	r4, r0
 80087cc:	460d      	mov	r5, r1
 80087ce:	f7f7 fd27 	bl	8000220 <__aeabi_dsub>
 80087d2:	4642      	mov	r2, r8
 80087d4:	464b      	mov	r3, r9
 80087d6:	f7f7 fd23 	bl	8000220 <__aeabi_dsub>
 80087da:	ec53 2b18 	vmov	r2, r3, d8
 80087de:	f7f7 fd1f 	bl	8000220 <__aeabi_dsub>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4650      	mov	r0, sl
 80087e8:	4659      	mov	r1, fp
 80087ea:	e610      	b.n	800840e <__ieee754_pow+0x31e>
 80087ec:	2401      	movs	r4, #1
 80087ee:	e6a1      	b.n	8008534 <__ieee754_pow+0x444>
 80087f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008840 <__ieee754_pow+0x750>
 80087f4:	e617      	b.n	8008426 <__ieee754_pow+0x336>
 80087f6:	bf00      	nop
 80087f8:	4a454eef 	.word	0x4a454eef
 80087fc:	3fca7e28 	.word	0x3fca7e28
 8008800:	93c9db65 	.word	0x93c9db65
 8008804:	3fcd864a 	.word	0x3fcd864a
 8008808:	a91d4101 	.word	0xa91d4101
 800880c:	3fd17460 	.word	0x3fd17460
 8008810:	518f264d 	.word	0x518f264d
 8008814:	3fd55555 	.word	0x3fd55555
 8008818:	db6fabff 	.word	0xdb6fabff
 800881c:	3fdb6db6 	.word	0x3fdb6db6
 8008820:	33333303 	.word	0x33333303
 8008824:	3fe33333 	.word	0x3fe33333
 8008828:	e0000000 	.word	0xe0000000
 800882c:	3feec709 	.word	0x3feec709
 8008830:	dc3a03fd 	.word	0xdc3a03fd
 8008834:	3feec709 	.word	0x3feec709
 8008838:	145b01f5 	.word	0x145b01f5
 800883c:	be3e2fe0 	.word	0xbe3e2fe0
 8008840:	00000000 	.word	0x00000000
 8008844:	3ff00000 	.word	0x3ff00000
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	43400000 	.word	0x43400000
 8008850:	0003988e 	.word	0x0003988e
 8008854:	000bb679 	.word	0x000bb679
 8008858:	08008f90 	.word	0x08008f90
 800885c:	3ff00000 	.word	0x3ff00000
 8008860:	40080000 	.word	0x40080000
 8008864:	08008fb0 	.word	0x08008fb0
 8008868:	08008fa0 	.word	0x08008fa0
 800886c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008b44 <__ieee754_pow+0xa54>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fcd5 	bl	8000224 <__adddf3>
 800887a:	4622      	mov	r2, r4
 800887c:	ec41 0b1a 	vmov	d10, r0, r1
 8008880:	462b      	mov	r3, r5
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f7 fccb 	bl	8000220 <__aeabi_dsub>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	ec51 0b1a 	vmov	r0, r1, d10
 8008892:	f7f8 f90d 	bl	8000ab0 <__aeabi_dcmpgt>
 8008896:	2800      	cmp	r0, #0
 8008898:	f47f ae04 	bne.w	80084a4 <__ieee754_pow+0x3b4>
 800889c:	4aa4      	ldr	r2, [pc, #656]	; (8008b30 <__ieee754_pow+0xa40>)
 800889e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088a2:	4293      	cmp	r3, r2
 80088a4:	f340 8108 	ble.w	8008ab8 <__ieee754_pow+0x9c8>
 80088a8:	151b      	asrs	r3, r3, #20
 80088aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80088ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80088b2:	fa4a f303 	asr.w	r3, sl, r3
 80088b6:	445b      	add	r3, fp
 80088b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80088bc:	4e9d      	ldr	r6, [pc, #628]	; (8008b34 <__ieee754_pow+0xa44>)
 80088be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80088c2:	4116      	asrs	r6, r2
 80088c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80088c8:	2000      	movs	r0, #0
 80088ca:	ea23 0106 	bic.w	r1, r3, r6
 80088ce:	f1c2 0214 	rsb	r2, r2, #20
 80088d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80088d6:	fa4a fa02 	asr.w	sl, sl, r2
 80088da:	f1bb 0f00 	cmp.w	fp, #0
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	bfb8      	it	lt
 80088e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80088ec:	f7f7 fc98 	bl	8000220 <__aeabi_dsub>
 80088f0:	ec41 0b19 	vmov	d9, r0, r1
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	ec51 0b19 	vmov	r0, r1, d9
 80088fc:	f7f7 fc92 	bl	8000224 <__adddf3>
 8008900:	a37b      	add	r3, pc, #492	; (adr r3, 8008af0 <__ieee754_pow+0xa00>)
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	2000      	movs	r0, #0
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	f7f7 fe40 	bl	8000590 <__aeabi_dmul>
 8008910:	ec53 2b19 	vmov	r2, r3, d9
 8008914:	4606      	mov	r6, r0
 8008916:	460f      	mov	r7, r1
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	f7f7 fc80 	bl	8000220 <__aeabi_dsub>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4640      	mov	r0, r8
 8008926:	4649      	mov	r1, r9
 8008928:	f7f7 fc7a 	bl	8000220 <__aeabi_dsub>
 800892c:	a372      	add	r3, pc, #456	; (adr r3, 8008af8 <__ieee754_pow+0xa08>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fe2d 	bl	8000590 <__aeabi_dmul>
 8008936:	a372      	add	r3, pc, #456	; (adr r3, 8008b00 <__ieee754_pow+0xa10>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	4680      	mov	r8, r0
 800893e:	4689      	mov	r9, r1
 8008940:	4620      	mov	r0, r4
 8008942:	4629      	mov	r1, r5
 8008944:	f7f7 fe24 	bl	8000590 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f7 fc68 	bl	8000224 <__adddf3>
 8008954:	4604      	mov	r4, r0
 8008956:	460d      	mov	r5, r1
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fc60 	bl	8000224 <__adddf3>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	4680      	mov	r8, r0
 800896a:	4689      	mov	r9, r1
 800896c:	f7f7 fc58 	bl	8000220 <__aeabi_dsub>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 fc52 	bl	8000220 <__aeabi_dsub>
 800897c:	4642      	mov	r2, r8
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	464b      	mov	r3, r9
 8008984:	4640      	mov	r0, r8
 8008986:	4649      	mov	r1, r9
 8008988:	f7f7 fe02 	bl	8000590 <__aeabi_dmul>
 800898c:	a35e      	add	r3, pc, #376	; (adr r3, 8008b08 <__ieee754_pow+0xa18>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	4604      	mov	r4, r0
 8008994:	460d      	mov	r5, r1
 8008996:	f7f7 fdfb 	bl	8000590 <__aeabi_dmul>
 800899a:	a35d      	add	r3, pc, #372	; (adr r3, 8008b10 <__ieee754_pow+0xa20>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fc3e 	bl	8000220 <__aeabi_dsub>
 80089a4:	4622      	mov	r2, r4
 80089a6:	462b      	mov	r3, r5
 80089a8:	f7f7 fdf2 	bl	8000590 <__aeabi_dmul>
 80089ac:	a35a      	add	r3, pc, #360	; (adr r3, 8008b18 <__ieee754_pow+0xa28>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 fc37 	bl	8000224 <__adddf3>
 80089b6:	4622      	mov	r2, r4
 80089b8:	462b      	mov	r3, r5
 80089ba:	f7f7 fde9 	bl	8000590 <__aeabi_dmul>
 80089be:	a358      	add	r3, pc, #352	; (adr r3, 8008b20 <__ieee754_pow+0xa30>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	f7f7 fc2c 	bl	8000220 <__aeabi_dsub>
 80089c8:	4622      	mov	r2, r4
 80089ca:	462b      	mov	r3, r5
 80089cc:	f7f7 fde0 	bl	8000590 <__aeabi_dmul>
 80089d0:	a355      	add	r3, pc, #340	; (adr r3, 8008b28 <__ieee754_pow+0xa38>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc25 	bl	8000224 <__adddf3>
 80089da:	4622      	mov	r2, r4
 80089dc:	462b      	mov	r3, r5
 80089de:	f7f7 fdd7 	bl	8000590 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4640      	mov	r0, r8
 80089e8:	4649      	mov	r1, r9
 80089ea:	f7f7 fc19 	bl	8000220 <__aeabi_dsub>
 80089ee:	4604      	mov	r4, r0
 80089f0:	460d      	mov	r5, r1
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4640      	mov	r0, r8
 80089f8:	4649      	mov	r1, r9
 80089fa:	f7f7 fdc9 	bl	8000590 <__aeabi_dmul>
 80089fe:	2200      	movs	r2, #0
 8008a00:	ec41 0b19 	vmov	d9, r0, r1
 8008a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fc08 	bl	8000220 <__aeabi_dsub>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	ec51 0b19 	vmov	r0, r1, d9
 8008a18:	f7f7 fee4 	bl	80007e4 <__aeabi_ddiv>
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	463b      	mov	r3, r7
 8008a24:	4640      	mov	r0, r8
 8008a26:	4649      	mov	r1, r9
 8008a28:	f7f7 fdb2 	bl	8000590 <__aeabi_dmul>
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	463b      	mov	r3, r7
 8008a30:	f7f7 fbf8 	bl	8000224 <__adddf3>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fbf0 	bl	8000220 <__aeabi_dsub>
 8008a40:	4642      	mov	r2, r8
 8008a42:	464b      	mov	r3, r9
 8008a44:	f7f7 fbec 	bl	8000220 <__aeabi_dsub>
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	493a      	ldr	r1, [pc, #232]	; (8008b38 <__ieee754_pow+0xa48>)
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f7f7 fbe6 	bl	8000220 <__aeabi_dsub>
 8008a54:	ec41 0b10 	vmov	d0, r0, r1
 8008a58:	ee10 3a90 	vmov	r3, s1
 8008a5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a64:	da2b      	bge.n	8008abe <__ieee754_pow+0x9ce>
 8008a66:	4650      	mov	r0, sl
 8008a68:	f000 f966 	bl	8008d38 <scalbn>
 8008a6c:	ec51 0b10 	vmov	r0, r1, d0
 8008a70:	ec53 2b18 	vmov	r2, r3, d8
 8008a74:	f7ff bbed 	b.w	8008252 <__ieee754_pow+0x162>
 8008a78:	4b30      	ldr	r3, [pc, #192]	; (8008b3c <__ieee754_pow+0xa4c>)
 8008a7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a7e:	429e      	cmp	r6, r3
 8008a80:	f77f af0c 	ble.w	800889c <__ieee754_pow+0x7ac>
 8008a84:	4b2e      	ldr	r3, [pc, #184]	; (8008b40 <__ieee754_pow+0xa50>)
 8008a86:	440b      	add	r3, r1
 8008a88:	4303      	orrs	r3, r0
 8008a8a:	d009      	beq.n	8008aa0 <__ieee754_pow+0x9b0>
 8008a8c:	ec51 0b18 	vmov	r0, r1, d8
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	f7f7 ffee 	bl	8000a74 <__aeabi_dcmplt>
 8008a98:	3800      	subs	r0, #0
 8008a9a:	bf18      	it	ne
 8008a9c:	2001      	movne	r0, #1
 8008a9e:	e447      	b.n	8008330 <__ieee754_pow+0x240>
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	f7f7 fbbc 	bl	8000220 <__aeabi_dsub>
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	464b      	mov	r3, r9
 8008aac:	f7f7 fff6 	bl	8000a9c <__aeabi_dcmpge>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f43f aef3 	beq.w	800889c <__ieee754_pow+0x7ac>
 8008ab6:	e7e9      	b.n	8008a8c <__ieee754_pow+0x99c>
 8008ab8:	f04f 0a00 	mov.w	sl, #0
 8008abc:	e71a      	b.n	80088f4 <__ieee754_pow+0x804>
 8008abe:	ec51 0b10 	vmov	r0, r1, d0
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	e7d4      	b.n	8008a70 <__ieee754_pow+0x980>
 8008ac6:	491c      	ldr	r1, [pc, #112]	; (8008b38 <__ieee754_pow+0xa48>)
 8008ac8:	2000      	movs	r0, #0
 8008aca:	f7ff bb30 	b.w	800812e <__ieee754_pow+0x3e>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	f7ff bb2c 	b.w	800812e <__ieee754_pow+0x3e>
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7ff bb28 	b.w	800812e <__ieee754_pow+0x3e>
 8008ade:	9204      	str	r2, [sp, #16]
 8008ae0:	f7ff bb7a 	b.w	80081d8 <__ieee754_pow+0xe8>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f7ff bb64 	b.w	80081b2 <__ieee754_pow+0xc2>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	00000000 	.word	0x00000000
 8008af4:	3fe62e43 	.word	0x3fe62e43
 8008af8:	fefa39ef 	.word	0xfefa39ef
 8008afc:	3fe62e42 	.word	0x3fe62e42
 8008b00:	0ca86c39 	.word	0x0ca86c39
 8008b04:	be205c61 	.word	0xbe205c61
 8008b08:	72bea4d0 	.word	0x72bea4d0
 8008b0c:	3e663769 	.word	0x3e663769
 8008b10:	c5d26bf1 	.word	0xc5d26bf1
 8008b14:	3ebbbd41 	.word	0x3ebbbd41
 8008b18:	af25de2c 	.word	0xaf25de2c
 8008b1c:	3f11566a 	.word	0x3f11566a
 8008b20:	16bebd93 	.word	0x16bebd93
 8008b24:	3f66c16c 	.word	0x3f66c16c
 8008b28:	5555553e 	.word	0x5555553e
 8008b2c:	3fc55555 	.word	0x3fc55555
 8008b30:	3fe00000 	.word	0x3fe00000
 8008b34:	000fffff 	.word	0x000fffff
 8008b38:	3ff00000 	.word	0x3ff00000
 8008b3c:	4090cbff 	.word	0x4090cbff
 8008b40:	3f6f3400 	.word	0x3f6f3400
 8008b44:	652b82fe 	.word	0x652b82fe
 8008b48:	3c971547 	.word	0x3c971547

08008b4c <__ieee754_sqrt>:
 8008b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b50:	ec55 4b10 	vmov	r4, r5, d0
 8008b54:	4e55      	ldr	r6, [pc, #340]	; (8008cac <__ieee754_sqrt+0x160>)
 8008b56:	43ae      	bics	r6, r5
 8008b58:	ee10 0a10 	vmov	r0, s0
 8008b5c:	ee10 3a10 	vmov	r3, s0
 8008b60:	462a      	mov	r2, r5
 8008b62:	4629      	mov	r1, r5
 8008b64:	d110      	bne.n	8008b88 <__ieee754_sqrt+0x3c>
 8008b66:	ee10 2a10 	vmov	r2, s0
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	f7f7 fd10 	bl	8000590 <__aeabi_dmul>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7f7 fb54 	bl	8000224 <__adddf3>
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	ec45 4b10 	vmov	d0, r4, r5
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	dc10      	bgt.n	8008bae <__ieee754_sqrt+0x62>
 8008b8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b90:	4330      	orrs	r0, r6
 8008b92:	d0f5      	beq.n	8008b80 <__ieee754_sqrt+0x34>
 8008b94:	b15d      	cbz	r5, 8008bae <__ieee754_sqrt+0x62>
 8008b96:	ee10 2a10 	vmov	r2, s0
 8008b9a:	462b      	mov	r3, r5
 8008b9c:	ee10 0a10 	vmov	r0, s0
 8008ba0:	f7f7 fb3e 	bl	8000220 <__aeabi_dsub>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	f7f7 fe1c 	bl	80007e4 <__aeabi_ddiv>
 8008bac:	e7e6      	b.n	8008b7c <__ieee754_sqrt+0x30>
 8008bae:	1512      	asrs	r2, r2, #20
 8008bb0:	d074      	beq.n	8008c9c <__ieee754_sqrt+0x150>
 8008bb2:	07d4      	lsls	r4, r2, #31
 8008bb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008bb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008bc0:	bf5e      	ittt	pl
 8008bc2:	0fda      	lsrpl	r2, r3, #31
 8008bc4:	005b      	lslpl	r3, r3, #1
 8008bc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008bca:	2400      	movs	r4, #0
 8008bcc:	0fda      	lsrs	r2, r3, #31
 8008bce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008bd2:	107f      	asrs	r7, r7, #1
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	2516      	movs	r5, #22
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008bde:	1886      	adds	r6, r0, r2
 8008be0:	428e      	cmp	r6, r1
 8008be2:	bfde      	ittt	le
 8008be4:	1b89      	suble	r1, r1, r6
 8008be6:	18b0      	addle	r0, r6, r2
 8008be8:	18a4      	addle	r4, r4, r2
 8008bea:	0049      	lsls	r1, r1, #1
 8008bec:	3d01      	subs	r5, #1
 8008bee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008bf2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008bf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bfa:	d1f0      	bne.n	8008bde <__ieee754_sqrt+0x92>
 8008bfc:	462a      	mov	r2, r5
 8008bfe:	f04f 0e20 	mov.w	lr, #32
 8008c02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008c06:	4281      	cmp	r1, r0
 8008c08:	eb06 0c05 	add.w	ip, r6, r5
 8008c0c:	dc02      	bgt.n	8008c14 <__ieee754_sqrt+0xc8>
 8008c0e:	d113      	bne.n	8008c38 <__ieee754_sqrt+0xec>
 8008c10:	459c      	cmp	ip, r3
 8008c12:	d811      	bhi.n	8008c38 <__ieee754_sqrt+0xec>
 8008c14:	f1bc 0f00 	cmp.w	ip, #0
 8008c18:	eb0c 0506 	add.w	r5, ip, r6
 8008c1c:	da43      	bge.n	8008ca6 <__ieee754_sqrt+0x15a>
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	db41      	blt.n	8008ca6 <__ieee754_sqrt+0x15a>
 8008c22:	f100 0801 	add.w	r8, r0, #1
 8008c26:	1a09      	subs	r1, r1, r0
 8008c28:	459c      	cmp	ip, r3
 8008c2a:	bf88      	it	hi
 8008c2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008c30:	eba3 030c 	sub.w	r3, r3, ip
 8008c34:	4432      	add	r2, r6
 8008c36:	4640      	mov	r0, r8
 8008c38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008c3c:	f1be 0e01 	subs.w	lr, lr, #1
 8008c40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c4c:	d1db      	bne.n	8008c06 <__ieee754_sqrt+0xba>
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	d006      	beq.n	8008c60 <__ieee754_sqrt+0x114>
 8008c52:	1c50      	adds	r0, r2, #1
 8008c54:	bf13      	iteet	ne
 8008c56:	3201      	addne	r2, #1
 8008c58:	3401      	addeq	r4, #1
 8008c5a:	4672      	moveq	r2, lr
 8008c5c:	f022 0201 	bicne.w	r2, r2, #1
 8008c60:	1063      	asrs	r3, r4, #1
 8008c62:	0852      	lsrs	r2, r2, #1
 8008c64:	07e1      	lsls	r1, r4, #31
 8008c66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008c6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008c6e:	bf48      	it	mi
 8008c70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008c74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008c78:	4614      	mov	r4, r2
 8008c7a:	e781      	b.n	8008b80 <__ieee754_sqrt+0x34>
 8008c7c:	0ad9      	lsrs	r1, r3, #11
 8008c7e:	3815      	subs	r0, #21
 8008c80:	055b      	lsls	r3, r3, #21
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d0fa      	beq.n	8008c7c <__ieee754_sqrt+0x130>
 8008c86:	02cd      	lsls	r5, r1, #11
 8008c88:	d50a      	bpl.n	8008ca0 <__ieee754_sqrt+0x154>
 8008c8a:	f1c2 0420 	rsb	r4, r2, #32
 8008c8e:	fa23 f404 	lsr.w	r4, r3, r4
 8008c92:	1e55      	subs	r5, r2, #1
 8008c94:	4093      	lsls	r3, r2
 8008c96:	4321      	orrs	r1, r4
 8008c98:	1b42      	subs	r2, r0, r5
 8008c9a:	e78a      	b.n	8008bb2 <__ieee754_sqrt+0x66>
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	e7f0      	b.n	8008c82 <__ieee754_sqrt+0x136>
 8008ca0:	0049      	lsls	r1, r1, #1
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	e7ef      	b.n	8008c86 <__ieee754_sqrt+0x13a>
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	e7bd      	b.n	8008c26 <__ieee754_sqrt+0xda>
 8008caa:	bf00      	nop
 8008cac:	7ff00000 	.word	0x7ff00000

08008cb0 <with_errno>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	4616      	mov	r6, r2
 8008cb8:	f7ff f8ec 	bl	8007e94 <__errno>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	6006      	str	r6, [r0, #0]
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <xflow>:
 8008cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cc6:	4614      	mov	r4, r2
 8008cc8:	461d      	mov	r5, r3
 8008cca:	b108      	cbz	r0, 8008cd0 <xflow+0xc>
 8008ccc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008cd0:	e9cd 2300 	strd	r2, r3, [sp]
 8008cd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cd8:	4620      	mov	r0, r4
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fc58 	bl	8000590 <__aeabi_dmul>
 8008ce0:	2222      	movs	r2, #34	; 0x22
 8008ce2:	b003      	add	sp, #12
 8008ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ce8:	f7ff bfe2 	b.w	8008cb0 <with_errno>

08008cec <__math_uflow>:
 8008cec:	b508      	push	{r3, lr}
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cf4:	f7ff ffe6 	bl	8008cc4 <xflow>
 8008cf8:	ec41 0b10 	vmov	d0, r0, r1
 8008cfc:	bd08      	pop	{r3, pc}

08008cfe <__math_oflow>:
 8008cfe:	b508      	push	{r3, lr}
 8008d00:	2200      	movs	r2, #0
 8008d02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008d06:	f7ff ffdd 	bl	8008cc4 <xflow>
 8008d0a:	ec41 0b10 	vmov	d0, r0, r1
 8008d0e:	bd08      	pop	{r3, pc}

08008d10 <fabs>:
 8008d10:	ec51 0b10 	vmov	r0, r1, d0
 8008d14:	ee10 2a10 	vmov	r2, s0
 8008d18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d1c:	ec43 2b10 	vmov	d0, r2, r3
 8008d20:	4770      	bx	lr

08008d22 <finite>:
 8008d22:	b082      	sub	sp, #8
 8008d24:	ed8d 0b00 	vstr	d0, [sp]
 8008d28:	9801      	ldr	r0, [sp, #4]
 8008d2a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008d2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008d32:	0fc0      	lsrs	r0, r0, #31
 8008d34:	b002      	add	sp, #8
 8008d36:	4770      	bx	lr

08008d38 <scalbn>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	ec55 4b10 	vmov	r4, r5, d0
 8008d3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008d42:	4606      	mov	r6, r0
 8008d44:	462b      	mov	r3, r5
 8008d46:	b99a      	cbnz	r2, 8008d70 <scalbn+0x38>
 8008d48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d4c:	4323      	orrs	r3, r4
 8008d4e:	d036      	beq.n	8008dbe <scalbn+0x86>
 8008d50:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <scalbn+0x100>)
 8008d52:	4629      	mov	r1, r5
 8008d54:	ee10 0a10 	vmov	r0, s0
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f7f7 fc19 	bl	8000590 <__aeabi_dmul>
 8008d5e:	4b37      	ldr	r3, [pc, #220]	; (8008e3c <scalbn+0x104>)
 8008d60:	429e      	cmp	r6, r3
 8008d62:	4604      	mov	r4, r0
 8008d64:	460d      	mov	r5, r1
 8008d66:	da10      	bge.n	8008d8a <scalbn+0x52>
 8008d68:	a32b      	add	r3, pc, #172	; (adr r3, 8008e18 <scalbn+0xe0>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	e03a      	b.n	8008de6 <scalbn+0xae>
 8008d70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008d74:	428a      	cmp	r2, r1
 8008d76:	d10c      	bne.n	8008d92 <scalbn+0x5a>
 8008d78:	ee10 2a10 	vmov	r2, s0
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f7f7 fa50 	bl	8000224 <__adddf3>
 8008d84:	4604      	mov	r4, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	e019      	b.n	8008dbe <scalbn+0x86>
 8008d8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d8e:	460b      	mov	r3, r1
 8008d90:	3a36      	subs	r2, #54	; 0x36
 8008d92:	4432      	add	r2, r6
 8008d94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	dd08      	ble.n	8008dae <scalbn+0x76>
 8008d9c:	2d00      	cmp	r5, #0
 8008d9e:	a120      	add	r1, pc, #128	; (adr r1, 8008e20 <scalbn+0xe8>)
 8008da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da4:	da1c      	bge.n	8008de0 <scalbn+0xa8>
 8008da6:	a120      	add	r1, pc, #128	; (adr r1, 8008e28 <scalbn+0xf0>)
 8008da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dac:	e018      	b.n	8008de0 <scalbn+0xa8>
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	dd08      	ble.n	8008dc4 <scalbn+0x8c>
 8008db2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008db6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008dbe:	ec45 4b10 	vmov	d0, r4, r5
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008dc8:	da19      	bge.n	8008dfe <scalbn+0xc6>
 8008dca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008dce:	429e      	cmp	r6, r3
 8008dd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008dd4:	dd0a      	ble.n	8008dec <scalbn+0xb4>
 8008dd6:	a112      	add	r1, pc, #72	; (adr r1, 8008e20 <scalbn+0xe8>)
 8008dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e2      	bne.n	8008da6 <scalbn+0x6e>
 8008de0:	a30f      	add	r3, pc, #60	; (adr r3, 8008e20 <scalbn+0xe8>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fbd3 	bl	8000590 <__aeabi_dmul>
 8008dea:	e7cb      	b.n	8008d84 <scalbn+0x4c>
 8008dec:	a10a      	add	r1, pc, #40	; (adr r1, 8008e18 <scalbn+0xe0>)
 8008dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0b8      	beq.n	8008d68 <scalbn+0x30>
 8008df6:	a10e      	add	r1, pc, #56	; (adr r1, 8008e30 <scalbn+0xf8>)
 8008df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dfc:	e7b4      	b.n	8008d68 <scalbn+0x30>
 8008dfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e02:	3236      	adds	r2, #54	; 0x36
 8008e04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <scalbn+0x108>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	e7e8      	b.n	8008de6 <scalbn+0xae>
 8008e14:	f3af 8000 	nop.w
 8008e18:	c2f8f359 	.word	0xc2f8f359
 8008e1c:	01a56e1f 	.word	0x01a56e1f
 8008e20:	8800759c 	.word	0x8800759c
 8008e24:	7e37e43c 	.word	0x7e37e43c
 8008e28:	8800759c 	.word	0x8800759c
 8008e2c:	fe37e43c 	.word	0xfe37e43c
 8008e30:	c2f8f359 	.word	0xc2f8f359
 8008e34:	81a56e1f 	.word	0x81a56e1f
 8008e38:	43500000 	.word	0x43500000
 8008e3c:	ffff3cb0 	.word	0xffff3cb0
 8008e40:	3c900000 	.word	0x3c900000

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
