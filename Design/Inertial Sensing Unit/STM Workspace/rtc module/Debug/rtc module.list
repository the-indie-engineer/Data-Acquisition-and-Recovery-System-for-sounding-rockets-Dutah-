
rtc module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf8  08002cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002d0c  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ee4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b6  00000000  00000000  00027f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  000294d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fd9  00000000  00000000  0002a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3b3  00000000  00000000  0004b351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c82a0  00000000  00000000  00055704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d9a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb0  00000000  00000000  0011d9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002cc0 	.word	0x08002cc0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002cc0 	.word	0x08002cc0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <decToBcd>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define DS3231_ADDRESS 0xD0
// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <decToBcd+0x48>)
 8000514:	fb82 1203 	smull	r1, r2, r2, r3
 8000518:	1092      	asrs	r2, r2, #2
 800051a:	17db      	asrs	r3, r3, #31
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	b2db      	uxtb	r3, r3
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	b2d8      	uxtb	r0, r3
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <decToBcd+0x48>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1099      	asrs	r1, r3, #2
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1ad1      	subs	r1, r2, r3
 800053c:	b2cb      	uxtb	r3, r1
 800053e:	4403      	add	r3, r0
 8000540:	b2db      	uxtb	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	66666667 	.word	0x66666667

08000554 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	461a      	mov	r2, r3
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f003 030f 	and.w	r3, r3, #15
 8000576:	4413      	add	r3, r2
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <Set_Time>:
//
//	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, Backup, 7, 1000);
//	Set_Time();
//}
void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af04      	add	r7, sp, #16
 800058a:	4604      	mov	r4, r0
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4623      	mov	r3, r4
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	4603      	mov	r3, r0
 8000598:	71bb      	strb	r3, [r7, #6]
 800059a:	460b      	mov	r3, r1
 800059c:	717b      	strb	r3, [r7, #5]
 800059e:	4613      	mov	r3, r2
 80005a0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffaf 	bl	8000508 <decToBcd>
 80005aa:	4603      	mov	r3, r0
 80005ac:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffa9 	bl	8000508 <decToBcd>
 80005b6:	4603      	mov	r3, r0
 80005b8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffa3 	bl	8000508 <decToBcd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 80005c6:	793b      	ldrb	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff9d 	bl	8000508 <decToBcd>
 80005ce:	4603      	mov	r3, r0
 80005d0:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 80005d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff96 	bl	8000508 <decToBcd>
 80005dc:	4603      	mov	r3, r0
 80005de:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 80005e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff8f 	bl	8000508 <decToBcd>
 80005ea:	4603      	mov	r3, r0
 80005ec:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 80005ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff88 	bl	8000508 <decToBcd>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2307      	movs	r3, #7
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	2200      	movs	r2, #0
 8000610:	21d0      	movs	r1, #208	; 0xd0
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <Set_Time+0x9c>)
 8000614:	f000 fe88 	bl	8001328 <HAL_I2C_Mem_Write>
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	20000028 	.word	0x20000028

08000624 <Get_Time>:
void Get_Time (void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2307      	movs	r3, #7
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	463b      	mov	r3, r7
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	2200      	movs	r2, #0
 800063c:	21d0      	movs	r1, #208	; 0xd0
 800063e:	481f      	ldr	r0, [pc, #124]	; (80006bc <Get_Time+0x98>)
 8000640:	f000 ff6c 	bl	800151c <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000644:	783b      	ldrb	r3, [r7, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff84 	bl	8000554 <bcdToDec>
 800064c:	4603      	mov	r3, r0
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <Get_Time+0x9c>)
 8000652:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000654:	787b      	ldrb	r3, [r7, #1]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff7c 	bl	8000554 <bcdToDec>
 800065c:	4603      	mov	r3, r0
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <Get_Time+0x9c>)
 8000662:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000664:	78bb      	ldrb	r3, [r7, #2]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff74 	bl	8000554 <bcdToDec>
 800066c:	4603      	mov	r3, r0
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <Get_Time+0x9c>)
 8000672:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff6c 	bl	8000554 <bcdToDec>
 800067c:	4603      	mov	r3, r0
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <Get_Time+0x9c>)
 8000682:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000684:	793b      	ldrb	r3, [r7, #4]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff64 	bl	8000554 <bcdToDec>
 800068c:	4603      	mov	r3, r0
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <Get_Time+0x9c>)
 8000692:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff5c 	bl	8000554 <bcdToDec>
 800069c:	4603      	mov	r3, r0
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <Get_Time+0x9c>)
 80006a2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff54 	bl	8000554 <bcdToDec>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <Get_Time+0x9c>)
 80006b2:	719a      	strb	r2, [r3, #6]
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	2000007c 	.word	0x2000007c

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 f9d9 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f817 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f8b5 	bl	8000840 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006d6:	f000 f885 	bl	80007e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    Set_Time(1, 48, 15, 4, 4, 6, 23);
 80006da:	2317      	movs	r3, #23
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	2306      	movs	r3, #6
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2304      	movs	r3, #4
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2304      	movs	r3, #4
 80006e8:	220f      	movs	r2, #15
 80006ea:	2130      	movs	r1, #48	; 0x30
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff49 	bl	8000584 <Set_Time>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Time();
 80006f2:	f7ff ff97 	bl	8000624 <Get_Time>
	  HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fa:	f000 fa33 	bl	8000b64 <HAL_Delay>
	  Get_Time();
 80006fe:	e7f8      	b.n	80006f2 <main+0x2e>

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	; 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 face 	bl	8002cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <SystemClock_Config+0xdc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <SystemClock_Config+0xdc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <SystemClock_Config+0xdc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xe0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <SystemClock_Config+0xe0>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <SystemClock_Config+0xe0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000774:	23b4      	movs	r3, #180	; 0xb4
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4618      	mov	r0, r3
 800078a:	f001 ffcf 	bl	800272c <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000794:	f000 f898 	bl	80008c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000798:	f001 fc42 	bl	8002020 <HAL_PWREx_EnableOverDrive>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007a2:	f000 f891 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2105      	movs	r1, #5
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fc7b 	bl	80020c0 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d0:	f000 f87a 	bl	80008c8 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C1_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_I2C1_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C1_Init+0x50>)
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_I2C1_Init+0x58>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_I2C1_Init+0x50>)
 8000802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_I2C1_Init+0x50>)
 8000822:	f000 fc3d 	bl	80010a0 <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f84c 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000028 	.word	0x20000028
 8000838:	40005400 	.word	0x40005400
 800083c:	000186a0 	.word	0x000186a0

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_GPIO_Init+0x84>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <MX_GPIO_Init+0x84>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_GPIO_Init+0x84>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <MX_GPIO_Init+0x84>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_GPIO_Init+0x84>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000912:	2007      	movs	r0, #7
 8000914:	f000 f9fc 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_I2C_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12c      	bne.n	80009a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_I2C_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_I2C_MspInit+0x88>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_I2C_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8000962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000974:	2304      	movs	r3, #4
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_I2C_MspInit+0x8c>)
 8000980:	f000 f9fa 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_I2C_MspInit+0x88>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_I2C_MspInit+0x88>)
 800098e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_I2C_MspInit+0x88>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f890 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 f905 	bl	8002c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fe31 	bl	80006c4 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	20000088 	.word	0x20000088

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f931 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff ff0e 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f93b 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f911 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000084 	.word	0x20000084

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000084 	.word	0x20000084

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e165      	b.n	8001060 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8154 	bne.w	800105a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80ae 	beq.w	800105a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b5d      	ldr	r3, [pc, #372]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a5c      	ldr	r2, [pc, #368]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b5a      	ldr	r3, [pc, #360]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a58      	ldr	r2, [pc, #352]	; (800107c <HAL_GPIO_Init+0x304>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x216>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x212>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_GPIO_Init+0x314>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4b      	ldr	r2, [pc, #300]	; (8001090 <HAL_GPIO_Init+0x318>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x20a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4a      	ldr	r2, [pc, #296]	; (8001094 <HAL_GPIO_Init+0x31c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a49      	ldr	r2, [pc, #292]	; (8001098 <HAL_GPIO_Init+0x320>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x202>
 8000f76:	2306      	movs	r3, #6
 8000f78:	e00c      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00a      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f82:	2304      	movs	r3, #4
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x21c>
 8000f92:	2300      	movs	r3, #0
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b3a      	ldr	r3, [pc, #232]	; (800109c <HAL_GPIO_Init+0x324>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd6:	4a31      	ldr	r2, [pc, #196]	; (800109c <HAL_GPIO_Init+0x324>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_GPIO_Init+0x324>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_GPIO_Init+0x324>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_GPIO_Init+0x324>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_GPIO_Init+0x324>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_GPIO_Init+0x324>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_GPIO_Init+0x324>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3301      	adds	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	f67f ae96 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40021400 	.word	0x40021400
 8001098:	40021800 	.word	0x40021800
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e12b      	b.n	800130a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fc2c 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2224      	movs	r2, #36	; 0x24
 80010d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001102:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001104:	f001 f8ce 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a81      	ldr	r2, [pc, #516]	; (8001314 <HAL_I2C_Init+0x274>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d807      	bhi.n	8001124 <HAL_I2C_Init+0x84>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a80      	ldr	r2, [pc, #512]	; (8001318 <HAL_I2C_Init+0x278>)
 8001118:	4293      	cmp	r3, r2
 800111a:	bf94      	ite	ls
 800111c:	2301      	movls	r3, #1
 800111e:	2300      	movhi	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	e006      	b.n	8001132 <HAL_I2C_Init+0x92>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4a7d      	ldr	r2, [pc, #500]	; (800131c <HAL_I2C_Init+0x27c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	bf94      	ite	ls
 800112c:	2301      	movls	r3, #1
 800112e:	2300      	movhi	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0e7      	b.n	800130a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4a78      	ldr	r2, [pc, #480]	; (8001320 <HAL_I2C_Init+0x280>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0c9b      	lsrs	r3, r3, #18
 8001144:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	430a      	orrs	r2, r1
 8001158:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <HAL_I2C_Init+0x274>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d802      	bhi.n	8001174 <HAL_I2C_Init+0xd4>
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	e009      	b.n	8001188 <HAL_I2C_Init+0xe8>
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	4a69      	ldr	r2, [pc, #420]	; (8001324 <HAL_I2C_Init+0x284>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	099b      	lsrs	r3, r3, #6
 8001186:	3301      	adds	r3, #1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	430b      	orrs	r3, r1
 800118e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800119a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	495c      	ldr	r1, [pc, #368]	; (8001314 <HAL_I2C_Init+0x274>)
 80011a4:	428b      	cmp	r3, r1
 80011a6:	d819      	bhi.n	80011dc <HAL_I2C_Init+0x13c>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1e59      	subs	r1, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b6:	1c59      	adds	r1, r3, #1
 80011b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011bc:	400b      	ands	r3, r1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <HAL_I2C_Init+0x138>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1e59      	subs	r1, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d6:	e051      	b.n	800127c <HAL_I2C_Init+0x1dc>
 80011d8:	2304      	movs	r3, #4
 80011da:	e04f      	b.n	800127c <HAL_I2C_Init+0x1dc>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d111      	bne.n	8001208 <HAL_I2C_Init+0x168>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e58      	subs	r0, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	440b      	add	r3, r1
 80011f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	e012      	b.n	800122e <HAL_I2C_Init+0x18e>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1e58      	subs	r0, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	0099      	lsls	r1, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	fbb0 f3f3 	udiv	r3, r0, r3
 800121e:	3301      	adds	r3, #1
 8001220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_I2C_Init+0x196>
 8001232:	2301      	movs	r3, #1
 8001234:	e022      	b.n	800127c <HAL_I2C_Init+0x1dc>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10e      	bne.n	800125c <HAL_I2C_Init+0x1bc>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1e58      	subs	r0, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6859      	ldr	r1, [r3, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	440b      	add	r3, r1
 800124c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001250:	3301      	adds	r3, #1
 8001252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125a:	e00f      	b.n	800127c <HAL_I2C_Init+0x1dc>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	0099      	lsls	r1, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001272:	3301      	adds	r3, #1
 8001274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	6809      	ldr	r1, [r1, #0]
 8001280:	4313      	orrs	r3, r2
 8001282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6911      	ldr	r1, [r2, #16]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68d2      	ldr	r2, [r2, #12]
 80012b6:	4311      	orrs	r1, r2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	430b      	orrs	r3, r1
 80012be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	000186a0 	.word	0x000186a0
 8001318:	001e847f 	.word	0x001e847f
 800131c:	003d08ff 	.word	0x003d08ff
 8001320:	431bde83 	.word	0x431bde83
 8001324:	10624dd3 	.word	0x10624dd3

08001328 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af02      	add	r7, sp, #8
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	817b      	strh	r3, [r7, #10]
 800133a:	460b      	mov	r3, r1
 800133c:	813b      	strh	r3, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001342:	f7ff fc03 	bl	8000b4c <HAL_GetTick>
 8001346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b20      	cmp	r3, #32
 8001352:	f040 80d9 	bne.w	8001508 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2319      	movs	r3, #25
 800135c:	2201      	movs	r2, #1
 800135e:	496d      	ldr	r1, [pc, #436]	; (8001514 <HAL_I2C_Mem_Write+0x1ec>)
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 fc7f 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800136c:	2302      	movs	r3, #2
 800136e:	e0cc      	b.n	800150a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_I2C_Mem_Write+0x56>
 800137a:	2302      	movs	r3, #2
 800137c:	e0c5      	b.n	800150a <HAL_I2C_Mem_Write+0x1e2>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b01      	cmp	r3, #1
 8001392:	d007      	beq.n	80013a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2221      	movs	r2, #33	; 0x21
 80013b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6a3a      	ldr	r2, [r7, #32]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_I2C_Mem_Write+0x1f0>)
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e6:	88f8      	ldrh	r0, [r7, #6]
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4603      	mov	r3, r0
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fab6 	bl	8001968 <I2C_RequestMemoryWrite>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d052      	beq.n	80014a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e081      	b.n	800150a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 fd00 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00d      	beq.n	8001432 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2b04      	cmp	r3, #4
 800141c:	d107      	bne.n	800142e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800142c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06b      	b.n	800150a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b04      	cmp	r3, #4
 800146e:	d11b      	bne.n	80014a8 <HAL_I2C_Mem_Write+0x180>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d017      	beq.n	80014a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	3b01      	subs	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1aa      	bne.n	8001406 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fcec 	bl	8001e92 <I2C_WaitOnBTFFlagUntilTimeout>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00d      	beq.n	80014dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d107      	bne.n	80014d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e016      	b.n	800150a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	e000      	b.n	800150a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001508:	2302      	movs	r3, #2
  }
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	00100002 	.word	0x00100002
 8001518:	ffff0000 	.word	0xffff0000

0800151c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4603      	mov	r3, r0
 800152c:	817b      	strh	r3, [r7, #10]
 800152e:	460b      	mov	r3, r1
 8001530:	813b      	strh	r3, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001536:	f7ff fb09 	bl	8000b4c <HAL_GetTick>
 800153a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	f040 8208 	bne.w	800195a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2319      	movs	r3, #25
 8001550:	2201      	movs	r2, #1
 8001552:	497b      	ldr	r1, [pc, #492]	; (8001740 <HAL_I2C_Mem_Read+0x224>)
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fb85 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
 8001562:	e1fb      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Mem_Read+0x56>
 800156e:	2302      	movs	r3, #2
 8001570:	e1f4      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2222      	movs	r2, #34	; 0x22
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_I2C_Mem_Read+0x228>)
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015da:	88f8      	ldrh	r0, [r7, #6]
 80015dc:	893a      	ldrh	r2, [r7, #8]
 80015de:	8979      	ldrh	r1, [r7, #10]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4603      	mov	r3, r0
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fa52 	bl	8001a94 <I2C_RequestMemoryRead>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e1b0      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d113      	bne.n	800162a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e184      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11b      	bne.n	800166a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e164      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	2b02      	cmp	r3, #2
 8001670:	d11b      	bne.n	80016aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001680:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	e144      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016c0:	e138      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	f200 80f1 	bhi.w	80018ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d123      	bne.n	800171c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fc1b 	bl	8001f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e139      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	855a      	strh	r2, [r3, #42]	; 0x2a
 800171a:	e10b      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2b02      	cmp	r3, #2
 8001722:	d14e      	bne.n	80017c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800172a:	2200      	movs	r2, #0
 800172c:	4906      	ldr	r1, [pc, #24]	; (8001748 <HAL_I2C_Mem_Read+0x22c>)
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 fa98 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e10e      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
 800173e:	bf00      	nop
 8001740:	00100002 	.word	0x00100002
 8001744:	ffff0000 	.word	0xffff0000
 8001748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017c0:	e0b8      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c8:	2200      	movs	r2, #0
 80017ca:	4966      	ldr	r1, [pc, #408]	; (8001964 <HAL_I2C_Mem_Read+0x448>)
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fa49 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0bf      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001824:	2200      	movs	r2, #0
 8001826:	494f      	ldr	r1, [pc, #316]	; (8001964 <HAL_I2C_Mem_Read+0x448>)
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fa1b 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e091      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ac:	e042      	b.n	8001934 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fb2e 	bl	8001f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e04c      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d118      	bne.n	8001934 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aec2 	bne.w	80016c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	00010004 	.word	0x00010004

08001968 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	817b      	strh	r3, [r7, #10]
 800197a:	460b      	mov	r3, r1
 800197c:	813b      	strh	r3, [r7, #8]
 800197e:	4613      	mov	r3, r2
 8001980:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	2200      	movs	r2, #0
 800199a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f960 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b8:	d103      	bne.n	80019c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e05f      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	492d      	ldr	r1, [pc, #180]	; (8001a90 <I2C_RequestMemoryWrite+0x128>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f998 	bl	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e04c      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa02 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d107      	bne.n	8001a2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e02b      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a34:	893b      	ldrh	r3, [r7, #8]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	e021      	b.n	8001a84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f9dc 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e005      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7a:	893b      	ldrh	r3, [r7, #8]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00010002 	.word	0x00010002

08001a94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	817b      	strh	r3, [r7, #10]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	813b      	strh	r3, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001abc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f8c2 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af4:	d103      	bne.n	8001afe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0aa      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	4952      	ldr	r1, [pc, #328]	; (8001c60 <I2C_RequestMemoryRead+0x1cc>)
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f8fa 	bl	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e097      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	6a39      	ldr	r1, [r7, #32]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f964 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d107      	bne.n	8001b66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e076      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b70:	893b      	ldrh	r3, [r7, #8]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	e021      	b.n	8001bc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	6a39      	ldr	r1, [r7, #32]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f93e 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d107      	bne.n	8001bb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e050      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb6:	893b      	ldrh	r3, [r7, #8]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc2:	6a39      	ldr	r1, [r7, #32]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f923 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e035      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f82b 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00d      	beq.n	8001c30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c22:	d103      	bne.n	8001c2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e013      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	6a3a      	ldr	r2, [r7, #32]
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <I2C_RequestMemoryRead+0x1cc>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f863 	bl	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	00010002 	.word	0x00010002

08001c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c74:	e025      	b.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d021      	beq.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7e:	f7fe ff65 	bl	8000b4c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d302      	bcc.n	8001c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d116      	bne.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f043 0220 	orr.w	r2, r3, #32
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e023      	b.n	8001d0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d10d      	bne.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	e00c      	b.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d0b6      	beq.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d20:	e051      	b.n	8001dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d123      	bne.n	8001d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f043 0204 	orr.w	r2, r3, #4
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e046      	b.n	8001e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d021      	beq.n	8001dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d82:	f7fe fee3 	bl	8000b4c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d302      	bcc.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d116      	bne.n	8001dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f043 0220 	orr.w	r2, r3, #32
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e020      	b.n	8001e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d10c      	bne.n	8001dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e00b      	b.n	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4013      	ands	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d18d      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e1c:	e02d      	b.n	8001e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8ce 	bl	8001fc0 <I2C_IsAcknowledgeFailed>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e02d      	b.n	8001e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d021      	beq.n	8001e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e36:	f7fe fe89 	bl	8000b4c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d302      	bcc.n	8001e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d116      	bne.n	8001e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f043 0220 	orr.w	r2, r3, #32
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e007      	b.n	8001e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d1ca      	bne.n	8001e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e9e:	e02d      	b.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f88d 	bl	8001fc0 <I2C_IsAcknowledgeFailed>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e02d      	b.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d021      	beq.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb8:	f7fe fe48 	bl	8000b4c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e007      	b.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d1ca      	bne.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f20:	e042      	b.n	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d119      	bne.n	8001f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0210 	mvn.w	r2, #16
 8001f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e029      	b.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f64:	f7fe fdf2 	bl	8000b4c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d302      	bcc.n	8001f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d1b5      	bne.n	8001f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd6:	d11b      	bne.n	8002010 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fe0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800204c:	f7fe fd7e 	bl	8000b4c <HAL_GetTick>
 8002050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002052:	e009      	b.n	8002068 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002054:	f7fe fd7a 	bl	8000b4c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002062:	d901      	bls.n	8002068 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e01f      	b.n	80020a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d1ee      	bne.n	8002054 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800207c:	f7fe fd66 	bl	8000b4c <HAL_GetTick>
 8002080:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002082:	e009      	b.n	8002098 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002084:	f7fe fd62 	bl	8000b4c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002092:	d901      	bls.n	8002098 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e007      	b.n	80020a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020a4:	d1ee      	bne.n	8002084 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	420e0040 	.word	0x420e0040
 80020b8:	40007000 	.word	0x40007000
 80020bc:	420e0044 	.word	0x420e0044

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d90c      	bls.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fccc 	bl	8000b4c <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7fe fcc8 	bl	8000b4c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f841 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fc2c 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	08002cd8 	.word	0x08002cd8
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022a8:	f7ff fff0 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0a9b      	lsrs	r3, r3, #10
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	08002ce8 	.word	0x08002ce8

080022cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d0:	b0ae      	sub	sp, #184	; 0xb8
 80022d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f2:	4bcb      	ldr	r3, [pc, #812]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	f200 8206 	bhi.w	800270c <HAL_RCC_GetSysClockFreq+0x440>
 8002300:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	0800233d 	.word	0x0800233d
 800230c:	0800270d 	.word	0x0800270d
 8002310:	0800270d 	.word	0x0800270d
 8002314:	0800270d 	.word	0x0800270d
 8002318:	08002345 	.word	0x08002345
 800231c:	0800270d 	.word	0x0800270d
 8002320:	0800270d 	.word	0x0800270d
 8002324:	0800270d 	.word	0x0800270d
 8002328:	0800234d 	.word	0x0800234d
 800232c:	0800270d 	.word	0x0800270d
 8002330:	0800270d 	.word	0x0800270d
 8002334:	0800270d 	.word	0x0800270d
 8002338:	0800253d 	.word	0x0800253d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4bb9      	ldr	r3, [pc, #740]	; (8002624 <HAL_RCC_GetSysClockFreq+0x358>)
 800233e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002342:	e1e7      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4bb8      	ldr	r3, [pc, #736]	; (8002628 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800234a:	e1e3      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800234c:	4bb4      	ldr	r3, [pc, #720]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002358:	4bb1      	ldr	r3, [pc, #708]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d071      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002364:	4bae      	ldr	r3, [pc, #696]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	2200      	movs	r2, #0
 800236c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002370:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800238a:	4622      	mov	r2, r4
 800238c:	462b      	mov	r3, r5
 800238e:	f04f 0000 	mov.w	r0, #0
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	0159      	lsls	r1, r3, #5
 8002398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800239c:	0150      	lsls	r0, r2, #5
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4621      	mov	r1, r4
 80023a4:	1a51      	subs	r1, r2, r1
 80023a6:	6439      	str	r1, [r7, #64]	; 0x40
 80023a8:	4629      	mov	r1, r5
 80023aa:	eb63 0301 	sbc.w	r3, r3, r1
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023bc:	4649      	mov	r1, r9
 80023be:	018b      	lsls	r3, r1, #6
 80023c0:	4641      	mov	r1, r8
 80023c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023c6:	4641      	mov	r1, r8
 80023c8:	018a      	lsls	r2, r1, #6
 80023ca:	4641      	mov	r1, r8
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80023d0:	4649      	mov	r1, r9
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023e4:	4649      	mov	r1, r9
 80023e6:	00cb      	lsls	r3, r1, #3
 80023e8:	4641      	mov	r1, r8
 80023ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ee:	4641      	mov	r1, r8
 80023f0:	00ca      	lsls	r2, r1, #3
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	4622      	mov	r2, r4
 80023fa:	189b      	adds	r3, r3, r2
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
 80023fe:	462b      	mov	r3, r5
 8002400:	460a      	mov	r2, r1
 8002402:	eb42 0303 	adc.w	r3, r2, r3
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002414:	4629      	mov	r1, r5
 8002416:	024b      	lsls	r3, r1, #9
 8002418:	4621      	mov	r1, r4
 800241a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800241e:	4621      	mov	r1, r4
 8002420:	024a      	lsls	r2, r1, #9
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800242a:	2200      	movs	r2, #0
 800242c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002430:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002434:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002438:	f7fd fee4 	bl	8000204 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002446:	e067      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002448:	4b75      	ldr	r3, [pc, #468]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002454:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800245c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002460:	67bb      	str	r3, [r7, #120]	; 0x78
 8002462:	2300      	movs	r3, #0
 8002464:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002466:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800246a:	4622      	mov	r2, r4
 800246c:	462b      	mov	r3, r5
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4621      	mov	r1, r4
 8002484:	1a51      	subs	r1, r2, r1
 8002486:	62b9      	str	r1, [r7, #40]	; 0x28
 8002488:	4629      	mov	r1, r5
 800248a:	eb63 0301 	sbc.w	r3, r3, r1
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800249c:	4649      	mov	r1, r9
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	4641      	mov	r1, r8
 80024a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a6:	4641      	mov	r1, r8
 80024a8:	018a      	lsls	r2, r1, #6
 80024aa:	4641      	mov	r1, r8
 80024ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80024b0:	4649      	mov	r1, r9
 80024b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ca:	4692      	mov	sl, r2
 80024cc:	469b      	mov	fp, r3
 80024ce:	4623      	mov	r3, r4
 80024d0:	eb1a 0303 	adds.w	r3, sl, r3
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	462b      	mov	r3, r5
 80024d8:	eb4b 0303 	adc.w	r3, fp, r3
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002500:	2200      	movs	r2, #0
 8002502:	673b      	str	r3, [r7, #112]	; 0x70
 8002504:	677a      	str	r2, [r7, #116]	; 0x74
 8002506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800250a:	f7fd fe7b 	bl	8000204 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4613      	mov	r3, r2
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800252a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800252e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800253a:	e0eb      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d06b      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_RCC_GetSysClockFreq+0x354>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	2200      	movs	r2, #0
 800255c:	66bb      	str	r3, [r7, #104]	; 0x68
 800255e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002566:	663b      	str	r3, [r7, #96]	; 0x60
 8002568:	2300      	movs	r3, #0
 800256a:	667b      	str	r3, [r7, #100]	; 0x64
 800256c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002570:	4622      	mov	r2, r4
 8002572:	462b      	mov	r3, r5
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	0159      	lsls	r1, r3, #5
 800257e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002582:	0150      	lsls	r0, r2, #5
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4621      	mov	r1, r4
 800258a:	1a51      	subs	r1, r2, r1
 800258c:	61b9      	str	r1, [r7, #24]
 800258e:	4629      	mov	r1, r5
 8002590:	eb63 0301 	sbc.w	r3, r3, r1
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025a2:	4659      	mov	r1, fp
 80025a4:	018b      	lsls	r3, r1, #6
 80025a6:	4651      	mov	r1, sl
 80025a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ac:	4651      	mov	r1, sl
 80025ae:	018a      	lsls	r2, r1, #6
 80025b0:	4651      	mov	r1, sl
 80025b2:	ebb2 0801 	subs.w	r8, r2, r1
 80025b6:	4659      	mov	r1, fp
 80025b8:	eb63 0901 	sbc.w	r9, r3, r1
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d0:	4690      	mov	r8, r2
 80025d2:	4699      	mov	r9, r3
 80025d4:	4623      	mov	r3, r4
 80025d6:	eb18 0303 	adds.w	r3, r8, r3
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	462b      	mov	r3, r5
 80025de:	eb49 0303 	adc.w	r3, r9, r3
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025f0:	4629      	mov	r1, r5
 80025f2:	024b      	lsls	r3, r1, #9
 80025f4:	4621      	mov	r1, r4
 80025f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025fa:	4621      	mov	r1, r4
 80025fc:	024a      	lsls	r2, r1, #9
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002606:	2200      	movs	r2, #0
 8002608:	65bb      	str	r3, [r7, #88]	; 0x58
 800260a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800260c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002610:	f7fd fdf8 	bl	8000204 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800261e:	e065      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x420>
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_GetSysClockFreq+0x458>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	2200      	movs	r2, #0
 8002634:	4618      	mov	r0, r3
 8002636:	4611      	mov	r1, r2
 8002638:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800263c:	653b      	str	r3, [r7, #80]	; 0x50
 800263e:	2300      	movs	r3, #0
 8002640:	657b      	str	r3, [r7, #84]	; 0x54
 8002642:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002646:	4642      	mov	r2, r8
 8002648:	464b      	mov	r3, r9
 800264a:	f04f 0000 	mov.w	r0, #0
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	0159      	lsls	r1, r3, #5
 8002654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002658:	0150      	lsls	r0, r2, #5
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4641      	mov	r1, r8
 8002660:	1a51      	subs	r1, r2, r1
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	4649      	mov	r1, r9
 8002666:	eb63 0301 	sbc.w	r3, r3, r1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002678:	4659      	mov	r1, fp
 800267a:	018b      	lsls	r3, r1, #6
 800267c:	4651      	mov	r1, sl
 800267e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002682:	4651      	mov	r1, sl
 8002684:	018a      	lsls	r2, r1, #6
 8002686:	4651      	mov	r1, sl
 8002688:	1a54      	subs	r4, r2, r1
 800268a:	4659      	mov	r1, fp
 800268c:	eb63 0501 	sbc.w	r5, r3, r1
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	00eb      	lsls	r3, r5, #3
 800269a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269e:	00e2      	lsls	r2, r4, #3
 80026a0:	4614      	mov	r4, r2
 80026a2:	461d      	mov	r5, r3
 80026a4:	4643      	mov	r3, r8
 80026a6:	18e3      	adds	r3, r4, r3
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	464b      	mov	r3, r9
 80026ac:	eb45 0303 	adc.w	r3, r5, r3
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026be:	4629      	mov	r1, r5
 80026c0:	028b      	lsls	r3, r1, #10
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c8:	4621      	mov	r1, r4
 80026ca:	028a      	lsls	r2, r1, #10
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d4:	2200      	movs	r2, #0
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026de:	f7fd fd91 	bl	8000204 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4613      	mov	r3, r2
 80026e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0f1b      	lsrs	r3, r3, #28
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800270a:	e003      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_GetSysClockFreq+0x45c>)
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002712:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002718:	4618      	mov	r0, r3
 800271a:	37b8      	adds	r7, #184	; 0xb8
 800271c:	46bd      	mov	sp, r7
 800271e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	00f42400 	.word	0x00f42400

0800272c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e28d      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8083 	beq.w	8002852 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800274c:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b04      	cmp	r3, #4
 8002756:	d019      	beq.n	800278c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002758:	4b91      	ldr	r3, [pc, #580]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002760:	2b08      	cmp	r3, #8
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002764:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002770:	d00c      	beq.n	800278c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002772:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d112      	bne.n	80027a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278a:	d10b      	bne.n	80027a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	4b84      	ldr	r3, [pc, #528]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d05b      	beq.n	8002850 <HAL_RCC_OscConfig+0x124>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d157      	bne.n	8002850 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e25a      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x90>
 80027ae:	4b7c      	ldr	r3, [pc, #496]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7b      	ldr	r2, [pc, #492]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <HAL_RCC_OscConfig+0xcc>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0xb4>
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a75      	ldr	r2, [pc, #468]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a72      	ldr	r2, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0xcc>
 80027e0:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a6b      	ldr	r2, [pc, #428]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe f9a4 	bl	8000b4c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe f9a0 	bl	8000b4c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e21f      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xdc>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe f990 	bl	8000b4c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe f98c 	bl	8000b4c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e20b      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x104>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d06f      	beq.n	800293e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800285e:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d017      	beq.n	800289a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002872:	2b08      	cmp	r3, #8
 8002874:	d105      	bne.n	8002882 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002876:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x186>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1d3      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4937      	ldr	r1, [pc, #220]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCC_OscConfig+0x278>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe f939 	bl	8000b4c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe f935 	bl	8000b4c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1b4      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4925      	ldr	r1, [pc, #148]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_OscConfig+0x278>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe f918 	bl	8000b4c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe f914 	bl	8000b4c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e193      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d036      	beq.n	80029b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_RCC_OscConfig+0x27c>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe f8f8 	bl	8000b4c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002960:	f7fe f8f4 	bl	8000b4c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e173      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x234>
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_OscConfig+0x27c>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe f8e1 	bl	8000b4c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	e00e      	b.n	80029ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298e:	f7fe f8dd 	bl	8000b4c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d907      	bls.n	80029ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e15c      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	42470000 	.word	0x42470000
 80029a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ea      	bne.n	800298e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8097 	beq.w	8002af4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b83      	ldr	r3, [pc, #524]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <HAL_RCC_OscConfig+0x4b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x4b0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x4b0>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe f89d 	bl	8000b4c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe f899 	bl	8000b4c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e118      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b6c      	ldr	r3, [pc, #432]	; (8002bdc <HAL_RCC_OscConfig+0x4b0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x31e>
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x358>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x340>
 8002a52:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a60      	ldr	r2, [pc, #384]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a5d      	ldr	r2, [pc, #372]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x358>
 8002a6c:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a59      	ldr	r2, [pc, #356]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70
 8002a78:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f85e 	bl	8000b4c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe f85a 	bl	8000b4c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0d7      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <HAL_RCC_OscConfig+0x368>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe f848 	bl	8000b4c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe f844 	bl	8000b4c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0c1      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80ad 	beq.w	8002c58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d060      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d145      	bne.n	8002b9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCC_OscConfig+0x4b4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe f818 	bl	8000b4c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe f814 	bl	8000b4c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e093      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	491b      	ldr	r1, [pc, #108]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x4b4>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fd ffe9 	bl	8000b4c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fd ffe5 	bl	8000b4c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e064      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x452>
 8002b9c:	e05c      	b.n	8002c58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x4b4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fd ffd2 	bl	8000b4c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fd ffce 	bl	8000b4c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e04d      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x480>
 8002bca:	e045      	b.n	8002c58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e040      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_RCC_OscConfig+0x538>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d030      	beq.n	8002c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d129      	bne.n	8002c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d122      	bne.n	8002c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d119      	bne.n	8002c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d10f      	bne.n	8002c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800

08002c68 <__libc_init_array>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	4d0d      	ldr	r5, [pc, #52]	; (8002ca0 <__libc_init_array+0x38>)
 8002c6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ca4 <__libc_init_array+0x3c>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	2600      	movs	r6, #0
 8002c74:	42a6      	cmp	r6, r4
 8002c76:	d109      	bne.n	8002c8c <__libc_init_array+0x24>
 8002c78:	4d0b      	ldr	r5, [pc, #44]	; (8002ca8 <__libc_init_array+0x40>)
 8002c7a:	4c0c      	ldr	r4, [pc, #48]	; (8002cac <__libc_init_array+0x44>)
 8002c7c:	f000 f820 	bl	8002cc0 <_init>
 8002c80:	1b64      	subs	r4, r4, r5
 8002c82:	10a4      	asrs	r4, r4, #2
 8002c84:	2600      	movs	r6, #0
 8002c86:	42a6      	cmp	r6, r4
 8002c88:	d105      	bne.n	8002c96 <__libc_init_array+0x2e>
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c90:	4798      	blx	r3
 8002c92:	3601      	adds	r6, #1
 8002c94:	e7ee      	b.n	8002c74 <__libc_init_array+0xc>
 8002c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9a:	4798      	blx	r3
 8002c9c:	3601      	adds	r6, #1
 8002c9e:	e7f2      	b.n	8002c86 <__libc_init_array+0x1e>
 8002ca0:	08002cf8 	.word	0x08002cf8
 8002ca4:	08002cf8 	.word	0x08002cf8
 8002ca8:	08002cf8 	.word	0x08002cf8
 8002cac:	08002cfc 	.word	0x08002cfc

08002cb0 <memset>:
 8002cb0:	4402      	add	r2, r0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d100      	bne.n	8002cba <memset+0xa>
 8002cb8:	4770      	bx	lr
 8002cba:	f803 1b01 	strb.w	r1, [r3], #1
 8002cbe:	e7f9      	b.n	8002cb4 <memset+0x4>

08002cc0 <_init>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	bf00      	nop
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr

08002ccc <_fini>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr
