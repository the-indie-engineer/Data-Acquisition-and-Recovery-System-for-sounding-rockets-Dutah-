
Sensors Integration 04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c754  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800c928  0800c928  0001c928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd58  0800cd58  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd60  0800cd60  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd64  0800cd64  0001cd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800cd68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20000088  0800cdf0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000a0c  0800cdf0  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a1c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f6  00000000  00000000  00038ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a74  00000000  00000000  0003e988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b49f  00000000  00000000  000643fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4159  00000000  00000000  0007f89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001639f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c40  00000000  00000000  00163a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c90c 	.word	0x0800c90c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800c90c 	.word	0x0800c90c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000fd2:	23aa      	movs	r3, #170	; 0xaa
 8000fd4:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2316      	movs	r3, #22
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <read_calliberation_data+0x124>)
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	21ee      	movs	r1, #238	; 0xee
 8000fea:	4842      	ldr	r0, [pc, #264]	; (80010f4 <read_calliberation_data+0x128>)
 8000fec:	f004 fda2 	bl	8005b34 <HAL_I2C_Mem_Read>
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <read_calliberation_data+0x124>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <read_calliberation_data+0x124>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <read_calliberation_data+0x12c>)
 8001004:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <read_calliberation_data+0x124>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <read_calliberation_data+0x124>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <read_calliberation_data+0x130>)
 800101a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <read_calliberation_data+0x124>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <read_calliberation_data+0x124>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <read_calliberation_data+0x134>)
 8001030:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <read_calliberation_data+0x124>)
 8001034:	799b      	ldrb	r3, [r3, #6]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <read_calliberation_data+0x124>)
 800103c:	79db      	ldrb	r3, [r3, #7]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <read_calliberation_data+0x138>)
 8001048:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <read_calliberation_data+0x124>)
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <read_calliberation_data+0x124>)
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <read_calliberation_data+0x13c>)
 8001060:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <read_calliberation_data+0x124>)
 8001064:	7a9b      	ldrb	r3, [r3, #10]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <read_calliberation_data+0x124>)
 800106c:	7adb      	ldrb	r3, [r3, #11]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <read_calliberation_data+0x140>)
 8001078:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <read_calliberation_data+0x124>)
 800107c:	7b1b      	ldrb	r3, [r3, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <read_calliberation_data+0x124>)
 8001084:	7b5b      	ldrb	r3, [r3, #13]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <read_calliberation_data+0x144>)
 800108e:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <read_calliberation_data+0x124>)
 8001092:	7b9b      	ldrb	r3, [r3, #14]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <read_calliberation_data+0x124>)
 800109a:	7bdb      	ldrb	r3, [r3, #15]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <read_calliberation_data+0x148>)
 80010a4:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <read_calliberation_data+0x124>)
 80010a8:	7c1b      	ldrb	r3, [r3, #16]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <read_calliberation_data+0x124>)
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <read_calliberation_data+0x14c>)
 80010ba:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <read_calliberation_data+0x124>)
 80010be:	7c9b      	ldrb	r3, [r3, #18]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <read_calliberation_data+0x124>)
 80010c6:	7cdb      	ldrb	r3, [r3, #19]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <read_calliberation_data+0x150>)
 80010d0:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <read_calliberation_data+0x124>)
 80010d4:	7d1b      	ldrb	r3, [r3, #20]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <read_calliberation_data+0x124>)
 80010dc:	7d5b      	ldrb	r3, [r3, #21]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <read_calliberation_data+0x154>)
 80010e6:	801a      	strh	r2, [r3, #0]

}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200000ec 	.word	0x200000ec
 80010f4:	20000270 	.word	0x20000270
 80010f8:	200000a4 	.word	0x200000a4
 80010fc:	200000a6 	.word	0x200000a6
 8001100:	200000a8 	.word	0x200000a8
 8001104:	200000aa 	.word	0x200000aa
 8001108:	200000ac 	.word	0x200000ac
 800110c:	200000ae 	.word	0x200000ae
 8001110:	200000b0 	.word	0x200000b0
 8001114:	200000b2 	.word	0x200000b2
 8001118:	200000b4 	.word	0x200000b4
 800111c:	200000b6 	.word	0x200000b6
 8001120:	200000b8 	.word	0x200000b8

08001124 <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800112a:	232e      	movs	r3, #46	; 0x2e
 800112c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22f4      	movs	r2, #244	; 0xf4
 8001140:	21ee      	movs	r1, #238	; 0xee
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <Get_UTemp+0x60>)
 8001144:	f004 fbfc 	bl	8005940 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001148:	2005      	movs	r0, #5
 800114a:	f002 ff95 	bl	8004078 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2302      	movs	r3, #2
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <Get_UTemp+0x64>)
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	22f6      	movs	r2, #246	; 0xf6
 8001160:	21ee      	movs	r1, #238	; 0xee
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <Get_UTemp+0x60>)
 8001164:	f004 fce6 	bl	8005b34 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <Get_UTemp+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <Get_UTemp+0x64>)
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000270 	.word	0x20000270
 8001188:	20000108 	.word	0x20000108

0800118c <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001190:	f7ff ffc8 	bl	8001124 <Get_UTemp>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <BMP180_GetTemp+0x108>)
 800119a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <BMP180_GetTemp+0x108>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a3d      	ldr	r2, [pc, #244]	; (8001298 <BMP180_GetTemp+0x10c>)
 80011a2:	8812      	ldrh	r2, [r2, #0]
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9dc 	bl	8000564 <__aeabi_i2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	4b3a      	ldr	r3, [pc, #232]	; (800129c <BMP180_GetTemp+0x110>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9d5 	bl	8000564 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <BMP180_GetTemp+0x114>)
 80011c0:	f7ff fb64 	bl	800088c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7ff fa34 	bl	8000638 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcde 	bl	8000b98 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <BMP180_GetTemp+0x118>)
 80011e0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <BMP180_GetTemp+0x11c>)
 80011e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9bb 	bl	8000564 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <BMP180_GetTemp+0x120>)
 80011f4:	f7ff fa20 	bl	8000638 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <BMP180_GetTemp+0x124>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	461a      	mov	r2, r3
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <BMP180_GetTemp+0x118>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9a8 	bl	8000564 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff fb36 	bl	800088c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcb6 	bl	8000b98 <__aeabi_d2iz>
 800122c:	4603      	mov	r3, r0
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <BMP180_GetTemp+0x128>)
 8001230:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <BMP180_GetTemp+0x118>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <BMP180_GetTemp+0x128>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <BMP180_GetTemp+0x12c>)
 800123e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <BMP180_GetTemp+0x12c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3308      	adds	r3, #8
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f98c 	bl	8000564 <__aeabi_i2d>
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <BMP180_GetTemp+0x130>)
 8001252:	f7ff fb1b 	bl	800088c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc9b 	bl	8000b98 <__aeabi_d2iz>
 8001262:	4603      	mov	r3, r0
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <BMP180_GetTemp+0x134>)
 8001266:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <BMP180_GetTemp+0x134>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f979 	bl	8000564 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <BMP180_GetTemp+0x138>)
 8001278:	f7ff fb08 	bl	800088c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fcd0 	bl	8000c28 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	ee07 3a90 	vmov	s15, r3
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	200000bc 	.word	0x200000bc
 8001298:	200000ae 	.word	0x200000ae
 800129c:	200000ac 	.word	0x200000ac
 80012a0:	40e00000 	.word	0x40e00000
 80012a4:	200000c4 	.word	0x200000c4
 80012a8:	200000b6 	.word	0x200000b6
 80012ac:	40a00000 	.word	0x40a00000
 80012b0:	200000b8 	.word	0x200000b8
 80012b4:	200000c8 	.word	0x200000c8
 80012b8:	200000d4 	.word	0x200000d4
 80012bc:	40300000 	.word	0x40300000
 80012c0:	200000e8 	.word	0x200000e8
 80012c4:	40240000 	.word	0x40240000

080012c8 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3334      	adds	r3, #52	; 0x34
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	22f4      	movs	r2, #244	; 0xf4
 80012f2:	21ee      	movs	r1, #238	; 0xee
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <Get_UPress+0xb0>)
 80012f6:	f004 fb23 	bl	8005940 <HAL_I2C_Mem_Write>

	switch (oss)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d81b      	bhi.n	8001338 <Get_UPress+0x70>
 8001300:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <Get_UPress+0x40>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	08001321 	.word	0x08001321
 8001310:	08001329 	.word	0x08001329
 8001314:	08001331 	.word	0x08001331
	{
		case (0):
			HAL_Delay (5);
 8001318:	2005      	movs	r0, #5
 800131a:	f002 fead 	bl	8004078 <HAL_Delay>
			break;
 800131e:	e00b      	b.n	8001338 <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001320:	2008      	movs	r0, #8
 8001322:	f002 fea9 	bl	8004078 <HAL_Delay>
			break;
 8001326:	e007      	b.n	8001338 <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 8001328:	200e      	movs	r0, #14
 800132a:	f002 fea5 	bl	8004078 <HAL_Delay>
			break;
 800132e:	e003      	b.n	8001338 <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001330:	201a      	movs	r0, #26
 8001332:	f002 fea1 	bl	8004078 <HAL_Delay>
			break;
 8001336:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2303      	movs	r3, #3
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <Get_UPress+0xb4>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f6      	movs	r2, #246	; 0xf6
 800134a:	21ee      	movs	r1, #238	; 0xee
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <Get_UPress+0xb0>)
 800134e:	f004 fbf1 	bl	8005b34 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <Get_UPress+0xb4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	041a      	lsls	r2, r3, #16
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Get_UPress+0xb4>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	4413      	add	r3, r2
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <Get_UPress+0xb4>)
 8001362:	7892      	ldrb	r2, [r2, #2]
 8001364:	441a      	add	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f1c3 0308 	rsb	r3, r3, #8
 800136c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000270 	.word	0x20000270
 800137c:	20000104 	.word	0x20000104

08001380 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff9d 	bl	80012c8 <Get_UPress>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4ba8      	ldr	r3, [pc, #672]	; (8001634 <BMP180_GetPress+0x2b4>)
 8001394:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <BMP180_GetPress+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4aa8      	ldr	r2, [pc, #672]	; (800163c <BMP180_GetPress+0x2bc>)
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8df 	bl	8000564 <__aeabi_i2d>
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <BMP180_GetPress+0x2c0>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8d8 	bl	8000564 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <BMP180_GetPress+0x2c4>)
 80013ba:	f7ff fa67 	bl	800088c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff f937 	bl	8000638 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbe1 	bl	8000b98 <__aeabi_d2iz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a9b      	ldr	r2, [pc, #620]	; (8001648 <BMP180_GetPress+0x2c8>)
 80013da:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013dc:	4b9b      	ldr	r3, [pc, #620]	; (800164c <BMP180_GetPress+0x2cc>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8be 	bl	8000564 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b98      	ldr	r3, [pc, #608]	; (8001650 <BMP180_GetPress+0x2d0>)
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4614      	mov	r4, r2
 80013f8:	461d      	mov	r5, r3
 80013fa:	4b96      	ldr	r3, [pc, #600]	; (8001654 <BMP180_GetPress+0x2d4>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	461a      	mov	r2, r3
 8001402:	4b91      	ldr	r3, [pc, #580]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8ab 	bl	8000564 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff fa39 	bl	800088c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbb9 	bl	8000b98 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	4a8b      	ldr	r2, [pc, #556]	; (8001658 <BMP180_GetPress+0x2d8>)
 800142a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800142c:	4b86      	ldr	r3, [pc, #536]	; (8001648 <BMP180_GetPress+0x2c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b89      	ldr	r3, [pc, #548]	; (8001658 <BMP180_GetPress+0x2d8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a89      	ldr	r2, [pc, #548]	; (800165c <BMP180_GetPress+0x2dc>)
 8001438:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <BMP180_GetPress+0x2dc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001444:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <BMP180_GetPress+0x2e4>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f889 	bl	8000564 <__aeabi_i2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a81      	ldr	r2, [pc, #516]	; (8001660 <BMP180_GetPress+0x2e0>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f87e 	bl	8000564 <__aeabi_i2d>
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <BMP180_GetPress+0x2e8>)
 800146e:	f7ff fa0d 	bl	800088c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f8dd 	bl	8000638 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b71      	ldr	r3, [pc, #452]	; (8001650 <BMP180_GetPress+0x2d0>)
 800148c:	f7ff f9fe 	bl	800088c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fb7e 	bl	8000b98 <__aeabi_d2iz>
 800149c:	4603      	mov	r3, r0
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <BMP180_GetPress+0x2c8>)
 80014a0:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <BMP180_GetPress+0x2ec>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <BMP180_GetPress+0x2e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f856 	bl	8000564 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b64      	ldr	r3, [pc, #400]	; (8001650 <BMP180_GetPress+0x2d0>)
 80014be:	f7ff f9e5 	bl	800088c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb65 	bl	8000b98 <__aeabi_d2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a61      	ldr	r2, [pc, #388]	; (8001658 <BMP180_GetPress+0x2d8>)
 80014d2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014d4:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <BMP180_GetPress+0x2c8>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <BMP180_GetPress+0x2d8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a64      	ldr	r2, [pc, #400]	; (8001670 <BMP180_GetPress+0x2f0>)
 80014e0:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <BMP180_GetPress+0x2f4>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	4b61      	ldr	r3, [pc, #388]	; (8001670 <BMP180_GetPress+0x2f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	441a      	add	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	3302      	adds	r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <BMP180_GetPress+0x17e>
 80014fc:	3303      	adds	r3, #3
 80014fe:	109b      	asrs	r3, r3, #2
 8001500:	461a      	mov	r2, r3
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <BMP180_GetPress+0x2f8>)
 8001504:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <BMP180_GetPress+0x2fc>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	461a      	mov	r2, r3
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <BMP180_GetPress+0x2e0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f824 	bl	8000564 <__aeabi_i2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <BMP180_GetPress+0x300>)
 8001522:	f7ff f9b3 	bl	800088c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb33 	bl	8000b98 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	4a44      	ldr	r2, [pc, #272]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001536:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <BMP180_GetPress+0x304>)
 800153a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f810 	bl	8000564 <__aeabi_i2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <BMP180_GetPress+0x2e0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a44      	ldr	r2, [pc, #272]	; (8001660 <BMP180_GetPress+0x2e0>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f805 	bl	8000564 <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <BMP180_GetPress+0x2e8>)
 8001560:	f7ff f994 	bl	800088c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7ff f864 	bl	8000638 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b42      	ldr	r3, [pc, #264]	; (8001688 <BMP180_GetPress+0x308>)
 800157e:	f7ff f985 	bl	800088c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb05 	bl	8000b98 <__aeabi_d2iz>
 800158e:	4603      	mov	r3, r0
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <BMP180_GetPress+0x2d8>)
 8001592:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <BMP180_GetPress+0x2c8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <BMP180_GetPress+0x2d8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4413      	add	r3, r2
 800159e:	3302      	adds	r3, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffdf 	bl	8000564 <__aeabi_i2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <BMP180_GetPress+0x30c>)
 80015ac:	f7ff f96e 	bl	800088c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff faee 	bl	8000b98 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <BMP180_GetPress+0x2f0>)
 80015c0:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <BMP180_GetPress+0x310>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <BMP180_GetPress+0x2f0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb5 	bl	8000544 <__aeabi_ui2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <BMP180_GetPress+0x2c4>)
 80015e0:	f7ff f954 	bl	800088c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fafc 	bl	8000be8 <__aeabi_d2uiz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <BMP180_GetPress+0x314>)
 80015f4:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <BMP180_GetPress+0x2b4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <BMP180_GetPress+0x2f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa41 f202 	asr.w	r2, r1, r2
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <BMP180_GetPress+0x318>)
 8001612:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <BMP180_GetPress+0x318>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db41      	blt.n	80016a0 <BMP180_GetPress+0x320>
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <BMP180_GetPress+0x318>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <BMP180_GetPress+0x314>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <BMP180_GetPress+0x31c>)
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e040      	b.n	80016b4 <BMP180_GetPress+0x334>
 8001632:	bf00      	nop
 8001634:	200000c0 	.word	0x200000c0
 8001638:	200000bc 	.word	0x200000bc
 800163c:	200000ae 	.word	0x200000ae
 8001640:	200000ac 	.word	0x200000ac
 8001644:	40e00000 	.word	0x40e00000
 8001648:	200000c4 	.word	0x200000c4
 800164c:	200000b6 	.word	0x200000b6
 8001650:	40a00000 	.word	0x40a00000
 8001654:	200000b8 	.word	0x200000b8
 8001658:	200000c8 	.word	0x200000c8
 800165c:	200000d4 	.word	0x200000d4
 8001660:	200000dc 	.word	0x200000dc
 8001664:	200000b2 	.word	0x200000b2
 8001668:	40b00000 	.word	0x40b00000
 800166c:	200000a6 	.word	0x200000a6
 8001670:	200000cc 	.word	0x200000cc
 8001674:	200000a4 	.word	0x200000a4
 8001678:	200000d0 	.word	0x200000d0
 800167c:	200000a8 	.word	0x200000a8
 8001680:	40c00000 	.word	0x40c00000
 8001684:	200000b0 	.word	0x200000b0
 8001688:	40f00000 	.word	0x40f00000
 800168c:	40100000 	.word	0x40100000
 8001690:	200000aa 	.word	0x200000aa
 8001694:	200000d8 	.word	0x200000d8
 8001698:	200000e0 	.word	0x200000e0
 800169c:	200000e4 	.word	0x200000e4
	else Press = (B7/B4)*2;
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <BMP180_GetPress+0x43c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <BMP180_GetPress+0x440>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <BMP180_GetPress+0x444>)
 80016b2:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <BMP180_GetPress+0x444>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_i2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <BMP180_GetPress+0x448>)
 80016c4:	f7ff f8e2 	bl	800088c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <BMP180_GetPress+0x444>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff45 	bl	8000564 <__aeabi_i2d>
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <BMP180_GetPress+0x448>)
 80016e0:	f7ff f8d4 	bl	800088c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe ffa4 	bl	8000638 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa4e 	bl	8000b98 <__aeabi_d2iz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a33      	ldr	r2, [pc, #204]	; (80017cc <BMP180_GetPress+0x44c>)
 8001700:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <BMP180_GetPress+0x44c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f640 32de 	movw	r2, #3038	; 0xbde
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff28 	bl	8000564 <__aeabi_i2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <BMP180_GetPress+0x450>)
 800171a:	f7ff f8b7 	bl	800088c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa37 	bl	8000b98 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <BMP180_GetPress+0x44c>)
 800172e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <BMP180_GetPress+0x444>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <BMP180_GetPress+0x454>)
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff12 	bl	8000564 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <BMP180_GetPress+0x450>)
 8001746:	f7ff f8a1 	bl	800088c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa21 	bl	8000b98 <__aeabi_d2iz>
 8001756:	4603      	mov	r3, r0
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <BMP180_GetPress+0x458>)
 800175a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <BMP180_GetPress+0x444>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feff 	bl	8000564 <__aeabi_i2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <BMP180_GetPress+0x44c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <BMP180_GetPress+0x458>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fef3 	bl	8000564 <__aeabi_i2d>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <BMP180_GetPress+0x45c>)
 8001784:	f7ff f882 	bl	800088c <__aeabi_ddiv>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fd9c 	bl	80002cc <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9fc 	bl	8000b98 <__aeabi_d2iz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <BMP180_GetPress+0x444>)
 80017a4:	6013      	str	r3, [r2, #0]
	return Press;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <BMP180_GetPress+0x444>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	200000e0 	.word	0x200000e0
 80017c0:	200000d8 	.word	0x200000d8
 80017c4:	200000e4 	.word	0x200000e4
 80017c8:	40700000 	.word	0x40700000
 80017cc:	200000c4 	.word	0x200000c4
 80017d0:	40f00000 	.word	0x40f00000
 80017d4:	ffffe343 	.word	0xffffe343
 80017d8:	200000c8 	.word	0x200000c8
 80017dc:	40300000 	.word	0x40300000

080017e0 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fdc9 	bl	8001380 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <BMP180_GetAlt+0x88>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800186c <BMP180_GetAlt+0x8c>
 80017fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001802:	ee16 0a90 	vmov	r0, s13
 8001806:	f7fe febf 	bl	8000588 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001858 <BMP180_GetAlt+0x78>
 8001812:	ec43 2b10 	vmov	d0, r2, r3
 8001816:	f00a f95f 	bl	800bad8 <pow>
 800181a:	ec53 2b10 	vmov	r2, r3, d0
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	4913      	ldr	r1, [pc, #76]	; (8001870 <BMP180_GetAlt+0x90>)
 8001824:	f7fe fd50 	bl	80002c8 <__aeabi_dsub>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a30b      	add	r3, pc, #44	; (adr r3, 8001860 <BMP180_GetAlt+0x80>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9f1 	bl	8000c28 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	ee07 3a90 	vmov	s15, r3
}
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	cc745124 	.word	0xcc745124
 800185c:	3fc85b95 	.word	0x3fc85b95
 8001860:	00000000 	.word	0x00000000
 8001864:	40e5a540 	.word	0x40e5a540
 8001868:	200000e4 	.word	0x200000e4
 800186c:	47c5e680 	.word	0x47c5e680
 8001870:	3ff00000 	.word	0x3ff00000

08001874 <BMP180_Start>:

void BMP180_Start (void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001878:	f7ff fba8 	bl	8000fcc <read_calliberation_data>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <shiftIn>:
#include "HX710B.h"

enum HX_MODE { NONE, DIFF_10Hz, TEMP_40Hz, DIFF_40Hz};
const byte HX_MODE = DIFF_40Hz;

uint8_t shiftIn(GPIO_TypeDef* dataPort, uint16_t dataPin, GPIO_TypeDef* clockPort, uint16_t clockPin, uint8_t bitOrder) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	460b      	mov	r3, r1
 800188e:	817b      	strh	r3, [r7, #10]
 8001890:	4613      	mov	r3, r2
 8001892:	813b      	strh	r3, [r7, #8]
	uint8_t value = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	for (i = 0; i < 8; ++i) {
 8001898:	2300      	movs	r3, #0
 800189a:	75bb      	strb	r3, [r7, #22]
 800189c:	e035      	b.n	800190a <shiftIn+0x8a>
		HAL_GPIO_WritePin(clockPort,clockPin, 1);
 800189e:	893b      	ldrh	r3, [r7, #8]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f003 feed 	bl	8005684 <HAL_GPIO_WritePin>
		if (bitOrder == LSBFIRST)
 80018aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d110      	bne.n	80018d4 <shiftIn+0x54>
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << i;
 80018b2:	897b      	ldrh	r3, [r7, #10]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f003 fecc 	bl	8005654 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	7dbb      	ldrb	r3, [r7, #22]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e011      	b.n	80018f8 <shiftIn+0x78>
		else
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << (7 - i);
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	4619      	mov	r1, r3
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f003 febb 	bl	8005654 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	7dbb      	ldrb	r3, [r7, #22]
 80018e4:	f1c3 0307 	rsb	r3, r3, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(clockPort, clockPin, 0);
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f003 fec0 	bl	8005684 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; ++i) {
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	3301      	adds	r3, #1
 8001908:	75bb      	strb	r3, [r7, #22]
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d9c6      	bls.n	800189e <shiftIn+0x1e>
	}
	return value;
 8001910:	7dfb      	ldrb	r3, [r7, #23]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <readHX>:

unsigned long readHX() {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b087      	sub	sp, #28
 8001920:	af02      	add	r7, sp, #8

  // pulse clock line to start a reading
  for (char i = 0; i < HX_MODE; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e00e      	b.n	8001946 <readHX+0x2a>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 1);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192e:	4827      	ldr	r0, [pc, #156]	; (80019cc <readHX+0xb0>)
 8001930:	f003 fea8 	bl	8005684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4824      	ldr	r0, [pc, #144]	; (80019cc <readHX+0xb0>)
 800193c:	f003 fea2 	bl	8005684 <HAL_GPIO_WritePin>
  for (char i = 0; i < HX_MODE; i++) {
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3301      	adds	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	2203      	movs	r2, #3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4293      	cmp	r3, r2
 800194c:	d3ec      	bcc.n	8001928 <readHX+0xc>
  }

  // wait for the reading to finish
  while (HAL_GPIO_ReadPin(NCP_DAT_GPIO_Port,NCP_DAT_Pin)) {}
 800194e:	bf00      	nop
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <readHX+0xb0>)
 8001956:	f003 fe7d 	bl	8005654 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f7      	bne.n	8001950 <readHX+0x34>

  // read the 24-bit pressure as 3 bytes using SPI
  byte data[3];
  for (byte j = 3; j--;) {
 8001960:	2303      	movs	r3, #3
 8001962:	73bb      	strb	r3, [r7, #14]
 8001964:	e011      	b.n	800198a <readHX+0x6e>
    data[j] = shiftIn(NCP_DAT_GPIO_Port, NCP_DAT_Pin, NCP_SCK_GPIO_Port, NCP_SCK_Pin, MSBFIRST);
 8001966:	7bbc      	ldrb	r4, [r7, #14]
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	4a16      	ldr	r2, [pc, #88]	; (80019cc <readHX+0xb0>)
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <readHX+0xb0>)
 8001978:	f7ff ff82 	bl	8001880 <shiftIn>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	f104 0310 	add.w	r3, r4, #16
 8001984:	443b      	add	r3, r7
 8001986:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for (byte j = 3; j--;) {
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	73ba      	strb	r2, [r7, #14]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e8      	bne.n	8001966 <readHX+0x4a>
  }

  data[2] ^= 0x80;  // see note
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800199a:	43db      	mvns	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	71bb      	strb	r3, [r7, #6]

  // shift the 3 bytes into a large integer
  long result=0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  result += (long)data[2] << 16;
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	4413      	add	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
  result += (long)data[1] << 8;
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  result += (long)data[0];
 80019b8:	793b      	ldrb	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]

  return result;
 80019c2:	68bb      	ldr	r3, [r7, #8]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40020000 	.word	0x40020000

080019d0 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	4834      	ldr	r0, [pc, #208]	; (8001ab4 <Max6675_Read_Temp+0xe4>)
 80019e2:	f003 fe4f 	bl	8005684 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80019e6:	2332      	movs	r3, #50	; 0x32
 80019e8:	2201      	movs	r2, #1
 80019ea:	4933      	ldr	r1, [pc, #204]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 80019ec:	4833      	ldr	r0, [pc, #204]	; (8001abc <Max6675_Read_Temp+0xec>)
 80019ee:	f005 fce4 	bl	80073ba <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80019f2:	2201      	movs	r2, #1
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <Max6675_Read_Temp+0xe4>)
 80019f8:	f003 fe44 	bl	8005684 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a08:	701a      	strb	r2, [r3, #0]
Error=0;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d02b      	beq.n	8001a70 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d120      	bne.n	8001a62 <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001a20:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <Max6675_Read_Temp+0xf8>)
 8001a22:	f006 f8fd 	bl	8007c20 <HAL_TIM_Base_Start>
		while(timer_val<1)
 8001a26:	e011      	b.n	8001a4c <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d103      	bne.n	8001a38 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
				break;
 8001a36:	e00d      	b.n	8001a54 <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <Max6675_Read_Temp+0xf8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <Max6675_Read_Temp+0xfc>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a4a:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0e9      	beq.n	8001a28 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <Max6675_Read_Temp+0x100>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e006      	b.n	8001a70 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <Max6675_Read_Temp+0xf0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d102      	bne.n	8001a70 <Max6675_Read_Temp+0xa0>
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <Max6675_Read_Temp+0xf4>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <Max6675_Read_Temp+0xe8>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	10db      	asrs	r3, r3, #3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8001a9c:	20fa      	movs	r0, #250	; 0xfa
 8001a9e:	f002 faeb 	bl	8004078 <HAL_Delay>
return Temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	ee07 3a90 	vmov	s15, r3
}
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	2000010c 	.word	0x2000010c
 8001abc:	200002c4 	.word	0x200002c4
 8001ac0:	2000010e 	.word	0x2000010e
 8001ac4:	2000010f 	.word	0x2000010f
 8001ac8:	2000031c 	.word	0x2000031c
 8001acc:	d1b71759 	.word	0xd1b71759
 8001ad0:	200003c2 	.word	0x200003c2
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b08c      	sub	sp, #48	; 0x30
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <decodeGGA+0x17c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001aee:	e004      	b.n	8001afa <decodeGGA+0x22>
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <decodeGGA+0x17c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <decodeGGA+0x17c>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <decodeGGA+0x17c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b2c      	cmp	r3, #44	; 0x2c
 8001b08:	d1f2      	bne.n	8001af0 <decodeGGA+0x18>
	inx++;
 8001b0a:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <decodeGGA+0x17c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <decodeGGA+0x17c>)
 8001b12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001b14:	e004      	b.n	8001b20 <decodeGGA+0x48>
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <decodeGGA+0x17c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <decodeGGA+0x17c>)
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <decodeGGA+0x17c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b2e:	d1f2      	bne.n	8001b16 <decodeGGA+0x3e>
	inx++;
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <decodeGGA+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <decodeGGA+0x17c>)
 8001b38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001b3a:	e004      	b.n	8001b46 <decodeGGA+0x6e>
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <decodeGGA+0x17c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <decodeGGA+0x17c>)
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <decodeGGA+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b2c      	cmp	r3, #44	; 0x2c
 8001b54:	d1f2      	bne.n	8001b3c <decodeGGA+0x64>
	inx++;
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <decodeGGA+0x17c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <decodeGGA+0x17c>)
 8001b5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001b60:	e004      	b.n	8001b6c <decodeGGA+0x94>
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <decodeGGA+0x17c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <decodeGGA+0x17c>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <decodeGGA+0x17c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b2c      	cmp	r3, #44	; 0x2c
 8001b7a:	d1f2      	bne.n	8001b62 <decodeGGA+0x8a>
	inx++;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <decodeGGA+0x17c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <decodeGGA+0x17c>)
 8001b84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001b86:	e004      	b.n	8001b92 <decodeGGA+0xba>
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <decodeGGA+0x17c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <decodeGGA+0x17c>)
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <decodeGGA+0x17c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba0:	d1f2      	bne.n	8001b88 <decodeGGA+0xb0>
	inx++;
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <decodeGGA+0x17c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <decodeGGA+0x17c>)
 8001baa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001bac:	e004      	b.n	8001bb8 <decodeGGA+0xe0>
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <decodeGGA+0x17c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <decodeGGA+0x17c>)
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <decodeGGA+0x17c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001bc6:	d1f2      	bne.n	8001bae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <decodeGGA+0x17c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <decodeGGA+0x17c>)
 8001bd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <decodeGGA+0x17c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b31      	cmp	r3, #49	; 0x31
 8001be0:	d00f      	beq.n	8001c02 <decodeGGA+0x12a>
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <decodeGGA+0x17c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b32      	cmp	r3, #50	; 0x32
 8001bf0:	d007      	beq.n	8001c02 <decodeGGA+0x12a>
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <decodeGGA+0x17c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b36      	cmp	r3, #54	; 0x36
 8001c00:	d106      	bne.n	8001c10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <decodeGGA+0x17c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c0e:	e009      	b.n	8001c24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001c16:	2301      	movs	r3, #1
 8001c18:	e2fd      	b.n	8002216 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <decodeGGA+0x17c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <decodeGGA+0x17c>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <decodeGGA+0x17c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2c      	cmp	r3, #44	; 0x2c
 8001c32:	d1f2      	bne.n	8001c1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <decodeGGA+0x17c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <decodeGGA+0x17c>)
 8001c3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	220c      	movs	r2, #12
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fb36 	bl	80092b8 <memset>
	i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c50:	e016      	b.n	8001c80 <decodeGGA+0x1a8>
 8001c52:	bf00      	nop
 8001c54:	20000110 	.word	0x20000110
	{
		buffer[i] = GGAbuffer[inx];
 8001c58:	4bab      	ldr	r3, [pc, #684]	; (8001f08 <decodeGGA+0x430>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	7819      	ldrb	r1, [r3, #0]
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	4413      	add	r3, r2
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
		i++;
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	3301      	adds	r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001c76:	4ba4      	ldr	r3, [pc, #656]	; (8001f08 <decodeGGA+0x430>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4aa2      	ldr	r2, [pc, #648]	; (8001f08 <decodeGGA+0x430>)
 8001c7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <decodeGGA+0x430>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c8e:	d1e3      	bne.n	8001c58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 fabd 	bl	8009214 <atoi>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <decodeGGA+0x434>)
 8001c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca2:	1312      	asrs	r2, r2, #12
 8001ca4:	17db      	asrs	r3, r3, #31
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	4b99      	ldr	r3, [pc, #612]	; (8001f10 <decodeGGA+0x438>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4999      	ldr	r1, [pc, #612]	; (8001f14 <decodeGGA+0x43c>)
 8001cae:	fb81 0103 	smull	r0, r1, r1, r3
 8001cb2:	1149      	asrs	r1, r1, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1acb      	subs	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a97      	ldr	r2, [pc, #604]	; (8001f18 <decodeGGA+0x440>)
 8001cbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f007 faa6 	bl	8009214 <atoi>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <decodeGGA+0x43c>)
 8001ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd0:	1152      	asrs	r2, r2, #5
 8001cd2:	17db      	asrs	r3, r3, #31
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	4a8f      	ldr	r2, [pc, #572]	; (8001f14 <decodeGGA+0x43c>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1151      	asrs	r1, r2, #5
 8001cde:	17da      	asrs	r2, r3, #31
 8001ce0:	1a8a      	subs	r2, r1, r2
 8001ce2:	2164      	movs	r1, #100	; 0x64
 8001ce4:	fb01 f202 	mul.w	r2, r1, r2
 8001ce8:	1a9a      	subs	r2, r3, r2
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <decodeGGA+0x438>)
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <decodeGGA+0x43c>)
 8001cf0:	fb83 0301 	smull	r0, r3, r3, r1
 8001cf4:	1158      	asrs	r0, r3, #5
 8001cf6:	17cb      	asrs	r3, r1, #31
 8001cf8:	1ac3      	subs	r3, r0, r3
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	fb00 f303 	mul.w	r3, r0, r3
 8001d00:	1acb      	subs	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <decodeGGA+0x444>)
 8001d06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <decodeGGA+0x444>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b3b      	cmp	r3, #59	; 0x3b
 8001d0e:	dd09      	ble.n	8001d24 <decodeGGA+0x24c>
	{
		min = min-60;
 8001d10:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <decodeGGA+0x444>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3b3c      	subs	r3, #60	; 0x3c
 8001d16:	4a81      	ldr	r2, [pc, #516]	; (8001f1c <decodeGGA+0x444>)
 8001d18:	6013      	str	r3, [r2, #0]
		hr++;
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <decodeGGA+0x440>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a7d      	ldr	r2, [pc, #500]	; (8001f18 <decodeGGA+0x440>)
 8001d22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001d24:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <decodeGGA+0x440>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da09      	bge.n	8001d40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <decodeGGA+0x440>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3318      	adds	r3, #24
 8001d32:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <decodeGGA+0x440>)
 8001d34:	6013      	str	r3, [r2, #0]
		daychange--;
 8001d36:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <decodeGGA+0x448>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a78      	ldr	r2, [pc, #480]	; (8001f20 <decodeGGA+0x448>)
 8001d3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <decodeGGA+0x440>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b17      	cmp	r3, #23
 8001d46:	dd09      	ble.n	8001d5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <decodeGGA+0x440>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b18      	subs	r3, #24
 8001d4e:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <decodeGGA+0x440>)
 8001d50:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d52:	4b73      	ldr	r3, [pc, #460]	; (8001f20 <decodeGGA+0x448>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <decodeGGA+0x448>)
 8001d5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001d5c:	4b6e      	ldr	r3, [pc, #440]	; (8001f18 <decodeGGA+0x440>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <decodeGGA+0x444>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4618      	mov	r0, r3
 8001d72:	f007 fa4f 	bl	8009214 <atoi>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <decodeGGA+0x43c>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	1159      	asrs	r1, r3, #5
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	2164      	movs	r1, #100	; 0x64
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001d90:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <decodeGGA+0x430>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <decodeGGA+0x430>)
 8001d98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	220c      	movs	r2, #12
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f007 fa88 	bl	80092b8 <memset>
	i=0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dac:	e013      	b.n	8001dd6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <decodeGGA+0x430>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	7819      	ldrb	r1, [r3, #0]
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
		i++;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	3301      	adds	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <decodeGGA+0x430>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <decodeGGA+0x430>)
 8001dd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <decodeGGA+0x430>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b2c      	cmp	r3, #44	; 0x2c
 8001de4:	d1e3      	bne.n	8001dae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa10 	bl	8000210 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d801      	bhi.n	8001dfa <decodeGGA+0x322>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e20d      	b.n	8002216 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f007 fa08 	bl	8009214 <atoi>
 8001e04:	4603      	mov	r3, r0
 8001e06:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001e0c:	e002      	b.n	8001e14 <decodeGGA+0x33c>
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	3301      	adds	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e20:	d1f5      	bne.n	8001e0e <decodeGGA+0x336>
	j++;
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	3301      	adds	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe f9ef 	bl	8000210 <strlen>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	4413      	add	r3, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f007 f9e6 	bl	8009214 <atoi>
 8001e48:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb88 	bl	8000564 <__aeabi_i2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <decodeGGA+0x44c>)
 8001e5a:	f7fe fd17 	bl	800088c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f7fe fb7c 	bl	8000564 <__aeabi_i2d>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	460d      	mov	r5, r1
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	3302      	adds	r3, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb75 	bl	8000564 <__aeabi_i2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	ec43 2b11 	vmov	d1, r2, r3
 8001e82:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001f00 <decodeGGA+0x428>
 8001e86:	f009 fe27 	bl	800bad8 <pow>
 8001e8a:	ec53 2b10 	vmov	r2, r3, d0
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f7fe fcfb 	bl	800088c <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	f7fe fa15 	bl	80002cc <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe febd 	bl	8000c28 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]
	inx++;  
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <decodeGGA+0x430>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <decodeGGA+0x430>)
 8001ec0:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <decodeGGA+0x430>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <decodeGGA+0x430>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <decodeGGA+0x430>)
 8001eda:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <decodeGGA+0x430>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <decodeGGA+0x430>)
 8001ee4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	220c      	movs	r2, #12
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f007 f9e2 	bl	80092b8 <memset>
	i=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001ef8:	e02a      	b.n	8001f50 <decodeGGA+0x478>
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	40240000 	.word	0x40240000
 8001f08:	20000110 	.word	0x20000110
 8001f0c:	68db8bad 	.word	0x68db8bad
 8001f10:	20000000 	.word	0x20000000
 8001f14:	51eb851f 	.word	0x51eb851f
 8001f18:	20000114 	.word	0x20000114
 8001f1c:	20000118 	.word	0x20000118
 8001f20:	20000128 	.word	0x20000128
 8001f24:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <decodeGGA+0x680>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
		i++;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	3301      	adds	r3, #1
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f46:	4b84      	ldr	r3, [pc, #528]	; (8002158 <decodeGGA+0x680>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a82      	ldr	r2, [pc, #520]	; (8002158 <decodeGGA+0x680>)
 8001f4e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <decodeGGA+0x680>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f5e:	d1e3      	bne.n	8001f28 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 f955 	bl	8009214 <atoi>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001f72:	e002      	b.n	8001f7a <decodeGGA+0x4a2>
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	3301      	adds	r3, #1
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7a:	f107 020c 	add.w	r2, r7, #12
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b2e      	cmp	r3, #46	; 0x2e
 8001f86:	d1f5      	bne.n	8001f74 <decodeGGA+0x49c>
	j++;
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f93c 	bl	8000210 <strlen>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f007 f933 	bl	8009214 <atoi>
 8001fae:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001fb0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fad5 	bl	8000564 <__aeabi_i2d>
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <decodeGGA+0x684>)
 8001fc0:	f7fe fc64 	bl	800088c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4690      	mov	r8, r2
 8001fca:	4699      	mov	r9, r3
 8001fcc:	69f8      	ldr	r0, [r7, #28]
 8001fce:	f7fe fac9 	bl	8000564 <__aeabi_i2d>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fac2 	bl	8000564 <__aeabi_i2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	ec43 2b11 	vmov	d1, r2, r3
 8001fe8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002150 <decodeGGA+0x678>
 8001fec:	f009 fd74 	bl	800bad8 <pow>
 8001ff0:	ec53 2b10 	vmov	r2, r3, d0
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe fc48 	bl	800088c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe f962 	bl	80002cc <__adddf3>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fe0a 	bl	8000c28 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]
	inx++;
 800201e:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <decodeGGA+0x680>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <decodeGGA+0x680>)
 8002026:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <decodeGGA+0x680>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <decodeGGA+0x680>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <decodeGGA+0x680>)
 8002040:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <decodeGGA+0x680>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <decodeGGA+0x680>)
 800204a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <decodeGGA+0x680>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a41      	ldr	r2, [pc, #260]	; (8002158 <decodeGGA+0x680>)
 8002054:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002056:	4b40      	ldr	r3, [pc, #256]	; (8002158 <decodeGGA+0x680>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <decodeGGA+0x680>)
 800205e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	220c      	movs	r2, #12
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f007 f925 	bl	80092b8 <memset>
	i=0;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8002072:	e013      	b.n	800209c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <decodeGGA+0x680>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	7819      	ldrb	r1, [r3, #0]
 8002080:	f107 020c 	add.w	r2, r7, #12
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	4413      	add	r3, r2
 8002088:	460a      	mov	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
		i++;
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	3301      	adds	r3, #1
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <decodeGGA+0x680>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <decodeGGA+0x680>)
 800209a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <decodeGGA+0x680>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2c      	cmp	r3, #44	; 0x2c
 80020aa:	d1e3      	bne.n	8002074 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4618      	mov	r0, r3
 80020b2:	f007 f8af 	bl	8009214 <atoi>
 80020b6:	4602      	mov	r2, r0
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <decodeGGA+0x680>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <decodeGGA+0x680>)
 80020c4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80020c6:	e004      	b.n	80020d2 <decodeGGA+0x5fa>
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <decodeGGA+0x680>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	4a22      	ldr	r2, [pc, #136]	; (8002158 <decodeGGA+0x680>)
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <decodeGGA+0x680>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b2c      	cmp	r3, #44	; 0x2c
 80020e0:	d1f2      	bne.n	80020c8 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <decodeGGA+0x680>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <decodeGGA+0x680>)
 80020ea:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	220c      	movs	r2, #12
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f007 f8df 	bl	80092b8 <memset>
	i=0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80020fe:	e013      	b.n	8002128 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <decodeGGA+0x680>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	7819      	ldrb	r1, [r3, #0]
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	4413      	add	r3, r2
 8002114:	460a      	mov	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
		i++;
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	3301      	adds	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <decodeGGA+0x680>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <decodeGGA+0x680>)
 8002126:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <decodeGGA+0x680>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b2c      	cmp	r3, #44	; 0x2c
 8002136:	d1e3      	bne.n	8002100 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f007 f869 	bl	8009214 <atoi>
 8002142:	4603      	mov	r3, r0
 8002144:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800214a:	e00c      	b.n	8002166 <decodeGGA+0x68e>
 800214c:	f3af 8000 	nop.w
 8002150:	00000000 	.word	0x00000000
 8002154:	40240000 	.word	0x40240000
 8002158:	20000110 	.word	0x20000110
 800215c:	40590000 	.word	0x40590000
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	3301      	adds	r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b2e      	cmp	r3, #46	; 0x2e
 8002172:	d1f5      	bne.n	8002160 <decodeGGA+0x688>
	j++;
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	3301      	adds	r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f846 	bl	8000210 <strlen>
 8002184:	4602      	mov	r2, r0
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	4413      	add	r3, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f007 f83d 	bl	8009214 <atoi>
 800219a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800219c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9df 	bl	8000564 <__aeabi_i2d>
 80021a6:	4604      	mov	r4, r0
 80021a8:	460d      	mov	r5, r1
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f7fe f9da 	bl	8000564 <__aeabi_i2d>
 80021b0:	4680      	mov	r8, r0
 80021b2:	4689      	mov	r9, r1
 80021b4:	6a38      	ldr	r0, [r7, #32]
 80021b6:	f7fe f9d5 	bl	8000564 <__aeabi_i2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	ec43 2b11 	vmov	d1, r2, r3
 80021c2:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002220 <decodeGGA+0x748>
 80021c6:	f009 fc87 	bl	800bad8 <pow>
 80021ca:	ec53 2b10 	vmov	r2, r3, d0
 80021ce:	4640      	mov	r0, r8
 80021d0:	4649      	mov	r1, r9
 80021d2:	f7fe fb5b 	bl	800088c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe f875 	bl	80002cc <__adddf3>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fd1d 	bl	8000c28 <__aeabi_d2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	621a      	str	r2, [r3, #32]

	inx++;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <decodeGGA+0x750>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <decodeGGA+0x750>)
 8002200:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <decodeGGA+0x750>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8002214:	2300      	movs	r3, #0

}
 8002216:	4618      	mov	r0, r3
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002220:	00000000 	.word	0x00000000
 8002224:	40240000 	.word	0x40240000
 8002228:	20000110 	.word	0x20000110
 800222c:	00000000 	.word	0x00000000

08002230 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002234:	b090      	sub	sp, #64	; 0x40
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <decodeRMC+0x260>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8002246:	e004      	b.n	8002252 <decodeRMC+0x22>
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <decodeRMC+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a90      	ldr	r2, [pc, #576]	; (8002490 <decodeRMC+0x260>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <decodeRMC+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b2c      	cmp	r3, #44	; 0x2c
 8002260:	d1f2      	bne.n	8002248 <decodeRMC+0x18>
	inx++;
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <decodeRMC+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	4a89      	ldr	r2, [pc, #548]	; (8002490 <decodeRMC+0x260>)
 800226a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 800226c:	e004      	b.n	8002278 <decodeRMC+0x48>
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <decodeRMC+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a86      	ldr	r2, [pc, #536]	; (8002490 <decodeRMC+0x260>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b85      	ldr	r3, [pc, #532]	; (8002490 <decodeRMC+0x260>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b2c      	cmp	r3, #44	; 0x2c
 8002286:	d1f2      	bne.n	800226e <decodeRMC+0x3e>
	inx++;
 8002288:	4b81      	ldr	r3, [pc, #516]	; (8002490 <decodeRMC+0x260>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a80      	ldr	r2, [pc, #512]	; (8002490 <decodeRMC+0x260>)
 8002290:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <decodeRMC+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b41      	cmp	r3, #65	; 0x41
 80022a0:	d10d      	bne.n	80022be <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <decodeRMC+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a78      	ldr	r2, [pc, #480]	; (8002490 <decodeRMC+0x260>)
 80022b0:	6013      	str	r3, [r2, #0]
	inx++;
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <decodeRMC+0x260>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a75      	ldr	r2, [pc, #468]	; (8002490 <decodeRMC+0x260>)
 80022ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022bc:	e009      	b.n	80022d2 <decodeRMC+0xa2>
		rmc->isValid =0;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
		return 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e1d8      	b.n	800267a <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022c8:	4b71      	ldr	r3, [pc, #452]	; (8002490 <decodeRMC+0x260>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <decodeRMC+0x260>)
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <decodeRMC+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b2c      	cmp	r3, #44	; 0x2c
 80022e0:	d1f2      	bne.n	80022c8 <decodeRMC+0x98>
	inx++;
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <decodeRMC+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	4a69      	ldr	r2, [pc, #420]	; (8002490 <decodeRMC+0x260>)
 80022ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80022ec:	e004      	b.n	80022f8 <decodeRMC+0xc8>
 80022ee:	4b68      	ldr	r3, [pc, #416]	; (8002490 <decodeRMC+0x260>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a66      	ldr	r2, [pc, #408]	; (8002490 <decodeRMC+0x260>)
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b65      	ldr	r3, [pc, #404]	; (8002490 <decodeRMC+0x260>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b2c      	cmp	r3, #44	; 0x2c
 8002306:	d1f2      	bne.n	80022ee <decodeRMC+0xbe>
	inx++;
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <decodeRMC+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a60      	ldr	r2, [pc, #384]	; (8002490 <decodeRMC+0x260>)
 8002310:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8002312:	e004      	b.n	800231e <decodeRMC+0xee>
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <decodeRMC+0x260>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <decodeRMC+0x260>)
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <decodeRMC+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b2c      	cmp	r3, #44	; 0x2c
 800232c:	d1f2      	bne.n	8002314 <decodeRMC+0xe4>
	inx++;
 800232e:	4b58      	ldr	r3, [pc, #352]	; (8002490 <decodeRMC+0x260>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <decodeRMC+0x260>)
 8002336:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002338:	e004      	b.n	8002344 <decodeRMC+0x114>
 800233a:	4b55      	ldr	r3, [pc, #340]	; (8002490 <decodeRMC+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <decodeRMC+0x260>)
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <decodeRMC+0x260>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b2c      	cmp	r3, #44	; 0x2c
 8002352:	d1f2      	bne.n	800233a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <decodeRMC+0x260>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <decodeRMC+0x260>)
 800235c:	6013      	str	r3, [r2, #0]
	i=0;
 800235e:	2300      	movs	r3, #0
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	220c      	movs	r2, #12
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f006 ffa4 	bl	80092b8 <memset>
	while (RMCbuffer[inx] != ',')
 8002370:	e013      	b.n	800239a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <decodeRMC+0x260>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	f107 0208 	add.w	r2, r7, #8
 8002382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002384:	4413      	add	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
		i++;
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238c:	3301      	adds	r3, #1
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <decodeRMC+0x260>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <decodeRMC+0x260>)
 8002398:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <decodeRMC+0x260>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b2c      	cmp	r3, #44	; 0x2c
 80023a8:	d1e3      	bne.n	8002372 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d056      	beq.n	8002462 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f006 ff2b 	bl	8009214 <atoi>
 80023be:	4603      	mov	r3, r0
 80023c0:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80023c6:	e002      	b.n	80023ce <decodeRMC+0x19e>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	3301      	adds	r3, #1
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ce:	f107 0208 	add.w	r2, r7, #8
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b2e      	cmp	r3, #46	; 0x2e
 80023da:	d1f5      	bne.n	80023c8 <decodeRMC+0x198>
		j++;
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	3301      	adds	r3, #1
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd ff12 	bl	8000210 <strlen>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	4413      	add	r3, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f006 ff09 	bl	8009214 <atoi>
 8002402:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8002404:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8ab 	bl	8000564 <__aeabi_i2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002414:	f7fe f8a6 	bl	8000564 <__aeabi_i2d>
 8002418:	4680      	mov	r8, r0
 800241a:	4689      	mov	r9, r1
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f7fe f8a1 	bl	8000564 <__aeabi_i2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ec43 2b11 	vmov	d1, r2, r3
 800242a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002488 <decodeRMC+0x258>
 800242e:	f009 fb53 	bl	800bad8 <pow>
 8002432:	ec53 2b10 	vmov	r2, r3, d0
 8002436:	4640      	mov	r0, r8
 8002438:	4649      	mov	r1, r9
 800243a:	f7fe fa27 	bl	800088c <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff41 	bl	80002cc <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fbe9 	bl	8000c28 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e003      	b.n	800246a <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <decodeRMC+0x260>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <decodeRMC+0x260>)
 8002472:	6013      	str	r3, [r2, #0]
	i=0;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	220c      	movs	r2, #12
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f006 ff19 	bl	80092b8 <memset>
	while (RMCbuffer[inx] != ',')
 8002486:	e019      	b.n	80024bc <decodeRMC+0x28c>
 8002488:	00000000 	.word	0x00000000
 800248c:	40240000 	.word	0x40240000
 8002490:	20000110 	.word	0x20000110
	{
		buffer[i] = RMCbuffer[inx];
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <decodeRMC+0x460>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	7819      	ldrb	r1, [r3, #0]
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a6:	4413      	add	r3, r2
 80024a8:	460a      	mov	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
		i++;
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	3301      	adds	r3, #1
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <decodeRMC+0x460>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	4a75      	ldr	r2, [pc, #468]	; (8002690 <decodeRMC+0x460>)
 80024ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024bc:	4b74      	ldr	r3, [pc, #464]	; (8002690 <decodeRMC+0x460>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b2c      	cmp	r3, #44	; 0x2c
 80024ca:	d1e3      	bne.n	8002494 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d056      	beq.n	8002584 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 fe9a 	bl	8009214 <atoi>
 80024e0:	4603      	mov	r3, r0
 80024e2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80024e8:	e002      	b.n	80024f0 <decodeRMC+0x2c0>
 80024ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ec:	3301      	adds	r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	f107 0208 	add.w	r2, r7, #8
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b2e      	cmp	r3, #46	; 0x2e
 80024fc:	d1f5      	bne.n	80024ea <decodeRMC+0x2ba>
		j++;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	3301      	adds	r3, #1
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe81 	bl	8000210 <strlen>
 800250e:	4602      	mov	r2, r0
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	4413      	add	r3, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f006 fe78 	bl	8009214 <atoi>
 8002524:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8002526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f81a 	bl	8000564 <__aeabi_i2d>
 8002530:	4604      	mov	r4, r0
 8002532:	460d      	mov	r5, r1
 8002534:	69b8      	ldr	r0, [r7, #24]
 8002536:	f7fe f815 	bl	8000564 <__aeabi_i2d>
 800253a:	4680      	mov	r8, r0
 800253c:	4689      	mov	r9, r1
 800253e:	69f8      	ldr	r0, [r7, #28]
 8002540:	f7fe f810 	bl	8000564 <__aeabi_i2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	ec43 2b11 	vmov	d1, r2, r3
 800254c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002688 <decodeRMC+0x458>
 8002550:	f009 fac2 	bl	800bad8 <pow>
 8002554:	ec53 2b10 	vmov	r2, r3, d0
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fe f996 	bl	800088c <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb0 	bl	80002cc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb58 	bl	8000c28 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	e003      	b.n	800258c <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <decodeRMC+0x460>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <decodeRMC+0x460>)
 8002594:	6013      	str	r3, [r2, #0]
	i=0;
 8002596:	2300      	movs	r3, #0
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	220c      	movs	r2, #12
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 fe88 	bl	80092b8 <memset>
	while (RMCbuffer[inx] != ',')
 80025a8:	e013      	b.n	80025d2 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <decodeRMC+0x460>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	f107 0208 	add.w	r2, r7, #8
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	4413      	add	r3, r2
 80025be:	460a      	mov	r2, r1
 80025c0:	701a      	strb	r2, [r3, #0]
		i++;
 80025c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c4:	3301      	adds	r3, #1
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <decodeRMC+0x460>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a30      	ldr	r2, [pc, #192]	; (8002690 <decodeRMC+0x460>)
 80025d0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <decodeRMC+0x460>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b2c      	cmp	r3, #44	; 0x2c
 80025e0:	d1e3      	bne.n	80025aa <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f006 fe14 	bl	8009214 <atoi>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <decodeRMC+0x464>)
 80025f0:	fb82 1203 	smull	r1, r2, r2, r3
 80025f4:	1312      	asrs	r2, r2, #12
 80025f6:	17db      	asrs	r3, r3, #31
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a27      	ldr	r2, [pc, #156]	; (8002698 <decodeRMC+0x468>)
 80025fc:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	4618      	mov	r0, r3
 8002604:	f006 fe06 	bl	8009214 <atoi>
 8002608:	4603      	mov	r3, r0
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <decodeRMC+0x46c>)
 800260c:	fb82 1203 	smull	r1, r2, r2, r3
 8002610:	1152      	asrs	r2, r2, #5
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <decodeRMC+0x46c>)
 8002618:	fb83 1302 	smull	r1, r3, r3, r2
 800261c:	1159      	asrs	r1, r3, #5
 800261e:	17d3      	asrs	r3, r2, #31
 8002620:	1acb      	subs	r3, r1, r3
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <decodeRMC+0x470>)
 800262c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4618      	mov	r0, r3
 8002634:	f006 fdee 	bl	8009214 <atoi>
 8002638:	4602      	mov	r2, r0
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <decodeRMC+0x46c>)
 800263c:	fb83 1302 	smull	r1, r3, r3, r2
 8002640:	1159      	asrs	r1, r3, #5
 8002642:	17d3      	asrs	r3, r2, #31
 8002644:	1acb      	subs	r3, r1, r3
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <decodeRMC+0x474>)
 8002650:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <decodeRMC+0x468>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <decodeRMC+0x478>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <decodeRMC+0x468>)
 800265e:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <decodeRMC+0x468>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <decodeRMC+0x470>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <decodeRMC+0x474>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	609a      	str	r2, [r3, #8]

	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3740      	adds	r7, #64	; 0x40
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	00000000 	.word	0x00000000
 800268c:	40240000 	.word	0x40240000
 8002690:	20000110 	.word	0x20000110
 8002694:	68db8bad 	.word	0x68db8bad
 8002698:	2000011c 	.word	0x2000011c
 800269c:	51eb851f 	.word	0x51eb851f
 80026a0:	20000120 	.word	0x20000120
 80026a4:	20000124 	.word	0x20000124
 80026a8:	20000128 	.word	0x20000128

080026ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80026c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80026cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80026d4:	e000      	b.n	80026d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80026d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80026d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f9      	beq.n	80026d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80026e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80026ec:	687b      	ldr	r3, [r7, #4]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	0000      	movs	r0, r0
 80026fc:	0000      	movs	r0, r0
	...

08002700 <current_sensor5.1>:
  Ringbuf_init();
  HAL_Delay(500);


  void current_sensor5()
  {
 8002700:	b5b0      	push	{r4, r5, r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <current_sensor5.1+0xa8>)
 800270c:	885a      	ldrh	r2, [r3, #2]
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <current_sensor5.1+0xac>)
 8002710:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <current_sensor5.1+0xac>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271e:	ee17 0a90 	vmov	r0, s15
 8002722:	f7fd ff31 	bl	8000588 <__aeabi_f2d>
 8002726:	a31c      	add	r3, pc, #112	; (adr r3, 8002798 <current_sensor5.1+0x98>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff84 	bl	8000638 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	a319      	add	r3, pc, #100	; (adr r3, 80027a0 <current_sensor5.1+0xa0>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fe f8a5 	bl	800088c <__aeabi_ddiv>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4614      	mov	r4, r2
 8002748:	461d      	mov	r5, r3
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <current_sensor5.1+0xb0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff1a 	bl	8000588 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4620      	mov	r0, r4
 800275a:	4629      	mov	r1, r5
 800275c:	f7fd ff6c 	bl	8000638 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa5e 	bl	8000c28 <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <current_sensor5.1+0xb4>)
 8002770:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.CPM_Current =(1 - rawVoltage5)/sensitivity5;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <current_sensor5.1+0xb4>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800277c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <current_sensor5.1+0xb8>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <current_sensor5.1+0xbc>)
 800278c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  }
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bdb0      	pop	{r4, r5, r7, pc}
 8002798:	66666666 	.word	0x66666666
 800279c:	400a6666 	.word	0x400a6666
 80027a0:	00000000 	.word	0x00000000
 80027a4:	40affe00 	.word	0x40affe00
 80027a8:	200003c4 	.word	0x200003c4
 80027ac:	200003d4 	.word	0x200003d4
 80027b0:	20000008 	.word	0x20000008
 80027b4:	200003d8 	.word	0x200003d8
 80027b8:	20000004 	.word	0x20000004
 80027bc:	2000012c 	.word	0x2000012c

080027c0 <main>:
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
int main(void)
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 80027cc:	f001 fbe2 	bl	8003f94 <HAL_Init>
  SystemClock_Config();
 80027d0:	f000 f9bc 	bl	8002b4c <SystemClock_Config>
  MX_GPIO_Init();
 80027d4:	f000 fc02 	bl	8002fdc <MX_GPIO_Init>
  MX_DMA_Init();
 80027d8:	f000 fbe0 	bl	8002f9c <MX_DMA_Init>
  MX_ADC1_Init();
 80027dc:	f000 fa28 	bl	8002c30 <MX_ADC1_Init>
  MX_SPI1_Init();
 80027e0:	f000 fafe 	bl	8002de0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80027e4:	f000 fb34 	bl	8002e50 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80027e8:	f000 fbae 	bl	8002f48 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80027ec:	f000 fa9c 	bl	8002d28 <MX_I2C1_Init>
  MX_I2C2_Init();
 80027f0:	f000 fac8 	bl	8002d84 <MX_I2C2_Init>
  MX_UART4_Init();
 80027f4:	f000 fb7e 	bl	8002ef4 <MX_UART4_Init>
  HAL_ADC_Init(&hadc1);
 80027f8:	4877      	ldr	r0, [pc, #476]	; (80029d8 <main+0x218>)
 80027fa:	f001 fc61 	bl	80040c0 <HAL_ADC_Init>
  MPU6050_Init();
 80027fe:	f000 fc9f 	bl	8003140 <MPU6050_Init>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 4);
 8002802:	2204      	movs	r2, #4
 8002804:	4975      	ldr	r1, [pc, #468]	; (80029dc <main+0x21c>)
 8002806:	4874      	ldr	r0, [pc, #464]	; (80029d8 <main+0x218>)
 8002808:	f001 fc9e 	bl	8004148 <HAL_ADC_Start_DMA>
  BMP180_Start();
 800280c:	f7ff f832 	bl	8001874 <BMP180_Start>
  Ringbuf_init();
 8002810:	f001 f980 	bl	8003b14 <Ringbuf_init>
  HAL_Delay(500);
 8002814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002818:	f001 fc2e 	bl	8004078 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   HAL_Delay(5);
 800281c:	2005      	movs	r0, #5
 800281e:	f001 fc2b 	bl	8004078 <HAL_Delay>
	  if(Wait_for("GGA")==1)
 8002822:	486f      	ldr	r0, [pc, #444]	; (80029e0 <main+0x220>)
 8002824:	f001 faa6 	bl	8003d74 <Wait_for>
 8002828:	4603      	mov	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <main+0x7e>
	  {
		  Copy_upto("*", GGA);
 800282e:	496d      	ldr	r1, [pc, #436]	; (80029e4 <main+0x224>)
 8002830:	486d      	ldr	r0, [pc, #436]	; (80029e8 <main+0x228>)
 8002832:	f001 fa1f 	bl	8003c74 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 8002836:	496d      	ldr	r1, [pc, #436]	; (80029ec <main+0x22c>)
 8002838:	486a      	ldr	r0, [pc, #424]	; (80029e4 <main+0x224>)
 800283a:	f7ff f94d 	bl	8001ad8 <decodeGGA>
	  }
	  if (Wait_for("RMC")==1)
 800283e:	486c      	ldr	r0, [pc, #432]	; (80029f0 <main+0x230>)
 8002840:	f001 fa98 	bl	8003d74 <Wait_for>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <main+0x9a>
	  {
		  Copy_upto("*",RMC);
 800284a:	496a      	ldr	r1, [pc, #424]	; (80029f4 <main+0x234>)
 800284c:	4866      	ldr	r0, [pc, #408]	; (80029e8 <main+0x228>)
 800284e:	f001 fa11 	bl	8003c74 <Copy_upto>
		  decodeRMC(RMC, &gpsData.rmcstruct);
 8002852:	4969      	ldr	r1, [pc, #420]	; (80029f8 <main+0x238>)
 8002854:	4867      	ldr	r0, [pc, #412]	; (80029f4 <main+0x234>)
 8002856:	f7ff fceb 	bl	8002230 <decodeRMC>
	  }
	  
	  trans1.tlm1.M_Temp=Max6675_Read_Temp();
 800285a:	f7ff f8b9 	bl	80019d0 <Max6675_Read_Temp>
 800285e:	eef0 7a40 	vmov.f32	s15, s0
 8002862:	4b66      	ldr	r3, [pc, #408]	; (80029fc <main+0x23c>)
 8002864:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  barometer_sensor();
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	469c      	mov	ip, r3
 800286e:	f000 f947 	bl	8002b00 <barometer_sensor.0>
	  trans1.tlm1.NC_Press =readHX();
 8002872:	f7ff f853 	bl	800191c <readHX>
 8002876:	ee07 0a90 	vmov	s15, r0
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <main+0x23c>)
 8002880:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	  current_sensor5();
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	469c      	mov	ip, r3
 800288a:	f7ff ff39 	bl	8002700 <current_sensor5.1>
	  current_sensor20();
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	469c      	mov	ip, r3
 8002894:	f000 f8d4 	bl	8002a40 <current_sensor20.2>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 8002898:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <main+0x240>)
 800289a:	495a      	ldr	r1, [pc, #360]	; (8002a04 <main+0x244>)
 800289c:	485a      	ldr	r0, [pc, #360]	; (8002a08 <main+0x248>)
 800289e:	f000 fcb7 	bl	8003210 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 80028a2:	4a5a      	ldr	r2, [pc, #360]	; (8002a0c <main+0x24c>)
 80028a4:	495a      	ldr	r1, [pc, #360]	; (8002a10 <main+0x250>)
 80028a6:	485b      	ldr	r0, [pc, #364]	; (8002a14 <main+0x254>)
 80028a8:	f000 fd36 	bl	8003318 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);
	  trans1.tlm1.Ax=Ax;
 80028ac:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <main+0x248>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a52      	ldr	r2, [pc, #328]	; (80029fc <main+0x23c>)
 80028b2:	6053      	str	r3, [r2, #4]
	  trans1.tlm1.Ay=Ay;
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <main+0x244>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <main+0x23c>)
 80028ba:	6093      	str	r3, [r2, #8]
	  trans1.tlm1.Az=Az;
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <main+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a4e      	ldr	r2, [pc, #312]	; (80029fc <main+0x23c>)
 80028c2:	60d3      	str	r3, [r2, #12]
	  trans1.tlm1.Gx=Gx;
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <main+0x254>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4c      	ldr	r2, [pc, #304]	; (80029fc <main+0x23c>)
 80028ca:	6113      	str	r3, [r2, #16]
	  trans1.tlm1.Gy=Gy;
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <main+0x250>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <main+0x23c>)
 80028d2:	6153      	str	r3, [r2, #20]
	  trans1.tlm1.Gz=Gz;
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <main+0x24c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a48      	ldr	r2, [pc, #288]	; (80029fc <main+0x23c>)
 80028da:	6193      	str	r3, [r2, #24]


	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, En_Voltage_ui);
 80028dc:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <main+0x258>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	484d      	ldr	r0, [pc, #308]	; (8002a1c <main+0x25c>)
 80028e6:	f002 fecd 	bl	8005684 <HAL_GPIO_WritePin>
	  trans1.tlm1.CPM_Voltage = dmaOut[0]*(5.0/4096.0);
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <main+0x21c>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe38 	bl	8000564 <__aeabi_i2d>
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <main+0x260>)
 80028fa:	f7fd fe9d 	bl	8000638 <__aeabi_dmul>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f98f 	bl	8000c28 <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
 800290c:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <main+0x23c>)
 800290e:	61d3      	str	r3, [r2, #28]
	  HAL_GPIO_WritePin(HV_En_GPIO_Port, HV_En_Pin, En_Voltage_ui);
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <main+0x258>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	2120      	movs	r1, #32
 8002918:	4842      	ldr	r0, [pc, #264]	; (8002a24 <main+0x264>)
 800291a:	f002 feb3 	bl	8005684 <HAL_GPIO_WritePin>
	  trans1.tlm1.H_Voltage=dmaOut[3]*(9.36/4096);
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <main+0x21c>)
 8002920:	88db      	ldrh	r3, [r3, #6]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe1e 	bl	8000564 <__aeabi_i2d>
 8002928:	a329      	add	r3, pc, #164	; (adr r3, 80029d0 <main+0x210>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fd fe83 	bl	8000638 <__aeabi_dmul>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f975 	bl	8000c28 <__aeabi_d2f>
 800293e:	4603      	mov	r3, r0
 8002940:	4a2e      	ldr	r2, [pc, #184]	; (80029fc <main+0x23c>)
 8002942:	6213      	str	r3, [r2, #32]

	  HAL_Delay(100);
 8002944:	2064      	movs	r0, #100	; 0x64
 8002946:	f001 fb97 	bl	8004078 <HAL_Delay>

	  memset(TxBuff,"\0",150);
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <main+0x268>)
 800294c:	2296      	movs	r2, #150	; 0x96
 800294e:	4619      	mov	r1, r3
 8002950:	4836      	ldr	r0, [pc, #216]	; (8002a2c <main+0x26c>)
 8002952:	f006 fcb1 	bl	80092b8 <memset>
	  for(int i=0; i<17; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e02f      	b.n	80029bc <main+0x1fc>
	  {
		  char tempbuff[6]={0};
 800295c:	2300      	movs	r3, #0
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	80bb      	strh	r3, [r7, #4]
		  gcvt(trans1.dataframe[i],4,tempbuff);
 8002964:	4a25      	ldr	r2, [pc, #148]	; (80029fc <main+0x23c>)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fe0a 	bl	8000588 <__aeabi_f2d>
 8002974:	4604      	mov	r4, r0
 8002976:	460d      	mov	r5, r1
 8002978:	463b      	mov	r3, r7
 800297a:	4619      	mov	r1, r3
 800297c:	2004      	movs	r0, #4
 800297e:	ec45 4b10 	vmov	d0, r4, r5
 8002982:	f006 fc4b 	bl	800921c <gcvt>
		  //strcat(TxBuff,tempbuff);
		  strcat(tempbuff,",");
 8002986:	463b      	mov	r3, r7
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fc41 	bl	8000210 <strlen>
 800298e:	4603      	mov	r3, r0
 8002990:	461a      	mov	r2, r3
 8002992:	463b      	mov	r3, r7
 8002994:	4413      	add	r3, r2
 8002996:	4926      	ldr	r1, [pc, #152]	; (8002a30 <main+0x270>)
 8002998:	461a      	mov	r2, r3
 800299a:	460b      	mov	r3, r1
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	8013      	strh	r3, [r2, #0]
		  HAL_UART_Transmit(&huart4, tempbuff, strlen(tempbuff), 100);
 80029a0:	463b      	mov	r3, r7
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fc34 	bl	8000210 <strlen>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4639      	mov	r1, r7
 80029ae:	2364      	movs	r3, #100	; 0x64
 80029b0:	4820      	ldr	r0, [pc, #128]	; (8002a34 <main+0x274>)
 80029b2:	f005 fc68 	bl	8008286 <HAL_UART_Transmit>
	  for(int i=0; i<17; i++)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	ddcc      	ble.n	800295c <main+0x19c>
	  }
//	  strcat(TxBuff,"\n");
	  HAL_UART_Transmit(&huart4, "\n", 1, 100);
 80029c2:	2364      	movs	r3, #100	; 0x64
 80029c4:	2201      	movs	r2, #1
 80029c6:	491c      	ldr	r1, [pc, #112]	; (8002a38 <main+0x278>)
 80029c8:	481a      	ldr	r0, [pc, #104]	; (8002a34 <main+0x274>)
 80029ca:	f005 fc5c 	bl	8008286 <HAL_UART_Transmit>
  {
 80029ce:	e725      	b.n	800281c <main+0x5c>
 80029d0:	eb851eb8 	.word	0xeb851eb8
 80029d4:	3f62b851 	.word	0x3f62b851
 80029d8:	20000174 	.word	0x20000174
 80029dc:	200003c4 	.word	0x200003c4
 80029e0:	0800c928 	.word	0x0800c928
 80029e4:	200003e4 	.word	0x200003e4
 80029e8:	0800c92c 	.word	0x0800c92c
 80029ec:	200004ac 	.word	0x200004ac
 80029f0:	0800c930 	.word	0x0800c930
 80029f4:	20000448 	.word	0x20000448
 80029f8:	200004d8 	.word	0x200004d8
 80029fc:	2000012c 	.word	0x2000012c
 8002a00:	200003b0 	.word	0x200003b0
 8002a04:	200003ac 	.word	0x200003ac
 8002a08:	200003a8 	.word	0x200003a8
 8002a0c:	200003bc 	.word	0x200003bc
 8002a10:	200003b8 	.word	0x200003b8
 8002a14:	200003b4 	.word	0x200003b4
 8002a18:	200003c0 	.word	0x200003c0
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	3f540000 	.word	0x3f540000
 8002a24:	40020400 	.word	0x40020400
 8002a28:	0800c934 	.word	0x0800c934
 8002a2c:	200004f0 	.word	0x200004f0
 8002a30:	0800c938 	.word	0x0800c938
 8002a34:	20000364 	.word	0x20000364
 8002a38:	0800c93c 	.word	0x0800c93c
 8002a3c:	00000000 	.word	0x00000000

08002a40 <current_sensor20.2>:
  {
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <current_sensor20.2+0xa8>)
 8002a4c:	889a      	ldrh	r2, [r3, #4]
 8002a4e:	4b27      	ldr	r3, [pc, #156]	; (8002aec <current_sensor20.2+0xac>)
 8002a50:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <current_sensor20.2+0xac>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5e:	ee17 0a90 	vmov	r0, s15
 8002a62:	f7fd fd91 	bl	8000588 <__aeabi_f2d>
 8002a66:	a31c      	add	r3, pc, #112	; (adr r3, 8002ad8 <current_sensor20.2+0x98>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fde4 	bl	8000638 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	a319      	add	r3, pc, #100	; (adr r3, 8002ae0 <current_sensor20.2+0xa0>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd ff05 	bl	800088c <__aeabi_ddiv>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	461d      	mov	r5, r3
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <current_sensor20.2+0xb0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd fdcc 	bl	8000638 <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe f8be 	bl	8000c28 <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <current_sensor20.2+0xb4>)
 8002ab0:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.H_Current =(1 - rawVoltage20)/sensitivity20;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <current_sensor20.2+0xb4>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002abc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <current_sensor20.2+0xb8>)
 8002ac2:	ed93 7a00 	vldr	s14, [r3]
 8002ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <current_sensor20.2+0xbc>)
 8002acc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  }
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	66666666 	.word	0x66666666
 8002adc:	400a6666 	.word	0x400a6666
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	40affe00 	.word	0x40affe00
 8002ae8:	200003c4 	.word	0x200003c4
 8002aec:	200003dc 	.word	0x200003dc
 8002af0:	20000010 	.word	0x20000010
 8002af4:	200003e0 	.word	0x200003e0
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	2000012c 	.word	0x2000012c

08002b00 <barometer_sensor.0>:
  {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 8002b0a:	f7fe fb3f 	bl	800118c <BMP180_GetTemp>
 8002b0e:	eef0 7a40 	vmov.f32	s15, s0
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <barometer_sensor.0+0x40>)
 8002b14:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe fc31 	bl	8001380 <BMP180_GetPress>
 8002b1e:	eef0 7a40 	vmov.f32	s15, s0
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <barometer_sensor.0+0x44>)
 8002b24:	edc3 7a00 	vstr	s15, [r3]
  	  trans1.tlm1.Altitude = BMP180_GetAlt(0);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fe fe59 	bl	80017e0 <BMP180_GetAlt>
 8002b2e:	eef0 7a40 	vmov.f32	s15, s0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <barometer_sensor.0+0x48>)
 8002b34:	edc3 7a00 	vstr	s15, [r3]
  }
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200003cc 	.word	0x200003cc
 8002b44:	200003d0 	.word	0x200003d0
 8002b48:	2000012c 	.word	0x2000012c

08002b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b094      	sub	sp, #80	; 0x50
 8002b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	2234      	movs	r2, #52	; 0x34
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f006 fbac 	bl	80092b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b60:	f107 0308 	add.w	r3, r7, #8
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	2300      	movs	r3, #0
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <SystemClock_Config+0xdc>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <SystemClock_Config+0xdc>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <SystemClock_Config+0xdc>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <SystemClock_Config+0xe0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a25      	ldr	r2, [pc, #148]	; (8002c2c <SystemClock_Config+0xe0>)
 8002b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <SystemClock_Config+0xe0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002bc0:	23b4      	movs	r3, #180	; 0xb4
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f8c9 	bl	8006d6c <HAL_RCC_OscConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002be0:	f000 faa8 	bl	8003134 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002be4:	f003 fd28 	bl	8006638 <HAL_PWREx_EnableOverDrive>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002bee:	f000 faa1 	bl	8003134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf2:	230f      	movs	r3, #15
 8002bf4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	2105      	movs	r1, #5
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 fd61 	bl	80066d8 <HAL_RCC_ClockConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002c1c:	f000 fa8a 	bl	8003134 <Error_Handler>
  }
}
 8002c20:	bf00      	nop
 8002c22:	3750      	adds	r7, #80	; 0x50
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000

08002c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c36:	463b      	mov	r3, r7
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c44:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <MX_ADC1_Init+0xf0>)
 8002c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c50:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c62:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c72:	4a2c      	ldr	r2, [pc, #176]	; (8002d24 <MX_ADC1_Init+0xf4>)
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c7e:	2204      	movs	r2, #4
 8002c80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c90:	4822      	ldr	r0, [pc, #136]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002c92:	f001 fa15 	bl	80040c0 <HAL_ADC_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c9c:	f000 fa4a 	bl	8003134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cac:	463b      	mov	r3, r7
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481a      	ldr	r0, [pc, #104]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002cb2:	f001 fb77 	bl	80043a4 <HAL_ADC_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002cbc:	f000 fa3a 	bl	8003134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc8:	463b      	mov	r3, r7
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4813      	ldr	r0, [pc, #76]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002cce:	f001 fb69 	bl	80043a4 <HAL_ADC_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002cd8:	f000 fa2c 	bl	8003134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002cea:	f001 fb5b 	bl	80043a4 <HAL_ADC_ConfigChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002cf4:	f000 fa1e 	bl	8003134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_ADC1_Init+0xec>)
 8002d06:	f001 fb4d 	bl	80043a4 <HAL_ADC_ConfigChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002d10:	f000 fa10 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000174 	.word	0x20000174
 8002d20:	40012000 	.word	0x40012000
 8002d24:	0f000001 	.word	0x0f000001

08002d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <MX_I2C1_Init+0x54>)
 8002d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <MX_I2C1_Init+0x58>)
 8002d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d66:	f002 fca7 	bl	80056b8 <HAL_I2C_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d70:	f000 f9e0 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	2000021c 	.word	0x2000021c
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	000186a0 	.word	0x000186a0

08002d84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <MX_I2C2_Init+0x54>)
 8002d8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002d90:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <MX_I2C2_Init+0x58>)
 8002d92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002da6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <MX_I2C2_Init+0x50>)
 8002dc2:	f002 fc79 	bl	80056b8 <HAL_I2C_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002dcc:	f000 f9b2 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000270 	.word	0x20000270
 8002dd8:	40005800 	.word	0x40005800
 8002ddc:	000186a0 	.word	0x000186a0

08002de0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002de6:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <MX_SPI1_Init+0x6c>)
 8002de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e2e:	220a      	movs	r2, #10
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_SPI1_Init+0x68>)
 8002e34:	f004 fa38 	bl	80072a8 <HAL_SPI_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002e3e:	f000 f979 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002c4 	.word	0x200002c4
 8002e4c:	40013000 	.word	0x40013000

08002e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <MX_TIM1_Init+0xa0>)
 8002e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e74:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8002e78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e9a:	4814      	ldr	r0, [pc, #80]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e9c:	f004 fe70 	bl	8007b80 <HAL_TIM_Base_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002ea6:	f000 f945 	bl	8003134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eb0:	f107 0308 	add.w	r3, r7, #8
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	480d      	ldr	r0, [pc, #52]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002eb8:	f004 ff1a 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002ec2:	f000 f937 	bl	8003134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ece:	463b      	mov	r3, r7
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4806      	ldr	r0, [pc, #24]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002ed4:	f005 f90e 	bl	80080f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002ede:	f000 f929 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000031c 	.word	0x2000031c
 8002ef0:	40010000 	.word	0x40010000

08002ef4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <MX_UART4_Init+0x50>)
 8002efc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_UART4_Init+0x4c>)
 8002f2c:	f005 f95e 	bl	80081ec <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f36:	f000 f8fd 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000364 	.word	0x20000364
 8002f44:	40004c00 	.word	0x40004c00

08002f48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <MX_USART1_UART_Init+0x50>)
 8002f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f6e:	220c      	movs	r2, #12
 8002f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <MX_USART1_UART_Init+0x4c>)
 8002f80:	f005 f934 	bl	80081ec <HAL_UART_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f8a:	f000 f8d3 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000598 	.word	0x20000598
 8002f98:	40011000 	.word	0x40011000

08002f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <MX_DMA_Init+0x3c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <MX_DMA_Init+0x3c>)
 8002fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <MX_DMA_Init+0x3c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2038      	movs	r0, #56	; 0x38
 8002fc4:	f001 fd79 	bl	8004aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fc8:	2038      	movs	r0, #56	; 0x38
 8002fca:	f001 fd92 	bl	8004af2 <HAL_NVIC_EnableIRQ>

}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]
 8002ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <MX_GPIO_Init+0x114>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a3d      	ldr	r2, [pc, #244]	; (80030f0 <MX_GPIO_Init+0x114>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <MX_GPIO_Init+0x114>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <MX_GPIO_Init+0x114>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <MX_GPIO_Init+0x114>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin|NCP_SCK_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003068:	4822      	ldr	r0, [pc, #136]	; (80030f4 <MX_GPIO_Init+0x118>)
 800306a:	f002 fb0b 	bl	8005684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HV_En_GPIO_Port, HV_En_Pin, GPIO_PIN_RESET);
 800306e:	2200      	movs	r2, #0
 8003070:	2120      	movs	r1, #32
 8003072:	4821      	ldr	r0, [pc, #132]	; (80030f8 <MX_GPIO_Init+0x11c>)
 8003074:	f002 fb06 	bl	8005684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 8003078:	2340      	movs	r3, #64	; 0x40
 800307a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307c:	2301      	movs	r3, #1
 800307e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003080:	2302      	movs	r3, #2
 8003082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	4819      	ldr	r0, [pc, #100]	; (80030f4 <MX_GPIO_Init+0x118>)
 8003090:	f002 f94c 	bl	800532c <HAL_GPIO_Init>

  /*Configure GPIO pins : MT_CS_Pin NCP_SCK_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin|NCP_SCK_Pin;
 8003094:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8003098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4811      	ldr	r0, [pc, #68]	; (80030f4 <MX_GPIO_Init+0x118>)
 80030ae:	f002 f93d 	bl	800532c <HAL_GPIO_Init>

  /*Configure GPIO pin : NCP_DAT_Pin */
  GPIO_InitStruct.Pin = NCP_DAT_Pin;
 80030b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NCP_DAT_GPIO_Port, &GPIO_InitStruct);
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	480b      	ldr	r0, [pc, #44]	; (80030f4 <MX_GPIO_Init+0x118>)
 80030c8:	f002 f930 	bl	800532c <HAL_GPIO_Init>

  /*Configure GPIO pin : HV_En_Pin */
  GPIO_InitStruct.Pin = HV_En_Pin;
 80030cc:	2320      	movs	r3, #32
 80030ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HV_En_GPIO_Port, &GPIO_InitStruct);
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	4619      	mov	r1, r3
 80030e2:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_GPIO_Init+0x11c>)
 80030e4:	f002 f922 	bl	800532c <HAL_GPIO_Init>

}
 80030e8:	bf00      	nop
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400

080030fc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e009      	b.n	8003122 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	60ba      	str	r2, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fac8 	bl	80026ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbf1      	blt.n	800310e <_write+0x12>
	}
	return len;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003138:	b672      	cpsid	i
}
 800313a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800313c:	e7fe      	b.n	800313c <Error_Handler+0x8>
	...

08003140 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8003146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	2301      	movs	r3, #1
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <MPU6050_Init+0xc0>)
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	2275      	movs	r2, #117	; 0x75
 8003158:	21d0      	movs	r1, #208	; 0xd0
 800315a:	482a      	ldr	r0, [pc, #168]	; (8003204 <MPU6050_Init+0xc4>)
 800315c:	f002 fcea 	bl	8005b34 <HAL_I2C_Mem_Read>
 8003160:	4603      	mov	r3, r0
 8003162:	b29a      	uxth	r2, r3
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <MPU6050_Init+0xc8>)
 8003166:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <MPU6050_Init+0xc0>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b68      	cmp	r3, #104	; 0x68
 800316e:	d140      	bne.n	80031f2 <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003170:	4b26      	ldr	r3, [pc, #152]	; (800320c <MPU6050_Init+0xcc>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	2301      	movs	r3, #1
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <MPU6050_Init+0xcc>)
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2301      	movs	r3, #1
 8003186:	226b      	movs	r2, #107	; 0x6b
 8003188:	21d0      	movs	r1, #208	; 0xd0
 800318a:	481e      	ldr	r0, [pc, #120]	; (8003204 <MPU6050_Init+0xc4>)
 800318c:	f002 fbd8 	bl	8005940 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <MPU6050_Init+0xcc>)
 8003192:	2207      	movs	r2, #7
 8003194:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	2301      	movs	r3, #1
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <MPU6050_Init+0xcc>)
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2301      	movs	r3, #1
 80031a6:	2219      	movs	r2, #25
 80031a8:	21d0      	movs	r1, #208	; 0xd0
 80031aa:	4816      	ldr	r0, [pc, #88]	; (8003204 <MPU6050_Init+0xc4>)
 80031ac:	f002 fbc8 	bl	8005940 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <MPU6050_Init+0xcc>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80031b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ba:	9302      	str	r3, [sp, #8]
 80031bc:	2301      	movs	r3, #1
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <MPU6050_Init+0xcc>)
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2301      	movs	r3, #1
 80031c6:	221c      	movs	r2, #28
 80031c8:	21d0      	movs	r1, #208	; 0xd0
 80031ca:	480e      	ldr	r0, [pc, #56]	; (8003204 <MPU6050_Init+0xc4>)
 80031cc:	f002 fbb8 	bl	8005940 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MPU6050_Init+0xcc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80031d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031da:	9302      	str	r3, [sp, #8]
 80031dc:	2301      	movs	r3, #1
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MPU6050_Init+0xcc>)
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2301      	movs	r3, #1
 80031e6:	221b      	movs	r2, #27
 80031e8:	21d0      	movs	r1, #208	; 0xd0
 80031ea:	4806      	ldr	r0, [pc, #24]	; (8003204 <MPU6050_Init+0xc4>)
 80031ec:	f002 fba8 	bl	8005940 <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 80031f0:	e002      	b.n	80031f8 <MPU6050_Init+0xb8>
	else check=-1;
 80031f2:	4b03      	ldr	r3, [pc, #12]	; (8003200 <MPU6050_Init+0xc0>)
 80031f4:	22ff      	movs	r2, #255	; 0xff
 80031f6:	701a      	strb	r2, [r3, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000592 	.word	0x20000592
 8003204:	2000021c 	.word	0x2000021c
 8003208:	20000014 	.word	0x20000014
 800320c:	20000593 	.word	0x20000593

08003210 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af04      	add	r7, sp, #16
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800321c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003220:	9302      	str	r3, [sp, #8]
 8003222:	2306      	movs	r3, #6
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	f107 0310 	add.w	r3, r7, #16
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	223b      	movs	r2, #59	; 0x3b
 8003230:	21d0      	movs	r1, #208	; 0xd0
 8003232:	4832      	ldr	r0, [pc, #200]	; (80032fc <MPU6050_Read_Accel+0xec>)
 8003234:	f002 fc7e 	bl	8005b34 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003238:	7c3b      	ldrb	r3, [r7, #16]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	b21a      	sxth	r2, r3
 800323e:	7c7b      	ldrb	r3, [r7, #17]
 8003240:	b21b      	sxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <MPU6050_Read_Accel+0xf0>)
 8003248:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800324a:	7cbb      	ldrb	r3, [r7, #18]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	b21a      	sxth	r2, r3
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	b21b      	sxth	r3, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	b21a      	sxth	r2, r3
 8003258:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <MPU6050_Read_Accel+0xf4>)
 800325a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800325c:	7d3b      	ldrb	r3, [r7, #20]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	b21a      	sxth	r2, r3
 8003262:	7d7b      	ldrb	r3, [r7, #21]
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21a      	sxth	r2, r3
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <MPU6050_Read_Accel+0xf8>)
 800326c:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 800326e:	7c7b      	ldrb	r3, [r7, #17]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b29a      	uxth	r2, r3
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <MPU6050_Read_Accel+0xfc>)
 800327a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <MPU6050_Read_Accel+0xf0>)
 800327e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd f96e 	bl	8000564 <__aeabi_i2d>
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <MPU6050_Read_Accel+0x100>)
 800328e:	f7fd fafd 	bl	800088c <__aeabi_ddiv>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f7fd fcc5 	bl	8000c28 <__aeabi_d2f>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <MPU6050_Read_Accel+0xf4>)
 80032a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f95a 	bl	8000564 <__aeabi_i2d>
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <MPU6050_Read_Accel+0x100>)
 80032b6:	f7fd fae9 	bl	800088c <__aeabi_ddiv>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7fd fcb1 	bl	8000c28 <__aeabi_d2f>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <MPU6050_Read_Accel+0xf8>)
 80032ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f946 	bl	8000564 <__aeabi_i2d>
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <MPU6050_Read_Accel+0x100>)
 80032de:	f7fd fad5 	bl	800088c <__aeabi_ddiv>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	f7fd fc9d 	bl	8000c28 <__aeabi_d2f>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]

}
 80032f4:	bf00      	nop
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	2000021c 	.word	0x2000021c
 8003300:	20000586 	.word	0x20000586
 8003304:	20000588 	.word	0x20000588
 8003308:	2000058a 	.word	0x2000058a
 800330c:	20000014 	.word	0x20000014
 8003310:	40d00000 	.word	0x40d00000
 8003314:	00000000 	.word	0x00000000

08003318 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af04      	add	r7, sp, #16
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8003324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	2306      	movs	r3, #6
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2301      	movs	r3, #1
 8003336:	2243      	movs	r2, #67	; 0x43
 8003338:	21d0      	movs	r1, #208	; 0xd0
 800333a:	4831      	ldr	r0, [pc, #196]	; (8003400 <MPU6050_Read_Gyro+0xe8>)
 800333c:	f002 fbfa 	bl	8005b34 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003340:	7c3b      	ldrb	r3, [r7, #16]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	b21a      	sxth	r2, r3
 8003346:	7c7b      	ldrb	r3, [r7, #17]
 8003348:	b21b      	sxth	r3, r3
 800334a:	4313      	orrs	r3, r2
 800334c:	b21a      	sxth	r2, r3
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <MPU6050_Read_Gyro+0xec>)
 8003350:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003352:	7cbb      	ldrb	r3, [r7, #18]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	b21a      	sxth	r2, r3
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	b21b      	sxth	r3, r3
 800335c:	4313      	orrs	r3, r2
 800335e:	b21a      	sxth	r2, r3
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <MPU6050_Read_Gyro+0xf0>)
 8003362:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003364:	7d3b      	ldrb	r3, [r7, #20]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	b21a      	sxth	r2, r3
 800336a:	7d7b      	ldrb	r3, [r7, #21]
 800336c:	b21b      	sxth	r3, r3
 800336e:	4313      	orrs	r3, r2
 8003370:	b21a      	sxth	r2, r3
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <MPU6050_Read_Gyro+0xf4>)
 8003374:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <MPU6050_Read_Gyro+0xec>)
 8003378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f8f1 	bl	8000564 <__aeabi_i2d>
 8003382:	a31d      	add	r3, pc, #116	; (adr r3, 80033f8 <MPU6050_Read_Gyro+0xe0>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fd fa80 	bl	800088c <__aeabi_ddiv>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7fd fc48 	bl	8000c28 <__aeabi_d2f>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <MPU6050_Read_Gyro+0xf0>)
 80033a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8dd 	bl	8000564 <__aeabi_i2d>
 80033aa:	a313      	add	r3, pc, #76	; (adr r3, 80033f8 <MPU6050_Read_Gyro+0xe0>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fd fa6c 	bl	800088c <__aeabi_ddiv>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fd fc34 	bl	8000c28 <__aeabi_d2f>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <MPU6050_Read_Gyro+0xf4>)
 80033c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8c9 	bl	8000564 <__aeabi_i2d>
 80033d2:	a309      	add	r3, pc, #36	; (adr r3, 80033f8 <MPU6050_Read_Gyro+0xe0>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd fa58 	bl	800088c <__aeabi_ddiv>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7fd fc20 	bl	8000c28 <__aeabi_d2f>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	601a      	str	r2, [r3, #0]
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	00000000 	.word	0x00000000
 80033fc:	40606000 	.word	0x40606000
 8003400:	2000021c 	.word	0x2000021c
 8003404:	2000058c 	.word	0x2000058c
 8003408:	2000058e 	.word	0x2000058e
 800340c:	20000590 	.word	0x20000590

08003410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_MspInit+0x58>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_MspInit+0x58>)
 8003420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003424:	6453      	str	r3, [r2, #68]	; 0x44
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_MspInit+0x58>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_MspInit+0x58>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_MspInit+0x58>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_MspInit+0x58>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2100      	movs	r1, #0
 8003452:	2005      	movs	r0, #5
 8003454:	f001 fb31 	bl	8004aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003458:	2005      	movs	r0, #5
 800345a:	f001 fb4a 	bl	8004af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3c      	ldr	r2, [pc, #240]	; (800357c <HAL_ADC_MspInit+0x110>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d171      	bne.n	8003572 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_ADC_MspInit+0x114>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a3a      	ldr	r2, [pc, #232]	; (8003580 <HAL_ADC_MspInit+0x114>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_ADC_MspInit+0x114>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80034e2:	2313      	movs	r3, #19
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e6:	2303      	movs	r3, #3
 80034e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4823      	ldr	r0, [pc, #140]	; (8003584 <HAL_ADC_MspInit+0x118>)
 80034f6:	f001 ff19 	bl	800532c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034fa:	2301      	movs	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034fe:	2303      	movs	r3, #3
 8003500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	481e      	ldr	r0, [pc, #120]	; (8003588 <HAL_ADC_MspInit+0x11c>)
 800350e:	f001 ff0d 	bl	800532c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003514:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_ADC_MspInit+0x124>)
 8003516:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_ADC_MspInit+0x120>)
 800351a:	2200      	movs	r2, #0
 800351c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_ADC_MspInit+0x120>)
 800352c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003530:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003538:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_ADC_MspInit+0x120>)
 800353c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003540:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003548:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_ADC_MspInit+0x120>)
 800354c:	2200      	movs	r2, #0
 800354e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003552:	2200      	movs	r2, #0
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003556:	480d      	ldr	r0, [pc, #52]	; (800358c <HAL_ADC_MspInit+0x120>)
 8003558:	f001 fae6 	bl	8004b28 <HAL_DMA_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003562:	f7ff fde7 	bl	8003134 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_ADC_MspInit+0x120>)
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <HAL_ADC_MspInit+0x120>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	3728      	adds	r7, #40	; 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40012000 	.word	0x40012000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020000 	.word	0x40020000
 8003588:	40020400 	.word	0x40020400
 800358c:	200001bc 	.word	0x200001bc
 8003590:	40026410 	.word	0x40026410

08003594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	; 0x30
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 031c 	add.w	r3, r7, #28
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a42      	ldr	r2, [pc, #264]	; (80036bc <HAL_I2C_MspInit+0x128>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12c      	bne.n	8003610 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a40      	ldr	r2, [pc, #256]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d2:	23c0      	movs	r3, #192	; 0xc0
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d6:	2312      	movs	r3, #18
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035e2:	2304      	movs	r3, #4
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	4619      	mov	r1, r3
 80035ec:	4835      	ldr	r0, [pc, #212]	; (80036c4 <HAL_I2C_MspInit+0x130>)
 80035ee:	f001 fe9d 	bl	800532c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80035fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800360e:	e050      	b.n	80036b2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_I2C_MspInit+0x134>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d14b      	bne.n	80036b2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003658:	2312      	movs	r3, #18
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003660:	2303      	movs	r3, #3
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003664:	2304      	movs	r3, #4
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	4619      	mov	r1, r3
 800366e:	4815      	ldr	r0, [pc, #84]	; (80036c4 <HAL_I2C_MspInit+0x130>)
 8003670:	f001 fe5c 	bl	800532c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800367a:	2312      	movs	r3, #18
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003686:	2304      	movs	r3, #4
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	480e      	ldr	r0, [pc, #56]	; (80036cc <HAL_I2C_MspInit+0x138>)
 8003692:	f001 fe4b 	bl	800532c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80036a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_I2C_MspInit+0x12c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
}
 80036b2:	bf00      	nop
 80036b4:	3730      	adds	r7, #48	; 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40005400 	.word	0x40005400
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40005800 	.word	0x40005800
 80036cc:	40020800 	.word	0x40020800

080036d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a28      	ldr	r2, [pc, #160]	; (8003790 <HAL_SPI_MspInit+0xc0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d149      	bne.n	8003786 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a26      	ldr	r2, [pc, #152]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 80036fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_SPI_MspInit+0xc4>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003746:	2320      	movs	r3, #32
 8003748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	2303      	movs	r3, #3
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003756:	2305      	movs	r3, #5
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	4619      	mov	r1, r3
 8003760:	480d      	ldr	r0, [pc, #52]	; (8003798 <HAL_SPI_MspInit+0xc8>)
 8003762:	f001 fde3 	bl	800532c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003766:	2310      	movs	r3, #16
 8003768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	2302      	movs	r3, #2
 800376c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003772:	2303      	movs	r3, #3
 8003774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003776:	2305      	movs	r3, #5
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	4619      	mov	r1, r3
 8003780:	4806      	ldr	r0, [pc, #24]	; (800379c <HAL_SPI_MspInit+0xcc>)
 8003782:	f001 fdd3 	bl	800532c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	; 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40013000 	.word	0x40013000
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400

080037a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <HAL_TIM_Base_MspInit+0x3c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_TIM_Base_MspInit+0x40>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_TIM_Base_MspInit+0x40>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_TIM_Base_MspInit+0x40>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40023800 	.word	0x40023800

080037e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08c      	sub	sp, #48	; 0x30
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	f107 031c 	add.w	r3, r7, #28
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a37      	ldr	r2, [pc, #220]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d12d      	bne.n	8003862 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_UART_MspInit+0x100>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a2e      	ldr	r2, [pc, #184]	; (80038e4 <HAL_UART_MspInit+0x100>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800383e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003850:	2308      	movs	r3, #8
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	4619      	mov	r1, r3
 800385a:	4823      	ldr	r0, [pc, #140]	; (80038e8 <HAL_UART_MspInit+0x104>)
 800385c:	f001 fd66 	bl	800532c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003860:	e039      	b.n	80038d6 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a21      	ldr	r2, [pc, #132]	; (80038ec <HAL_UART_MspInit+0x108>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d134      	bne.n	80038d6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003876:	f043 0310 	orr.w	r3, r3, #16
 800387a:	6453      	str	r3, [r2, #68]	; 0x44
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_UART_MspInit+0x100>)
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_UART_MspInit+0x100>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6313      	str	r3, [r2, #48]	; 0x30
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_UART_MspInit+0x100>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b2:	2303      	movs	r3, #3
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038b6:	2307      	movs	r3, #7
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	4619      	mov	r1, r3
 80038c0:	480b      	ldr	r0, [pc, #44]	; (80038f0 <HAL_UART_MspInit+0x10c>)
 80038c2:	f001 fd33 	bl	800532c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	2025      	movs	r0, #37	; 0x25
 80038cc:	f001 f8f5 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038d0:	2025      	movs	r0, #37	; 0x25
 80038d2:	f001 f90e 	bl	8004af2 <HAL_NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3730      	adds	r7, #48	; 0x30
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020800 	.word	0x40020800
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40020000 	.word	0x40020000

080038f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <NMI_Handler+0x4>

080038fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fe:	e7fe      	b.n	80038fe <HardFault_Handler+0x4>

08003900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003904:	e7fe      	b.n	8003904 <MemManage_Handler+0x4>

08003906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800390a:	e7fe      	b.n	800390a <BusFault_Handler+0x4>

0800390c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003910:	e7fe      	b.n	8003910 <UsageFault_Handler+0x4>

08003912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(timeout >0) timeout--;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <SysTick_Handler+0x20>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <SysTick_Handler+0x18>
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Handler+0x20>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <SysTick_Handler+0x20>)
 8003952:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003954:	f000 fb70 	bl	8004038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200005dc 	.word	0x200005dc

08003960 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <USART1_IRQHandler+0x14>)
 8003976:	f000 fa85 	bl	8003e84 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800397a:	4802      	ldr	r0, [pc, #8]	; (8003984 <USART1_IRQHandler+0x14>)
 800397c:	f004 fd16 	bl	80083ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000598 	.word	0x20000598

08003988 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <DMA2_Stream0_IRQHandler+0x10>)
 800398e:	f001 fa63 	bl	8004e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200001bc 	.word	0x200001bc

0800399c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
	return 1;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_kill>:

int _kill(int pid, int sig)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039b6:	f005 fc55 	bl	8009264 <__errno>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2216      	movs	r2, #22
 80039be:	601a      	str	r2, [r3, #0]
	return -1;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_exit>:

void _exit (int status)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffe7 	bl	80039ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80039de:	e7fe      	b.n	80039de <_exit+0x12>

080039e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	e00a      	b.n	8003a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039f2:	f3af 8000 	nop.w
 80039f6:	4601      	mov	r1, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	60ba      	str	r2, [r7, #8]
 80039fe:	b2ca      	uxtb	r2, r1
 8003a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3301      	adds	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	dbf0      	blt.n	80039f2 <_read+0x12>
	}

return len;
 8003a10:	687b      	ldr	r3, [r7, #4]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
	return -1;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a42:	605a      	str	r2, [r3, #4]
	return 0;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_isatty>:

int _isatty(int file)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
	return 1;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
	return 0;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <_sbrk+0x5c>)
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <_sbrk+0x60>)
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <_sbrk+0x64>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <_sbrk+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab4:	f005 fbd6 	bl	8009264 <__errno>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	220c      	movs	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e009      	b.n	8003ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <_sbrk+0x64>)
 8003ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20020000 	.word	0x20020000
 8003ae4:	00000800 	.word	0x00000800
 8003ae8:	20000594 	.word	0x20000594
 8003aec:	20000a10 	.word	0x20000a10

08003af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <SystemInit+0x20>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <SystemInit+0x20>)
 8003afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <Ringbuf_init+0x3c>)
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <Ringbuf_init+0x40>)
 8003b1c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <Ringbuf_init+0x44>)
 8003b20:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <Ringbuf_init+0x48>)
 8003b22:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <Ringbuf_init+0x4c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <Ringbuf_init+0x4c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <Ringbuf_init+0x4c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <Ringbuf_init+0x4c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0220 	orr.w	r2, r2, #32
 8003b42:	60da      	str	r2, [r3, #12]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	200009f0 	.word	0x200009f0
 8003b54:	200005e0 	.word	0x200005e0
 8003b58:	200009f4 	.word	0x200009f4
 8003b5c:	200007e8 	.word	0x200007e8
 8003b60:	20000598 	.word	0x20000598

08003b64 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d009      	beq.n	8003b9e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	79f9      	ldrb	r1, [r7, #7]
 8003b94:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <Uart_read+0x54>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <Uart_read+0x54>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d102      	bne.n	8003bcc <Uart_read+0x20>
  {
    return -1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	e013      	b.n	8003bf4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <Uart_read+0x54>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <Uart_read+0x54>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003bd8:	5cd3      	ldrb	r3, [r2, r3]
 8003bda:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <Uart_read+0x54>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <Uart_read+0x54>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	200009f0 	.word	0x200009f0

08003c04 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <IsDataAvailable+0x30>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <IsDataAvailable+0x30>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	200009f0 	.word	0x200009f0

08003c38 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <Uart_peek+0x38>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <Uart_peek+0x38>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d102      	bne.n	8003c56 <Uart_peek+0x1e>
  {
    return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	e006      	b.n	8003c64 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <Uart_peek+0x38>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <Uart_peek+0x38>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	200009f0 	.word	0x200009f0

08003c74 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fac4 	bl	8000210 <strlen>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8003c90:	e01e      	b.n	8003cd0 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <Copy_upto+0xf8>)
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <Copy_upto+0xf8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6838      	ldr	r0, [r7, #0]
 8003ca2:	4403      	add	r3, r0
 8003ca4:	5c8a      	ldrb	r2, [r1, r2]
 8003ca6:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <Copy_upto+0xf8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <Copy_upto+0xf8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8003cc4:	bf00      	nop
 8003cc6:	f7ff ff9d 	bl	8003c04 <IsDataAvailable>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0fa      	beq.n	8003cc6 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8003cd0:	f7ff ffb2 	bl	8003c38 <Uart_peek>
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4413      	add	r3, r2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	4299      	cmp	r1, r3
 8003ce0:	d1d7      	bne.n	8003c92 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8003ce2:	e027      	b.n	8003d34 <Copy_upto+0xc0>
	{
		so_far++;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8003cea:	f7ff ff5f 	bl	8003bac <Uart_read>
 8003cee:	4601      	mov	r1, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	613a      	str	r2, [r7, #16]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b2ca      	uxtb	r2, r1
 8003cfe:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d101      	bne.n	8003d0c <Copy_upto+0x98>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02a      	b.n	8003d62 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <Copy_upto+0xfc>)
 8003d0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d12:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003d14:	bf00      	nop
 8003d16:	f7ff ff75 	bl	8003c04 <IsDataAvailable>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <Copy_upto+0xb4>
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <Copy_upto+0xfc>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f6      	bne.n	8003d16 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <Copy_upto+0xfc>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <Copy_upto+0xc0>
 8003d30:	2300      	movs	r3, #0
 8003d32:	e016      	b.n	8003d62 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8003d34:	f7ff ff80 	bl	8003c38 <Uart_peek>
 8003d38:	4601      	mov	r1, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d0ce      	beq.n	8003ce4 <Copy_upto+0x70>
	}

	if (so_far != len)
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d002      	beq.n	8003d54 <Copy_upto+0xe0>
	{
		so_far = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
		goto again;
 8003d52:	e79d      	b.n	8003c90 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d101      	bne.n	8003d60 <Copy_upto+0xec>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <Copy_upto+0xee>
	else return 0;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200009f0 	.word	0x200009f0
 8003d70:	200005dc 	.word	0x200005dc

08003d74 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fc fa45 	bl	8000210 <strlen>
 8003d86:	4603      	mov	r3, r0
 8003d88:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <Wait_for+0x108>)
 8003d8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d90:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8003d92:	bf00      	nop
 8003d94:	f7ff ff36 	bl	8003c04 <IsDataAvailable>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <Wait_for+0x32>
 8003d9e:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <Wait_for+0x108>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f6      	bne.n	8003d94 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8003da6:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <Wait_for+0x108>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <Wait_for+0x6e>
 8003dae:	2300      	movs	r3, #0
 8003db0:	e060      	b.n	8003e74 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8003db2:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <Wait_for+0x10c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dba:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <Wait_for+0x10c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d00b      	beq.n	8003dde <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <Wait_for+0x10c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <Wait_for+0x10c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ddc:	e001      	b.n	8003de2 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e048      	b.n	8003e74 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8003de2:	f7ff ff29 	bl	8003c38 <Uart_peek>
 8003de6:	4601      	mov	r1, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4299      	cmp	r1, r3
 8003df2:	d1de      	bne.n	8003db2 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003df4:	e027      	b.n	8003e46 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <Wait_for+0x10c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <Wait_for+0x10c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d101      	bne.n	8003e1e <Wait_for+0xaa>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02a      	b.n	8003e74 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <Wait_for+0x108>)
 8003e20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e24:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003e26:	bf00      	nop
 8003e28:	f7ff feec 	bl	8003c04 <IsDataAvailable>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <Wait_for+0xc6>
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <Wait_for+0x108>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f6      	bne.n	8003e28 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <Wait_for+0x108>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <Wait_for+0xd2>
 8003e42:	2300      	movs	r3, #0
 8003e44:	e016      	b.n	8003e74 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003e46:	f7ff fef7 	bl	8003c38 <Uart_peek>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	4299      	cmp	r1, r3
 8003e56:	d0ce      	beq.n	8003df6 <Wait_for+0x82>
	}

	if (so_far != len)
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d002      	beq.n	8003e66 <Wait_for+0xf2>
	{
		so_far = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
		goto again;
 8003e64:	e791      	b.n	8003d8a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d101      	bne.n	8003e72 <Wait_for+0xfe>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <Wait_for+0x100>
	else return 0;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	200005dc 	.word	0x200005dc
 8003e80:	200009f0 	.word	0x200009f0

08003e84 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <Uart_isr+0x4a>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <Uart_isr+0xb4>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fe4c 	bl	8003b64 <store_char>
        return;
 8003ecc:	e031      	b.n	8003f32 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02c      	beq.n	8003f32 <Uart_isr+0xae>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d027      	beq.n	8003f32 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <Uart_isr+0xb8>)
 8003ee4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <Uart_isr+0xb8>)
 8003eea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d108      	bne.n	8003f04 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f00:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8003f02:	e015      	b.n	8003f30 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003f04:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <Uart_isr+0xb8>)
 8003f06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <Uart_isr+0xb8>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <Uart_isr+0xb8>)
 8003f12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003f16:	3301      	adds	r3, #1
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <Uart_isr+0xb8>)
 8003f1e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	7bba      	ldrb	r2, [r7, #14]
 8003f2e:	605a      	str	r2, [r3, #4]
    	return;
 8003f30:	bf00      	nop
    }
}
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200009f0 	.word	0x200009f0
 8003f3c:	200007e8 	.word	0x200007e8

08003f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f44:	480d      	ldr	r0, [pc, #52]	; (8003f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f46:	490e      	ldr	r1, [pc, #56]	; (8003f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5a:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f5c:	4c0b      	ldr	r4, [pc, #44]	; (8003f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f6a:	f7ff fdc1 	bl	8003af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f6e:	f005 f97f 	bl	8009270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f72:	f7fe fc25 	bl	80027c0 <main>
  bx  lr    
 8003f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f80:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003f84:	0800cd68 	.word	0x0800cd68
  ldr r2, =_sbss
 8003f88:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003f8c:	20000a0c 	.word	0x20000a0c

08003f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f90:	e7fe      	b.n	8003f90 <ADC_IRQHandler>
	...

08003f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_Init+0x40>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <HAL_Init+0x40>)
 8003f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_Init+0x40>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <HAL_Init+0x40>)
 8003faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_Init+0x40>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <HAL_Init+0x40>)
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fbc:	2003      	movs	r0, #3
 8003fbe:	f000 fd71 	bl	8004aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fc2:	200f      	movs	r0, #15
 8003fc4:	f000 f808 	bl	8003fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fc8:	f7ff fa22 	bl	8003410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00

08003fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_InitTick+0x54>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_InitTick+0x58>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd89 	bl	8004b0e <HAL_SYSTICK_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e00e      	b.n	8004024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b0f      	cmp	r3, #15
 800400a:	d80a      	bhi.n	8004022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800400c:	2200      	movs	r2, #0
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	f000 fd51 	bl	8004aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004018:	4a06      	ldr	r2, [pc, #24]	; (8004034 <HAL_InitTick+0x5c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000018 	.word	0x20000018
 8004030:	20000020 	.word	0x20000020
 8004034:	2000001c 	.word	0x2000001c

08004038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_IncTick+0x20>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_IncTick+0x24>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4413      	add	r3, r2
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_IncTick+0x24>)
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000020 	.word	0x20000020
 800405c:	200009f8 	.word	0x200009f8

08004060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return uwTick;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_GetTick+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	200009f8 	.word	0x200009f8

08004078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004080:	f7ff ffee 	bl	8004060 <HAL_GetTick>
 8004084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d005      	beq.n	800409e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_Delay+0x44>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800409e:	bf00      	nop
 80040a0:	f7ff ffde 	bl	8004060 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d8f7      	bhi.n	80040a0 <HAL_Delay+0x28>
  {
  }
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000020 	.word	0x20000020

080040c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e033      	b.n	800413e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff f9c4 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004106:	f023 0302 	bic.w	r3, r3, #2
 800410a:	f043 0202 	orr.w	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa78 	bl	8004608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
 800412e:	e001      	b.n	8004134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_ADC_Start_DMA+0x1e>
 8004162:	2302      	movs	r3, #2
 8004164:	e0e9      	b.n	800433a <HAL_ADC_Start_DMA+0x1f2>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d018      	beq.n	80041ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800418c:	4b6d      	ldr	r3, [pc, #436]	; (8004344 <HAL_ADC_Start_DMA+0x1fc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6d      	ldr	r2, [pc, #436]	; (8004348 <HAL_ADC_Start_DMA+0x200>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9a      	lsrs	r2, r3, #18
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80041a0:	e002      	b.n	80041a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f9      	bne.n	80041a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d107      	bne.n	80041ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 80a1 	bne.w	8004320 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004208:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d106      	bne.n	800422c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f023 0206 	bic.w	r2, r3, #6
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
 800422a:	e002      	b.n	8004232 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800423a:	4b44      	ldr	r3, [pc, #272]	; (800434c <HAL_ADC_Start_DMA+0x204>)
 800423c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	4a43      	ldr	r2, [pc, #268]	; (8004350 <HAL_ADC_Start_DMA+0x208>)
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	4a42      	ldr	r2, [pc, #264]	; (8004354 <HAL_ADC_Start_DMA+0x20c>)
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	4a41      	ldr	r2, [pc, #260]	; (8004358 <HAL_ADC_Start_DMA+0x210>)
 8004254:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800425e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800426e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	334c      	adds	r3, #76	; 0x4c
 800428a:	4619      	mov	r1, r3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f000 fcf8 	bl	8004c84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2b00      	cmp	r3, #0
 800429e:	d12a      	bne.n	80042f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2d      	ldr	r2, [pc, #180]	; (800435c <HAL_ADC_Start_DMA+0x214>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d015      	beq.n	80042d6 <HAL_ADC_Start_DMA+0x18e>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <HAL_ADC_Start_DMA+0x218>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d105      	bne.n	80042c0 <HAL_ADC_Start_DMA+0x178>
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_ADC_Start_DMA+0x204>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_ADC_Start_DMA+0x21c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d136      	bne.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_ADC_Start_DMA+0x204>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d130      	bne.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d129      	bne.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	e020      	b.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_ADC_Start_DMA+0x214>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d11b      	bne.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d114      	bne.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	e00b      	b.n	8004338 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0210 	orr.w	r2, r3, #16
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000018 	.word	0x20000018
 8004348:	431bde83 	.word	0x431bde83
 800434c:	40012300 	.word	0x40012300
 8004350:	08004801 	.word	0x08004801
 8004354:	080048bb 	.word	0x080048bb
 8004358:	080048d7 	.word	0x080048d7
 800435c:	40012000 	.word	0x40012000
 8004360:	40012100 	.word	0x40012100
 8004364:	40012200 	.word	0x40012200

08004368 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x1c>
 80043bc:	2302      	movs	r3, #2
 80043be:	e113      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x244>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d925      	bls.n	800441c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	3b1e      	subs	r3, #30
 80043e6:	2207      	movs	r2, #7
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43da      	mvns	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	400a      	ands	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68d9      	ldr	r1, [r3, #12]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	4618      	mov	r0, r3
 8004408:	4603      	mov	r3, r0
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4403      	add	r3, r0
 800440e:	3b1e      	subs	r3, #30
 8004410:	409a      	lsls	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e022      	b.n	8004462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6919      	ldr	r1, [r3, #16]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	2207      	movs	r2, #7
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43da      	mvns	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	400a      	ands	r2, r1
 800443e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	4618      	mov	r0, r3
 8004452:	4603      	mov	r3, r0
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4403      	add	r3, r0
 8004458:	409a      	lsls	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d824      	bhi.n	80044b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3b05      	subs	r3, #5
 800447c:	221f      	movs	r2, #31
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	400a      	ands	r2, r1
 800448a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	4618      	mov	r0, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3b05      	subs	r3, #5
 80044a6:	fa00 f203 	lsl.w	r2, r0, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
 80044b2:	e04c      	b.n	800454e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d824      	bhi.n	8004506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	3b23      	subs	r3, #35	; 0x23
 80044ce:	221f      	movs	r2, #31
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43da      	mvns	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	400a      	ands	r2, r1
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	3b23      	subs	r3, #35	; 0x23
 80044f8:	fa00 f203 	lsl.w	r2, r0, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
 8004504:	e023      	b.n	800454e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3b41      	subs	r3, #65	; 0x41
 8004518:	221f      	movs	r2, #31
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	400a      	ands	r2, r1
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	4618      	mov	r0, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	3b41      	subs	r3, #65	; 0x41
 8004542:	fa00 f203 	lsl.w	r2, r0, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <HAL_ADC_ConfigChannel+0x250>)
 8004550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <HAL_ADC_ConfigChannel+0x254>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10f      	bne.n	800457c <HAL_ADC_ConfigChannel+0x1d8>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b12      	cmp	r3, #18
 8004562:	d10b      	bne.n	800457c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <HAL_ADC_ConfigChannel+0x254>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d12b      	bne.n	80045de <HAL_ADC_ConfigChannel+0x23a>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_ADC_ConfigChannel+0x258>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <HAL_ADC_ConfigChannel+0x1f4>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b11      	cmp	r3, #17
 8004596:	d122      	bne.n	80045de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <HAL_ADC_ConfigChannel+0x258>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_ADC_ConfigChannel+0x25c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <HAL_ADC_ConfigChannel+0x260>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	0c9a      	lsrs	r2, r3, #18
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045d0:	e002      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f9      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40012300 	.word	0x40012300
 80045f8:	40012000 	.word	0x40012000
 80045fc:	10000012 	.word	0x10000012
 8004600:	20000018 	.word	0x20000018
 8004604:	431bde83 	.word	0x431bde83

08004608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004610:	4b79      	ldr	r3, [pc, #484]	; (80047f8 <ADC_Init+0x1f0>)
 8004612:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800463c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	021a      	lsls	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	4a58      	ldr	r2, [pc, #352]	; (80047fc <ADC_Init+0x1f4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6899      	ldr	r1, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e00f      	b.n	8004706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004704:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0202 	bic.w	r2, r2, #2
 8004714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7e1b      	ldrb	r3, [r3, #24]
 8004720:	005a      	lsls	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004742:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	3b01      	subs	r3, #1
 8004760:	035a      	lsls	r2, r3, #13
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	e007      	b.n	800477c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	3b01      	subs	r3, #1
 8004798:	051a      	lsls	r2, r3, #20
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047be:	025a      	lsls	r2, r3, #9
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	029a      	lsls	r2, r3, #10
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40012300 	.word	0x40012300
 80047fc:	0f000001 	.word	0x0f000001

08004800 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	d13c      	bne.n	8004894 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d12b      	bne.n	800488c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004838:	2b00      	cmp	r3, #0
 800483a:	d127      	bne.n	800488c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004854:	2b00      	cmp	r3, #0
 8004856:	d119      	bne.n	800488c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0220 	bic.w	r2, r2, #32
 8004866:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f043 0201 	orr.w	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7ff fd6b 	bl	8004368 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004892:	e00e      	b.n	80048b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff fd75 	bl	8004390 <HAL_ADC_ErrorCallback>
}
 80048a6:	e004      	b.n	80048b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff fd57 	bl	800437c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fd4a 	bl	8004390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <__NVIC_SetPriorityGrouping>:
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <__NVIC_SetPriorityGrouping+0x44>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004920:	4013      	ands	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800492c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <__NVIC_SetPriorityGrouping+0x44>)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	60d3      	str	r3, [r2, #12]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <__NVIC_GetPriorityGrouping>:
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <__NVIC_GetPriorityGrouping+0x18>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0a1b      	lsrs	r3, r3, #8
 8004956:	f003 0307 	and.w	r3, r3, #7
}
 800495a:	4618      	mov	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <__NVIC_EnableIRQ>:
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	2b00      	cmp	r3, #0
 8004978:	db0b      	blt.n	8004992 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	f003 021f 	and.w	r2, r3, #31
 8004980:	4907      	ldr	r1, [pc, #28]	; (80049a0 <__NVIC_EnableIRQ+0x38>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2001      	movs	r0, #1
 800498a:	fa00 f202 	lsl.w	r2, r0, r2
 800498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e100 	.word	0xe000e100

080049a4 <__NVIC_SetPriority>:
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	6039      	str	r1, [r7, #0]
 80049ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	db0a      	blt.n	80049ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	490c      	ldr	r1, [pc, #48]	; (80049f0 <__NVIC_SetPriority+0x4c>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049cc:	e00a      	b.n	80049e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4908      	ldr	r1, [pc, #32]	; (80049f4 <__NVIC_SetPriority+0x50>)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	3b04      	subs	r3, #4
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	440b      	add	r3, r1
 80049e2:	761a      	strb	r2, [r3, #24]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000e100 	.word	0xe000e100
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <NVIC_EncodePriority>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	; 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f1c3 0307 	rsb	r3, r3, #7
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	bf28      	it	cs
 8004a16:	2304      	movcs	r3, #4
 8004a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d902      	bls.n	8004a28 <NVIC_EncodePriority+0x30>
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3b03      	subs	r3, #3
 8004a26:	e000      	b.n	8004a2a <NVIC_EncodePriority+0x32>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a40:	f04f 31ff 	mov.w	r1, #4294967295
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	43d9      	mvns	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	4313      	orrs	r3, r2
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3724      	adds	r7, #36	; 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <SysTick_Config>:
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a70:	d301      	bcc.n	8004a76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00f      	b.n	8004a96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <SysTick_Config+0x40>)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a7e:	210f      	movs	r1, #15
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	f7ff ff8e 	bl	80049a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <SysTick_Config+0x40>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <SysTick_Config+0x40>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010

08004aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff29 	bl	8004904 <__NVIC_SetPriorityGrouping>
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004acc:	f7ff ff3e 	bl	800494c <__NVIC_GetPriorityGrouping>
 8004ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f7ff ff8e 	bl	80049f8 <NVIC_EncodePriority>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff5d 	bl	80049a4 <__NVIC_SetPriority>
}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff ff31 	bl	8004968 <__NVIC_EnableIRQ>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ffa2 	bl	8004a60 <SysTick_Config>
 8004b1c:	4603      	mov	r3, r0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b34:	f7ff fa94 	bl	8004060 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e099      	b.n	8004c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b64:	e00f      	b.n	8004b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b66:	f7ff fa7b 	bl	8004060 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d908      	bls.n	8004b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e078      	b.n	8004c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e8      	bne.n	8004b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <HAL_DMA_Init+0x158>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d107      	bne.n	8004bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	4313      	orrs	r3, r2
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 0307 	bic.w	r3, r3, #7
 8004c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d117      	bne.n	8004c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb01 	bl	8005234 <DMA_CheckFifoParam>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2240      	movs	r2, #64	; 0x40
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c46:	2301      	movs	r3, #1
 8004c48:	e016      	b.n	8004c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fab8 	bl	80051c8 <DMA_CalcBaseAndBitshift>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	223f      	movs	r2, #63	; 0x3f
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	f010803f 	.word	0xf010803f

08004c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_DMA_Start_IT+0x26>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e040      	b.n	8004d2c <HAL_DMA_Start_IT+0xa8>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d12f      	bne.n	8004d1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fa4a 	bl	800516c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	223f      	movs	r2, #63	; 0x3f
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0216 	orr.w	r2, r2, #22
 8004cf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e005      	b.n	8004d2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
 8004d28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d42:	f7ff f98d 	bl	8004060 <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d008      	beq.n	8004d66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e052      	b.n	8004e0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0216 	bic.w	r2, r2, #22
 8004d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_DMA_Abort+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0208 	bic.w	r2, r2, #8
 8004da4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db6:	e013      	b.n	8004de0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004db8:	f7ff f952 	bl	8004060 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d90c      	bls.n	8004de0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2203      	movs	r2, #3
 8004dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e015      	b.n	8004e0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e4      	bne.n	8004db8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df2:	223f      	movs	r2, #63	; 0x3f
 8004df4:	409a      	lsls	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d004      	beq.n	8004e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2280      	movs	r2, #128	; 0x80
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e00c      	b.n	8004e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2205      	movs	r2, #5
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e64:	4b8e      	ldr	r3, [pc, #568]	; (80050a0 <HAL_DMA_IRQHandler+0x248>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a8e      	ldr	r2, [pc, #568]	; (80050a4 <HAL_DMA_IRQHandler+0x24c>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	2208      	movs	r2, #8
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01a      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2201      	movs	r2, #1
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f043 0202 	orr.w	r2, r3, #2
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	2204      	movs	r2, #4
 8004f00:	409a      	lsls	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	2210      	movs	r2, #16
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d043      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d03c      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	2210      	movs	r2, #16
 8004f54:	409a      	lsls	r2, r3
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d018      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d024      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
 8004f86:	e01f      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e016      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0208 	bic.w	r2, r2, #8
 8004fb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fcc:	2220      	movs	r2, #32
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 808f 	beq.w	80050f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8087 	beq.w	80050f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	2220      	movs	r2, #32
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d136      	bne.n	8005070 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0216 	bic.w	r2, r2, #22
 8005010:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005020:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_DMA_IRQHandler+0x1da>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0208 	bic.w	r2, r2, #8
 8005040:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	223f      	movs	r2, #63	; 0x3f
 8005048:	409a      	lsls	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	2b00      	cmp	r3, #0
 8005064:	d07e      	beq.n	8005164 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
        }
        return;
 800506e:	e079      	b.n	8005164 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01d      	beq.n	80050ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10d      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	2b00      	cmp	r3, #0
 8005092:	d031      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
 800509c:	e02c      	b.n	80050f8 <HAL_DMA_IRQHandler+0x2a0>
 800509e:	bf00      	nop
 80050a0:	20000018 	.word	0x20000018
 80050a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d023      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
 80050b8:	e01e      	b.n	80050f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0210 	bic.w	r2, r2, #16
 80050d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d032      	beq.n	8005166 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d022      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2205      	movs	r2, #5
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3301      	adds	r3, #1
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	429a      	cmp	r2, r3
 800512e:	d307      	bcc.n	8005140 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f2      	bne.n	8005124 <HAL_DMA_IRQHandler+0x2cc>
 800513e:	e000      	b.n	8005142 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005140:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	e000      	b.n	8005166 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005164:	bf00      	nop
    }
  }
}
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005188:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d108      	bne.n	80051ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051aa:	e007      	b.n	80051bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3b10      	subs	r3, #16
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <DMA_CalcBaseAndBitshift+0x64>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051e2:	4a13      	ldr	r2, [pc, #76]	; (8005230 <DMA_CalcBaseAndBitshift+0x68>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d909      	bls.n	800520a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	1d1a      	adds	r2, r3, #4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	659a      	str	r2, [r3, #88]	; 0x58
 8005208:	e007      	b.n	800521a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	aaaaaaab 	.word	0xaaaaaaab
 8005230:	0800c958 	.word	0x0800c958

08005234 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11f      	bne.n	800528e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b03      	cmp	r3, #3
 8005252:	d856      	bhi.n	8005302 <DMA_CheckFifoParam+0xce>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <DMA_CheckFifoParam+0x28>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800527f 	.word	0x0800527f
 8005264:	0800526d 	.word	0x0800526d
 8005268:	08005303 	.word	0x08005303
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d046      	beq.n	8005306 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527c:	e043      	b.n	8005306 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005286:	d140      	bne.n	800530a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528c:	e03d      	b.n	800530a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005296:	d121      	bne.n	80052dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d837      	bhi.n	800530e <DMA_CheckFifoParam+0xda>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <DMA_CheckFifoParam+0x70>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052bb 	.word	0x080052bb
 80052ac:	080052b5 	.word	0x080052b5
 80052b0:	080052cd 	.word	0x080052cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e030      	b.n	800531c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d025      	beq.n	8005312 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ca:	e022      	b.n	8005312 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052d4:	d11f      	bne.n	8005316 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052da:	e01c      	b.n	8005316 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d903      	bls.n	80052ea <DMA_CheckFifoParam+0xb6>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d003      	beq.n	80052f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052e8:	e018      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
      break;
 80052ee:	e015      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005300:	e00b      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;
 8005302:	bf00      	nop
 8005304:	e00a      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      break;
 8005306:	bf00      	nop
 8005308:	e008      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      break;
 800530a:	bf00      	nop
 800530c:	e006      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      break;
 800530e:	bf00      	nop
 8005310:	e004      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      break;   
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <DMA_CheckFifoParam+0xe8>
      break;
 800531a:	bf00      	nop
    }
  } 
  
  return status; 
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	e165      	b.n	8005614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005348:	2201      	movs	r2, #1
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4013      	ands	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	429a      	cmp	r2, r3
 8005362:	f040 8154 	bne.w	800560e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d005      	beq.n	800537e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800537a:	2b02      	cmp	r3, #2
 800537c:	d130      	bne.n	80053e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	2203      	movs	r2, #3
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053b4:	2201      	movs	r2, #1
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0201 	and.w	r2, r3, #1
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d017      	beq.n	800541c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2203      	movs	r2, #3
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d123      	bne.n	8005470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	08da      	lsrs	r2, r3, #3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3208      	adds	r2, #8
 8005430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	220f      	movs	r2, #15
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4313      	orrs	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	08da      	lsrs	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3208      	adds	r2, #8
 800546a:	69b9      	ldr	r1, [r7, #24]
 800546c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 0203 	and.w	r2, r3, #3
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4313      	orrs	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80ae 	beq.w	800560e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b5d      	ldr	r3, [pc, #372]	; (800562c <HAL_GPIO_Init+0x300>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	4a5c      	ldr	r2, [pc, #368]	; (800562c <HAL_GPIO_Init+0x300>)
 80054bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054c0:	6453      	str	r3, [r2, #68]	; 0x44
 80054c2:	4b5a      	ldr	r3, [pc, #360]	; (800562c <HAL_GPIO_Init+0x300>)
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ce:	4a58      	ldr	r2, [pc, #352]	; (8005630 <HAL_GPIO_Init+0x304>)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	3302      	adds	r3, #2
 80054d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	220f      	movs	r2, #15
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43db      	mvns	r3, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4013      	ands	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <HAL_GPIO_Init+0x308>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d025      	beq.n	8005546 <HAL_GPIO_Init+0x21a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <HAL_GPIO_Init+0x30c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01f      	beq.n	8005542 <HAL_GPIO_Init+0x216>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a4d      	ldr	r2, [pc, #308]	; (800563c <HAL_GPIO_Init+0x310>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d019      	beq.n	800553e <HAL_GPIO_Init+0x212>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a4c      	ldr	r2, [pc, #304]	; (8005640 <HAL_GPIO_Init+0x314>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <HAL_GPIO_Init+0x20e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a4b      	ldr	r2, [pc, #300]	; (8005644 <HAL_GPIO_Init+0x318>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00d      	beq.n	8005536 <HAL_GPIO_Init+0x20a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a4a      	ldr	r2, [pc, #296]	; (8005648 <HAL_GPIO_Init+0x31c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <HAL_GPIO_Init+0x206>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a49      	ldr	r2, [pc, #292]	; (800564c <HAL_GPIO_Init+0x320>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d101      	bne.n	800552e <HAL_GPIO_Init+0x202>
 800552a:	2306      	movs	r3, #6
 800552c:	e00c      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 800552e:	2307      	movs	r3, #7
 8005530:	e00a      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 8005532:	2305      	movs	r3, #5
 8005534:	e008      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 8005536:	2304      	movs	r3, #4
 8005538:	e006      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 800553a:	2303      	movs	r3, #3
 800553c:	e004      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 800553e:	2302      	movs	r3, #2
 8005540:	e002      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_GPIO_Init+0x21c>
 8005546:	2300      	movs	r3, #0
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	f002 0203 	and.w	r2, r2, #3
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	4093      	lsls	r3, r2
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4313      	orrs	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005558:	4935      	ldr	r1, [pc, #212]	; (8005630 <HAL_GPIO_Init+0x304>)
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	3302      	adds	r3, #2
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005566:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <HAL_GPIO_Init+0x324>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800558a:	4a31      	ldr	r2, [pc, #196]	; (8005650 <HAL_GPIO_Init+0x324>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005590:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <HAL_GPIO_Init+0x324>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055b4:	4a26      	ldr	r2, [pc, #152]	; (8005650 <HAL_GPIO_Init+0x324>)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <HAL_GPIO_Init+0x324>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_GPIO_Init+0x324>)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <HAL_GPIO_Init+0x324>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4013      	ands	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <HAL_GPIO_Init+0x324>)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3301      	adds	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	f67f ae96 	bls.w	8005348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	3724      	adds	r7, #36	; 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800
 8005630:	40013800 	.word	0x40013800
 8005634:	40020000 	.word	0x40020000
 8005638:	40020400 	.word	0x40020400
 800563c:	40020800 	.word	0x40020800
 8005640:	40020c00 	.word	0x40020c00
 8005644:	40021000 	.word	0x40021000
 8005648:	40021400 	.word	0x40021400
 800564c:	40021800 	.word	0x40021800
 8005650:	40013c00 	.word	0x40013c00

08005654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
 8005670:	e001      	b.n	8005676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
 8005690:	4613      	mov	r3, r2
 8005692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005694:	787b      	ldrb	r3, [r7, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056a0:	e003      	b.n	80056aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	041a      	lsls	r2, r3, #16
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	619a      	str	r2, [r3, #24]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e12b      	b.n	8005922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fd ff58 	bl	8003594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	; 0x24
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800571a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800571c:	f001 f8ce 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8005720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4a81      	ldr	r2, [pc, #516]	; (800592c <HAL_I2C_Init+0x274>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d807      	bhi.n	800573c <HAL_I2C_Init+0x84>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a80      	ldr	r2, [pc, #512]	; (8005930 <HAL_I2C_Init+0x278>)
 8005730:	4293      	cmp	r3, r2
 8005732:	bf94      	ite	ls
 8005734:	2301      	movls	r3, #1
 8005736:	2300      	movhi	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e006      	b.n	800574a <HAL_I2C_Init+0x92>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a7d      	ldr	r2, [pc, #500]	; (8005934 <HAL_I2C_Init+0x27c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	bf94      	ite	ls
 8005744:	2301      	movls	r3, #1
 8005746:	2300      	movhi	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0e7      	b.n	8005922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a78      	ldr	r2, [pc, #480]	; (8005938 <HAL_I2C_Init+0x280>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0c9b      	lsrs	r3, r3, #18
 800575c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a6a      	ldr	r2, [pc, #424]	; (800592c <HAL_I2C_Init+0x274>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d802      	bhi.n	800578c <HAL_I2C_Init+0xd4>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3301      	adds	r3, #1
 800578a:	e009      	b.n	80057a0 <HAL_I2C_Init+0xe8>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	4a69      	ldr	r2, [pc, #420]	; (800593c <HAL_I2C_Init+0x284>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	099b      	lsrs	r3, r3, #6
 800579e:	3301      	adds	r3, #1
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	495c      	ldr	r1, [pc, #368]	; (800592c <HAL_I2C_Init+0x274>)
 80057bc:	428b      	cmp	r3, r1
 80057be:	d819      	bhi.n	80057f4 <HAL_I2C_Init+0x13c>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1e59      	subs	r1, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ce:	1c59      	adds	r1, r3, #1
 80057d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057d4:	400b      	ands	r3, r1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_I2C_Init+0x138>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1e59      	subs	r1, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e8:	3301      	adds	r3, #1
 80057ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ee:	e051      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 80057f0:	2304      	movs	r3, #4
 80057f2:	e04f      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d111      	bne.n	8005820 <HAL_I2C_Init+0x168>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1e58      	subs	r0, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	440b      	add	r3, r1
 800580a:	fbb0 f3f3 	udiv	r3, r0, r3
 800580e:	3301      	adds	r3, #1
 8005810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e012      	b.n	8005846 <HAL_I2C_Init+0x18e>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1e58      	subs	r0, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6859      	ldr	r1, [r3, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	0099      	lsls	r1, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	fbb0 f3f3 	udiv	r3, r0, r3
 8005836:	3301      	adds	r3, #1
 8005838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Init+0x196>
 800584a:	2301      	movs	r3, #1
 800584c:	e022      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10e      	bne.n	8005874 <HAL_I2C_Init+0x1bc>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1e58      	subs	r0, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6859      	ldr	r1, [r3, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	440b      	add	r3, r1
 8005864:	fbb0 f3f3 	udiv	r3, r0, r3
 8005868:	3301      	adds	r3, #1
 800586a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800586e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005872:	e00f      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1e58      	subs	r0, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	0099      	lsls	r1, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	fbb0 f3f3 	udiv	r3, r0, r3
 800588a:	3301      	adds	r3, #1
 800588c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	6809      	ldr	r1, [r1, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69da      	ldr	r2, [r3, #28]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6911      	ldr	r1, [r2, #16]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68d2      	ldr	r2, [r2, #12]
 80058ce:	4311      	orrs	r1, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	000186a0 	.word	0x000186a0
 8005930:	001e847f 	.word	0x001e847f
 8005934:	003d08ff 	.word	0x003d08ff
 8005938:	431bde83 	.word	0x431bde83
 800593c:	10624dd3 	.word	0x10624dd3

08005940 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	4603      	mov	r3, r0
 8005950:	817b      	strh	r3, [r7, #10]
 8005952:	460b      	mov	r3, r1
 8005954:	813b      	strh	r3, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800595a:	f7fe fb81 	bl	8004060 <HAL_GetTick>
 800595e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b20      	cmp	r3, #32
 800596a:	f040 80d9 	bne.w	8005b20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2319      	movs	r3, #25
 8005974:	2201      	movs	r2, #1
 8005976:	496d      	ldr	r1, [pc, #436]	; (8005b2c <HAL_I2C_Mem_Write+0x1ec>)
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fc7f 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
 8005986:	e0cc      	b.n	8005b22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_I2C_Mem_Write+0x56>
 8005992:	2302      	movs	r3, #2
 8005994:	e0c5      	b.n	8005b22 <HAL_I2C_Mem_Write+0x1e2>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d007      	beq.n	80059bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2221      	movs	r2, #33	; 0x21
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2240      	movs	r2, #64	; 0x40
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a4d      	ldr	r2, [pc, #308]	; (8005b30 <HAL_I2C_Mem_Write+0x1f0>)
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059fe:	88f8      	ldrh	r0, [r7, #6]
 8005a00:	893a      	ldrh	r2, [r7, #8]
 8005a02:	8979      	ldrh	r1, [r7, #10]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fab6 	bl	8005f80 <I2C_RequestMemoryWrite>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d052      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e081      	b.n	8005b22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fd00 	bl	8006428 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d107      	bne.n	8005a46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06b      	b.n	8005b22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d11b      	bne.n	8005ac0 <HAL_I2C_Mem_Write+0x180>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1aa      	bne.n	8005a1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fcec 	bl	80064aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d107      	bne.n	8005af0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e016      	b.n	8005b22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	00100002 	.word	0x00100002
 8005b30:	ffff0000 	.word	0xffff0000

08005b34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	; 0x30
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	817b      	strh	r3, [r7, #10]
 8005b46:	460b      	mov	r3, r1
 8005b48:	813b      	strh	r3, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b4e:	f7fe fa87 	bl	8004060 <HAL_GetTick>
 8005b52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	f040 8208 	bne.w	8005f72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	2319      	movs	r3, #25
 8005b68:	2201      	movs	r2, #1
 8005b6a:	497b      	ldr	r1, [pc, #492]	; (8005d58 <HAL_I2C_Mem_Read+0x224>)
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fb85 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e1fb      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_I2C_Mem_Read+0x56>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e1f4      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d007      	beq.n	8005bb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2222      	movs	r2, #34	; 0x22
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2240      	movs	r2, #64	; 0x40
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a5b      	ldr	r2, [pc, #364]	; (8005d5c <HAL_I2C_Mem_Read+0x228>)
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bf2:	88f8      	ldrh	r0, [r7, #6]
 8005bf4:	893a      	ldrh	r2, [r7, #8]
 8005bf6:	8979      	ldrh	r1, [r7, #10]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	4603      	mov	r3, r0
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa52 	bl	80060ac <I2C_RequestMemoryRead>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e1b0      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d113      	bne.n	8005c42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	623b      	str	r3, [r7, #32]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e184      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11b      	bne.n	8005c82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e164      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d11b      	bne.n	8005cc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	e144      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cd8:	e138      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	f200 80f1 	bhi.w	8005ec6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d123      	bne.n	8005d34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fc1b 	bl	800652c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e139      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d32:	e10b      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d14e      	bne.n	8005dda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	2200      	movs	r2, #0
 8005d44:	4906      	ldr	r1, [pc, #24]	; (8005d60 <HAL_I2C_Mem_Read+0x22c>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa98 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e10e      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
 8005d56:	bf00      	nop
 8005d58:	00100002 	.word	0x00100002
 8005d5c:	ffff0000 	.word	0xffff0000
 8005d60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dd8:	e0b8      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	2200      	movs	r2, #0
 8005de2:	4966      	ldr	r1, [pc, #408]	; (8005f7c <HAL_I2C_Mem_Read+0x448>)
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa49 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0bf      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	494f      	ldr	r1, [pc, #316]	; (8005f7c <HAL_I2C_Mem_Read+0x448>)
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fa1b 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e091      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ec4:	e042      	b.n	8005f4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fb2e 	bl	800652c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e04c      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d118      	bne.n	8005f4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f47f aec2 	bne.w	8005cda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
  }
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3728      	adds	r7, #40	; 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	00010004 	.word	0x00010004

08005f80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	817b      	strh	r3, [r7, #10]
 8005f92:	460b      	mov	r3, r1
 8005f94:	813b      	strh	r3, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f960 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd0:	d103      	bne.n	8005fda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e05f      	b.n	800609e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fde:	897b      	ldrh	r3, [r7, #10]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	492d      	ldr	r1, [pc, #180]	; (80060a8 <I2C_RequestMemoryWrite+0x128>)
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f998 	bl	800632a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e04c      	b.n	800609e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800601a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601c:	6a39      	ldr	r1, [r7, #32]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fa02 	bl	8006428 <I2C_WaitOnTXEFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	2b04      	cmp	r3, #4
 8006030:	d107      	bne.n	8006042 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02b      	b.n	800609e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d105      	bne.n	8006058 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800604c:	893b      	ldrh	r3, [r7, #8]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	611a      	str	r2, [r3, #16]
 8006056:	e021      	b.n	800609c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006058:	893b      	ldrh	r3, [r7, #8]
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	b29b      	uxth	r3, r3
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006068:	6a39      	ldr	r1, [r7, #32]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f9dc 	bl	8006428 <I2C_WaitOnTXEFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	2b04      	cmp	r3, #4
 800607c:	d107      	bne.n	800608e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e005      	b.n	800609e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006092:	893b      	ldrh	r3, [r7, #8]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	00010002 	.word	0x00010002

080060ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	817b      	strh	r3, [r7, #10]
 80060be:	460b      	mov	r3, r1
 80060c0:	813b      	strh	r3, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f8c2 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610c:	d103      	bne.n	8006116 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e0aa      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	4952      	ldr	r1, [pc, #328]	; (8006278 <I2C_RequestMemoryRead+0x1cc>)
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f8fa 	bl	800632a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e097      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006158:	6a39      	ldr	r1, [r7, #32]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f964 	bl	8006428 <I2C_WaitOnTXEFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b04      	cmp	r3, #4
 800616c:	d107      	bne.n	800617e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e076      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006188:	893b      	ldrh	r3, [r7, #8]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	611a      	str	r2, [r3, #16]
 8006192:	e021      	b.n	80061d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006194:	893b      	ldrh	r3, [r7, #8]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a4:	6a39      	ldr	r1, [r7, #32]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f93e 	bl	8006428 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00d      	beq.n	80061ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d107      	bne.n	80061ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e050      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ce:	893b      	ldrh	r3, [r7, #8]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	6a39      	ldr	r1, [r7, #32]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f923 	bl	8006428 <I2C_WaitOnTXEFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00d      	beq.n	8006204 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d107      	bne.n	8006200 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e035      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006212:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	2200      	movs	r2, #0
 800621c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f82b 	bl	800627c <I2C_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d103      	bne.n	8006244 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e013      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006248:	897b      	ldrh	r3, [r7, #10]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	4906      	ldr	r1, [pc, #24]	; (8006278 <I2C_RequestMemoryRead+0x1cc>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f863 	bl	800632a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	00010002 	.word	0x00010002

0800627c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800628c:	e025      	b.n	80062da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d021      	beq.n	80062da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fd fee3 	bl	8004060 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d116      	bne.n	80062da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e023      	b.n	8006322 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d10d      	bne.n	8006300 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	43da      	mvns	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4013      	ands	r3, r2
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bf0c      	ite	eq
 80062f6:	2301      	moveq	r3, #1
 80062f8:	2300      	movne	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	e00c      	b.n	800631a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	43da      	mvns	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	429a      	cmp	r2, r3
 800631e:	d0b6      	beq.n	800628e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006338:	e051      	b.n	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006348:	d123      	bne.n	8006392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006358:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006362:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e046      	b.n	8006420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d021      	beq.n	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639a:	f7fd fe61 	bl	8004060 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d302      	bcc.n	80063b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d116      	bne.n	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e020      	b.n	8006420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d10c      	bne.n	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	43da      	mvns	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bf14      	ite	ne
 80063fa:	2301      	movne	r3, #1
 80063fc:	2300      	moveq	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	e00b      	b.n	800641a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	43da      	mvns	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d18d      	bne.n	800633a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006434:	e02d      	b.n	8006492 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f8ce 	bl	80065d8 <I2C_IsAcknowledgeFailed>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e02d      	b.n	80064a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d021      	beq.n	8006492 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fd fe07 	bl	8004060 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d116      	bne.n	8006492 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e007      	b.n	80064a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649c:	2b80      	cmp	r3, #128	; 0x80
 800649e:	d1ca      	bne.n	8006436 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064b6:	e02d      	b.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f88d 	bl	80065d8 <I2C_IsAcknowledgeFailed>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e02d      	b.n	8006524 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d021      	beq.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d0:	f7fd fdc6 	bl	8004060 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d116      	bne.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e007      	b.n	8006524 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b04      	cmp	r3, #4
 8006520:	d1ca      	bne.n	80064b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006538:	e042      	b.n	80065c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b10      	cmp	r3, #16
 8006546:	d119      	bne.n	800657c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0210 	mvn.w	r2, #16
 8006550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e029      	b.n	80065d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657c:	f7fd fd70 	bl	8004060 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d116      	bne.n	80065c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e007      	b.n	80065d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d1b5      	bne.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ee:	d11b      	bne.n	8006628 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	f043 0204 	orr.w	r2, r3, #4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006642:	2300      	movs	r3, #0
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800664c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800665e:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <HAL_PWREx_EnableOverDrive+0x94>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006664:	f7fd fcfc 	bl	8004060 <HAL_GetTick>
 8006668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800666a:	e009      	b.n	8006680 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800666c:	f7fd fcf8 	bl	8004060 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667a:	d901      	bls.n	8006680 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e01f      	b.n	80066c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006680:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668c:	d1ee      	bne.n	800666c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800668e:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006690:	2201      	movs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006694:	f7fd fce4 	bl	8004060 <HAL_GetTick>
 8006698:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800669a:	e009      	b.n	80066b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800669c:	f7fd fce0 	bl	8004060 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066aa:	d901      	bls.n	80066b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e007      	b.n	80066c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066bc:	d1ee      	bne.n	800669c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40023800 	.word	0x40023800
 80066cc:	420e0040 	.word	0x420e0040
 80066d0:	40007000 	.word	0x40007000
 80066d4:	420e0044 	.word	0x420e0044

080066d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0cc      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b68      	ldr	r3, [pc, #416]	; (8006890 <HAL_RCC_ClockConfig+0x1b8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d90c      	bls.n	8006714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b65      	ldr	r3, [pc, #404]	; (8006890 <HAL_RCC_ClockConfig+0x1b8>)
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006702:	4b63      	ldr	r3, [pc, #396]	; (8006890 <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d001      	beq.n	8006714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e0b8      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d020      	beq.n	8006762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800672c:	4b59      	ldr	r3, [pc, #356]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4a58      	ldr	r2, [pc, #352]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006744:	4b53      	ldr	r3, [pc, #332]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a52      	ldr	r2, [pc, #328]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800674e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006750:	4b50      	ldr	r3, [pc, #320]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	494d      	ldr	r1, [pc, #308]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	4313      	orrs	r3, r2
 8006760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d044      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d107      	bne.n	8006786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	4b47      	ldr	r3, [pc, #284]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d119      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e07f      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d003      	beq.n	8006796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006792:	2b03      	cmp	r3, #3
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006796:	4b3f      	ldr	r3, [pc, #252]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e06f      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a6:	4b3b      	ldr	r3, [pc, #236]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e067      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b6:	4b37      	ldr	r3, [pc, #220]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 0203 	bic.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4934      	ldr	r1, [pc, #208]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c8:	f7fd fc4a 	bl	8004060 <HAL_GetTick>
 80067cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	e00a      	b.n	80067e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d0:	f7fd fc46 	bl	8004060 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	f241 3288 	movw	r2, #5000	; 0x1388
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e04f      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	4b2b      	ldr	r3, [pc, #172]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 020c 	and.w	r2, r3, #12
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1eb      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <HAL_RCC_ClockConfig+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d20c      	bcs.n	8006820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b22      	ldr	r3, [pc, #136]	; (8006890 <HAL_RCC_ClockConfig+0x1b8>)
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800680e:	4b20      	ldr	r3, [pc, #128]	; (8006890 <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e032      	b.n	8006886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800682c:	4b19      	ldr	r3, [pc, #100]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	4916      	ldr	r1, [pc, #88]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	4313      	orrs	r3, r2
 800683c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800684a:	4b12      	ldr	r3, [pc, #72]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	490e      	ldr	r1, [pc, #56]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	4313      	orrs	r3, r2
 800685c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800685e:	f000 f855 	bl	800690c <HAL_RCC_GetSysClockFreq>
 8006862:	4602      	mov	r2, r0
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	490a      	ldr	r1, [pc, #40]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 8006870:	5ccb      	ldrb	r3, [r1, r3]
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <HAL_RCC_ClockConfig+0x1c8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fd fbaa 	bl	8003fd8 <HAL_InitTick>

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40023c00 	.word	0x40023c00
 8006894:	40023800 	.word	0x40023800
 8006898:	0800c940 	.word	0x0800c940
 800689c:	20000018 	.word	0x20000018
 80068a0:	2000001c 	.word	0x2000001c

080068a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a8:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068aa:	681b      	ldr	r3, [r3, #0]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000018 	.word	0x20000018

080068bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068c0:	f7ff fff0 	bl	80068a4 <HAL_RCC_GetHCLKFreq>
 80068c4:	4602      	mov	r2, r0
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	0a9b      	lsrs	r3, r3, #10
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	4903      	ldr	r1, [pc, #12]	; (80068e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068d2:	5ccb      	ldrb	r3, [r1, r3]
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40023800 	.word	0x40023800
 80068e0:	0800c950 	.word	0x0800c950

080068e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068e8:	f7ff ffdc 	bl	80068a4 <HAL_RCC_GetHCLKFreq>
 80068ec:	4602      	mov	r2, r0
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	0b5b      	lsrs	r3, r3, #13
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4903      	ldr	r1, [pc, #12]	; (8006908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068fa:	5ccb      	ldrb	r3, [r1, r3]
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006900:	4618      	mov	r0, r3
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40023800 	.word	0x40023800
 8006908:	0800c950 	.word	0x0800c950

0800690c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b0ae      	sub	sp, #184	; 0xb8
 8006912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006932:	4bcb      	ldr	r3, [pc, #812]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b0c      	cmp	r3, #12
 800693c:	f200 8206 	bhi.w	8006d4c <HAL_RCC_GetSysClockFreq+0x440>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	0800697d 	.word	0x0800697d
 800694c:	08006d4d 	.word	0x08006d4d
 8006950:	08006d4d 	.word	0x08006d4d
 8006954:	08006d4d 	.word	0x08006d4d
 8006958:	08006985 	.word	0x08006985
 800695c:	08006d4d 	.word	0x08006d4d
 8006960:	08006d4d 	.word	0x08006d4d
 8006964:	08006d4d 	.word	0x08006d4d
 8006968:	0800698d 	.word	0x0800698d
 800696c:	08006d4d 	.word	0x08006d4d
 8006970:	08006d4d 	.word	0x08006d4d
 8006974:	08006d4d 	.word	0x08006d4d
 8006978:	08006b7d 	.word	0x08006b7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4bb9      	ldr	r3, [pc, #740]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x358>)
 800697e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006982:	e1e7      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006984:	4bb8      	ldr	r3, [pc, #736]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800698a:	e1e3      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800698c:	4bb4      	ldr	r3, [pc, #720]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006998:	4bb1      	ldr	r3, [pc, #708]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d071      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069a4:	4bae      	ldr	r3, [pc, #696]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	099b      	lsrs	r3, r3, #6
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80069b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ca:	4622      	mov	r2, r4
 80069cc:	462b      	mov	r3, r5
 80069ce:	f04f 0000 	mov.w	r0, #0
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	0159      	lsls	r1, r3, #5
 80069d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069dc:	0150      	lsls	r0, r2, #5
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4621      	mov	r1, r4
 80069e4:	1a51      	subs	r1, r2, r1
 80069e6:	6439      	str	r1, [r7, #64]	; 0x40
 80069e8:	4629      	mov	r1, r5
 80069ea:	eb63 0301 	sbc.w	r3, r3, r1
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80069fc:	4649      	mov	r1, r9
 80069fe:	018b      	lsls	r3, r1, #6
 8006a00:	4641      	mov	r1, r8
 8006a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a06:	4641      	mov	r1, r8
 8006a08:	018a      	lsls	r2, r1, #6
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	1a51      	subs	r1, r2, r1
 8006a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a10:	4649      	mov	r1, r9
 8006a12:	eb63 0301 	sbc.w	r3, r3, r1
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006a24:	4649      	mov	r1, r9
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4641      	mov	r1, r8
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4641      	mov	r1, r8
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4622      	mov	r2, r4
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	462b      	mov	r3, r5
 8006a40:	460a      	mov	r2, r1
 8006a42:	eb42 0303 	adc.w	r3, r2, r3
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a54:	4629      	mov	r1, r5
 8006a56:	024b      	lsls	r3, r1, #9
 8006a58:	4621      	mov	r1, r4
 8006a5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a5e:	4621      	mov	r1, r4
 8006a60:	024a      	lsls	r2, r1, #9
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a78:	f7fa f926 	bl	8000cc8 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4613      	mov	r3, r2
 8006a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a86:	e067      	b.n	8006b58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a88:	4b75      	ldr	r3, [pc, #468]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	099b      	lsrs	r3, r3, #6
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	f04f 0000 	mov.w	r0, #0
 8006ab2:	f04f 0100 	mov.w	r1, #0
 8006ab6:	0159      	lsls	r1, r3, #5
 8006ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006abc:	0150      	lsls	r0, r2, #5
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	1a51      	subs	r1, r2, r1
 8006ac6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ac8:	4629      	mov	r1, r5
 8006aca:	eb63 0301 	sbc.w	r3, r3, r1
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006adc:	4649      	mov	r1, r9
 8006ade:	018b      	lsls	r3, r1, #6
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	018a      	lsls	r2, r1, #6
 8006aea:	4641      	mov	r1, r8
 8006aec:	ebb2 0a01 	subs.w	sl, r2, r1
 8006af0:	4649      	mov	r1, r9
 8006af2:	eb63 0b01 	sbc.w	fp, r3, r1
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b0a:	4692      	mov	sl, r2
 8006b0c:	469b      	mov	fp, r3
 8006b0e:	4623      	mov	r3, r4
 8006b10:	eb1a 0303 	adds.w	r3, sl, r3
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	462b      	mov	r3, r5
 8006b18:	eb4b 0303 	adc.w	r3, fp, r3
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	028b      	lsls	r3, r1, #10
 8006b2e:	4621      	mov	r1, r4
 8006b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b34:	4621      	mov	r1, r4
 8006b36:	028a      	lsls	r2, r1, #10
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b40:	2200      	movs	r2, #0
 8006b42:	673b      	str	r3, [r7, #112]	; 0x70
 8006b44:	677a      	str	r2, [r7, #116]	; 0x74
 8006b46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006b4a:	f7fa f8bd 	bl	8000cc8 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4613      	mov	r3, r2
 8006b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b58:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	3301      	adds	r3, #1
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b7a:	e0eb      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b7c:	4b38      	ldr	r3, [pc, #224]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b88:	4b35      	ldr	r3, [pc, #212]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d06b      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b94:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	099b      	lsrs	r3, r3, #6
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba8:	2300      	movs	r3, #0
 8006baa:	667b      	str	r3, [r7, #100]	; 0x64
 8006bac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	f04f 0000 	mov.w	r0, #0
 8006bb8:	f04f 0100 	mov.w	r1, #0
 8006bbc:	0159      	lsls	r1, r3, #5
 8006bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bc2:	0150      	lsls	r0, r2, #5
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4621      	mov	r1, r4
 8006bca:	1a51      	subs	r1, r2, r1
 8006bcc:	61b9      	str	r1, [r7, #24]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006be2:	4659      	mov	r1, fp
 8006be4:	018b      	lsls	r3, r1, #6
 8006be6:	4651      	mov	r1, sl
 8006be8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bec:	4651      	mov	r1, sl
 8006bee:	018a      	lsls	r2, r1, #6
 8006bf0:	4651      	mov	r1, sl
 8006bf2:	ebb2 0801 	subs.w	r8, r2, r1
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	eb63 0901 	sbc.w	r9, r3, r1
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c10:	4690      	mov	r8, r2
 8006c12:	4699      	mov	r9, r3
 8006c14:	4623      	mov	r3, r4
 8006c16:	eb18 0303 	adds.w	r3, r8, r3
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	eb49 0303 	adc.w	r3, r9, r3
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c30:	4629      	mov	r1, r5
 8006c32:	024b      	lsls	r3, r1, #9
 8006c34:	4621      	mov	r1, r4
 8006c36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	024a      	lsls	r2, r1, #9
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c46:	2200      	movs	r2, #0
 8006c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c50:	f7fa f83a 	bl	8000cc8 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4613      	mov	r3, r2
 8006c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c5e:	e065      	b.n	8006d2c <HAL_RCC_GetSysClockFreq+0x420>
 8006c60:	40023800 	.word	0x40023800
 8006c64:	00f42400 	.word	0x00f42400
 8006c68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6c:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x458>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	2200      	movs	r2, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	4611      	mov	r1, r2
 8006c78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c7e:	2300      	movs	r3, #0
 8006c80:	657b      	str	r3, [r7, #84]	; 0x54
 8006c82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	f04f 0000 	mov.w	r0, #0
 8006c8e:	f04f 0100 	mov.w	r1, #0
 8006c92:	0159      	lsls	r1, r3, #5
 8006c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c98:	0150      	lsls	r0, r2, #5
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	1a51      	subs	r1, r2, r1
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006cb8:	4659      	mov	r1, fp
 8006cba:	018b      	lsls	r3, r1, #6
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	018a      	lsls	r2, r1, #6
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	1a54      	subs	r4, r2, r1
 8006cca:	4659      	mov	r1, fp
 8006ccc:	eb63 0501 	sbc.w	r5, r3, r1
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	00eb      	lsls	r3, r5, #3
 8006cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cde:	00e2      	lsls	r2, r4, #3
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	18e3      	adds	r3, r4, r3
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	464b      	mov	r3, r9
 8006cec:	eb45 0303 	adc.w	r3, r5, r3
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cfe:	4629      	mov	r1, r5
 8006d00:	028b      	lsls	r3, r1, #10
 8006d02:	4621      	mov	r1, r4
 8006d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d08:	4621      	mov	r1, r4
 8006d0a:	028a      	lsls	r2, r1, #10
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d14:	2200      	movs	r2, #0
 8006d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d1e:	f7f9 ffd3 	bl	8000cc8 <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4613      	mov	r3, r2
 8006d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	0f1b      	lsrs	r3, r3, #28
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d4a:	e003      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	37b8      	adds	r7, #184	; 0xb8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	00f42400 	.word	0x00f42400

08006d6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e28d      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8083 	beq.w	8006e92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d8c:	4b94      	ldr	r3, [pc, #592]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d019      	beq.n	8006dcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d98:	4b91      	ldr	r3, [pc, #580]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d106      	bne.n	8006db2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006da4:	4b8e      	ldr	r3, [pc, #568]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db0:	d00c      	beq.n	8006dcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db2:	4b8b      	ldr	r3, [pc, #556]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dba:	2b0c      	cmp	r3, #12
 8006dbc:	d112      	bne.n	8006de4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dbe:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dca:	d10b      	bne.n	8006de4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dcc:	4b84      	ldr	r3, [pc, #528]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d05b      	beq.n	8006e90 <HAL_RCC_OscConfig+0x124>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d157      	bne.n	8006e90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e25a      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dec:	d106      	bne.n	8006dfc <HAL_RCC_OscConfig+0x90>
 8006dee:	4b7c      	ldr	r3, [pc, #496]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a7b      	ldr	r2, [pc, #492]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	e01d      	b.n	8006e38 <HAL_RCC_OscConfig+0xcc>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0xb4>
 8006e06:	4b76      	ldr	r3, [pc, #472]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a75      	ldr	r2, [pc, #468]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b73      	ldr	r3, [pc, #460]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a72      	ldr	r2, [pc, #456]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCC_OscConfig+0xcc>
 8006e20:	4b6f      	ldr	r3, [pc, #444]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6e      	ldr	r2, [pc, #440]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	4b6c      	ldr	r3, [pc, #432]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6b      	ldr	r2, [pc, #428]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d013      	beq.n	8006e68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fd f90e 	bl	8004060 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e48:	f7fd f90a 	bl	8004060 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	; 0x64
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e21f      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	4b61      	ldr	r3, [pc, #388]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0xdc>
 8006e66:	e014      	b.n	8006e92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fd f8fa 	bl	8004060 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e70:	f7fd f8f6 	bl	8004060 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b64      	cmp	r3, #100	; 0x64
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e20b      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e82:	4b57      	ldr	r3, [pc, #348]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x104>
 8006e8e:	e000      	b.n	8006e92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d06f      	beq.n	8006f7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e9e:	4b50      	ldr	r3, [pc, #320]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d017      	beq.n	8006eda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eaa:	4b4d      	ldr	r3, [pc, #308]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eb6:	4b4a      	ldr	r3, [pc, #296]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ec2:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d11c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ece:	4b44      	ldr	r3, [pc, #272]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d116      	bne.n	8006f08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eda:	4b41      	ldr	r3, [pc, #260]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x186>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e1d3      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef2:	4b3b      	ldr	r3, [pc, #236]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4937      	ldr	r1, [pc, #220]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f06:	e03a      	b.n	8006f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f10:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <HAL_RCC_OscConfig+0x278>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f16:	f7fd f8a3 	bl	8004060 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f1e:	f7fd f89f 	bl	8004060 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e1b4      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f30:	4b2b      	ldr	r3, [pc, #172]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f3c:	4b28      	ldr	r3, [pc, #160]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	4925      	ldr	r1, [pc, #148]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]
 8006f50:	e015      	b.n	8006f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f52:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <HAL_RCC_OscConfig+0x278>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fd f882 	bl	8004060 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f60:	f7fd f87e 	bl	8004060 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e193      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f72:	4b1b      	ldr	r3, [pc, #108]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d036      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <HAL_RCC_OscConfig+0x27c>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fd f862 	bl	8004060 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa0:	f7fd f85e 	bl	8004060 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e173      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0f0      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x234>
 8006fbe:	e01b      	b.n	8006ff8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc6:	f7fd f84b 	bl	8004060 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fcc:	e00e      	b.n	8006fec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fce:	f7fd f847 	bl	8004060 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d907      	bls.n	8006fec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e15c      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	42470000 	.word	0x42470000
 8006fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fec:	4b8a      	ldr	r3, [pc, #552]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8006fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ea      	bne.n	8006fce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8097 	beq.w	8007134 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007006:	2300      	movs	r3, #0
 8007008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800700a:	4b83      	ldr	r3, [pc, #524]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10f      	bne.n	8007036 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	4b7f      	ldr	r3, [pc, #508]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	4a7e      	ldr	r2, [pc, #504]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007024:	6413      	str	r3, [r2, #64]	; 0x40
 8007026:	4b7c      	ldr	r3, [pc, #496]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007032:	2301      	movs	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007036:	4b79      	ldr	r3, [pc, #484]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d118      	bne.n	8007074 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007042:	4b76      	ldr	r3, [pc, #472]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a75      	ldr	r2, [pc, #468]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 8007048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800704e:	f7fd f807 	bl	8004060 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007054:	e008      	b.n	8007068 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007056:	f7fd f803 	bl	8004060 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e118      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007068:	4b6c      	ldr	r3, [pc, #432]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0f0      	beq.n	8007056 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d106      	bne.n	800708a <HAL_RCC_OscConfig+0x31e>
 800707c:	4b66      	ldr	r3, [pc, #408]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	6713      	str	r3, [r2, #112]	; 0x70
 8007088:	e01c      	b.n	80070c4 <HAL_RCC_OscConfig+0x358>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b05      	cmp	r3, #5
 8007090:	d10c      	bne.n	80070ac <HAL_RCC_OscConfig+0x340>
 8007092:	4b61      	ldr	r3, [pc, #388]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a60      	ldr	r2, [pc, #384]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007098:	f043 0304 	orr.w	r3, r3, #4
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
 800709e:	4b5e      	ldr	r3, [pc, #376]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a5d      	ldr	r2, [pc, #372]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
 80070aa:	e00b      	b.n	80070c4 <HAL_RCC_OscConfig+0x358>
 80070ac:	4b5a      	ldr	r3, [pc, #360]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a59      	ldr	r2, [pc, #356]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
 80070b8:	4b57      	ldr	r3, [pc, #348]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	4a56      	ldr	r2, [pc, #344]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070be:	f023 0304 	bic.w	r3, r3, #4
 80070c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d015      	beq.n	80070f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070cc:	f7fc ffc8 	bl	8004060 <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d4:	f7fc ffc4 	bl	8004060 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e0d7      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ea:	4b4b      	ldr	r3, [pc, #300]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0ee      	beq.n	80070d4 <HAL_RCC_OscConfig+0x368>
 80070f6:	e014      	b.n	8007122 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fc ffb2 	bl	8004060 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070fe:	e00a      	b.n	8007116 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007100:	f7fc ffae 	bl	8004060 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e0c1      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007116:	4b40      	ldr	r3, [pc, #256]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ee      	bne.n	8007100 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d105      	bne.n	8007134 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007128:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	4a3a      	ldr	r2, [pc, #232]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800712e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80ad 	beq.w	8007298 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b08      	cmp	r3, #8
 8007148:	d060      	beq.n	800720c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d145      	bne.n	80071de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007152:	4b33      	ldr	r3, [pc, #204]	; (8007220 <HAL_RCC_OscConfig+0x4b4>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fc ff82 	bl	8004060 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007160:	f7fc ff7e 	bl	8004060 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e093      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007172:	4b29      	ldr	r3, [pc, #164]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	019b      	lsls	r3, r3, #6
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	085b      	lsrs	r3, r3, #1
 8007196:	3b01      	subs	r3, #1
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	061b      	lsls	r3, r3, #24
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	071b      	lsls	r3, r3, #28
 80071aa:	491b      	ldr	r1, [pc, #108]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071b0:	4b1b      	ldr	r3, [pc, #108]	; (8007220 <HAL_RCC_OscConfig+0x4b4>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b6:	f7fc ff53 	bl	8004060 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071be:	f7fc ff4f 	bl	8004060 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e064      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d0:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCC_OscConfig+0x452>
 80071dc:	e05c      	b.n	8007298 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <HAL_RCC_OscConfig+0x4b4>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fc ff3c 	bl	8004060 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fc ff38 	bl	8004060 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e04d      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x480>
 800720a:	e045      	b.n	8007298 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d107      	bne.n	8007224 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e040      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
 8007218:	40023800 	.word	0x40023800
 800721c:	40007000 	.word	0x40007000
 8007220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007224:	4b1f      	ldr	r3, [pc, #124]	; (80072a4 <HAL_RCC_OscConfig+0x538>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d030      	beq.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800723c:	429a      	cmp	r2, r3
 800723e:	d129      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d122      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007254:	4013      	ands	r3, r2
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800725a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800725c:	4293      	cmp	r3, r2
 800725e:	d119      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	3b01      	subs	r3, #1
 800726e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007270:	429a      	cmp	r2, r3
 8007272:	d10f      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007280:	429a      	cmp	r2, r3
 8007282:	d107      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d001      	beq.n	8007298 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40023800 	.word	0x40023800

080072a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e07b      	b.n	80073b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d108      	bne.n	80072d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ca:	d009      	beq.n	80072e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
 80072d2:	e005      	b.n	80072e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fc f9e8 	bl	80036d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	ea42 0103 	orr.w	r1, r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f003 0104 	and.w	r1, r3, #4
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	f003 0210 	and.w	r2, r3, #16
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b088      	sub	sp, #32
 80073be:	af02      	add	r7, sp, #8
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073d6:	d112      	bne.n	80073fe <HAL_SPI_Receive+0x44>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10e      	bne.n	80073fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2204      	movs	r2, #4
 80073e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	4613      	mov	r3, r2
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f8f1 	bl	80075dc <HAL_SPI_TransmitReceive>
 80073fa:	4603      	mov	r3, r0
 80073fc:	e0ea      	b.n	80075d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_SPI_Receive+0x52>
 8007408:	2302      	movs	r3, #2
 800740a:	e0e3      	b.n	80075d4 <HAL_SPI_Receive+0x21a>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007414:	f7fc fe24 	bl	8004060 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d002      	beq.n	800742c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007426:	2302      	movs	r3, #2
 8007428:	75fb      	strb	r3, [r7, #23]
    goto error;
 800742a:	e0ca      	b.n	80075c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_SPI_Receive+0x7e>
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800743c:	e0c1      	b.n	80075c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2204      	movs	r2, #4
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007484:	d10f      	bne.n	80074a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d007      	beq.n	80074c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d162      	bne.n	8007592 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80074cc:	e02e      	b.n	800752c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d115      	bne.n	8007508 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f103 020c 	add.w	r2, r3, #12
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	7812      	ldrb	r2, [r2, #0]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007506:	e011      	b.n	800752c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007508:	f7fc fdaa 	bl	8004060 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d803      	bhi.n	8007520 <HAL_SPI_Receive+0x166>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d102      	bne.n	8007526 <HAL_SPI_Receive+0x16c>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	75fb      	strb	r3, [r7, #23]
          goto error;
 800752a:	e04a      	b.n	80075c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1cb      	bne.n	80074ce <HAL_SPI_Receive+0x114>
 8007536:	e031      	b.n	800759c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d113      	bne.n	800756e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	b292      	uxth	r2, r2
 8007552:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	1c9a      	adds	r2, r3, #2
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800756c:	e011      	b.n	8007592 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800756e:	f7fc fd77 	bl	8004060 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d803      	bhi.n	8007586 <HAL_SPI_Receive+0x1cc>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d102      	bne.n	800758c <HAL_SPI_Receive+0x1d2>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d102      	bne.n	8007592 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007590:	e017      	b.n	80075c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1cd      	bne.n	8007538 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fa45 	bl	8007a30 <SPI_EndRxTransaction>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
 80075be:	e000      	b.n	80075c2 <HAL_SPI_Receive+0x208>
  }

error :
 80075c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08c      	sub	sp, #48	; 0x30
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075ea:	2301      	movs	r3, #1
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x26>
 80075fe:	2302      	movs	r3, #2
 8007600:	e18a      	b.n	8007918 <HAL_SPI_TransmitReceive+0x33c>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800760a:	f7fc fd29 	bl	8004060 <HAL_GetTick>
 800760e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007628:	2b01      	cmp	r3, #1
 800762a:	d00f      	beq.n	800764c <HAL_SPI_TransmitReceive+0x70>
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007632:	d107      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x68>
 800763c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007640:	2b04      	cmp	r3, #4
 8007642:	d003      	beq.n	800764c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007644:	2302      	movs	r3, #2
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800764a:	e15b      	b.n	8007904 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <HAL_SPI_TransmitReceive+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <HAL_SPI_TransmitReceive+0x82>
 8007658:	887b      	ldrh	r3, [r7, #2]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007664:	e14e      	b.n	8007904 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b04      	cmp	r3, #4
 8007670:	d003      	beq.n	800767a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2205      	movs	r2, #5
 8007676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	887a      	ldrh	r2, [r7, #2]
 800768a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	887a      	ldrh	r2, [r7, #2]
 8007690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	887a      	ldrh	r2, [r7, #2]
 800769c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	887a      	ldrh	r2, [r7, #2]
 80076a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d007      	beq.n	80076ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d6:	d178      	bne.n	80077ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x10a>
 80076e0:	8b7b      	ldrh	r3, [r7, #26]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d166      	bne.n	80077b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	881a      	ldrh	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	1c9a      	adds	r2, r3, #2
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800770a:	e053      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d11b      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x176>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d016      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x176>
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d113      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	881a      	ldrh	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	1c9a      	adds	r2, r3, #2
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b01      	cmp	r3, #1
 800775e:	d119      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x1b8>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	b292      	uxth	r2, r2
 8007776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	1c9a      	adds	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007790:	2301      	movs	r3, #1
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007794:	f7fc fc64 	bl	8004060 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d807      	bhi.n	80077b4 <HAL_SPI_TransmitReceive+0x1d8>
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d003      	beq.n	80077b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077b2:	e0a7      	b.n	8007904 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1a6      	bne.n	800770c <HAL_SPI_TransmitReceive+0x130>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1a1      	bne.n	800770c <HAL_SPI_TransmitReceive+0x130>
 80077c8:	e07c      	b.n	80078c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_SPI_TransmitReceive+0x1fc>
 80077d2:	8b7b      	ldrh	r3, [r7, #26]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d16b      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	330c      	adds	r3, #12
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077fe:	e057      	b.n	80078b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d11c      	bne.n	8007848 <HAL_SPI_TransmitReceive+0x26c>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d017      	beq.n	8007848 <HAL_SPI_TransmitReceive+0x26c>
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d114      	bne.n	8007848 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783a:	b29b      	uxth	r3, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b01      	cmp	r3, #1
 8007854:	d119      	bne.n	800788a <HAL_SPI_TransmitReceive+0x2ae>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d014      	beq.n	800788a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007886:	2301      	movs	r3, #1
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800788a:	f7fc fbe9 	bl	8004060 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007896:	429a      	cmp	r2, r3
 8007898:	d803      	bhi.n	80078a2 <HAL_SPI_TransmitReceive+0x2c6>
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d102      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x2cc>
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d103      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078ae:	e029      	b.n	8007904 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1a2      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x224>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d19d      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f917 	bl	8007afc <SPI_EndRxTxTransaction>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d006      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80078e0:	e010      	b.n	8007904 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	e000      	b.n	8007904 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007918:	4618      	mov	r0, r3
 800791a:	3730      	adds	r7, #48	; 0x30
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4613      	mov	r3, r2
 800792e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007930:	f7fc fb96 	bl	8004060 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4413      	add	r3, r2
 800793e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007940:	f7fc fb8e 	bl	8004060 <HAL_GetTick>
 8007944:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007946:	4b39      	ldr	r3, [pc, #228]	; (8007a2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	015b      	lsls	r3, r3, #5
 800794c:	0d1b      	lsrs	r3, r3, #20
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	fb02 f303 	mul.w	r3, r2, r3
 8007954:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007956:	e054      	b.n	8007a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d050      	beq.n	8007a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007960:	f7fc fb7e 	bl	8004060 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	429a      	cmp	r2, r3
 800796e:	d902      	bls.n	8007976 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d13d      	bne.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800798e:	d111      	bne.n	80079b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007998:	d004      	beq.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a2:	d107      	bne.n	80079b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079bc:	d10f      	bne.n	80079de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e017      	b.n	8007a22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	bf0c      	ite	eq
 8007a12:	2301      	moveq	r3, #1
 8007a14:	2300      	movne	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d19b      	bne.n	8007958 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3720      	adds	r7, #32
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000018 	.word	0x20000018

08007a30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a44:	d111      	bne.n	8007a6a <SPI_EndRxTransaction+0x3a>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4e:	d004      	beq.n	8007a5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a58:	d107      	bne.n	8007a6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a72:	d12a      	bne.n	8007aca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7c:	d012      	beq.n	8007aa4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	2180      	movs	r1, #128	; 0x80
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff ff49 	bl	8007920 <SPI_WaitFlagStateUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d02d      	beq.n	8007af0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e026      	b.n	8007af2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2101      	movs	r1, #1
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7ff ff36 	bl	8007920 <SPI_WaitFlagStateUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01a      	beq.n	8007af0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e013      	b.n	8007af2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff ff23 	bl	8007920 <SPI_WaitFlagStateUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae4:	f043 0220 	orr.w	r2, r3, #32
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e000      	b.n	8007af2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <SPI_EndRxTxTransaction+0x7c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <SPI_EndRxTxTransaction+0x80>)
 8007b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b12:	0d5b      	lsrs	r3, r3, #21
 8007b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
 8007b1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b26:	d112      	bne.n	8007b4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fef4 	bl	8007920 <SPI_WaitFlagStateUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d016      	beq.n	8007b6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e00f      	b.n	8007b6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d0f2      	beq.n	8007b4e <SPI_EndRxTxTransaction+0x52>
 8007b68:	e000      	b.n	8007b6c <SPI_EndRxTxTransaction+0x70>
        break;
 8007b6a:	bf00      	nop
  }

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000018 	.word	0x20000018
 8007b7c:	165e9f81 	.word	0x165e9f81

08007b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e041      	b.n	8007c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fb fdfa 	bl	80037a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 f95e 	bl	8007e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d001      	beq.n	8007c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e046      	b.n	8007cc6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a23      	ldr	r2, [pc, #140]	; (8007cd4 <HAL_TIM_Base_Start+0xb4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d022      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c52:	d01d      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1f      	ldr	r2, [pc, #124]	; (8007cd8 <HAL_TIM_Base_Start+0xb8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d018      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a1e      	ldr	r2, [pc, #120]	; (8007cdc <HAL_TIM_Base_Start+0xbc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d013      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <HAL_TIM_Base_Start+0xc0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00e      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <HAL_TIM_Base_Start+0xc4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <HAL_TIM_Base_Start+0xc8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <HAL_TIM_Base_Start+0x70>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a18      	ldr	r2, [pc, #96]	; (8007cec <HAL_TIM_Base_Start+0xcc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d111      	bne.n	8007cb4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b06      	cmp	r3, #6
 8007ca0:	d010      	beq.n	8007cc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0201 	orr.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb2:	e007      	b.n	8007cc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40010000 	.word	0x40010000
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40000c00 	.word	0x40000c00
 8007ce4:	40010400 	.word	0x40010400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40001800 	.word	0x40001800

08007cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_TIM_ConfigClockSource+0x1c>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e0b4      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x186>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d44:	d03e      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8007d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4a:	f200 8087 	bhi.w	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d52:	f000 8086 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x172>
 8007d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5a:	d87f      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5c:	2b70      	cmp	r3, #112	; 0x70
 8007d5e:	d01a      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0xa6>
 8007d60:	2b70      	cmp	r3, #112	; 0x70
 8007d62:	d87b      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d64:	2b60      	cmp	r3, #96	; 0x60
 8007d66:	d050      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x11a>
 8007d68:	2b60      	cmp	r3, #96	; 0x60
 8007d6a:	d877      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d6c:	2b50      	cmp	r3, #80	; 0x50
 8007d6e:	d03c      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0xfa>
 8007d70:	2b50      	cmp	r3, #80	; 0x50
 8007d72:	d873      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d058      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x13a>
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d86f      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d064      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d80:	2b30      	cmp	r3, #48	; 0x30
 8007d82:	d86b      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d060      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d867      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d05c      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d05a      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d94:	e062      	b.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	6899      	ldr	r1, [r3, #8]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f000 f985 	bl	80080b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	609a      	str	r2, [r3, #8]
      break;
 8007dc2:	e04f      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6899      	ldr	r1, [r3, #8]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f000 f96e 	bl	80080b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007de6:	609a      	str	r2, [r3, #8]
      break;
 8007de8:	e03c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f000 f8e2 	bl	8007fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2150      	movs	r1, #80	; 0x50
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f93b 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007e08:	e02c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 f901 	bl	800801e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2160      	movs	r1, #96	; 0x60
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f92b 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007e28:	e01c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6859      	ldr	r1, [r3, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	461a      	mov	r2, r3
 8007e38:	f000 f8c2 	bl	8007fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 f91b 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007e48:	e00c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f000 f912 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007e5a:	e003      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e60:	e000      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a40      	ldr	r2, [pc, #256]	; (8007f94 <TIM_Base_SetConfig+0x114>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <TIM_Base_SetConfig+0x40>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9e:	d00f      	beq.n	8007ec0 <TIM_Base_SetConfig+0x40>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a3d      	ldr	r2, [pc, #244]	; (8007f98 <TIM_Base_SetConfig+0x118>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00b      	beq.n	8007ec0 <TIM_Base_SetConfig+0x40>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a3c      	ldr	r2, [pc, #240]	; (8007f9c <TIM_Base_SetConfig+0x11c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d007      	beq.n	8007ec0 <TIM_Base_SetConfig+0x40>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a3b      	ldr	r2, [pc, #236]	; (8007fa0 <TIM_Base_SetConfig+0x120>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d003      	beq.n	8007ec0 <TIM_Base_SetConfig+0x40>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a3a      	ldr	r2, [pc, #232]	; (8007fa4 <TIM_Base_SetConfig+0x124>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d108      	bne.n	8007ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a2f      	ldr	r2, [pc, #188]	; (8007f94 <TIM_Base_SetConfig+0x114>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d02b      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee0:	d027      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a2c      	ldr	r2, [pc, #176]	; (8007f98 <TIM_Base_SetConfig+0x118>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d023      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2b      	ldr	r2, [pc, #172]	; (8007f9c <TIM_Base_SetConfig+0x11c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d01f      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2a      	ldr	r2, [pc, #168]	; (8007fa0 <TIM_Base_SetConfig+0x120>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d01b      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a29      	ldr	r2, [pc, #164]	; (8007fa4 <TIM_Base_SetConfig+0x124>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d017      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a28      	ldr	r2, [pc, #160]	; (8007fa8 <TIM_Base_SetConfig+0x128>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d013      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a27      	ldr	r2, [pc, #156]	; (8007fac <TIM_Base_SetConfig+0x12c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00f      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a26      	ldr	r2, [pc, #152]	; (8007fb0 <TIM_Base_SetConfig+0x130>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d00b      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <TIM_Base_SetConfig+0x134>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d007      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <TIM_Base_SetConfig+0x138>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <TIM_Base_SetConfig+0xb2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a23      	ldr	r2, [pc, #140]	; (8007fbc <TIM_Base_SetConfig+0x13c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d108      	bne.n	8007f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a0a      	ldr	r2, [pc, #40]	; (8007f94 <TIM_Base_SetConfig+0x114>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d003      	beq.n	8007f78 <TIM_Base_SetConfig+0xf8>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a0c      	ldr	r2, [pc, #48]	; (8007fa4 <TIM_Base_SetConfig+0x124>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d103      	bne.n	8007f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	615a      	str	r2, [r3, #20]
}
 8007f86:	bf00      	nop
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40010400 	.word	0x40010400
 8007fa8:	40014000 	.word	0x40014000
 8007fac:	40014400 	.word	0x40014400
 8007fb0:	40014800 	.word	0x40014800
 8007fb4:	40001800 	.word	0x40001800
 8007fb8:	40001c00 	.word	0x40001c00
 8007fbc:	40002000 	.word	0x40002000

08007fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f023 0201 	bic.w	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f023 030a 	bic.w	r3, r3, #10
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	621a      	str	r2, [r3, #32]
}
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801e:	b480      	push	{r7}
 8008020:	b087      	sub	sp, #28
 8008022:	af00      	add	r7, sp, #0
 8008024:	60f8      	str	r0, [r7, #12]
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f023 0210 	bic.w	r2, r3, #16
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	031b      	lsls	r3, r3, #12
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800805a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	f043 0307 	orr.w	r3, r3, #7
 80080a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	609a      	str	r2, [r3, #8]
}
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	021a      	lsls	r2, r3, #8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4313      	orrs	r3, r2
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	609a      	str	r2, [r3, #8]
}
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008108:	2302      	movs	r3, #2
 800810a:	e05a      	b.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a21      	ldr	r2, [pc, #132]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d022      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008158:	d01d      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d018      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1b      	ldr	r2, [pc, #108]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d013      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1a      	ldr	r2, [pc, #104]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00e      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d009      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a17      	ldr	r2, [pc, #92]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d004      	beq.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d10c      	bne.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800819c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	40010000 	.word	0x40010000
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800
 80081dc:	40000c00 	.word	0x40000c00
 80081e0:	40010400 	.word	0x40010400
 80081e4:	40014000 	.word	0x40014000
 80081e8:	40001800 	.word	0x40001800

080081ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e03f      	b.n	800827e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fb fae6 	bl	80037e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2224      	movs	r2, #36	; 0x24
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800822e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fd7b 	bl	8008d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	695a      	ldr	r2, [r3, #20]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b08a      	sub	sp, #40	; 0x28
 800828a:	af02      	add	r7, sp, #8
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d17c      	bne.n	80083a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <HAL_UART_Transmit+0x2c>
 80082ac:	88fb      	ldrh	r3, [r7, #6]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e075      	b.n	80083a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_UART_Transmit+0x3e>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e06e      	b.n	80083a2 <HAL_UART_Transmit+0x11c>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2221      	movs	r2, #33	; 0x21
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082da:	f7fb fec1 	bl	8004060 <HAL_GetTick>
 80082de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f4:	d108      	bne.n	8008308 <HAL_UART_Transmit+0x82>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d104      	bne.n	8008308 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	e003      	b.n	8008310 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008318:	e02a      	b.n	8008370 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2200      	movs	r2, #0
 8008322:	2180      	movs	r1, #128	; 0x80
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 faf9 	bl	800891c <UART_WaitOnFlagUntilTimeout>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e036      	b.n	80083a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10b      	bne.n	8008352 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008348:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	3302      	adds	r3, #2
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	e007      	b.n	8008362 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	3301      	adds	r3, #1
 8008360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008374:	b29b      	uxth	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1cf      	bne.n	800831a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2200      	movs	r2, #0
 8008382:	2140      	movs	r1, #64	; 0x40
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 fac9 	bl	800891c <UART_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e006      	b.n	80083a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b0ba      	sub	sp, #232	; 0xe8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80083ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10f      	bne.n	8008412 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d009      	beq.n	8008412 <HAL_UART_IRQHandler+0x66>
 80083fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fbd3 	bl	8008bb6 <UART_Receive_IT>
      return;
 8008410:	e256      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80de 	beq.w	80085d8 <HAL_UART_IRQHandler+0x22c>
 800841c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80d1 	beq.w	80085d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <HAL_UART_IRQHandler+0xae>
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	f043 0201 	orr.w	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00b      	beq.n	800847e <HAL_UART_IRQHandler+0xd2>
 8008466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f043 0202 	orr.w	r2, r3, #2
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_UART_IRQHandler+0xf6>
 800848a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	f043 0204 	orr.w	r2, r3, #4
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a6:	f003 0308 	and.w	r3, r3, #8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d011      	beq.n	80084d2 <HAL_UART_IRQHandler+0x126>
 80084ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f043 0208 	orr.w	r2, r3, #8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 81ed 	beq.w	80088b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d008      	beq.n	80084fa <HAL_UART_IRQHandler+0x14e>
 80084e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb5e 	bl	8008bb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008504:	2b40      	cmp	r3, #64	; 0x40
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <HAL_UART_IRQHandler+0x17a>
 800851e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d04f      	beq.n	80085c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa66 	bl	80089f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d141      	bne.n	80085be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3314      	adds	r3, #20
 8008540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800856a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800857e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1d9      	bne.n	800853a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	2b00      	cmp	r3, #0
 800858c:	d013      	beq.n	80085b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	4a7d      	ldr	r2, [pc, #500]	; (8008788 <HAL_UART_IRQHandler+0x3dc>)
 8008594:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	4618      	mov	r0, r3
 800859c:	f7fc fc3a 	bl	8004e14 <HAL_DMA_Abort_IT>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d016      	beq.n	80085d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b4:	e00e      	b.n	80085d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f99a 	bl	80088f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085bc:	e00a      	b.n	80085d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f996 	bl	80088f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	e006      	b.n	80085d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f992 	bl	80088f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085d2:	e170      	b.n	80088b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d4:	bf00      	nop
    return;
 80085d6:	e16e      	b.n	80088b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	2b01      	cmp	r3, #1
 80085de:	f040 814a 	bne.w	8008876 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8143 	beq.w	8008876 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 813c 	beq.w	8008876 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085fe:	2300      	movs	r3, #0
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861e:	2b40      	cmp	r3, #64	; 0x40
 8008620:	f040 80b4 	bne.w	800878c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8140 	beq.w	80088ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800863e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008642:	429a      	cmp	r2, r3
 8008644:	f080 8139 	bcs.w	80088ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800864e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865a:	f000 8088 	beq.w	800876e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	330c      	adds	r3, #12
 8008664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800867c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800868a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800868e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d9      	bne.n	800865e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3314      	adds	r3, #20
 80086b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e1      	bne.n	80086aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3314      	adds	r3, #20
 80086ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800870a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800870c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e3      	bne.n	80086e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800873c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008750:	65ba      	str	r2, [r7, #88]	; 0x58
 8008752:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800875e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e3      	bne.n	800872c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	4618      	mov	r0, r3
 800876a:	f7fc fae3 	bl	8004d34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008776:	b29b      	uxth	r3, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	b29b      	uxth	r3, r3
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8c0 	bl	8008904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008784:	e099      	b.n	80088ba <HAL_UART_IRQHandler+0x50e>
 8008786:	bf00      	nop
 8008788:	08008abf 	.word	0x08008abf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008794:	b29b      	uxth	r3, r3
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 808b 	beq.w	80088be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80087a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 8086 	beq.w	80088be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	330c      	adds	r3, #12
 80087d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087d6:	647a      	str	r2, [r7, #68]	; 0x44
 80087d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e3      	bne.n	80087b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3314      	adds	r3, #20
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	623b      	str	r3, [r7, #32]
   return(result);
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	f023 0301 	bic.w	r3, r3, #1
 8008800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3314      	adds	r3, #20
 800880a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800880e:	633a      	str	r2, [r7, #48]	; 0x30
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e3      	bne.n	80087ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	330c      	adds	r3, #12
 8008836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0310 	bic.w	r3, r3, #16
 8008846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008854:	61fa      	str	r2, [r7, #28]
 8008856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	69b9      	ldr	r1, [r7, #24]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	617b      	str	r3, [r7, #20]
   return(result);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e3      	bne.n	8008830 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f848 	bl	8008904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008874:	e023      	b.n	80088be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <HAL_UART_IRQHandler+0x4ea>
 8008882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f929 	bl	8008ae6 <UART_Transmit_IT>
    return;
 8008894:	e014      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00e      	beq.n	80088c0 <HAL_UART_IRQHandler+0x514>
 80088a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f969 	bl	8008b86 <UART_EndTransmit_IT>
    return;
 80088b4:	e004      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
    return;
 80088b6:	bf00      	nop
 80088b8:	e002      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
      return;
 80088ba:	bf00      	nop
 80088bc:	e000      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
      return;
 80088be:	bf00      	nop
  }
}
 80088c0:	37e8      	adds	r7, #232	; 0xe8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop

080088c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b090      	sub	sp, #64	; 0x40
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892c:	e050      	b.n	80089d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800892e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d04c      	beq.n	80089d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <UART_WaitOnFlagUntilTimeout+0x30>
 800893c:	f7fb fb90 	bl	8004060 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008948:	429a      	cmp	r2, r3
 800894a:	d241      	bcs.n	80089d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	330c      	adds	r3, #12
 800896a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800896c:	637a      	str	r2, [r7, #52]	; 0x34
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e5      	bne.n	800894c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3314      	adds	r3, #20
 8008986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	613b      	str	r3, [r7, #16]
   return(result);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	63bb      	str	r3, [r7, #56]	; 0x38
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3314      	adds	r3, #20
 800899e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089a0:	623a      	str	r2, [r7, #32]
 80089a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	6a3a      	ldr	r2, [r7, #32]
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e5      	bne.n	8008980 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e00f      	b.n	80089f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	4013      	ands	r3, r2
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	429a      	cmp	r2, r3
 80089de:	bf0c      	ite	eq
 80089e0:	2301      	moveq	r3, #1
 80089e2:	2300      	movne	r3, #0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d09f      	beq.n	800892e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3740      	adds	r7, #64	; 0x40
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b095      	sub	sp, #84	; 0x54
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	330c      	adds	r3, #12
 8008a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0a:	e853 3f00 	ldrex	r3, [r3]
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a20:	643a      	str	r2, [r7, #64]	; 0x40
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e5      	bne.n	8008a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3314      	adds	r3, #20
 8008a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f023 0301 	bic.w	r3, r3, #1
 8008a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3314      	adds	r3, #20
 8008a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e5      	bne.n	8008a34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d119      	bne.n	8008aa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	330c      	adds	r3, #12
 8008a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f023 0310 	bic.w	r3, r3, #16
 8008a86:	647b      	str	r3, [r7, #68]	; 0x44
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a90:	61ba      	str	r2, [r7, #24]
 8008a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6979      	ldr	r1, [r7, #20]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e5      	bne.n	8008a70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ab2:	bf00      	nop
 8008ab4:	3754      	adds	r7, #84	; 0x54
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff ff09 	bl	80088f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b21      	cmp	r3, #33	; 0x21
 8008af8:	d13e      	bne.n	8008b78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b02:	d114      	bne.n	8008b2e <UART_Transmit_IT+0x48>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d110      	bne.n	8008b2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	1c9a      	adds	r2, r3, #2
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	621a      	str	r2, [r3, #32]
 8008b2c:	e008      	b.n	8008b40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	1c59      	adds	r1, r3, #1
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6211      	str	r1, [r2, #32]
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10f      	bne.n	8008b74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e000      	b.n	8008b7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
  }
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff fe8e 	bl	80088c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b08c      	sub	sp, #48	; 0x30
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b22      	cmp	r3, #34	; 0x22
 8008bc8:	f040 80ab 	bne.w	8008d22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd4:	d117      	bne.n	8008c06 <UART_Receive_IT+0x50>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d113      	bne.n	8008c06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	1c9a      	adds	r2, r3, #2
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28
 8008c04:	e026      	b.n	8008c54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c18:	d007      	beq.n	8008c2a <UART_Receive_IT+0x74>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <UART_Receive_IT+0x82>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e008      	b.n	8008c4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4619      	mov	r1, r3
 8008c62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d15a      	bne.n	8008d1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0220 	bic.w	r2, r2, #32
 8008c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695a      	ldr	r2, [r3, #20]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0201 	bic.w	r2, r2, #1
 8008c96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d135      	bne.n	8008d14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	330c      	adds	r3, #12
 8008cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f023 0310 	bic.w	r3, r3, #16
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	330c      	adds	r3, #12
 8008ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cce:	623a      	str	r2, [r7, #32]
 8008cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	69f9      	ldr	r1, [r7, #28]
 8008cd4:	6a3a      	ldr	r2, [r7, #32]
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b10      	cmp	r3, #16
 8008cee:	d10a      	bne.n	8008d06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fdf9 	bl	8008904 <HAL_UARTEx_RxEventCallback>
 8008d12:	e002      	b.n	8008d1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fde1 	bl	80088dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e002      	b.n	8008d24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e000      	b.n	8008d24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d22:	2302      	movs	r3, #2
  }
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3730      	adds	r7, #48	; 0x30
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d30:	b0c0      	sub	sp, #256	; 0x100
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d48:	68d9      	ldr	r1, [r3, #12]
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	ea40 0301 	orr.w	r3, r0, r1
 8008d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d84:	f021 010c 	bic.w	r1, r1, #12
 8008d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d92:	430b      	orrs	r3, r1
 8008d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da6:	6999      	ldr	r1, [r3, #24]
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	ea40 0301 	orr.w	r3, r0, r1
 8008db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	4b8f      	ldr	r3, [pc, #572]	; (8008ff8 <UART_SetConfig+0x2cc>)
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d005      	beq.n	8008dcc <UART_SetConfig+0xa0>
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b8d      	ldr	r3, [pc, #564]	; (8008ffc <UART_SetConfig+0x2d0>)
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d104      	bne.n	8008dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dcc:	f7fd fd8a 	bl	80068e4 <HAL_RCC_GetPCLK2Freq>
 8008dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008dd4:	e003      	b.n	8008dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dd6:	f7fd fd71 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8008dda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de8:	f040 810c 	bne.w	8009004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008df6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	1891      	adds	r1, r2, r2
 8008e04:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e06:	415b      	adcs	r3, r3
 8008e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e0e:	4621      	mov	r1, r4
 8008e10:	eb12 0801 	adds.w	r8, r2, r1
 8008e14:	4629      	mov	r1, r5
 8008e16:	eb43 0901 	adc.w	r9, r3, r1
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e2e:	4690      	mov	r8, r2
 8008e30:	4699      	mov	r9, r3
 8008e32:	4623      	mov	r3, r4
 8008e34:	eb18 0303 	adds.w	r3, r8, r3
 8008e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	eb49 0303 	adc.w	r3, r9, r3
 8008e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	18db      	adds	r3, r3, r3
 8008e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e60:	4613      	mov	r3, r2
 8008e62:	eb42 0303 	adc.w	r3, r2, r3
 8008e66:	657b      	str	r3, [r7, #84]	; 0x54
 8008e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e70:	f7f7 ff2a 	bl	8000cc8 <__aeabi_uldivmod>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4b61      	ldr	r3, [pc, #388]	; (8009000 <UART_SetConfig+0x2d4>)
 8008e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e7e:	095b      	lsrs	r3, r3, #5
 8008e80:	011c      	lsls	r4, r3, #4
 8008e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e94:	4642      	mov	r2, r8
 8008e96:	464b      	mov	r3, r9
 8008e98:	1891      	adds	r1, r2, r2
 8008e9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e9c:	415b      	adcs	r3, r3
 8008e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8008eaa:	4649      	mov	r1, r9
 8008eac:	eb43 0b01 	adc.w	fp, r3, r1
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ec4:	4692      	mov	sl, r2
 8008ec6:	469b      	mov	fp, r3
 8008ec8:	4643      	mov	r3, r8
 8008eca:	eb1a 0303 	adds.w	r3, sl, r3
 8008ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8008ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	18db      	adds	r3, r3, r3
 8008ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	eb42 0303 	adc.w	r3, r2, r3
 8008efc:	647b      	str	r3, [r7, #68]	; 0x44
 8008efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f06:	f7f7 fedf 	bl	8000cc8 <__aeabi_uldivmod>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4b3b      	ldr	r3, [pc, #236]	; (8009000 <UART_SetConfig+0x2d4>)
 8008f12:	fba3 2301 	umull	r2, r3, r3, r1
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	2264      	movs	r2, #100	; 0x64
 8008f1a:	fb02 f303 	mul.w	r3, r2, r3
 8008f1e:	1acb      	subs	r3, r1, r3
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f26:	4b36      	ldr	r3, [pc, #216]	; (8009000 <UART_SetConfig+0x2d4>)
 8008f28:	fba3 2302 	umull	r2, r3, r3, r2
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f34:	441c      	add	r4, r3
 8008f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	1891      	adds	r1, r2, r2
 8008f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f50:	415b      	adcs	r3, r3
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f58:	4641      	mov	r1, r8
 8008f5a:	1851      	adds	r1, r2, r1
 8008f5c:	6339      	str	r1, [r7, #48]	; 0x30
 8008f5e:	4649      	mov	r1, r9
 8008f60:	414b      	adcs	r3, r1
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f70:	4659      	mov	r1, fp
 8008f72:	00cb      	lsls	r3, r1, #3
 8008f74:	4651      	mov	r1, sl
 8008f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f7a:	4651      	mov	r1, sl
 8008f7c:	00ca      	lsls	r2, r1, #3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	4619      	mov	r1, r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	4642      	mov	r2, r8
 8008f86:	189b      	adds	r3, r3, r2
 8008f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	460a      	mov	r2, r1
 8008f90:	eb42 0303 	adc.w	r3, r2, r3
 8008f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fac:	460b      	mov	r3, r1
 8008fae:	18db      	adds	r3, r3, r3
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	eb42 0303 	adc.w	r3, r2, r3
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008fc2:	f7f7 fe81 	bl	8000cc8 <__aeabi_uldivmod>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <UART_SetConfig+0x2d4>)
 8008fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	2164      	movs	r1, #100	; 0x64
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	3332      	adds	r3, #50	; 0x32
 8008fde:	4a08      	ldr	r2, [pc, #32]	; (8009000 <UART_SetConfig+0x2d4>)
 8008fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe4:	095b      	lsrs	r3, r3, #5
 8008fe6:	f003 0207 	and.w	r2, r3, #7
 8008fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4422      	add	r2, r4
 8008ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ff4:	e105      	b.n	8009202 <UART_SetConfig+0x4d6>
 8008ff6:	bf00      	nop
 8008ff8:	40011000 	.word	0x40011000
 8008ffc:	40011400 	.word	0x40011400
 8009000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009008:	2200      	movs	r2, #0
 800900a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800900e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009016:	4642      	mov	r2, r8
 8009018:	464b      	mov	r3, r9
 800901a:	1891      	adds	r1, r2, r2
 800901c:	6239      	str	r1, [r7, #32]
 800901e:	415b      	adcs	r3, r3
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
 8009022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009026:	4641      	mov	r1, r8
 8009028:	1854      	adds	r4, r2, r1
 800902a:	4649      	mov	r1, r9
 800902c:	eb43 0501 	adc.w	r5, r3, r1
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	00eb      	lsls	r3, r5, #3
 800903a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800903e:	00e2      	lsls	r2, r4, #3
 8009040:	4614      	mov	r4, r2
 8009042:	461d      	mov	r5, r3
 8009044:	4643      	mov	r3, r8
 8009046:	18e3      	adds	r3, r4, r3
 8009048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800904c:	464b      	mov	r3, r9
 800904e:	eb45 0303 	adc.w	r3, r5, r3
 8009052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009072:	4629      	mov	r1, r5
 8009074:	008b      	lsls	r3, r1, #2
 8009076:	4621      	mov	r1, r4
 8009078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800907c:	4621      	mov	r1, r4
 800907e:	008a      	lsls	r2, r1, #2
 8009080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009084:	f7f7 fe20 	bl	8000cc8 <__aeabi_uldivmod>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4b60      	ldr	r3, [pc, #384]	; (8009210 <UART_SetConfig+0x4e4>)
 800908e:	fba3 2302 	umull	r2, r3, r3, r2
 8009092:	095b      	lsrs	r3, r3, #5
 8009094:	011c      	lsls	r4, r3, #4
 8009096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800909a:	2200      	movs	r2, #0
 800909c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090a8:	4642      	mov	r2, r8
 80090aa:	464b      	mov	r3, r9
 80090ac:	1891      	adds	r1, r2, r2
 80090ae:	61b9      	str	r1, [r7, #24]
 80090b0:	415b      	adcs	r3, r3
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090b8:	4641      	mov	r1, r8
 80090ba:	1851      	adds	r1, r2, r1
 80090bc:	6139      	str	r1, [r7, #16]
 80090be:	4649      	mov	r1, r9
 80090c0:	414b      	adcs	r3, r1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090d0:	4659      	mov	r1, fp
 80090d2:	00cb      	lsls	r3, r1, #3
 80090d4:	4651      	mov	r1, sl
 80090d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090da:	4651      	mov	r1, sl
 80090dc:	00ca      	lsls	r2, r1, #3
 80090de:	4610      	mov	r0, r2
 80090e0:	4619      	mov	r1, r3
 80090e2:	4603      	mov	r3, r0
 80090e4:	4642      	mov	r2, r8
 80090e6:	189b      	adds	r3, r3, r2
 80090e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090ec:	464b      	mov	r3, r9
 80090ee:	460a      	mov	r2, r1
 80090f0:	eb42 0303 	adc.w	r3, r2, r3
 80090f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	67bb      	str	r3, [r7, #120]	; 0x78
 8009102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009110:	4649      	mov	r1, r9
 8009112:	008b      	lsls	r3, r1, #2
 8009114:	4641      	mov	r1, r8
 8009116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800911a:	4641      	mov	r1, r8
 800911c:	008a      	lsls	r2, r1, #2
 800911e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009122:	f7f7 fdd1 	bl	8000cc8 <__aeabi_uldivmod>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4b39      	ldr	r3, [pc, #228]	; (8009210 <UART_SetConfig+0x4e4>)
 800912c:	fba3 1302 	umull	r1, r3, r3, r2
 8009130:	095b      	lsrs	r3, r3, #5
 8009132:	2164      	movs	r1, #100	; 0x64
 8009134:	fb01 f303 	mul.w	r3, r1, r3
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	3332      	adds	r3, #50	; 0x32
 800913e:	4a34      	ldr	r2, [pc, #208]	; (8009210 <UART_SetConfig+0x4e4>)
 8009140:	fba2 2303 	umull	r2, r3, r2, r3
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800914a:	441c      	add	r4, r3
 800914c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009150:	2200      	movs	r2, #0
 8009152:	673b      	str	r3, [r7, #112]	; 0x70
 8009154:	677a      	str	r2, [r7, #116]	; 0x74
 8009156:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800915a:	4642      	mov	r2, r8
 800915c:	464b      	mov	r3, r9
 800915e:	1891      	adds	r1, r2, r2
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	415b      	adcs	r3, r3
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800916a:	4641      	mov	r1, r8
 800916c:	1851      	adds	r1, r2, r1
 800916e:	6039      	str	r1, [r7, #0]
 8009170:	4649      	mov	r1, r9
 8009172:	414b      	adcs	r3, r1
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	f04f 0200 	mov.w	r2, #0
 800917a:	f04f 0300 	mov.w	r3, #0
 800917e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009182:	4659      	mov	r1, fp
 8009184:	00cb      	lsls	r3, r1, #3
 8009186:	4651      	mov	r1, sl
 8009188:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800918c:	4651      	mov	r1, sl
 800918e:	00ca      	lsls	r2, r1, #3
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	4603      	mov	r3, r0
 8009196:	4642      	mov	r2, r8
 8009198:	189b      	adds	r3, r3, r2
 800919a:	66bb      	str	r3, [r7, #104]	; 0x68
 800919c:	464b      	mov	r3, r9
 800919e:	460a      	mov	r2, r1
 80091a0:	eb42 0303 	adc.w	r3, r2, r3
 80091a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	663b      	str	r3, [r7, #96]	; 0x60
 80091b0:	667a      	str	r2, [r7, #100]	; 0x64
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	f04f 0300 	mov.w	r3, #0
 80091ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091be:	4649      	mov	r1, r9
 80091c0:	008b      	lsls	r3, r1, #2
 80091c2:	4641      	mov	r1, r8
 80091c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091c8:	4641      	mov	r1, r8
 80091ca:	008a      	lsls	r2, r1, #2
 80091cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091d0:	f7f7 fd7a 	bl	8000cc8 <__aeabi_uldivmod>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <UART_SetConfig+0x4e4>)
 80091da:	fba3 1302 	umull	r1, r3, r3, r2
 80091de:	095b      	lsrs	r3, r3, #5
 80091e0:	2164      	movs	r1, #100	; 0x64
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	3332      	adds	r3, #50	; 0x32
 80091ec:	4a08      	ldr	r2, [pc, #32]	; (8009210 <UART_SetConfig+0x4e4>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	f003 020f 	and.w	r2, r3, #15
 80091f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4422      	add	r2, r4
 8009200:	609a      	str	r2, [r3, #8]
}
 8009202:	bf00      	nop
 8009204:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009208:	46bd      	mov	sp, r7
 800920a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800920e:	bf00      	nop
 8009210:	51eb851f 	.word	0x51eb851f

08009214 <atoi>:
 8009214:	220a      	movs	r2, #10
 8009216:	2100      	movs	r1, #0
 8009218:	f000 b8d8 	b.w	80093cc <strtol>

0800921c <gcvt>:
 800921c:	b530      	push	{r4, r5, lr}
 800921e:	2200      	movs	r2, #0
 8009220:	b085      	sub	sp, #20
 8009222:	460c      	mov	r4, r1
 8009224:	4605      	mov	r5, r0
 8009226:	2300      	movs	r3, #0
 8009228:	ec51 0b10 	vmov	r0, r1, d0
 800922c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009230:	f7f7 fc74 	bl	8000b1c <__aeabi_dcmplt>
 8009234:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009238:	4622      	mov	r2, r4
 800923a:	b118      	cbz	r0, 8009244 <gcvt+0x28>
 800923c:	232d      	movs	r3, #45	; 0x2d
 800923e:	f802 3b01 	strb.w	r3, [r2], #1
 8009242:	3d01      	subs	r5, #1
 8009244:	2300      	movs	r3, #0
 8009246:	4806      	ldr	r0, [pc, #24]	; (8009260 <gcvt+0x44>)
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	4629      	mov	r1, r5
 800924c:	2367      	movs	r3, #103	; 0x67
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	f000 f93e 	bl	80094d0 <_gcvt>
 8009254:	2800      	cmp	r0, #0
 8009256:	bf14      	ite	ne
 8009258:	4620      	movne	r0, r4
 800925a:	2000      	moveq	r0, #0
 800925c:	b005      	add	sp, #20
 800925e:	bd30      	pop	{r4, r5, pc}
 8009260:	20000024 	.word	0x20000024

08009264 <__errno>:
 8009264:	4b01      	ldr	r3, [pc, #4]	; (800926c <__errno+0x8>)
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20000024 	.word	0x20000024

08009270 <__libc_init_array>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4d0d      	ldr	r5, [pc, #52]	; (80092a8 <__libc_init_array+0x38>)
 8009274:	4c0d      	ldr	r4, [pc, #52]	; (80092ac <__libc_init_array+0x3c>)
 8009276:	1b64      	subs	r4, r4, r5
 8009278:	10a4      	asrs	r4, r4, #2
 800927a:	2600      	movs	r6, #0
 800927c:	42a6      	cmp	r6, r4
 800927e:	d109      	bne.n	8009294 <__libc_init_array+0x24>
 8009280:	4d0b      	ldr	r5, [pc, #44]	; (80092b0 <__libc_init_array+0x40>)
 8009282:	4c0c      	ldr	r4, [pc, #48]	; (80092b4 <__libc_init_array+0x44>)
 8009284:	f003 fb42 	bl	800c90c <_init>
 8009288:	1b64      	subs	r4, r4, r5
 800928a:	10a4      	asrs	r4, r4, #2
 800928c:	2600      	movs	r6, #0
 800928e:	42a6      	cmp	r6, r4
 8009290:	d105      	bne.n	800929e <__libc_init_array+0x2e>
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	f855 3b04 	ldr.w	r3, [r5], #4
 8009298:	4798      	blx	r3
 800929a:	3601      	adds	r6, #1
 800929c:	e7ee      	b.n	800927c <__libc_init_array+0xc>
 800929e:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a2:	4798      	blx	r3
 80092a4:	3601      	adds	r6, #1
 80092a6:	e7f2      	b.n	800928e <__libc_init_array+0x1e>
 80092a8:	0800cd60 	.word	0x0800cd60
 80092ac:	0800cd60 	.word	0x0800cd60
 80092b0:	0800cd60 	.word	0x0800cd60
 80092b4:	0800cd64 	.word	0x0800cd64

080092b8 <memset>:
 80092b8:	4402      	add	r2, r0
 80092ba:	4603      	mov	r3, r0
 80092bc:	4293      	cmp	r3, r2
 80092be:	d100      	bne.n	80092c2 <memset+0xa>
 80092c0:	4770      	bx	lr
 80092c2:	f803 1b01 	strb.w	r1, [r3], #1
 80092c6:	e7f9      	b.n	80092bc <memset+0x4>

080092c8 <_strtol_l.constprop.0>:
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ce:	d001      	beq.n	80092d4 <_strtol_l.constprop.0+0xc>
 80092d0:	2b24      	cmp	r3, #36	; 0x24
 80092d2:	d906      	bls.n	80092e2 <_strtol_l.constprop.0+0x1a>
 80092d4:	f7ff ffc6 	bl	8009264 <__errno>
 80092d8:	2316      	movs	r3, #22
 80092da:	6003      	str	r3, [r0, #0]
 80092dc:	2000      	movs	r0, #0
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093c8 <_strtol_l.constprop.0+0x100>
 80092e6:	460d      	mov	r5, r1
 80092e8:	462e      	mov	r6, r5
 80092ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80092f2:	f017 0708 	ands.w	r7, r7, #8
 80092f6:	d1f7      	bne.n	80092e8 <_strtol_l.constprop.0+0x20>
 80092f8:	2c2d      	cmp	r4, #45	; 0x2d
 80092fa:	d132      	bne.n	8009362 <_strtol_l.constprop.0+0x9a>
 80092fc:	782c      	ldrb	r4, [r5, #0]
 80092fe:	2701      	movs	r7, #1
 8009300:	1cb5      	adds	r5, r6, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05b      	beq.n	80093be <_strtol_l.constprop.0+0xf6>
 8009306:	2b10      	cmp	r3, #16
 8009308:	d109      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 800930a:	2c30      	cmp	r4, #48	; 0x30
 800930c:	d107      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 800930e:	782c      	ldrb	r4, [r5, #0]
 8009310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009314:	2c58      	cmp	r4, #88	; 0x58
 8009316:	d14d      	bne.n	80093b4 <_strtol_l.constprop.0+0xec>
 8009318:	786c      	ldrb	r4, [r5, #1]
 800931a:	2310      	movs	r3, #16
 800931c:	3502      	adds	r5, #2
 800931e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009322:	f108 38ff 	add.w	r8, r8, #4294967295
 8009326:	f04f 0c00 	mov.w	ip, #0
 800932a:	fbb8 f9f3 	udiv	r9, r8, r3
 800932e:	4666      	mov	r6, ip
 8009330:	fb03 8a19 	mls	sl, r3, r9, r8
 8009334:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009338:	f1be 0f09 	cmp.w	lr, #9
 800933c:	d816      	bhi.n	800936c <_strtol_l.constprop.0+0xa4>
 800933e:	4674      	mov	r4, lr
 8009340:	42a3      	cmp	r3, r4
 8009342:	dd24      	ble.n	800938e <_strtol_l.constprop.0+0xc6>
 8009344:	f1bc 0f00 	cmp.w	ip, #0
 8009348:	db1e      	blt.n	8009388 <_strtol_l.constprop.0+0xc0>
 800934a:	45b1      	cmp	r9, r6
 800934c:	d31c      	bcc.n	8009388 <_strtol_l.constprop.0+0xc0>
 800934e:	d101      	bne.n	8009354 <_strtol_l.constprop.0+0x8c>
 8009350:	45a2      	cmp	sl, r4
 8009352:	db19      	blt.n	8009388 <_strtol_l.constprop.0+0xc0>
 8009354:	fb06 4603 	mla	r6, r6, r3, r4
 8009358:	f04f 0c01 	mov.w	ip, #1
 800935c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009360:	e7e8      	b.n	8009334 <_strtol_l.constprop.0+0x6c>
 8009362:	2c2b      	cmp	r4, #43	; 0x2b
 8009364:	bf04      	itt	eq
 8009366:	782c      	ldrbeq	r4, [r5, #0]
 8009368:	1cb5      	addeq	r5, r6, #2
 800936a:	e7ca      	b.n	8009302 <_strtol_l.constprop.0+0x3a>
 800936c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009370:	f1be 0f19 	cmp.w	lr, #25
 8009374:	d801      	bhi.n	800937a <_strtol_l.constprop.0+0xb2>
 8009376:	3c37      	subs	r4, #55	; 0x37
 8009378:	e7e2      	b.n	8009340 <_strtol_l.constprop.0+0x78>
 800937a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800937e:	f1be 0f19 	cmp.w	lr, #25
 8009382:	d804      	bhi.n	800938e <_strtol_l.constprop.0+0xc6>
 8009384:	3c57      	subs	r4, #87	; 0x57
 8009386:	e7db      	b.n	8009340 <_strtol_l.constprop.0+0x78>
 8009388:	f04f 3cff 	mov.w	ip, #4294967295
 800938c:	e7e6      	b.n	800935c <_strtol_l.constprop.0+0x94>
 800938e:	f1bc 0f00 	cmp.w	ip, #0
 8009392:	da05      	bge.n	80093a0 <_strtol_l.constprop.0+0xd8>
 8009394:	2322      	movs	r3, #34	; 0x22
 8009396:	6003      	str	r3, [r0, #0]
 8009398:	4646      	mov	r6, r8
 800939a:	b942      	cbnz	r2, 80093ae <_strtol_l.constprop.0+0xe6>
 800939c:	4630      	mov	r0, r6
 800939e:	e79e      	b.n	80092de <_strtol_l.constprop.0+0x16>
 80093a0:	b107      	cbz	r7, 80093a4 <_strtol_l.constprop.0+0xdc>
 80093a2:	4276      	negs	r6, r6
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	d0f9      	beq.n	800939c <_strtol_l.constprop.0+0xd4>
 80093a8:	f1bc 0f00 	cmp.w	ip, #0
 80093ac:	d000      	beq.n	80093b0 <_strtol_l.constprop.0+0xe8>
 80093ae:	1e69      	subs	r1, r5, #1
 80093b0:	6011      	str	r1, [r2, #0]
 80093b2:	e7f3      	b.n	800939c <_strtol_l.constprop.0+0xd4>
 80093b4:	2430      	movs	r4, #48	; 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1b1      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 80093ba:	2308      	movs	r3, #8
 80093bc:	e7af      	b.n	800931e <_strtol_l.constprop.0+0x56>
 80093be:	2c30      	cmp	r4, #48	; 0x30
 80093c0:	d0a5      	beq.n	800930e <_strtol_l.constprop.0+0x46>
 80093c2:	230a      	movs	r3, #10
 80093c4:	e7ab      	b.n	800931e <_strtol_l.constprop.0+0x56>
 80093c6:	bf00      	nop
 80093c8:	0800c965 	.word	0x0800c965

080093cc <strtol>:
 80093cc:	4613      	mov	r3, r2
 80093ce:	460a      	mov	r2, r1
 80093d0:	4601      	mov	r1, r0
 80093d2:	4802      	ldr	r0, [pc, #8]	; (80093dc <strtol+0x10>)
 80093d4:	6800      	ldr	r0, [r0, #0]
 80093d6:	f7ff bf77 	b.w	80092c8 <_strtol_l.constprop.0>
 80093da:	bf00      	nop
 80093dc:	20000024 	.word	0x20000024

080093e0 <print_e>:
 80093e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e2:	b087      	sub	sp, #28
 80093e4:	ec43 2b10 	vmov	d0, r2, r3
 80093e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80093ea:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80093ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80093f0:	ab04      	add	r3, sp, #16
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	ab03      	add	r3, sp, #12
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	1c62      	adds	r2, r4, #1
 80093fa:	ab05      	add	r3, sp, #20
 80093fc:	460f      	mov	r7, r1
 80093fe:	2102      	movs	r1, #2
 8009400:	f000 fe36 	bl	800a070 <_dtoa_r>
 8009404:	9a05      	ldr	r2, [sp, #20]
 8009406:	f242 730f 	movw	r3, #9999	; 0x270f
 800940a:	429a      	cmp	r2, r3
 800940c:	d105      	bne.n	800941a <print_e+0x3a>
 800940e:	4601      	mov	r1, r0
 8009410:	4638      	mov	r0, r7
 8009412:	f000 fd79 	bl	8009f08 <strcpy>
 8009416:	b007      	add	sp, #28
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941a:	463b      	mov	r3, r7
 800941c:	7801      	ldrb	r1, [r0, #0]
 800941e:	f803 1b01 	strb.w	r1, [r3], #1
 8009422:	2c00      	cmp	r4, #0
 8009424:	bfc8      	it	gt
 8009426:	2501      	movgt	r5, #1
 8009428:	212e      	movs	r1, #46	; 0x2e
 800942a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800942e:	b10f      	cbz	r7, 8009434 <print_e+0x54>
 8009430:	2c00      	cmp	r4, #0
 8009432:	dc37      	bgt.n	80094a4 <print_e+0xc4>
 8009434:	2e67      	cmp	r6, #103	; 0x67
 8009436:	d046      	beq.n	80094c6 <print_e+0xe6>
 8009438:	2e47      	cmp	r6, #71	; 0x47
 800943a:	d046      	beq.n	80094ca <print_e+0xea>
 800943c:	212e      	movs	r1, #46	; 0x2e
 800943e:	2030      	movs	r0, #48	; 0x30
 8009440:	2c00      	cmp	r4, #0
 8009442:	dc38      	bgt.n	80094b6 <print_e+0xd6>
 8009444:	1e51      	subs	r1, r2, #1
 8009446:	2900      	cmp	r1, #0
 8009448:	bfb8      	it	lt
 800944a:	f1c2 0201 	rsblt	r2, r2, #1
 800944e:	4618      	mov	r0, r3
 8009450:	9105      	str	r1, [sp, #20]
 8009452:	bfac      	ite	ge
 8009454:	222b      	movge	r2, #43	; 0x2b
 8009456:	9205      	strlt	r2, [sp, #20]
 8009458:	f800 6b02 	strb.w	r6, [r0], #2
 800945c:	bfa8      	it	ge
 800945e:	705a      	strbge	r2, [r3, #1]
 8009460:	9a05      	ldr	r2, [sp, #20]
 8009462:	bfbc      	itt	lt
 8009464:	212d      	movlt	r1, #45	; 0x2d
 8009466:	7059      	strblt	r1, [r3, #1]
 8009468:	2a63      	cmp	r2, #99	; 0x63
 800946a:	dd0b      	ble.n	8009484 <print_e+0xa4>
 800946c:	2164      	movs	r1, #100	; 0x64
 800946e:	fb92 f1f1 	sdiv	r1, r2, r1
 8009472:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8009476:	1cd8      	adds	r0, r3, #3
 8009478:	709c      	strb	r4, [r3, #2]
 800947a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800947e:	fb03 2201 	mla	r2, r3, r1, r2
 8009482:	9205      	str	r2, [sp, #20]
 8009484:	9b05      	ldr	r3, [sp, #20]
 8009486:	220a      	movs	r2, #10
 8009488:	fb93 f2f2 	sdiv	r2, r3, r2
 800948c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8009490:	7001      	strb	r1, [r0, #0]
 8009492:	f06f 0109 	mvn.w	r1, #9
 8009496:	fb01 3302 	mla	r3, r1, r2, r3
 800949a:	3330      	adds	r3, #48	; 0x30
 800949c:	7043      	strb	r3, [r0, #1]
 800949e:	2300      	movs	r3, #0
 80094a0:	7083      	strb	r3, [r0, #2]
 80094a2:	e7b8      	b.n	8009416 <print_e+0x36>
 80094a4:	b10d      	cbz	r5, 80094aa <print_e+0xca>
 80094a6:	f803 1b01 	strb.w	r1, [r3], #1
 80094aa:	7805      	ldrb	r5, [r0, #0]
 80094ac:	f803 5b01 	strb.w	r5, [r3], #1
 80094b0:	3c01      	subs	r4, #1
 80094b2:	2500      	movs	r5, #0
 80094b4:	e7b9      	b.n	800942a <print_e+0x4a>
 80094b6:	b10d      	cbz	r5, 80094bc <print_e+0xdc>
 80094b8:	f803 1b01 	strb.w	r1, [r3], #1
 80094bc:	f803 0b01 	strb.w	r0, [r3], #1
 80094c0:	3c01      	subs	r4, #1
 80094c2:	2500      	movs	r5, #0
 80094c4:	e7bc      	b.n	8009440 <print_e+0x60>
 80094c6:	2665      	movs	r6, #101	; 0x65
 80094c8:	e7bc      	b.n	8009444 <print_e+0x64>
 80094ca:	2645      	movs	r6, #69	; 0x45
 80094cc:	e7ba      	b.n	8009444 <print_e+0x64>
	...

080094d0 <_gcvt>:
 80094d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d4:	ec55 4b10 	vmov	r4, r5, d0
 80094d8:	b088      	sub	sp, #32
 80094da:	4681      	mov	r9, r0
 80094dc:	4688      	mov	r8, r1
 80094de:	4616      	mov	r6, r2
 80094e0:	469a      	mov	sl, r3
 80094e2:	ee10 0a10 	vmov	r0, s0
 80094e6:	2200      	movs	r2, #0
 80094e8:	2300      	movs	r3, #0
 80094ea:	4629      	mov	r1, r5
 80094ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80094ee:	f7f7 fb15 	bl	8000b1c <__aeabi_dcmplt>
 80094f2:	b110      	cbz	r0, 80094fa <_gcvt+0x2a>
 80094f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80094f8:	461d      	mov	r5, r3
 80094fa:	2200      	movs	r2, #0
 80094fc:	2300      	movs	r3, #0
 80094fe:	4620      	mov	r0, r4
 8009500:	4629      	mov	r1, r5
 8009502:	f7f7 fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8009506:	b138      	cbz	r0, 8009518 <_gcvt+0x48>
 8009508:	2330      	movs	r3, #48	; 0x30
 800950a:	7033      	strb	r3, [r6, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	7073      	strb	r3, [r6, #1]
 8009510:	4630      	mov	r0, r6
 8009512:	b008      	add	sp, #32
 8009514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009518:	a34b      	add	r3, pc, #300	; (adr r3, 8009648 <_gcvt+0x178>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 fb05 	bl	8000b30 <__aeabi_dcmple>
 8009526:	b158      	cbz	r0, 8009540 <_gcvt+0x70>
 8009528:	f108 31ff 	add.w	r1, r8, #4294967295
 800952c:	9100      	str	r1, [sp, #0]
 800952e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8009532:	4622      	mov	r2, r4
 8009534:	462b      	mov	r3, r5
 8009536:	4631      	mov	r1, r6
 8009538:	4648      	mov	r0, r9
 800953a:	f7ff ff51 	bl	80093e0 <print_e>
 800953e:	e7e7      	b.n	8009510 <_gcvt+0x40>
 8009540:	4640      	mov	r0, r8
 8009542:	f000 fc09 	bl	8009d58 <_mprec_log10>
 8009546:	4622      	mov	r2, r4
 8009548:	ec51 0b10 	vmov	r0, r1, d0
 800954c:	462b      	mov	r3, r5
 800954e:	f7f7 faef 	bl	8000b30 <__aeabi_dcmple>
 8009552:	2800      	cmp	r0, #0
 8009554:	d1e8      	bne.n	8009528 <_gcvt+0x58>
 8009556:	ab07      	add	r3, sp, #28
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	ab06      	add	r3, sp, #24
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4642      	mov	r2, r8
 8009560:	ab05      	add	r3, sp, #20
 8009562:	ec45 4b10 	vmov	d0, r4, r5
 8009566:	2102      	movs	r1, #2
 8009568:	4648      	mov	r0, r9
 800956a:	f000 fd81 	bl	800a070 <_dtoa_r>
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	f242 730f 	movw	r3, #9999	; 0x270f
 8009574:	429a      	cmp	r2, r3
 8009576:	d00e      	beq.n	8009596 <_gcvt+0xc6>
 8009578:	4633      	mov	r3, r6
 800957a:	44b0      	add	r8, r6
 800957c:	4605      	mov	r5, r0
 800957e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009582:	9c05      	ldr	r4, [sp, #20]
 8009584:	eba8 0203 	sub.w	r2, r8, r3
 8009588:	b109      	cbz	r1, 800958e <_gcvt+0xbe>
 800958a:	2c00      	cmp	r4, #0
 800958c:	dc08      	bgt.n	80095a0 <_gcvt+0xd0>
 800958e:	2100      	movs	r1, #0
 8009590:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009594:	e00d      	b.n	80095b2 <_gcvt+0xe2>
 8009596:	4601      	mov	r1, r0
 8009598:	4630      	mov	r0, r6
 800959a:	f000 fcb5 	bl	8009f08 <strcpy>
 800959e:	e7b7      	b.n	8009510 <_gcvt+0x40>
 80095a0:	3c01      	subs	r4, #1
 80095a2:	f803 1b01 	strb.w	r1, [r3], #1
 80095a6:	9405      	str	r4, [sp, #20]
 80095a8:	e7e8      	b.n	800957c <_gcvt+0xac>
 80095aa:	f803 cb01 	strb.w	ip, [r3], #1
 80095ae:	3a01      	subs	r2, #1
 80095b0:	2101      	movs	r1, #1
 80095b2:	2c00      	cmp	r4, #0
 80095b4:	4620      	mov	r0, r4
 80095b6:	dc2a      	bgt.n	800960e <_gcvt+0x13e>
 80095b8:	b101      	cbz	r1, 80095bc <_gcvt+0xec>
 80095ba:	9405      	str	r4, [sp, #20]
 80095bc:	b90f      	cbnz	r7, 80095c2 <_gcvt+0xf2>
 80095be:	7829      	ldrb	r1, [r5, #0]
 80095c0:	b311      	cbz	r1, 8009608 <_gcvt+0x138>
 80095c2:	42b3      	cmp	r3, r6
 80095c4:	bf04      	itt	eq
 80095c6:	2130      	moveq	r1, #48	; 0x30
 80095c8:	f803 1b01 	strbeq.w	r1, [r3], #1
 80095cc:	212e      	movs	r1, #46	; 0x2e
 80095ce:	7019      	strb	r1, [r3, #0]
 80095d0:	9905      	ldr	r1, [sp, #20]
 80095d2:	4618      	mov	r0, r3
 80095d4:	2400      	movs	r4, #0
 80095d6:	eba1 0c03 	sub.w	ip, r1, r3
 80095da:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80095de:	eb1c 0f00 	cmn.w	ip, r0
 80095e2:	d41c      	bmi.n	800961e <_gcvt+0x14e>
 80095e4:	2900      	cmp	r1, #0
 80095e6:	f1c1 0000 	rsb	r0, r1, #0
 80095ea:	bfc8      	it	gt
 80095ec:	2000      	movgt	r0, #0
 80095ee:	f100 0c01 	add.w	ip, r0, #1
 80095f2:	4463      	add	r3, ip
 80095f4:	4401      	add	r1, r0
 80095f6:	b104      	cbz	r4, 80095fa <_gcvt+0x12a>
 80095f8:	9105      	str	r1, [sp, #20]
 80095fa:	1e69      	subs	r1, r5, #1
 80095fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009600:	b108      	cbz	r0, 8009606 <_gcvt+0x136>
 8009602:	2a00      	cmp	r2, #0
 8009604:	dc0f      	bgt.n	8009626 <_gcvt+0x156>
 8009606:	b9df      	cbnz	r7, 8009640 <_gcvt+0x170>
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
 800960c:	e780      	b.n	8009510 <_gcvt+0x40>
 800960e:	2a00      	cmp	r2, #0
 8009610:	f104 34ff 	add.w	r4, r4, #4294967295
 8009614:	dcc9      	bgt.n	80095aa <_gcvt+0xda>
 8009616:	2900      	cmp	r1, #0
 8009618:	d0d0      	beq.n	80095bc <_gcvt+0xec>
 800961a:	9005      	str	r0, [sp, #20]
 800961c:	e7ce      	b.n	80095bc <_gcvt+0xec>
 800961e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8009622:	2401      	movs	r4, #1
 8009624:	e7db      	b.n	80095de <_gcvt+0x10e>
 8009626:	f803 0b01 	strb.w	r0, [r3], #1
 800962a:	3a01      	subs	r2, #1
 800962c:	e7e6      	b.n	80095fc <_gcvt+0x12c>
 800962e:	f801 5b01 	strb.w	r5, [r1], #1
 8009632:	1a60      	subs	r0, r4, r1
 8009634:	2800      	cmp	r0, #0
 8009636:	dcfa      	bgt.n	800962e <_gcvt+0x15e>
 8009638:	2a00      	cmp	r2, #0
 800963a:	bfa8      	it	ge
 800963c:	189b      	addge	r3, r3, r2
 800963e:	e7e3      	b.n	8009608 <_gcvt+0x138>
 8009640:	4619      	mov	r1, r3
 8009642:	189c      	adds	r4, r3, r2
 8009644:	2530      	movs	r5, #48	; 0x30
 8009646:	e7f4      	b.n	8009632 <_gcvt+0x162>
 8009648:	eb1c432d 	.word	0xeb1c432d
 800964c:	3f1a36e2 	.word	0x3f1a36e2

08009650 <_Balloc>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	b976      	cbnz	r6, 8009678 <_Balloc+0x28>
 800965a:	2010      	movs	r0, #16
 800965c:	f001 fb08 	bl	800ac70 <malloc>
 8009660:	4602      	mov	r2, r0
 8009662:	6260      	str	r0, [r4, #36]	; 0x24
 8009664:	b920      	cbnz	r0, 8009670 <_Balloc+0x20>
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <_Balloc+0x78>)
 8009668:	4818      	ldr	r0, [pc, #96]	; (80096cc <_Balloc+0x7c>)
 800966a:	2166      	movs	r1, #102	; 0x66
 800966c:	f000 fc54 	bl	8009f18 <__assert_func>
 8009670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009674:	6006      	str	r6, [r0, #0]
 8009676:	60c6      	str	r6, [r0, #12]
 8009678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800967a:	68f3      	ldr	r3, [r6, #12]
 800967c:	b183      	cbz	r3, 80096a0 <_Balloc+0x50>
 800967e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009686:	b9b8      	cbnz	r0, 80096b8 <_Balloc+0x68>
 8009688:	2101      	movs	r1, #1
 800968a:	fa01 f605 	lsl.w	r6, r1, r5
 800968e:	1d72      	adds	r2, r6, #5
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fb7e 	bl	8009d94 <_calloc_r>
 8009698:	b160      	cbz	r0, 80096b4 <_Balloc+0x64>
 800969a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800969e:	e00e      	b.n	80096be <_Balloc+0x6e>
 80096a0:	2221      	movs	r2, #33	; 0x21
 80096a2:	2104      	movs	r1, #4
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fb75 	bl	8009d94 <_calloc_r>
 80096aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ac:	60f0      	str	r0, [r6, #12]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e4      	bne.n	800967e <_Balloc+0x2e>
 80096b4:	2000      	movs	r0, #0
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	6802      	ldr	r2, [r0, #0]
 80096ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096be:	2300      	movs	r3, #0
 80096c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096c4:	e7f7      	b.n	80096b6 <_Balloc+0x66>
 80096c6:	bf00      	nop
 80096c8:	0800ca65 	.word	0x0800ca65
 80096cc:	0800ca7c 	.word	0x0800ca7c

080096d0 <_Bfree>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096d4:	4605      	mov	r5, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	b976      	cbnz	r6, 80096f8 <_Bfree+0x28>
 80096da:	2010      	movs	r0, #16
 80096dc:	f001 fac8 	bl	800ac70 <malloc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	6268      	str	r0, [r5, #36]	; 0x24
 80096e4:	b920      	cbnz	r0, 80096f0 <_Bfree+0x20>
 80096e6:	4b09      	ldr	r3, [pc, #36]	; (800970c <_Bfree+0x3c>)
 80096e8:	4809      	ldr	r0, [pc, #36]	; (8009710 <_Bfree+0x40>)
 80096ea:	218a      	movs	r1, #138	; 0x8a
 80096ec:	f000 fc14 	bl	8009f18 <__assert_func>
 80096f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f4:	6006      	str	r6, [r0, #0]
 80096f6:	60c6      	str	r6, [r0, #12]
 80096f8:	b13c      	cbz	r4, 800970a <_Bfree+0x3a>
 80096fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096fc:	6862      	ldr	r2, [r4, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009704:	6021      	str	r1, [r4, #0]
 8009706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	0800ca65 	.word	0x0800ca65
 8009710:	0800ca7c 	.word	0x0800ca7c

08009714 <__multadd>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	690d      	ldr	r5, [r1, #16]
 800971a:	4607      	mov	r7, r0
 800971c:	460c      	mov	r4, r1
 800971e:	461e      	mov	r6, r3
 8009720:	f101 0c14 	add.w	ip, r1, #20
 8009724:	2000      	movs	r0, #0
 8009726:	f8dc 3000 	ldr.w	r3, [ip]
 800972a:	b299      	uxth	r1, r3
 800972c:	fb02 6101 	mla	r1, r2, r1, r6
 8009730:	0c1e      	lsrs	r6, r3, #16
 8009732:	0c0b      	lsrs	r3, r1, #16
 8009734:	fb02 3306 	mla	r3, r2, r6, r3
 8009738:	b289      	uxth	r1, r1
 800973a:	3001      	adds	r0, #1
 800973c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009740:	4285      	cmp	r5, r0
 8009742:	f84c 1b04 	str.w	r1, [ip], #4
 8009746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800974a:	dcec      	bgt.n	8009726 <__multadd+0x12>
 800974c:	b30e      	cbz	r6, 8009792 <__multadd+0x7e>
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	42ab      	cmp	r3, r5
 8009752:	dc19      	bgt.n	8009788 <__multadd+0x74>
 8009754:	6861      	ldr	r1, [r4, #4]
 8009756:	4638      	mov	r0, r7
 8009758:	3101      	adds	r1, #1
 800975a:	f7ff ff79 	bl	8009650 <_Balloc>
 800975e:	4680      	mov	r8, r0
 8009760:	b928      	cbnz	r0, 800976e <__multadd+0x5a>
 8009762:	4602      	mov	r2, r0
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <__multadd+0x84>)
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <__multadd+0x88>)
 8009768:	21b5      	movs	r1, #181	; 0xb5
 800976a:	f000 fbd5 	bl	8009f18 <__assert_func>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	f104 010c 	add.w	r1, r4, #12
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	300c      	adds	r0, #12
 800977a:	f001 fa81 	bl	800ac80 <memcpy>
 800977e:	4621      	mov	r1, r4
 8009780:	4638      	mov	r0, r7
 8009782:	f7ff ffa5 	bl	80096d0 <_Bfree>
 8009786:	4644      	mov	r4, r8
 8009788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800978c:	3501      	adds	r5, #1
 800978e:	615e      	str	r6, [r3, #20]
 8009790:	6125      	str	r5, [r4, #16]
 8009792:	4620      	mov	r0, r4
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	0800cad8 	.word	0x0800cad8
 800979c:	0800ca7c 	.word	0x0800ca7c

080097a0 <__hi0bits>:
 80097a0:	0c03      	lsrs	r3, r0, #16
 80097a2:	041b      	lsls	r3, r3, #16
 80097a4:	b9d3      	cbnz	r3, 80097dc <__hi0bits+0x3c>
 80097a6:	0400      	lsls	r0, r0, #16
 80097a8:	2310      	movs	r3, #16
 80097aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097ae:	bf04      	itt	eq
 80097b0:	0200      	lsleq	r0, r0, #8
 80097b2:	3308      	addeq	r3, #8
 80097b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097b8:	bf04      	itt	eq
 80097ba:	0100      	lsleq	r0, r0, #4
 80097bc:	3304      	addeq	r3, #4
 80097be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097c2:	bf04      	itt	eq
 80097c4:	0080      	lsleq	r0, r0, #2
 80097c6:	3302      	addeq	r3, #2
 80097c8:	2800      	cmp	r0, #0
 80097ca:	db05      	blt.n	80097d8 <__hi0bits+0x38>
 80097cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097d0:	f103 0301 	add.w	r3, r3, #1
 80097d4:	bf08      	it	eq
 80097d6:	2320      	moveq	r3, #32
 80097d8:	4618      	mov	r0, r3
 80097da:	4770      	bx	lr
 80097dc:	2300      	movs	r3, #0
 80097de:	e7e4      	b.n	80097aa <__hi0bits+0xa>

080097e0 <__lo0bits>:
 80097e0:	6803      	ldr	r3, [r0, #0]
 80097e2:	f013 0207 	ands.w	r2, r3, #7
 80097e6:	4601      	mov	r1, r0
 80097e8:	d00b      	beq.n	8009802 <__lo0bits+0x22>
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	d423      	bmi.n	8009836 <__lo0bits+0x56>
 80097ee:	0798      	lsls	r0, r3, #30
 80097f0:	bf49      	itett	mi
 80097f2:	085b      	lsrmi	r3, r3, #1
 80097f4:	089b      	lsrpl	r3, r3, #2
 80097f6:	2001      	movmi	r0, #1
 80097f8:	600b      	strmi	r3, [r1, #0]
 80097fa:	bf5c      	itt	pl
 80097fc:	600b      	strpl	r3, [r1, #0]
 80097fe:	2002      	movpl	r0, #2
 8009800:	4770      	bx	lr
 8009802:	b298      	uxth	r0, r3
 8009804:	b9a8      	cbnz	r0, 8009832 <__lo0bits+0x52>
 8009806:	0c1b      	lsrs	r3, r3, #16
 8009808:	2010      	movs	r0, #16
 800980a:	b2da      	uxtb	r2, r3
 800980c:	b90a      	cbnz	r2, 8009812 <__lo0bits+0x32>
 800980e:	3008      	adds	r0, #8
 8009810:	0a1b      	lsrs	r3, r3, #8
 8009812:	071a      	lsls	r2, r3, #28
 8009814:	bf04      	itt	eq
 8009816:	091b      	lsreq	r3, r3, #4
 8009818:	3004      	addeq	r0, #4
 800981a:	079a      	lsls	r2, r3, #30
 800981c:	bf04      	itt	eq
 800981e:	089b      	lsreq	r3, r3, #2
 8009820:	3002      	addeq	r0, #2
 8009822:	07da      	lsls	r2, r3, #31
 8009824:	d403      	bmi.n	800982e <__lo0bits+0x4e>
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	f100 0001 	add.w	r0, r0, #1
 800982c:	d005      	beq.n	800983a <__lo0bits+0x5a>
 800982e:	600b      	str	r3, [r1, #0]
 8009830:	4770      	bx	lr
 8009832:	4610      	mov	r0, r2
 8009834:	e7e9      	b.n	800980a <__lo0bits+0x2a>
 8009836:	2000      	movs	r0, #0
 8009838:	4770      	bx	lr
 800983a:	2020      	movs	r0, #32
 800983c:	4770      	bx	lr
	...

08009840 <__i2b>:
 8009840:	b510      	push	{r4, lr}
 8009842:	460c      	mov	r4, r1
 8009844:	2101      	movs	r1, #1
 8009846:	f7ff ff03 	bl	8009650 <_Balloc>
 800984a:	4602      	mov	r2, r0
 800984c:	b928      	cbnz	r0, 800985a <__i2b+0x1a>
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <__i2b+0x24>)
 8009850:	4805      	ldr	r0, [pc, #20]	; (8009868 <__i2b+0x28>)
 8009852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009856:	f000 fb5f 	bl	8009f18 <__assert_func>
 800985a:	2301      	movs	r3, #1
 800985c:	6144      	str	r4, [r0, #20]
 800985e:	6103      	str	r3, [r0, #16]
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	0800cad8 	.word	0x0800cad8
 8009868:	0800ca7c 	.word	0x0800ca7c

0800986c <__multiply>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	4691      	mov	r9, r2
 8009872:	690a      	ldr	r2, [r1, #16]
 8009874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009878:	429a      	cmp	r2, r3
 800987a:	bfb8      	it	lt
 800987c:	460b      	movlt	r3, r1
 800987e:	460c      	mov	r4, r1
 8009880:	bfbc      	itt	lt
 8009882:	464c      	movlt	r4, r9
 8009884:	4699      	movlt	r9, r3
 8009886:	6927      	ldr	r7, [r4, #16]
 8009888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	6861      	ldr	r1, [r4, #4]
 8009890:	eb07 060a 	add.w	r6, r7, sl
 8009894:	42b3      	cmp	r3, r6
 8009896:	b085      	sub	sp, #20
 8009898:	bfb8      	it	lt
 800989a:	3101      	addlt	r1, #1
 800989c:	f7ff fed8 	bl	8009650 <_Balloc>
 80098a0:	b930      	cbnz	r0, 80098b0 <__multiply+0x44>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4b44      	ldr	r3, [pc, #272]	; (80099b8 <__multiply+0x14c>)
 80098a6:	4845      	ldr	r0, [pc, #276]	; (80099bc <__multiply+0x150>)
 80098a8:	f240 115d 	movw	r1, #349	; 0x15d
 80098ac:	f000 fb34 	bl	8009f18 <__assert_func>
 80098b0:	f100 0514 	add.w	r5, r0, #20
 80098b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098b8:	462b      	mov	r3, r5
 80098ba:	2200      	movs	r2, #0
 80098bc:	4543      	cmp	r3, r8
 80098be:	d321      	bcc.n	8009904 <__multiply+0x98>
 80098c0:	f104 0314 	add.w	r3, r4, #20
 80098c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098c8:	f109 0314 	add.w	r3, r9, #20
 80098cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098d0:	9202      	str	r2, [sp, #8]
 80098d2:	1b3a      	subs	r2, r7, r4
 80098d4:	3a15      	subs	r2, #21
 80098d6:	f022 0203 	bic.w	r2, r2, #3
 80098da:	3204      	adds	r2, #4
 80098dc:	f104 0115 	add.w	r1, r4, #21
 80098e0:	428f      	cmp	r7, r1
 80098e2:	bf38      	it	cc
 80098e4:	2204      	movcc	r2, #4
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9a02      	ldr	r2, [sp, #8]
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d80c      	bhi.n	800990a <__multiply+0x9e>
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	dd03      	ble.n	80098fc <__multiply+0x90>
 80098f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d05a      	beq.n	80099b2 <__multiply+0x146>
 80098fc:	6106      	str	r6, [r0, #16]
 80098fe:	b005      	add	sp, #20
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	f843 2b04 	str.w	r2, [r3], #4
 8009908:	e7d8      	b.n	80098bc <__multiply+0x50>
 800990a:	f8b3 a000 	ldrh.w	sl, [r3]
 800990e:	f1ba 0f00 	cmp.w	sl, #0
 8009912:	d024      	beq.n	800995e <__multiply+0xf2>
 8009914:	f104 0e14 	add.w	lr, r4, #20
 8009918:	46a9      	mov	r9, r5
 800991a:	f04f 0c00 	mov.w	ip, #0
 800991e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009922:	f8d9 1000 	ldr.w	r1, [r9]
 8009926:	fa1f fb82 	uxth.w	fp, r2
 800992a:	b289      	uxth	r1, r1
 800992c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009934:	f8d9 2000 	ldr.w	r2, [r9]
 8009938:	4461      	add	r1, ip
 800993a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800993e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009946:	b289      	uxth	r1, r1
 8009948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800994c:	4577      	cmp	r7, lr
 800994e:	f849 1b04 	str.w	r1, [r9], #4
 8009952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009956:	d8e2      	bhi.n	800991e <__multiply+0xb2>
 8009958:	9a01      	ldr	r2, [sp, #4]
 800995a:	f845 c002 	str.w	ip, [r5, r2]
 800995e:	9a03      	ldr	r2, [sp, #12]
 8009960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009964:	3304      	adds	r3, #4
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	d020      	beq.n	80099ae <__multiply+0x142>
 800996c:	6829      	ldr	r1, [r5, #0]
 800996e:	f104 0c14 	add.w	ip, r4, #20
 8009972:	46ae      	mov	lr, r5
 8009974:	f04f 0a00 	mov.w	sl, #0
 8009978:	f8bc b000 	ldrh.w	fp, [ip]
 800997c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009980:	fb09 220b 	mla	r2, r9, fp, r2
 8009984:	4492      	add	sl, r2
 8009986:	b289      	uxth	r1, r1
 8009988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800998c:	f84e 1b04 	str.w	r1, [lr], #4
 8009990:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009994:	f8be 1000 	ldrh.w	r1, [lr]
 8009998:	0c12      	lsrs	r2, r2, #16
 800999a:	fb09 1102 	mla	r1, r9, r2, r1
 800999e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099a2:	4567      	cmp	r7, ip
 80099a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099a8:	d8e6      	bhi.n	8009978 <__multiply+0x10c>
 80099aa:	9a01      	ldr	r2, [sp, #4]
 80099ac:	50a9      	str	r1, [r5, r2]
 80099ae:	3504      	adds	r5, #4
 80099b0:	e79a      	b.n	80098e8 <__multiply+0x7c>
 80099b2:	3e01      	subs	r6, #1
 80099b4:	e79c      	b.n	80098f0 <__multiply+0x84>
 80099b6:	bf00      	nop
 80099b8:	0800cad8 	.word	0x0800cad8
 80099bc:	0800ca7c 	.word	0x0800ca7c

080099c0 <__pow5mult>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4615      	mov	r5, r2
 80099c6:	f012 0203 	ands.w	r2, r2, #3
 80099ca:	4606      	mov	r6, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	d007      	beq.n	80099e0 <__pow5mult+0x20>
 80099d0:	4c25      	ldr	r4, [pc, #148]	; (8009a68 <__pow5mult+0xa8>)
 80099d2:	3a01      	subs	r2, #1
 80099d4:	2300      	movs	r3, #0
 80099d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099da:	f7ff fe9b 	bl	8009714 <__multadd>
 80099de:	4607      	mov	r7, r0
 80099e0:	10ad      	asrs	r5, r5, #2
 80099e2:	d03d      	beq.n	8009a60 <__pow5mult+0xa0>
 80099e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099e6:	b97c      	cbnz	r4, 8009a08 <__pow5mult+0x48>
 80099e8:	2010      	movs	r0, #16
 80099ea:	f001 f941 	bl	800ac70 <malloc>
 80099ee:	4602      	mov	r2, r0
 80099f0:	6270      	str	r0, [r6, #36]	; 0x24
 80099f2:	b928      	cbnz	r0, 8009a00 <__pow5mult+0x40>
 80099f4:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <__pow5mult+0xac>)
 80099f6:	481e      	ldr	r0, [pc, #120]	; (8009a70 <__pow5mult+0xb0>)
 80099f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099fc:	f000 fa8c 	bl	8009f18 <__assert_func>
 8009a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a04:	6004      	str	r4, [r0, #0]
 8009a06:	60c4      	str	r4, [r0, #12]
 8009a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a10:	b94c      	cbnz	r4, 8009a26 <__pow5mult+0x66>
 8009a12:	f240 2171 	movw	r1, #625	; 0x271
 8009a16:	4630      	mov	r0, r6
 8009a18:	f7ff ff12 	bl	8009840 <__i2b>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a22:	4604      	mov	r4, r0
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	f04f 0900 	mov.w	r9, #0
 8009a2a:	07eb      	lsls	r3, r5, #31
 8009a2c:	d50a      	bpl.n	8009a44 <__pow5mult+0x84>
 8009a2e:	4639      	mov	r1, r7
 8009a30:	4622      	mov	r2, r4
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7ff ff1a 	bl	800986c <__multiply>
 8009a38:	4639      	mov	r1, r7
 8009a3a:	4680      	mov	r8, r0
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f7ff fe47 	bl	80096d0 <_Bfree>
 8009a42:	4647      	mov	r7, r8
 8009a44:	106d      	asrs	r5, r5, #1
 8009a46:	d00b      	beq.n	8009a60 <__pow5mult+0xa0>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	b938      	cbnz	r0, 8009a5c <__pow5mult+0x9c>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ff0b 	bl	800986c <__multiply>
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	f8c0 9000 	str.w	r9, [r0]
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e7e4      	b.n	8009a2a <__pow5mult+0x6a>
 8009a60:	4638      	mov	r0, r7
 8009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a66:	bf00      	nop
 8009a68:	0800cbe0 	.word	0x0800cbe0
 8009a6c:	0800ca65 	.word	0x0800ca65
 8009a70:	0800ca7c 	.word	0x0800ca7c

08009a74 <__lshift>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	460c      	mov	r4, r1
 8009a7a:	6849      	ldr	r1, [r1, #4]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	4607      	mov	r7, r0
 8009a86:	4691      	mov	r9, r2
 8009a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a8c:	f108 0601 	add.w	r6, r8, #1
 8009a90:	42b3      	cmp	r3, r6
 8009a92:	db0b      	blt.n	8009aac <__lshift+0x38>
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff fddb 	bl	8009650 <_Balloc>
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	b948      	cbnz	r0, 8009ab2 <__lshift+0x3e>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b2a      	ldr	r3, [pc, #168]	; (8009b4c <__lshift+0xd8>)
 8009aa2:	482b      	ldr	r0, [pc, #172]	; (8009b50 <__lshift+0xdc>)
 8009aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009aa8:	f000 fa36 	bl	8009f18 <__assert_func>
 8009aac:	3101      	adds	r1, #1
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	e7ee      	b.n	8009a90 <__lshift+0x1c>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f100 0114 	add.w	r1, r0, #20
 8009ab8:	f100 0210 	add.w	r2, r0, #16
 8009abc:	4618      	mov	r0, r3
 8009abe:	4553      	cmp	r3, sl
 8009ac0:	db37      	blt.n	8009b32 <__lshift+0xbe>
 8009ac2:	6920      	ldr	r0, [r4, #16]
 8009ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac8:	f104 0314 	add.w	r3, r4, #20
 8009acc:	f019 091f 	ands.w	r9, r9, #31
 8009ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ad8:	d02f      	beq.n	8009b3a <__lshift+0xc6>
 8009ada:	f1c9 0e20 	rsb	lr, r9, #32
 8009ade:	468a      	mov	sl, r1
 8009ae0:	f04f 0c00 	mov.w	ip, #0
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	fa02 f209 	lsl.w	r2, r2, r9
 8009aea:	ea42 020c 	orr.w	r2, r2, ip
 8009aee:	f84a 2b04 	str.w	r2, [sl], #4
 8009af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af6:	4298      	cmp	r0, r3
 8009af8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009afc:	d8f2      	bhi.n	8009ae4 <__lshift+0x70>
 8009afe:	1b03      	subs	r3, r0, r4
 8009b00:	3b15      	subs	r3, #21
 8009b02:	f023 0303 	bic.w	r3, r3, #3
 8009b06:	3304      	adds	r3, #4
 8009b08:	f104 0215 	add.w	r2, r4, #21
 8009b0c:	4290      	cmp	r0, r2
 8009b0e:	bf38      	it	cc
 8009b10:	2304      	movcc	r3, #4
 8009b12:	f841 c003 	str.w	ip, [r1, r3]
 8009b16:	f1bc 0f00 	cmp.w	ip, #0
 8009b1a:	d001      	beq.n	8009b20 <__lshift+0xac>
 8009b1c:	f108 0602 	add.w	r6, r8, #2
 8009b20:	3e01      	subs	r6, #1
 8009b22:	4638      	mov	r0, r7
 8009b24:	612e      	str	r6, [r5, #16]
 8009b26:	4621      	mov	r1, r4
 8009b28:	f7ff fdd2 	bl	80096d0 <_Bfree>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b36:	3301      	adds	r3, #1
 8009b38:	e7c1      	b.n	8009abe <__lshift+0x4a>
 8009b3a:	3904      	subs	r1, #4
 8009b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b44:	4298      	cmp	r0, r3
 8009b46:	d8f9      	bhi.n	8009b3c <__lshift+0xc8>
 8009b48:	e7ea      	b.n	8009b20 <__lshift+0xac>
 8009b4a:	bf00      	nop
 8009b4c:	0800cad8 	.word	0x0800cad8
 8009b50:	0800ca7c 	.word	0x0800ca7c

08009b54 <__mcmp>:
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	6902      	ldr	r2, [r0, #16]
 8009b58:	690c      	ldr	r4, [r1, #16]
 8009b5a:	1b12      	subs	r2, r2, r4
 8009b5c:	d10e      	bne.n	8009b7c <__mcmp+0x28>
 8009b5e:	f100 0314 	add.w	r3, r0, #20
 8009b62:	3114      	adds	r1, #20
 8009b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d003      	beq.n	8009b80 <__mcmp+0x2c>
 8009b78:	d305      	bcc.n	8009b86 <__mcmp+0x32>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	bd30      	pop	{r4, r5, pc}
 8009b80:	4283      	cmp	r3, r0
 8009b82:	d3f3      	bcc.n	8009b6c <__mcmp+0x18>
 8009b84:	e7fa      	b.n	8009b7c <__mcmp+0x28>
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	e7f7      	b.n	8009b7c <__mcmp+0x28>

08009b8c <__mdiff>:
 8009b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	460c      	mov	r4, r1
 8009b92:	4606      	mov	r6, r0
 8009b94:	4611      	mov	r1, r2
 8009b96:	4620      	mov	r0, r4
 8009b98:	4690      	mov	r8, r2
 8009b9a:	f7ff ffdb 	bl	8009b54 <__mcmp>
 8009b9e:	1e05      	subs	r5, r0, #0
 8009ba0:	d110      	bne.n	8009bc4 <__mdiff+0x38>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff fd53 	bl	8009650 <_Balloc>
 8009baa:	b930      	cbnz	r0, 8009bba <__mdiff+0x2e>
 8009bac:	4b3a      	ldr	r3, [pc, #232]	; (8009c98 <__mdiff+0x10c>)
 8009bae:	4602      	mov	r2, r0
 8009bb0:	f240 2132 	movw	r1, #562	; 0x232
 8009bb4:	4839      	ldr	r0, [pc, #228]	; (8009c9c <__mdiff+0x110>)
 8009bb6:	f000 f9af 	bl	8009f18 <__assert_func>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	bfa4      	itt	ge
 8009bc6:	4643      	movge	r3, r8
 8009bc8:	46a0      	movge	r8, r4
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bd0:	bfa6      	itte	ge
 8009bd2:	461c      	movge	r4, r3
 8009bd4:	2500      	movge	r5, #0
 8009bd6:	2501      	movlt	r5, #1
 8009bd8:	f7ff fd3a 	bl	8009650 <_Balloc>
 8009bdc:	b920      	cbnz	r0, 8009be8 <__mdiff+0x5c>
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <__mdiff+0x10c>)
 8009be0:	4602      	mov	r2, r0
 8009be2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009be6:	e7e5      	b.n	8009bb4 <__mdiff+0x28>
 8009be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bec:	6926      	ldr	r6, [r4, #16]
 8009bee:	60c5      	str	r5, [r0, #12]
 8009bf0:	f104 0914 	add.w	r9, r4, #20
 8009bf4:	f108 0514 	add.w	r5, r8, #20
 8009bf8:	f100 0e14 	add.w	lr, r0, #20
 8009bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c04:	f108 0210 	add.w	r2, r8, #16
 8009c08:	46f2      	mov	sl, lr
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c14:	fa1f f883 	uxth.w	r8, r3
 8009c18:	fa11 f18b 	uxtah	r1, r1, fp
 8009c1c:	0c1b      	lsrs	r3, r3, #16
 8009c1e:	eba1 0808 	sub.w	r8, r1, r8
 8009c22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c2a:	fa1f f888 	uxth.w	r8, r8
 8009c2e:	1419      	asrs	r1, r3, #16
 8009c30:	454e      	cmp	r6, r9
 8009c32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c36:	f84a 3b04 	str.w	r3, [sl], #4
 8009c3a:	d8e7      	bhi.n	8009c0c <__mdiff+0x80>
 8009c3c:	1b33      	subs	r3, r6, r4
 8009c3e:	3b15      	subs	r3, #21
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	3304      	adds	r3, #4
 8009c46:	3415      	adds	r4, #21
 8009c48:	42a6      	cmp	r6, r4
 8009c4a:	bf38      	it	cc
 8009c4c:	2304      	movcc	r3, #4
 8009c4e:	441d      	add	r5, r3
 8009c50:	4473      	add	r3, lr
 8009c52:	469e      	mov	lr, r3
 8009c54:	462e      	mov	r6, r5
 8009c56:	4566      	cmp	r6, ip
 8009c58:	d30e      	bcc.n	8009c78 <__mdiff+0xec>
 8009c5a:	f10c 0203 	add.w	r2, ip, #3
 8009c5e:	1b52      	subs	r2, r2, r5
 8009c60:	f022 0203 	bic.w	r2, r2, #3
 8009c64:	3d03      	subs	r5, #3
 8009c66:	45ac      	cmp	ip, r5
 8009c68:	bf38      	it	cc
 8009c6a:	2200      	movcc	r2, #0
 8009c6c:	441a      	add	r2, r3
 8009c6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c72:	b17b      	cbz	r3, 8009c94 <__mdiff+0x108>
 8009c74:	6107      	str	r7, [r0, #16]
 8009c76:	e7a3      	b.n	8009bc0 <__mdiff+0x34>
 8009c78:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c7c:	fa11 f288 	uxtah	r2, r1, r8
 8009c80:	1414      	asrs	r4, r2, #16
 8009c82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c86:	b292      	uxth	r2, r2
 8009c88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c8c:	f84e 2b04 	str.w	r2, [lr], #4
 8009c90:	1421      	asrs	r1, r4, #16
 8009c92:	e7e0      	b.n	8009c56 <__mdiff+0xca>
 8009c94:	3f01      	subs	r7, #1
 8009c96:	e7ea      	b.n	8009c6e <__mdiff+0xe2>
 8009c98:	0800cad8 	.word	0x0800cad8
 8009c9c:	0800ca7c 	.word	0x0800ca7c

08009ca0 <__d2b>:
 8009ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	ec57 6b10 	vmov	r6, r7, d0
 8009cac:	4690      	mov	r8, r2
 8009cae:	f7ff fccf 	bl	8009650 <_Balloc>
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	b930      	cbnz	r0, 8009cc4 <__d2b+0x24>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	4b25      	ldr	r3, [pc, #148]	; (8009d50 <__d2b+0xb0>)
 8009cba:	4826      	ldr	r0, [pc, #152]	; (8009d54 <__d2b+0xb4>)
 8009cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8009cc0:	f000 f92a 	bl	8009f18 <__assert_func>
 8009cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ccc:	bb35      	cbnz	r5, 8009d1c <__d2b+0x7c>
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	d028      	beq.n	8009d26 <__d2b+0x86>
 8009cd4:	4668      	mov	r0, sp
 8009cd6:	9600      	str	r6, [sp, #0]
 8009cd8:	f7ff fd82 	bl	80097e0 <__lo0bits>
 8009cdc:	9900      	ldr	r1, [sp, #0]
 8009cde:	b300      	cbz	r0, 8009d22 <__d2b+0x82>
 8009ce0:	9a01      	ldr	r2, [sp, #4]
 8009ce2:	f1c0 0320 	rsb	r3, r0, #32
 8009ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cea:	430b      	orrs	r3, r1
 8009cec:	40c2      	lsrs	r2, r0
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	9201      	str	r2, [sp, #4]
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	61a3      	str	r3, [r4, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bf14      	ite	ne
 8009cfa:	2202      	movne	r2, #2
 8009cfc:	2201      	moveq	r2, #1
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	b1d5      	cbz	r5, 8009d38 <__d2b+0x98>
 8009d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d06:	4405      	add	r5, r0
 8009d08:	f8c9 5000 	str.w	r5, [r9]
 8009d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d10:	f8c8 0000 	str.w	r0, [r8]
 8009d14:	4620      	mov	r0, r4
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d20:	e7d5      	b.n	8009cce <__d2b+0x2e>
 8009d22:	6161      	str	r1, [r4, #20]
 8009d24:	e7e5      	b.n	8009cf2 <__d2b+0x52>
 8009d26:	a801      	add	r0, sp, #4
 8009d28:	f7ff fd5a 	bl	80097e0 <__lo0bits>
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	6163      	str	r3, [r4, #20]
 8009d30:	2201      	movs	r2, #1
 8009d32:	6122      	str	r2, [r4, #16]
 8009d34:	3020      	adds	r0, #32
 8009d36:	e7e3      	b.n	8009d00 <__d2b+0x60>
 8009d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d40:	f8c9 0000 	str.w	r0, [r9]
 8009d44:	6918      	ldr	r0, [r3, #16]
 8009d46:	f7ff fd2b 	bl	80097a0 <__hi0bits>
 8009d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d4e:	e7df      	b.n	8009d10 <__d2b+0x70>
 8009d50:	0800cad8 	.word	0x0800cad8
 8009d54:	0800ca7c 	.word	0x0800ca7c

08009d58 <_mprec_log10>:
 8009d58:	2817      	cmp	r0, #23
 8009d5a:	b5d0      	push	{r4, r6, r7, lr}
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	dc07      	bgt.n	8009d70 <_mprec_log10+0x18>
 8009d60:	4809      	ldr	r0, [pc, #36]	; (8009d88 <_mprec_log10+0x30>)
 8009d62:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8009d66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009d6a:	ec41 0b10 	vmov	d0, r0, r1
 8009d6e:	bdd0      	pop	{r4, r6, r7, pc}
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <_mprec_log10+0x34>)
 8009d72:	4f07      	ldr	r7, [pc, #28]	; (8009d90 <_mprec_log10+0x38>)
 8009d74:	2000      	movs	r0, #0
 8009d76:	2600      	movs	r6, #0
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	f7f6 fc5c 	bl	8000638 <__aeabi_dmul>
 8009d80:	3c01      	subs	r4, #1
 8009d82:	d1f9      	bne.n	8009d78 <_mprec_log10+0x20>
 8009d84:	e7f1      	b.n	8009d6a <_mprec_log10+0x12>
 8009d86:	bf00      	nop
 8009d88:	0800cb18 	.word	0x0800cb18
 8009d8c:	3ff00000 	.word	0x3ff00000
 8009d90:	40240000 	.word	0x40240000

08009d94 <_calloc_r>:
 8009d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d96:	fba1 2402 	umull	r2, r4, r1, r2
 8009d9a:	b94c      	cbnz	r4, 8009db0 <_calloc_r+0x1c>
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	9201      	str	r2, [sp, #4]
 8009da0:	f000 f82e 	bl	8009e00 <_malloc_r>
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	4605      	mov	r5, r0
 8009da8:	b930      	cbnz	r0, 8009db8 <_calloc_r+0x24>
 8009daa:	4628      	mov	r0, r5
 8009dac:	b003      	add	sp, #12
 8009dae:	bd30      	pop	{r4, r5, pc}
 8009db0:	220c      	movs	r2, #12
 8009db2:	6002      	str	r2, [r0, #0]
 8009db4:	2500      	movs	r5, #0
 8009db6:	e7f8      	b.n	8009daa <_calloc_r+0x16>
 8009db8:	4621      	mov	r1, r4
 8009dba:	f7ff fa7d 	bl	80092b8 <memset>
 8009dbe:	e7f4      	b.n	8009daa <_calloc_r+0x16>

08009dc0 <sbrk_aligned>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4e0e      	ldr	r6, [pc, #56]	; (8009dfc <sbrk_aligned+0x3c>)
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	6831      	ldr	r1, [r6, #0]
 8009dc8:	4605      	mov	r5, r0
 8009dca:	b911      	cbnz	r1, 8009dd2 <sbrk_aligned+0x12>
 8009dcc:	f000 f88c 	bl	8009ee8 <_sbrk_r>
 8009dd0:	6030      	str	r0, [r6, #0]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 f887 	bl	8009ee8 <_sbrk_r>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d00a      	beq.n	8009df4 <sbrk_aligned+0x34>
 8009dde:	1cc4      	adds	r4, r0, #3
 8009de0:	f024 0403 	bic.w	r4, r4, #3
 8009de4:	42a0      	cmp	r0, r4
 8009de6:	d007      	beq.n	8009df8 <sbrk_aligned+0x38>
 8009de8:	1a21      	subs	r1, r4, r0
 8009dea:	4628      	mov	r0, r5
 8009dec:	f000 f87c 	bl	8009ee8 <_sbrk_r>
 8009df0:	3001      	adds	r0, #1
 8009df2:	d101      	bne.n	8009df8 <sbrk_aligned+0x38>
 8009df4:	f04f 34ff 	mov.w	r4, #4294967295
 8009df8:	4620      	mov	r0, r4
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	20000a00 	.word	0x20000a00

08009e00 <_malloc_r>:
 8009e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e04:	1ccd      	adds	r5, r1, #3
 8009e06:	f025 0503 	bic.w	r5, r5, #3
 8009e0a:	3508      	adds	r5, #8
 8009e0c:	2d0c      	cmp	r5, #12
 8009e0e:	bf38      	it	cc
 8009e10:	250c      	movcc	r5, #12
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	4607      	mov	r7, r0
 8009e16:	db01      	blt.n	8009e1c <_malloc_r+0x1c>
 8009e18:	42a9      	cmp	r1, r5
 8009e1a:	d905      	bls.n	8009e28 <_malloc_r+0x28>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	2600      	movs	r6, #0
 8009e22:	4630      	mov	r0, r6
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	4e2e      	ldr	r6, [pc, #184]	; (8009ee4 <_malloc_r+0xe4>)
 8009e2a:	f000 ff37 	bl	800ac9c <__malloc_lock>
 8009e2e:	6833      	ldr	r3, [r6, #0]
 8009e30:	461c      	mov	r4, r3
 8009e32:	bb34      	cbnz	r4, 8009e82 <_malloc_r+0x82>
 8009e34:	4629      	mov	r1, r5
 8009e36:	4638      	mov	r0, r7
 8009e38:	f7ff ffc2 	bl	8009dc0 <sbrk_aligned>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	4604      	mov	r4, r0
 8009e40:	d14d      	bne.n	8009ede <_malloc_r+0xde>
 8009e42:	6834      	ldr	r4, [r6, #0]
 8009e44:	4626      	mov	r6, r4
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d140      	bne.n	8009ecc <_malloc_r+0xcc>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4638      	mov	r0, r7
 8009e50:	eb04 0803 	add.w	r8, r4, r3
 8009e54:	f000 f848 	bl	8009ee8 <_sbrk_r>
 8009e58:	4580      	cmp	r8, r0
 8009e5a:	d13a      	bne.n	8009ed2 <_malloc_r+0xd2>
 8009e5c:	6821      	ldr	r1, [r4, #0]
 8009e5e:	3503      	adds	r5, #3
 8009e60:	1a6d      	subs	r5, r5, r1
 8009e62:	f025 0503 	bic.w	r5, r5, #3
 8009e66:	3508      	adds	r5, #8
 8009e68:	2d0c      	cmp	r5, #12
 8009e6a:	bf38      	it	cc
 8009e6c:	250c      	movcc	r5, #12
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ffa5 	bl	8009dc0 <sbrk_aligned>
 8009e76:	3001      	adds	r0, #1
 8009e78:	d02b      	beq.n	8009ed2 <_malloc_r+0xd2>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	442b      	add	r3, r5
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	e00e      	b.n	8009ea0 <_malloc_r+0xa0>
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	1b52      	subs	r2, r2, r5
 8009e86:	d41e      	bmi.n	8009ec6 <_malloc_r+0xc6>
 8009e88:	2a0b      	cmp	r2, #11
 8009e8a:	d916      	bls.n	8009eba <_malloc_r+0xba>
 8009e8c:	1961      	adds	r1, r4, r5
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	6025      	str	r5, [r4, #0]
 8009e92:	bf18      	it	ne
 8009e94:	6059      	strne	r1, [r3, #4]
 8009e96:	6863      	ldr	r3, [r4, #4]
 8009e98:	bf08      	it	eq
 8009e9a:	6031      	streq	r1, [r6, #0]
 8009e9c:	5162      	str	r2, [r4, r5]
 8009e9e:	604b      	str	r3, [r1, #4]
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f104 060b 	add.w	r6, r4, #11
 8009ea6:	f000 feff 	bl	800aca8 <__malloc_unlock>
 8009eaa:	f026 0607 	bic.w	r6, r6, #7
 8009eae:	1d23      	adds	r3, r4, #4
 8009eb0:	1af2      	subs	r2, r6, r3
 8009eb2:	d0b6      	beq.n	8009e22 <_malloc_r+0x22>
 8009eb4:	1b9b      	subs	r3, r3, r6
 8009eb6:	50a3      	str	r3, [r4, r2]
 8009eb8:	e7b3      	b.n	8009e22 <_malloc_r+0x22>
 8009eba:	6862      	ldr	r2, [r4, #4]
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	bf0c      	ite	eq
 8009ec0:	6032      	streq	r2, [r6, #0]
 8009ec2:	605a      	strne	r2, [r3, #4]
 8009ec4:	e7ec      	b.n	8009ea0 <_malloc_r+0xa0>
 8009ec6:	4623      	mov	r3, r4
 8009ec8:	6864      	ldr	r4, [r4, #4]
 8009eca:	e7b2      	b.n	8009e32 <_malloc_r+0x32>
 8009ecc:	4634      	mov	r4, r6
 8009ece:	6876      	ldr	r6, [r6, #4]
 8009ed0:	e7b9      	b.n	8009e46 <_malloc_r+0x46>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f000 fee6 	bl	800aca8 <__malloc_unlock>
 8009edc:	e7a1      	b.n	8009e22 <_malloc_r+0x22>
 8009ede:	6025      	str	r5, [r4, #0]
 8009ee0:	e7de      	b.n	8009ea0 <_malloc_r+0xa0>
 8009ee2:	bf00      	nop
 8009ee4:	200009fc 	.word	0x200009fc

08009ee8 <_sbrk_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_sbrk_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f9 fdc6 	bl	8003a84 <_sbrk>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_sbrk_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_sbrk_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000a04 	.word	0x20000a04

08009f08 <strcpy>:
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f0e:	f803 2b01 	strb.w	r2, [r3], #1
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d1f9      	bne.n	8009f0a <strcpy+0x2>
 8009f16:	4770      	bx	lr

08009f18 <__assert_func>:
 8009f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f1a:	4614      	mov	r4, r2
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <__assert_func+0x2c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4605      	mov	r5, r0
 8009f24:	68d8      	ldr	r0, [r3, #12]
 8009f26:	b14c      	cbz	r4, 8009f3c <__assert_func+0x24>
 8009f28:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <__assert_func+0x30>)
 8009f2a:	9100      	str	r1, [sp, #0]
 8009f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f30:	4906      	ldr	r1, [pc, #24]	; (8009f4c <__assert_func+0x34>)
 8009f32:	462b      	mov	r3, r5
 8009f34:	f000 fe8a 	bl	800ac4c <fiprintf>
 8009f38:	f001 fab6 	bl	800b4a8 <abort>
 8009f3c:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <__assert_func+0x38>)
 8009f3e:	461c      	mov	r4, r3
 8009f40:	e7f3      	b.n	8009f2a <__assert_func+0x12>
 8009f42:	bf00      	nop
 8009f44:	20000024 	.word	0x20000024
 8009f48:	0800cbec 	.word	0x0800cbec
 8009f4c:	0800cbf9 	.word	0x0800cbf9
 8009f50:	0800cc27 	.word	0x0800cc27

08009f54 <quorem>:
 8009f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	6903      	ldr	r3, [r0, #16]
 8009f5a:	690c      	ldr	r4, [r1, #16]
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	4607      	mov	r7, r0
 8009f60:	f2c0 8081 	blt.w	800a066 <quorem+0x112>
 8009f64:	3c01      	subs	r4, #1
 8009f66:	f101 0814 	add.w	r8, r1, #20
 8009f6a:	f100 0514 	add.w	r5, r0, #20
 8009f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f8c:	d331      	bcc.n	8009ff2 <quorem+0x9e>
 8009f8e:	f04f 0e00 	mov.w	lr, #0
 8009f92:	4640      	mov	r0, r8
 8009f94:	46ac      	mov	ip, r5
 8009f96:	46f2      	mov	sl, lr
 8009f98:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f9c:	b293      	uxth	r3, r2
 8009f9e:	fb06 e303 	mla	r3, r6, r3, lr
 8009fa2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ebaa 0303 	sub.w	r3, sl, r3
 8009fac:	f8dc a000 	ldr.w	sl, [ip]
 8009fb0:	0c12      	lsrs	r2, r2, #16
 8009fb2:	fa13 f38a 	uxtah	r3, r3, sl
 8009fb6:	fb06 e202 	mla	r2, r6, r2, lr
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fc2:	b292      	uxth	r2, r2
 8009fc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fcc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fd0:	4581      	cmp	r9, r0
 8009fd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd6:	f84c 3b04 	str.w	r3, [ip], #4
 8009fda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fde:	d2db      	bcs.n	8009f98 <quorem+0x44>
 8009fe0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fe4:	b92b      	cbnz	r3, 8009ff2 <quorem+0x9e>
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	429d      	cmp	r5, r3
 8009fec:	461a      	mov	r2, r3
 8009fee:	d32e      	bcc.n	800a04e <quorem+0xfa>
 8009ff0:	613c      	str	r4, [r7, #16]
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	f7ff fdae 	bl	8009b54 <__mcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	db24      	blt.n	800a046 <quorem+0xf2>
 8009ffc:	3601      	adds	r6, #1
 8009ffe:	4628      	mov	r0, r5
 800a000:	f04f 0c00 	mov.w	ip, #0
 800a004:	f858 2b04 	ldr.w	r2, [r8], #4
 800a008:	f8d0 e000 	ldr.w	lr, [r0]
 800a00c:	b293      	uxth	r3, r2
 800a00e:	ebac 0303 	sub.w	r3, ip, r3
 800a012:	0c12      	lsrs	r2, r2, #16
 800a014:	fa13 f38e 	uxtah	r3, r3, lr
 800a018:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a01c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a026:	45c1      	cmp	r9, r8
 800a028:	f840 3b04 	str.w	r3, [r0], #4
 800a02c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a030:	d2e8      	bcs.n	800a004 <quorem+0xb0>
 800a032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a03a:	b922      	cbnz	r2, 800a046 <quorem+0xf2>
 800a03c:	3b04      	subs	r3, #4
 800a03e:	429d      	cmp	r5, r3
 800a040:	461a      	mov	r2, r3
 800a042:	d30a      	bcc.n	800a05a <quorem+0x106>
 800a044:	613c      	str	r4, [r7, #16]
 800a046:	4630      	mov	r0, r6
 800a048:	b003      	add	sp, #12
 800a04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04e:	6812      	ldr	r2, [r2, #0]
 800a050:	3b04      	subs	r3, #4
 800a052:	2a00      	cmp	r2, #0
 800a054:	d1cc      	bne.n	8009ff0 <quorem+0x9c>
 800a056:	3c01      	subs	r4, #1
 800a058:	e7c7      	b.n	8009fea <quorem+0x96>
 800a05a:	6812      	ldr	r2, [r2, #0]
 800a05c:	3b04      	subs	r3, #4
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d1f0      	bne.n	800a044 <quorem+0xf0>
 800a062:	3c01      	subs	r4, #1
 800a064:	e7eb      	b.n	800a03e <quorem+0xea>
 800a066:	2000      	movs	r0, #0
 800a068:	e7ee      	b.n	800a048 <quorem+0xf4>
 800a06a:	0000      	movs	r0, r0
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <_dtoa_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	ed2d 8b04 	vpush	{d8-d9}
 800a078:	ec57 6b10 	vmov	r6, r7, d0
 800a07c:	b093      	sub	sp, #76	; 0x4c
 800a07e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a080:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a084:	9106      	str	r1, [sp, #24]
 800a086:	ee10 aa10 	vmov	sl, s0
 800a08a:	4604      	mov	r4, r0
 800a08c:	9209      	str	r2, [sp, #36]	; 0x24
 800a08e:	930c      	str	r3, [sp, #48]	; 0x30
 800a090:	46bb      	mov	fp, r7
 800a092:	b975      	cbnz	r5, 800a0b2 <_dtoa_r+0x42>
 800a094:	2010      	movs	r0, #16
 800a096:	f000 fdeb 	bl	800ac70 <malloc>
 800a09a:	4602      	mov	r2, r0
 800a09c:	6260      	str	r0, [r4, #36]	; 0x24
 800a09e:	b920      	cbnz	r0, 800a0aa <_dtoa_r+0x3a>
 800a0a0:	4ba7      	ldr	r3, [pc, #668]	; (800a340 <_dtoa_r+0x2d0>)
 800a0a2:	21ea      	movs	r1, #234	; 0xea
 800a0a4:	48a7      	ldr	r0, [pc, #668]	; (800a344 <_dtoa_r+0x2d4>)
 800a0a6:	f7ff ff37 	bl	8009f18 <__assert_func>
 800a0aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0ae:	6005      	str	r5, [r0, #0]
 800a0b0:	60c5      	str	r5, [r0, #12]
 800a0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b4:	6819      	ldr	r1, [r3, #0]
 800a0b6:	b151      	cbz	r1, 800a0ce <_dtoa_r+0x5e>
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	604a      	str	r2, [r1, #4]
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4093      	lsls	r3, r2
 800a0c0:	608b      	str	r3, [r1, #8]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff fb04 	bl	80096d0 <_Bfree>
 800a0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	1e3b      	subs	r3, r7, #0
 800a0d0:	bfaa      	itet	ge
 800a0d2:	2300      	movge	r3, #0
 800a0d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a0d8:	f8c8 3000 	strge.w	r3, [r8]
 800a0dc:	4b9a      	ldr	r3, [pc, #616]	; (800a348 <_dtoa_r+0x2d8>)
 800a0de:	bfbc      	itt	lt
 800a0e0:	2201      	movlt	r2, #1
 800a0e2:	f8c8 2000 	strlt.w	r2, [r8]
 800a0e6:	ea33 030b 	bics.w	r3, r3, fp
 800a0ea:	d11b      	bne.n	800a124 <_dtoa_r+0xb4>
 800a0ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0f8:	4333      	orrs	r3, r6
 800a0fa:	f000 8592 	beq.w	800ac22 <_dtoa_r+0xbb2>
 800a0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a100:	b963      	cbnz	r3, 800a11c <_dtoa_r+0xac>
 800a102:	4b92      	ldr	r3, [pc, #584]	; (800a34c <_dtoa_r+0x2dc>)
 800a104:	e022      	b.n	800a14c <_dtoa_r+0xdc>
 800a106:	4b92      	ldr	r3, [pc, #584]	; (800a350 <_dtoa_r+0x2e0>)
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	3308      	adds	r3, #8
 800a10c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	9801      	ldr	r0, [sp, #4]
 800a112:	b013      	add	sp, #76	; 0x4c
 800a114:	ecbd 8b04 	vpop	{d8-d9}
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	4b8b      	ldr	r3, [pc, #556]	; (800a34c <_dtoa_r+0x2dc>)
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	3303      	adds	r3, #3
 800a122:	e7f3      	b.n	800a10c <_dtoa_r+0x9c>
 800a124:	2200      	movs	r2, #0
 800a126:	2300      	movs	r3, #0
 800a128:	4650      	mov	r0, sl
 800a12a:	4659      	mov	r1, fp
 800a12c:	f7f6 fcec 	bl	8000b08 <__aeabi_dcmpeq>
 800a130:	ec4b ab19 	vmov	d9, sl, fp
 800a134:	4680      	mov	r8, r0
 800a136:	b158      	cbz	r0, 800a150 <_dtoa_r+0xe0>
 800a138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a13a:	2301      	movs	r3, #1
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 856b 	beq.w	800ac1c <_dtoa_r+0xbac>
 800a146:	4883      	ldr	r0, [pc, #524]	; (800a354 <_dtoa_r+0x2e4>)
 800a148:	6018      	str	r0, [r3, #0]
 800a14a:	1e43      	subs	r3, r0, #1
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	e7df      	b.n	800a110 <_dtoa_r+0xa0>
 800a150:	ec4b ab10 	vmov	d0, sl, fp
 800a154:	aa10      	add	r2, sp, #64	; 0x40
 800a156:	a911      	add	r1, sp, #68	; 0x44
 800a158:	4620      	mov	r0, r4
 800a15a:	f7ff fda1 	bl	8009ca0 <__d2b>
 800a15e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a162:	ee08 0a10 	vmov	s16, r0
 800a166:	2d00      	cmp	r5, #0
 800a168:	f000 8084 	beq.w	800a274 <_dtoa_r+0x204>
 800a16c:	ee19 3a90 	vmov	r3, s19
 800a170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a174:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a178:	4656      	mov	r6, sl
 800a17a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a17e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a182:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a186:	4b74      	ldr	r3, [pc, #464]	; (800a358 <_dtoa_r+0x2e8>)
 800a188:	2200      	movs	r2, #0
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 f89b 	bl	80002c8 <__aeabi_dsub>
 800a192:	a365      	add	r3, pc, #404	; (adr r3, 800a328 <_dtoa_r+0x2b8>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f7f6 fa4e 	bl	8000638 <__aeabi_dmul>
 800a19c:	a364      	add	r3, pc, #400	; (adr r3, 800a330 <_dtoa_r+0x2c0>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 f893 	bl	80002cc <__adddf3>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	460f      	mov	r7, r1
 800a1ac:	f7f6 f9da 	bl	8000564 <__aeabi_i2d>
 800a1b0:	a361      	add	r3, pc, #388	; (adr r3, 800a338 <_dtoa_r+0x2c8>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f6 fa3f 	bl	8000638 <__aeabi_dmul>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4630      	mov	r0, r6
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	f7f6 f883 	bl	80002cc <__adddf3>
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	f7f6 fce5 	bl	8000b98 <__aeabi_d2iz>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	9000      	str	r0, [sp, #0]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f7f6 fca0 	bl	8000b1c <__aeabi_dcmplt>
 800a1dc:	b150      	cbz	r0, 800a1f4 <_dtoa_r+0x184>
 800a1de:	9800      	ldr	r0, [sp, #0]
 800a1e0:	f7f6 f9c0 	bl	8000564 <__aeabi_i2d>
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	f7f6 fc8e 	bl	8000b08 <__aeabi_dcmpeq>
 800a1ec:	b910      	cbnz	r0, 800a1f4 <_dtoa_r+0x184>
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	2b16      	cmp	r3, #22
 800a1f8:	d85a      	bhi.n	800a2b0 <_dtoa_r+0x240>
 800a1fa:	9a00      	ldr	r2, [sp, #0]
 800a1fc:	4b57      	ldr	r3, [pc, #348]	; (800a35c <_dtoa_r+0x2ec>)
 800a1fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	ec51 0b19 	vmov	r0, r1, d9
 800a20a:	f7f6 fc87 	bl	8000b1c <__aeabi_dcmplt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d050      	beq.n	800a2b4 <_dtoa_r+0x244>
 800a212:	9b00      	ldr	r3, [sp, #0]
 800a214:	3b01      	subs	r3, #1
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a21e:	1b5d      	subs	r5, r3, r5
 800a220:	1e6b      	subs	r3, r5, #1
 800a222:	9305      	str	r3, [sp, #20]
 800a224:	bf45      	ittet	mi
 800a226:	f1c5 0301 	rsbmi	r3, r5, #1
 800a22a:	9304      	strmi	r3, [sp, #16]
 800a22c:	2300      	movpl	r3, #0
 800a22e:	2300      	movmi	r3, #0
 800a230:	bf4c      	ite	mi
 800a232:	9305      	strmi	r3, [sp, #20]
 800a234:	9304      	strpl	r3, [sp, #16]
 800a236:	9b00      	ldr	r3, [sp, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	db3d      	blt.n	800a2b8 <_dtoa_r+0x248>
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	9a00      	ldr	r2, [sp, #0]
 800a240:	920a      	str	r2, [sp, #40]	; 0x28
 800a242:	4413      	add	r3, r2
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	2300      	movs	r3, #0
 800a248:	9307      	str	r3, [sp, #28]
 800a24a:	9b06      	ldr	r3, [sp, #24]
 800a24c:	2b09      	cmp	r3, #9
 800a24e:	f200 8089 	bhi.w	800a364 <_dtoa_r+0x2f4>
 800a252:	2b05      	cmp	r3, #5
 800a254:	bfc4      	itt	gt
 800a256:	3b04      	subgt	r3, #4
 800a258:	9306      	strgt	r3, [sp, #24]
 800a25a:	9b06      	ldr	r3, [sp, #24]
 800a25c:	f1a3 0302 	sub.w	r3, r3, #2
 800a260:	bfcc      	ite	gt
 800a262:	2500      	movgt	r5, #0
 800a264:	2501      	movle	r5, #1
 800a266:	2b03      	cmp	r3, #3
 800a268:	f200 8087 	bhi.w	800a37a <_dtoa_r+0x30a>
 800a26c:	e8df f003 	tbb	[pc, r3]
 800a270:	59383a2d 	.word	0x59383a2d
 800a274:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a278:	441d      	add	r5, r3
 800a27a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a27e:	2b20      	cmp	r3, #32
 800a280:	bfc1      	itttt	gt
 800a282:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a286:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a28a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a28e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a292:	bfda      	itte	le
 800a294:	f1c3 0320 	rsble	r3, r3, #32
 800a298:	fa06 f003 	lslle.w	r0, r6, r3
 800a29c:	4318      	orrgt	r0, r3
 800a29e:	f7f6 f951 	bl	8000544 <__aeabi_ui2d>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2aa:	3d01      	subs	r5, #1
 800a2ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ae:	e76a      	b.n	800a186 <_dtoa_r+0x116>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e7b2      	b.n	800a21a <_dtoa_r+0x1aa>
 800a2b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2b6:	e7b1      	b.n	800a21c <_dtoa_r+0x1ac>
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	9a00      	ldr	r2, [sp, #0]
 800a2bc:	1a9b      	subs	r3, r3, r2
 800a2be:	9304      	str	r3, [sp, #16]
 800a2c0:	4253      	negs	r3, r2
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c8:	e7bf      	b.n	800a24a <_dtoa_r+0x1da>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9308      	str	r3, [sp, #32]
 800a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dc55      	bgt.n	800a380 <_dtoa_r+0x310>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2de:	e00c      	b.n	800a2fa <_dtoa_r+0x28a>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7f3      	b.n	800a2cc <_dtoa_r+0x25c>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e8:	9308      	str	r3, [sp, #32]
 800a2ea:	9b00      	ldr	r3, [sp, #0]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	9303      	str	r3, [sp, #12]
 800a2f6:	bfb8      	it	lt
 800a2f8:	2301      	movlt	r3, #1
 800a2fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	6042      	str	r2, [r0, #4]
 800a300:	2204      	movs	r2, #4
 800a302:	f102 0614 	add.w	r6, r2, #20
 800a306:	429e      	cmp	r6, r3
 800a308:	6841      	ldr	r1, [r0, #4]
 800a30a:	d93d      	bls.n	800a388 <_dtoa_r+0x318>
 800a30c:	4620      	mov	r0, r4
 800a30e:	f7ff f99f 	bl	8009650 <_Balloc>
 800a312:	9001      	str	r0, [sp, #4]
 800a314:	2800      	cmp	r0, #0
 800a316:	d13b      	bne.n	800a390 <_dtoa_r+0x320>
 800a318:	4b11      	ldr	r3, [pc, #68]	; (800a360 <_dtoa_r+0x2f0>)
 800a31a:	4602      	mov	r2, r0
 800a31c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a320:	e6c0      	b.n	800a0a4 <_dtoa_r+0x34>
 800a322:	2301      	movs	r3, #1
 800a324:	e7df      	b.n	800a2e6 <_dtoa_r+0x276>
 800a326:	bf00      	nop
 800a328:	636f4361 	.word	0x636f4361
 800a32c:	3fd287a7 	.word	0x3fd287a7
 800a330:	8b60c8b3 	.word	0x8b60c8b3
 800a334:	3fc68a28 	.word	0x3fc68a28
 800a338:	509f79fb 	.word	0x509f79fb
 800a33c:	3fd34413 	.word	0x3fd34413
 800a340:	0800ca65 	.word	0x0800ca65
 800a344:	0800cc37 	.word	0x0800cc37
 800a348:	7ff00000 	.word	0x7ff00000
 800a34c:	0800cc31 	.word	0x0800cc31
 800a350:	0800cc28 	.word	0x0800cc28
 800a354:	0800cc36 	.word	0x0800cc36
 800a358:	3ff80000 	.word	0x3ff80000
 800a35c:	0800cb18 	.word	0x0800cb18
 800a360:	0800cad8 	.word	0x0800cad8
 800a364:	2501      	movs	r5, #1
 800a366:	2300      	movs	r3, #0
 800a368:	9306      	str	r3, [sp, #24]
 800a36a:	9508      	str	r5, [sp, #32]
 800a36c:	f04f 33ff 	mov.w	r3, #4294967295
 800a370:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a374:	2200      	movs	r2, #0
 800a376:	2312      	movs	r3, #18
 800a378:	e7b0      	b.n	800a2dc <_dtoa_r+0x26c>
 800a37a:	2301      	movs	r3, #1
 800a37c:	9308      	str	r3, [sp, #32]
 800a37e:	e7f5      	b.n	800a36c <_dtoa_r+0x2fc>
 800a380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a382:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a386:	e7b8      	b.n	800a2fa <_dtoa_r+0x28a>
 800a388:	3101      	adds	r1, #1
 800a38a:	6041      	str	r1, [r0, #4]
 800a38c:	0052      	lsls	r2, r2, #1
 800a38e:	e7b8      	b.n	800a302 <_dtoa_r+0x292>
 800a390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a392:	9a01      	ldr	r2, [sp, #4]
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	2b0e      	cmp	r3, #14
 800a39a:	f200 809d 	bhi.w	800a4d8 <_dtoa_r+0x468>
 800a39e:	2d00      	cmp	r5, #0
 800a3a0:	f000 809a 	beq.w	800a4d8 <_dtoa_r+0x468>
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd32      	ble.n	800a410 <_dtoa_r+0x3a0>
 800a3aa:	4ab7      	ldr	r2, [pc, #732]	; (800a688 <_dtoa_r+0x618>)
 800a3ac:	f003 030f 	and.w	r3, r3, #15
 800a3b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3b8:	9b00      	ldr	r3, [sp, #0]
 800a3ba:	05d8      	lsls	r0, r3, #23
 800a3bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a3c0:	d516      	bpl.n	800a3f0 <_dtoa_r+0x380>
 800a3c2:	4bb2      	ldr	r3, [pc, #712]	; (800a68c <_dtoa_r+0x61c>)
 800a3c4:	ec51 0b19 	vmov	r0, r1, d9
 800a3c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3cc:	f7f6 fa5e 	bl	800088c <__aeabi_ddiv>
 800a3d0:	f007 070f 	and.w	r7, r7, #15
 800a3d4:	4682      	mov	sl, r0
 800a3d6:	468b      	mov	fp, r1
 800a3d8:	2503      	movs	r5, #3
 800a3da:	4eac      	ldr	r6, [pc, #688]	; (800a68c <_dtoa_r+0x61c>)
 800a3dc:	b957      	cbnz	r7, 800a3f4 <_dtoa_r+0x384>
 800a3de:	4642      	mov	r2, r8
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	4659      	mov	r1, fp
 800a3e6:	f7f6 fa51 	bl	800088c <__aeabi_ddiv>
 800a3ea:	4682      	mov	sl, r0
 800a3ec:	468b      	mov	fp, r1
 800a3ee:	e028      	b.n	800a442 <_dtoa_r+0x3d2>
 800a3f0:	2502      	movs	r5, #2
 800a3f2:	e7f2      	b.n	800a3da <_dtoa_r+0x36a>
 800a3f4:	07f9      	lsls	r1, r7, #31
 800a3f6:	d508      	bpl.n	800a40a <_dtoa_r+0x39a>
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a400:	f7f6 f91a 	bl	8000638 <__aeabi_dmul>
 800a404:	3501      	adds	r5, #1
 800a406:	4680      	mov	r8, r0
 800a408:	4689      	mov	r9, r1
 800a40a:	107f      	asrs	r7, r7, #1
 800a40c:	3608      	adds	r6, #8
 800a40e:	e7e5      	b.n	800a3dc <_dtoa_r+0x36c>
 800a410:	f000 809b 	beq.w	800a54a <_dtoa_r+0x4da>
 800a414:	9b00      	ldr	r3, [sp, #0]
 800a416:	4f9d      	ldr	r7, [pc, #628]	; (800a68c <_dtoa_r+0x61c>)
 800a418:	425e      	negs	r6, r3
 800a41a:	4b9b      	ldr	r3, [pc, #620]	; (800a688 <_dtoa_r+0x618>)
 800a41c:	f006 020f 	and.w	r2, r6, #15
 800a420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	ec51 0b19 	vmov	r0, r1, d9
 800a42c:	f7f6 f904 	bl	8000638 <__aeabi_dmul>
 800a430:	1136      	asrs	r6, r6, #4
 800a432:	4682      	mov	sl, r0
 800a434:	468b      	mov	fp, r1
 800a436:	2300      	movs	r3, #0
 800a438:	2502      	movs	r5, #2
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	d17a      	bne.n	800a534 <_dtoa_r+0x4c4>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1d3      	bne.n	800a3ea <_dtoa_r+0x37a>
 800a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8082 	beq.w	800a54e <_dtoa_r+0x4de>
 800a44a:	4b91      	ldr	r3, [pc, #580]	; (800a690 <_dtoa_r+0x620>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	4650      	mov	r0, sl
 800a450:	4659      	mov	r1, fp
 800a452:	f7f6 fb63 	bl	8000b1c <__aeabi_dcmplt>
 800a456:	2800      	cmp	r0, #0
 800a458:	d079      	beq.n	800a54e <_dtoa_r+0x4de>
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d076      	beq.n	800a54e <_dtoa_r+0x4de>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dd36      	ble.n	800a4d4 <_dtoa_r+0x464>
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	4650      	mov	r0, sl
 800a46a:	4659      	mov	r1, fp
 800a46c:	1e5f      	subs	r7, r3, #1
 800a46e:	2200      	movs	r2, #0
 800a470:	4b88      	ldr	r3, [pc, #544]	; (800a694 <_dtoa_r+0x624>)
 800a472:	f7f6 f8e1 	bl	8000638 <__aeabi_dmul>
 800a476:	9e02      	ldr	r6, [sp, #8]
 800a478:	4682      	mov	sl, r0
 800a47a:	468b      	mov	fp, r1
 800a47c:	3501      	adds	r5, #1
 800a47e:	4628      	mov	r0, r5
 800a480:	f7f6 f870 	bl	8000564 <__aeabi_i2d>
 800a484:	4652      	mov	r2, sl
 800a486:	465b      	mov	r3, fp
 800a488:	f7f6 f8d6 	bl	8000638 <__aeabi_dmul>
 800a48c:	4b82      	ldr	r3, [pc, #520]	; (800a698 <_dtoa_r+0x628>)
 800a48e:	2200      	movs	r2, #0
 800a490:	f7f5 ff1c 	bl	80002cc <__adddf3>
 800a494:	46d0      	mov	r8, sl
 800a496:	46d9      	mov	r9, fp
 800a498:	4682      	mov	sl, r0
 800a49a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	d158      	bne.n	800a554 <_dtoa_r+0x4e4>
 800a4a2:	4b7e      	ldr	r3, [pc, #504]	; (800a69c <_dtoa_r+0x62c>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	f7f5 ff0d 	bl	80002c8 <__aeabi_dsub>
 800a4ae:	4652      	mov	r2, sl
 800a4b0:	465b      	mov	r3, fp
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4689      	mov	r9, r1
 800a4b6:	f7f6 fb4f 	bl	8000b58 <__aeabi_dcmpgt>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f040 8295 	bne.w	800a9ea <_dtoa_r+0x97a>
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4c6:	4640      	mov	r0, r8
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	f7f6 fb27 	bl	8000b1c <__aeabi_dcmplt>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f040 8289 	bne.w	800a9e6 <_dtoa_r+0x976>
 800a4d4:	ec5b ab19 	vmov	sl, fp, d9
 800a4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f2c0 8148 	blt.w	800a770 <_dtoa_r+0x700>
 800a4e0:	9a00      	ldr	r2, [sp, #0]
 800a4e2:	2a0e      	cmp	r2, #14
 800a4e4:	f300 8144 	bgt.w	800a770 <_dtoa_r+0x700>
 800a4e8:	4b67      	ldr	r3, [pc, #412]	; (800a688 <_dtoa_r+0x618>)
 800a4ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f280 80d5 	bge.w	800a6a4 <_dtoa_r+0x634>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f300 80d1 	bgt.w	800a6a4 <_dtoa_r+0x634>
 800a502:	f040 826f 	bne.w	800a9e4 <_dtoa_r+0x974>
 800a506:	4b65      	ldr	r3, [pc, #404]	; (800a69c <_dtoa_r+0x62c>)
 800a508:	2200      	movs	r2, #0
 800a50a:	4640      	mov	r0, r8
 800a50c:	4649      	mov	r1, r9
 800a50e:	f7f6 f893 	bl	8000638 <__aeabi_dmul>
 800a512:	4652      	mov	r2, sl
 800a514:	465b      	mov	r3, fp
 800a516:	f7f6 fb15 	bl	8000b44 <__aeabi_dcmpge>
 800a51a:	9e03      	ldr	r6, [sp, #12]
 800a51c:	4637      	mov	r7, r6
 800a51e:	2800      	cmp	r0, #0
 800a520:	f040 8245 	bne.w	800a9ae <_dtoa_r+0x93e>
 800a524:	9d01      	ldr	r5, [sp, #4]
 800a526:	2331      	movs	r3, #49	; 0x31
 800a528:	f805 3b01 	strb.w	r3, [r5], #1
 800a52c:	9b00      	ldr	r3, [sp, #0]
 800a52e:	3301      	adds	r3, #1
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	e240      	b.n	800a9b6 <_dtoa_r+0x946>
 800a534:	07f2      	lsls	r2, r6, #31
 800a536:	d505      	bpl.n	800a544 <_dtoa_r+0x4d4>
 800a538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a53c:	f7f6 f87c 	bl	8000638 <__aeabi_dmul>
 800a540:	3501      	adds	r5, #1
 800a542:	2301      	movs	r3, #1
 800a544:	1076      	asrs	r6, r6, #1
 800a546:	3708      	adds	r7, #8
 800a548:	e777      	b.n	800a43a <_dtoa_r+0x3ca>
 800a54a:	2502      	movs	r5, #2
 800a54c:	e779      	b.n	800a442 <_dtoa_r+0x3d2>
 800a54e:	9f00      	ldr	r7, [sp, #0]
 800a550:	9e03      	ldr	r6, [sp, #12]
 800a552:	e794      	b.n	800a47e <_dtoa_r+0x40e>
 800a554:	9901      	ldr	r1, [sp, #4]
 800a556:	4b4c      	ldr	r3, [pc, #304]	; (800a688 <_dtoa_r+0x618>)
 800a558:	4431      	add	r1, r6
 800a55a:	910d      	str	r1, [sp, #52]	; 0x34
 800a55c:	9908      	ldr	r1, [sp, #32]
 800a55e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a562:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a566:	2900      	cmp	r1, #0
 800a568:	d043      	beq.n	800a5f2 <_dtoa_r+0x582>
 800a56a:	494d      	ldr	r1, [pc, #308]	; (800a6a0 <_dtoa_r+0x630>)
 800a56c:	2000      	movs	r0, #0
 800a56e:	f7f6 f98d 	bl	800088c <__aeabi_ddiv>
 800a572:	4652      	mov	r2, sl
 800a574:	465b      	mov	r3, fp
 800a576:	f7f5 fea7 	bl	80002c8 <__aeabi_dsub>
 800a57a:	9d01      	ldr	r5, [sp, #4]
 800a57c:	4682      	mov	sl, r0
 800a57e:	468b      	mov	fp, r1
 800a580:	4649      	mov	r1, r9
 800a582:	4640      	mov	r0, r8
 800a584:	f7f6 fb08 	bl	8000b98 <__aeabi_d2iz>
 800a588:	4606      	mov	r6, r0
 800a58a:	f7f5 ffeb 	bl	8000564 <__aeabi_i2d>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4640      	mov	r0, r8
 800a594:	4649      	mov	r1, r9
 800a596:	f7f5 fe97 	bl	80002c8 <__aeabi_dsub>
 800a59a:	3630      	adds	r6, #48	; 0x30
 800a59c:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a0:	4652      	mov	r2, sl
 800a5a2:	465b      	mov	r3, fp
 800a5a4:	4680      	mov	r8, r0
 800a5a6:	4689      	mov	r9, r1
 800a5a8:	f7f6 fab8 	bl	8000b1c <__aeabi_dcmplt>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d163      	bne.n	800a678 <_dtoa_r+0x608>
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	4936      	ldr	r1, [pc, #216]	; (800a690 <_dtoa_r+0x620>)
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	f7f5 fe86 	bl	80002c8 <__aeabi_dsub>
 800a5bc:	4652      	mov	r2, sl
 800a5be:	465b      	mov	r3, fp
 800a5c0:	f7f6 faac 	bl	8000b1c <__aeabi_dcmplt>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f040 80b5 	bne.w	800a734 <_dtoa_r+0x6c4>
 800a5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5cc:	429d      	cmp	r5, r3
 800a5ce:	d081      	beq.n	800a4d4 <_dtoa_r+0x464>
 800a5d0:	4b30      	ldr	r3, [pc, #192]	; (800a694 <_dtoa_r+0x624>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4650      	mov	r0, sl
 800a5d6:	4659      	mov	r1, fp
 800a5d8:	f7f6 f82e 	bl	8000638 <__aeabi_dmul>
 800a5dc:	4b2d      	ldr	r3, [pc, #180]	; (800a694 <_dtoa_r+0x624>)
 800a5de:	4682      	mov	sl, r0
 800a5e0:	468b      	mov	fp, r1
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f7f6 f826 	bl	8000638 <__aeabi_dmul>
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	4689      	mov	r9, r1
 800a5f0:	e7c6      	b.n	800a580 <_dtoa_r+0x510>
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	f7f6 f81f 	bl	8000638 <__aeabi_dmul>
 800a5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5fc:	9d01      	ldr	r5, [sp, #4]
 800a5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a600:	4682      	mov	sl, r0
 800a602:	468b      	mov	fp, r1
 800a604:	4649      	mov	r1, r9
 800a606:	4640      	mov	r0, r8
 800a608:	f7f6 fac6 	bl	8000b98 <__aeabi_d2iz>
 800a60c:	4606      	mov	r6, r0
 800a60e:	f7f5 ffa9 	bl	8000564 <__aeabi_i2d>
 800a612:	3630      	adds	r6, #48	; 0x30
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7f5 fe54 	bl	80002c8 <__aeabi_dsub>
 800a620:	f805 6b01 	strb.w	r6, [r5], #1
 800a624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a626:	429d      	cmp	r5, r3
 800a628:	4680      	mov	r8, r0
 800a62a:	4689      	mov	r9, r1
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	d124      	bne.n	800a67c <_dtoa_r+0x60c>
 800a632:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <_dtoa_r+0x630>)
 800a634:	4650      	mov	r0, sl
 800a636:	4659      	mov	r1, fp
 800a638:	f7f5 fe48 	bl	80002cc <__adddf3>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4640      	mov	r0, r8
 800a642:	4649      	mov	r1, r9
 800a644:	f7f6 fa88 	bl	8000b58 <__aeabi_dcmpgt>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d173      	bne.n	800a734 <_dtoa_r+0x6c4>
 800a64c:	4652      	mov	r2, sl
 800a64e:	465b      	mov	r3, fp
 800a650:	4913      	ldr	r1, [pc, #76]	; (800a6a0 <_dtoa_r+0x630>)
 800a652:	2000      	movs	r0, #0
 800a654:	f7f5 fe38 	bl	80002c8 <__aeabi_dsub>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4640      	mov	r0, r8
 800a65e:	4649      	mov	r1, r9
 800a660:	f7f6 fa5c 	bl	8000b1c <__aeabi_dcmplt>
 800a664:	2800      	cmp	r0, #0
 800a666:	f43f af35 	beq.w	800a4d4 <_dtoa_r+0x464>
 800a66a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a66c:	1e6b      	subs	r3, r5, #1
 800a66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a670:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a674:	2b30      	cmp	r3, #48	; 0x30
 800a676:	d0f8      	beq.n	800a66a <_dtoa_r+0x5fa>
 800a678:	9700      	str	r7, [sp, #0]
 800a67a:	e049      	b.n	800a710 <_dtoa_r+0x6a0>
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <_dtoa_r+0x624>)
 800a67e:	f7f5 ffdb 	bl	8000638 <__aeabi_dmul>
 800a682:	4680      	mov	r8, r0
 800a684:	4689      	mov	r9, r1
 800a686:	e7bd      	b.n	800a604 <_dtoa_r+0x594>
 800a688:	0800cb18 	.word	0x0800cb18
 800a68c:	0800caf0 	.word	0x0800caf0
 800a690:	3ff00000 	.word	0x3ff00000
 800a694:	40240000 	.word	0x40240000
 800a698:	401c0000 	.word	0x401c0000
 800a69c:	40140000 	.word	0x40140000
 800a6a0:	3fe00000 	.word	0x3fe00000
 800a6a4:	9d01      	ldr	r5, [sp, #4]
 800a6a6:	4656      	mov	r6, sl
 800a6a8:	465f      	mov	r7, fp
 800a6aa:	4642      	mov	r2, r8
 800a6ac:	464b      	mov	r3, r9
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f6 f8eb 	bl	800088c <__aeabi_ddiv>
 800a6b6:	f7f6 fa6f 	bl	8000b98 <__aeabi_d2iz>
 800a6ba:	4682      	mov	sl, r0
 800a6bc:	f7f5 ff52 	bl	8000564 <__aeabi_i2d>
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	f7f5 ffb8 	bl	8000638 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a6d4:	f7f5 fdf8 	bl	80002c8 <__aeabi_dsub>
 800a6d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a6dc:	9e01      	ldr	r6, [sp, #4]
 800a6de:	9f03      	ldr	r7, [sp, #12]
 800a6e0:	1bae      	subs	r6, r5, r6
 800a6e2:	42b7      	cmp	r7, r6
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	d135      	bne.n	800a756 <_dtoa_r+0x6e6>
 800a6ea:	f7f5 fdef 	bl	80002cc <__adddf3>
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	f7f6 fa2f 	bl	8000b58 <__aeabi_dcmpgt>
 800a6fa:	b9d0      	cbnz	r0, 800a732 <_dtoa_r+0x6c2>
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	464b      	mov	r3, r9
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f6 fa00 	bl	8000b08 <__aeabi_dcmpeq>
 800a708:	b110      	cbz	r0, 800a710 <_dtoa_r+0x6a0>
 800a70a:	f01a 0f01 	tst.w	sl, #1
 800a70e:	d110      	bne.n	800a732 <_dtoa_r+0x6c2>
 800a710:	4620      	mov	r0, r4
 800a712:	ee18 1a10 	vmov	r1, s16
 800a716:	f7fe ffdb 	bl	80096d0 <_Bfree>
 800a71a:	2300      	movs	r3, #0
 800a71c:	9800      	ldr	r0, [sp, #0]
 800a71e:	702b      	strb	r3, [r5, #0]
 800a720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a722:	3001      	adds	r0, #1
 800a724:	6018      	str	r0, [r3, #0]
 800a726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f43f acf1 	beq.w	800a110 <_dtoa_r+0xa0>
 800a72e:	601d      	str	r5, [r3, #0]
 800a730:	e4ee      	b.n	800a110 <_dtoa_r+0xa0>
 800a732:	9f00      	ldr	r7, [sp, #0]
 800a734:	462b      	mov	r3, r5
 800a736:	461d      	mov	r5, r3
 800a738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a73c:	2a39      	cmp	r2, #57	; 0x39
 800a73e:	d106      	bne.n	800a74e <_dtoa_r+0x6de>
 800a740:	9a01      	ldr	r2, [sp, #4]
 800a742:	429a      	cmp	r2, r3
 800a744:	d1f7      	bne.n	800a736 <_dtoa_r+0x6c6>
 800a746:	9901      	ldr	r1, [sp, #4]
 800a748:	2230      	movs	r2, #48	; 0x30
 800a74a:	3701      	adds	r7, #1
 800a74c:	700a      	strb	r2, [r1, #0]
 800a74e:	781a      	ldrb	r2, [r3, #0]
 800a750:	3201      	adds	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	e790      	b.n	800a678 <_dtoa_r+0x608>
 800a756:	4ba6      	ldr	r3, [pc, #664]	; (800a9f0 <_dtoa_r+0x980>)
 800a758:	2200      	movs	r2, #0
 800a75a:	f7f5 ff6d 	bl	8000638 <__aeabi_dmul>
 800a75e:	2200      	movs	r2, #0
 800a760:	2300      	movs	r3, #0
 800a762:	4606      	mov	r6, r0
 800a764:	460f      	mov	r7, r1
 800a766:	f7f6 f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d09d      	beq.n	800a6aa <_dtoa_r+0x63a>
 800a76e:	e7cf      	b.n	800a710 <_dtoa_r+0x6a0>
 800a770:	9a08      	ldr	r2, [sp, #32]
 800a772:	2a00      	cmp	r2, #0
 800a774:	f000 80d7 	beq.w	800a926 <_dtoa_r+0x8b6>
 800a778:	9a06      	ldr	r2, [sp, #24]
 800a77a:	2a01      	cmp	r2, #1
 800a77c:	f300 80ba 	bgt.w	800a8f4 <_dtoa_r+0x884>
 800a780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a782:	2a00      	cmp	r2, #0
 800a784:	f000 80b2 	beq.w	800a8ec <_dtoa_r+0x87c>
 800a788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a78c:	9e07      	ldr	r6, [sp, #28]
 800a78e:	9d04      	ldr	r5, [sp, #16]
 800a790:	9a04      	ldr	r2, [sp, #16]
 800a792:	441a      	add	r2, r3
 800a794:	9204      	str	r2, [sp, #16]
 800a796:	9a05      	ldr	r2, [sp, #20]
 800a798:	2101      	movs	r1, #1
 800a79a:	441a      	add	r2, r3
 800a79c:	4620      	mov	r0, r4
 800a79e:	9205      	str	r2, [sp, #20]
 800a7a0:	f7ff f84e 	bl	8009840 <__i2b>
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	dd0c      	ble.n	800a7c4 <_dtoa_r+0x754>
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dd09      	ble.n	800a7c4 <_dtoa_r+0x754>
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	9a04      	ldr	r2, [sp, #16]
 800a7b4:	bfa8      	it	ge
 800a7b6:	462b      	movge	r3, r5
 800a7b8:	1ad2      	subs	r2, r2, r3
 800a7ba:	9204      	str	r2, [sp, #16]
 800a7bc:	9a05      	ldr	r2, [sp, #20]
 800a7be:	1aed      	subs	r5, r5, r3
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	b31b      	cbz	r3, 800a810 <_dtoa_r+0x7a0>
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 80af 	beq.w	800a92e <_dtoa_r+0x8be>
 800a7d0:	2e00      	cmp	r6, #0
 800a7d2:	dd13      	ble.n	800a7fc <_dtoa_r+0x78c>
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f7ff f8f1 	bl	80099c0 <__pow5mult>
 800a7de:	ee18 2a10 	vmov	r2, s16
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff f840 	bl	800986c <__multiply>
 800a7ec:	ee18 1a10 	vmov	r1, s16
 800a7f0:	4680      	mov	r8, r0
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7fe ff6c 	bl	80096d0 <_Bfree>
 800a7f8:	ee08 8a10 	vmov	s16, r8
 800a7fc:	9b07      	ldr	r3, [sp, #28]
 800a7fe:	1b9a      	subs	r2, r3, r6
 800a800:	d006      	beq.n	800a810 <_dtoa_r+0x7a0>
 800a802:	ee18 1a10 	vmov	r1, s16
 800a806:	4620      	mov	r0, r4
 800a808:	f7ff f8da 	bl	80099c0 <__pow5mult>
 800a80c:	ee08 0a10 	vmov	s16, r0
 800a810:	2101      	movs	r1, #1
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff f814 	bl	8009840 <__i2b>
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	4606      	mov	r6, r0
 800a81e:	f340 8088 	ble.w	800a932 <_dtoa_r+0x8c2>
 800a822:	461a      	mov	r2, r3
 800a824:	4601      	mov	r1, r0
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff f8ca 	bl	80099c0 <__pow5mult>
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	4606      	mov	r6, r0
 800a832:	f340 8081 	ble.w	800a938 <_dtoa_r+0x8c8>
 800a836:	f04f 0800 	mov.w	r8, #0
 800a83a:	6933      	ldr	r3, [r6, #16]
 800a83c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a840:	6918      	ldr	r0, [r3, #16]
 800a842:	f7fe ffad 	bl	80097a0 <__hi0bits>
 800a846:	f1c0 0020 	rsb	r0, r0, #32
 800a84a:	9b05      	ldr	r3, [sp, #20]
 800a84c:	4418      	add	r0, r3
 800a84e:	f010 001f 	ands.w	r0, r0, #31
 800a852:	f000 8092 	beq.w	800a97a <_dtoa_r+0x90a>
 800a856:	f1c0 0320 	rsb	r3, r0, #32
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	f340 808a 	ble.w	800a974 <_dtoa_r+0x904>
 800a860:	f1c0 001c 	rsb	r0, r0, #28
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	4403      	add	r3, r0
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	9b05      	ldr	r3, [sp, #20]
 800a86c:	4403      	add	r3, r0
 800a86e:	4405      	add	r5, r0
 800a870:	9305      	str	r3, [sp, #20]
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd07      	ble.n	800a888 <_dtoa_r+0x818>
 800a878:	ee18 1a10 	vmov	r1, s16
 800a87c:	461a      	mov	r2, r3
 800a87e:	4620      	mov	r0, r4
 800a880:	f7ff f8f8 	bl	8009a74 <__lshift>
 800a884:	ee08 0a10 	vmov	s16, r0
 800a888:	9b05      	ldr	r3, [sp, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dd05      	ble.n	800a89a <_dtoa_r+0x82a>
 800a88e:	4631      	mov	r1, r6
 800a890:	461a      	mov	r2, r3
 800a892:	4620      	mov	r0, r4
 800a894:	f7ff f8ee 	bl	8009a74 <__lshift>
 800a898:	4606      	mov	r6, r0
 800a89a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d06e      	beq.n	800a97e <_dtoa_r+0x90e>
 800a8a0:	ee18 0a10 	vmov	r0, s16
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	f7ff f955 	bl	8009b54 <__mcmp>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	da67      	bge.n	800a97e <_dtoa_r+0x90e>
 800a8ae:	9b00      	ldr	r3, [sp, #0]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	ee18 1a10 	vmov	r1, s16
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	220a      	movs	r2, #10
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f7fe ff29 	bl	8009714 <__multadd>
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	ee08 0a10 	vmov	s16, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f000 81b1 	beq.w	800ac30 <_dtoa_r+0xbc0>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	220a      	movs	r2, #10
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7fe ff1d 	bl	8009714 <__multadd>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	4607      	mov	r7, r0
 800a8e0:	f300 808e 	bgt.w	800aa00 <_dtoa_r+0x990>
 800a8e4:	9b06      	ldr	r3, [sp, #24]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	dc51      	bgt.n	800a98e <_dtoa_r+0x91e>
 800a8ea:	e089      	b.n	800aa00 <_dtoa_r+0x990>
 800a8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8f2:	e74b      	b.n	800a78c <_dtoa_r+0x71c>
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	1e5e      	subs	r6, r3, #1
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	42b3      	cmp	r3, r6
 800a8fc:	bfbf      	itttt	lt
 800a8fe:	9b07      	ldrlt	r3, [sp, #28]
 800a900:	9607      	strlt	r6, [sp, #28]
 800a902:	1af2      	sublt	r2, r6, r3
 800a904:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a906:	bfb6      	itet	lt
 800a908:	189b      	addlt	r3, r3, r2
 800a90a:	1b9e      	subge	r6, r3, r6
 800a90c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	bfb8      	it	lt
 800a912:	2600      	movlt	r6, #0
 800a914:	2b00      	cmp	r3, #0
 800a916:	bfb7      	itett	lt
 800a918:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a91c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a920:	1a9d      	sublt	r5, r3, r2
 800a922:	2300      	movlt	r3, #0
 800a924:	e734      	b.n	800a790 <_dtoa_r+0x720>
 800a926:	9e07      	ldr	r6, [sp, #28]
 800a928:	9d04      	ldr	r5, [sp, #16]
 800a92a:	9f08      	ldr	r7, [sp, #32]
 800a92c:	e73b      	b.n	800a7a6 <_dtoa_r+0x736>
 800a92e:	9a07      	ldr	r2, [sp, #28]
 800a930:	e767      	b.n	800a802 <_dtoa_r+0x792>
 800a932:	9b06      	ldr	r3, [sp, #24]
 800a934:	2b01      	cmp	r3, #1
 800a936:	dc18      	bgt.n	800a96a <_dtoa_r+0x8fa>
 800a938:	f1ba 0f00 	cmp.w	sl, #0
 800a93c:	d115      	bne.n	800a96a <_dtoa_r+0x8fa>
 800a93e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a942:	b993      	cbnz	r3, 800a96a <_dtoa_r+0x8fa>
 800a944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a948:	0d1b      	lsrs	r3, r3, #20
 800a94a:	051b      	lsls	r3, r3, #20
 800a94c:	b183      	cbz	r3, 800a970 <_dtoa_r+0x900>
 800a94e:	9b04      	ldr	r3, [sp, #16]
 800a950:	3301      	adds	r3, #1
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	9b05      	ldr	r3, [sp, #20]
 800a956:	3301      	adds	r3, #1
 800a958:	9305      	str	r3, [sp, #20]
 800a95a:	f04f 0801 	mov.w	r8, #1
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	2b00      	cmp	r3, #0
 800a962:	f47f af6a 	bne.w	800a83a <_dtoa_r+0x7ca>
 800a966:	2001      	movs	r0, #1
 800a968:	e76f      	b.n	800a84a <_dtoa_r+0x7da>
 800a96a:	f04f 0800 	mov.w	r8, #0
 800a96e:	e7f6      	b.n	800a95e <_dtoa_r+0x8ee>
 800a970:	4698      	mov	r8, r3
 800a972:	e7f4      	b.n	800a95e <_dtoa_r+0x8ee>
 800a974:	f43f af7d 	beq.w	800a872 <_dtoa_r+0x802>
 800a978:	4618      	mov	r0, r3
 800a97a:	301c      	adds	r0, #28
 800a97c:	e772      	b.n	800a864 <_dtoa_r+0x7f4>
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc37      	bgt.n	800a9f4 <_dtoa_r+0x984>
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	2b02      	cmp	r3, #2
 800a988:	dd34      	ble.n	800a9f4 <_dtoa_r+0x984>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	9b02      	ldr	r3, [sp, #8]
 800a990:	b96b      	cbnz	r3, 800a9ae <_dtoa_r+0x93e>
 800a992:	4631      	mov	r1, r6
 800a994:	2205      	movs	r2, #5
 800a996:	4620      	mov	r0, r4
 800a998:	f7fe febc 	bl	8009714 <__multadd>
 800a99c:	4601      	mov	r1, r0
 800a99e:	4606      	mov	r6, r0
 800a9a0:	ee18 0a10 	vmov	r0, s16
 800a9a4:	f7ff f8d6 	bl	8009b54 <__mcmp>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f73f adbb 	bgt.w	800a524 <_dtoa_r+0x4b4>
 800a9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b0:	9d01      	ldr	r5, [sp, #4]
 800a9b2:	43db      	mvns	r3, r3
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	f04f 0800 	mov.w	r8, #0
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f7fe fe87 	bl	80096d0 <_Bfree>
 800a9c2:	2f00      	cmp	r7, #0
 800a9c4:	f43f aea4 	beq.w	800a710 <_dtoa_r+0x6a0>
 800a9c8:	f1b8 0f00 	cmp.w	r8, #0
 800a9cc:	d005      	beq.n	800a9da <_dtoa_r+0x96a>
 800a9ce:	45b8      	cmp	r8, r7
 800a9d0:	d003      	beq.n	800a9da <_dtoa_r+0x96a>
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7fe fe7b 	bl	80096d0 <_Bfree>
 800a9da:	4639      	mov	r1, r7
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7fe fe77 	bl	80096d0 <_Bfree>
 800a9e2:	e695      	b.n	800a710 <_dtoa_r+0x6a0>
 800a9e4:	2600      	movs	r6, #0
 800a9e6:	4637      	mov	r7, r6
 800a9e8:	e7e1      	b.n	800a9ae <_dtoa_r+0x93e>
 800a9ea:	9700      	str	r7, [sp, #0]
 800a9ec:	4637      	mov	r7, r6
 800a9ee:	e599      	b.n	800a524 <_dtoa_r+0x4b4>
 800a9f0:	40240000 	.word	0x40240000
 800a9f4:	9b08      	ldr	r3, [sp, #32]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 80ca 	beq.w	800ab90 <_dtoa_r+0xb20>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	dd05      	ble.n	800aa10 <_dtoa_r+0x9a0>
 800aa04:	4639      	mov	r1, r7
 800aa06:	462a      	mov	r2, r5
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f7ff f833 	bl	8009a74 <__lshift>
 800aa0e:	4607      	mov	r7, r0
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	d05b      	beq.n	800aace <_dtoa_r+0xa5e>
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f7fe fe19 	bl	8009650 <_Balloc>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	b928      	cbnz	r0, 800aa2e <_dtoa_r+0x9be>
 800aa22:	4b87      	ldr	r3, [pc, #540]	; (800ac40 <_dtoa_r+0xbd0>)
 800aa24:	4602      	mov	r2, r0
 800aa26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa2a:	f7ff bb3b 	b.w	800a0a4 <_dtoa_r+0x34>
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	3202      	adds	r2, #2
 800aa32:	0092      	lsls	r2, r2, #2
 800aa34:	f107 010c 	add.w	r1, r7, #12
 800aa38:	300c      	adds	r0, #12
 800aa3a:	f000 f921 	bl	800ac80 <memcpy>
 800aa3e:	2201      	movs	r2, #1
 800aa40:	4629      	mov	r1, r5
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff f816 	bl	8009a74 <__lshift>
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	f103 0901 	add.w	r9, r3, #1
 800aa4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa52:	4413      	add	r3, r2
 800aa54:	9305      	str	r3, [sp, #20]
 800aa56:	f00a 0301 	and.w	r3, sl, #1
 800aa5a:	46b8      	mov	r8, r7
 800aa5c:	9304      	str	r3, [sp, #16]
 800aa5e:	4607      	mov	r7, r0
 800aa60:	4631      	mov	r1, r6
 800aa62:	ee18 0a10 	vmov	r0, s16
 800aa66:	f7ff fa75 	bl	8009f54 <quorem>
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	9002      	str	r0, [sp, #8]
 800aa6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa72:	ee18 0a10 	vmov	r0, s16
 800aa76:	f7ff f86d 	bl	8009b54 <__mcmp>
 800aa7a:	463a      	mov	r2, r7
 800aa7c:	9003      	str	r0, [sp, #12]
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7ff f883 	bl	8009b8c <__mdiff>
 800aa86:	68c2      	ldr	r2, [r0, #12]
 800aa88:	f109 3bff 	add.w	fp, r9, #4294967295
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	bb02      	cbnz	r2, 800aad2 <_dtoa_r+0xa62>
 800aa90:	4601      	mov	r1, r0
 800aa92:	ee18 0a10 	vmov	r0, s16
 800aa96:	f7ff f85d 	bl	8009b54 <__mcmp>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	9207      	str	r2, [sp, #28]
 800aaa2:	f7fe fe15 	bl	80096d0 <_Bfree>
 800aaa6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aaaa:	ea43 0102 	orr.w	r1, r3, r2
 800aaae:	9b04      	ldr	r3, [sp, #16]
 800aab0:	430b      	orrs	r3, r1
 800aab2:	464d      	mov	r5, r9
 800aab4:	d10f      	bne.n	800aad6 <_dtoa_r+0xa66>
 800aab6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aaba:	d02a      	beq.n	800ab12 <_dtoa_r+0xaa2>
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dd02      	ble.n	800aac8 <_dtoa_r+0xa58>
 800aac2:	9b02      	ldr	r3, [sp, #8]
 800aac4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aac8:	f88b a000 	strb.w	sl, [fp]
 800aacc:	e775      	b.n	800a9ba <_dtoa_r+0x94a>
 800aace:	4638      	mov	r0, r7
 800aad0:	e7ba      	b.n	800aa48 <_dtoa_r+0x9d8>
 800aad2:	2201      	movs	r2, #1
 800aad4:	e7e2      	b.n	800aa9c <_dtoa_r+0xa2c>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	db04      	blt.n	800aae6 <_dtoa_r+0xa76>
 800aadc:	9906      	ldr	r1, [sp, #24]
 800aade:	430b      	orrs	r3, r1
 800aae0:	9904      	ldr	r1, [sp, #16]
 800aae2:	430b      	orrs	r3, r1
 800aae4:	d122      	bne.n	800ab2c <_dtoa_r+0xabc>
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	ddee      	ble.n	800aac8 <_dtoa_r+0xa58>
 800aaea:	ee18 1a10 	vmov	r1, s16
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f7fe ffbf 	bl	8009a74 <__lshift>
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	ee08 0a10 	vmov	s16, r0
 800aafc:	f7ff f82a 	bl	8009b54 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dc03      	bgt.n	800ab0c <_dtoa_r+0xa9c>
 800ab04:	d1e0      	bne.n	800aac8 <_dtoa_r+0xa58>
 800ab06:	f01a 0f01 	tst.w	sl, #1
 800ab0a:	d0dd      	beq.n	800aac8 <_dtoa_r+0xa58>
 800ab0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab10:	d1d7      	bne.n	800aac2 <_dtoa_r+0xa52>
 800ab12:	2339      	movs	r3, #57	; 0x39
 800ab14:	f88b 3000 	strb.w	r3, [fp]
 800ab18:	462b      	mov	r3, r5
 800ab1a:	461d      	mov	r5, r3
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab22:	2a39      	cmp	r2, #57	; 0x39
 800ab24:	d071      	beq.n	800ac0a <_dtoa_r+0xb9a>
 800ab26:	3201      	adds	r2, #1
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	e746      	b.n	800a9ba <_dtoa_r+0x94a>
 800ab2c:	2a00      	cmp	r2, #0
 800ab2e:	dd07      	ble.n	800ab40 <_dtoa_r+0xad0>
 800ab30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab34:	d0ed      	beq.n	800ab12 <_dtoa_r+0xaa2>
 800ab36:	f10a 0301 	add.w	r3, sl, #1
 800ab3a:	f88b 3000 	strb.w	r3, [fp]
 800ab3e:	e73c      	b.n	800a9ba <_dtoa_r+0x94a>
 800ab40:	9b05      	ldr	r3, [sp, #20]
 800ab42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab46:	4599      	cmp	r9, r3
 800ab48:	d047      	beq.n	800abda <_dtoa_r+0xb6a>
 800ab4a:	ee18 1a10 	vmov	r1, s16
 800ab4e:	2300      	movs	r3, #0
 800ab50:	220a      	movs	r2, #10
 800ab52:	4620      	mov	r0, r4
 800ab54:	f7fe fdde 	bl	8009714 <__multadd>
 800ab58:	45b8      	cmp	r8, r7
 800ab5a:	ee08 0a10 	vmov	s16, r0
 800ab5e:	f04f 0300 	mov.w	r3, #0
 800ab62:	f04f 020a 	mov.w	r2, #10
 800ab66:	4641      	mov	r1, r8
 800ab68:	4620      	mov	r0, r4
 800ab6a:	d106      	bne.n	800ab7a <_dtoa_r+0xb0a>
 800ab6c:	f7fe fdd2 	bl	8009714 <__multadd>
 800ab70:	4680      	mov	r8, r0
 800ab72:	4607      	mov	r7, r0
 800ab74:	f109 0901 	add.w	r9, r9, #1
 800ab78:	e772      	b.n	800aa60 <_dtoa_r+0x9f0>
 800ab7a:	f7fe fdcb 	bl	8009714 <__multadd>
 800ab7e:	4639      	mov	r1, r7
 800ab80:	4680      	mov	r8, r0
 800ab82:	2300      	movs	r3, #0
 800ab84:	220a      	movs	r2, #10
 800ab86:	4620      	mov	r0, r4
 800ab88:	f7fe fdc4 	bl	8009714 <__multadd>
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	e7f1      	b.n	800ab74 <_dtoa_r+0xb04>
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	9302      	str	r3, [sp, #8]
 800ab94:	9d01      	ldr	r5, [sp, #4]
 800ab96:	ee18 0a10 	vmov	r0, s16
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	f7ff f9da 	bl	8009f54 <quorem>
 800aba0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aba4:	9b01      	ldr	r3, [sp, #4]
 800aba6:	f805 ab01 	strb.w	sl, [r5], #1
 800abaa:	1aea      	subs	r2, r5, r3
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	4293      	cmp	r3, r2
 800abb0:	dd09      	ble.n	800abc6 <_dtoa_r+0xb56>
 800abb2:	ee18 1a10 	vmov	r1, s16
 800abb6:	2300      	movs	r3, #0
 800abb8:	220a      	movs	r2, #10
 800abba:	4620      	mov	r0, r4
 800abbc:	f7fe fdaa 	bl	8009714 <__multadd>
 800abc0:	ee08 0a10 	vmov	s16, r0
 800abc4:	e7e7      	b.n	800ab96 <_dtoa_r+0xb26>
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfc8      	it	gt
 800abcc:	461d      	movgt	r5, r3
 800abce:	9b01      	ldr	r3, [sp, #4]
 800abd0:	bfd8      	it	le
 800abd2:	2501      	movle	r5, #1
 800abd4:	441d      	add	r5, r3
 800abd6:	f04f 0800 	mov.w	r8, #0
 800abda:	ee18 1a10 	vmov	r1, s16
 800abde:	2201      	movs	r2, #1
 800abe0:	4620      	mov	r0, r4
 800abe2:	f7fe ff47 	bl	8009a74 <__lshift>
 800abe6:	4631      	mov	r1, r6
 800abe8:	ee08 0a10 	vmov	s16, r0
 800abec:	f7fe ffb2 	bl	8009b54 <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	dc91      	bgt.n	800ab18 <_dtoa_r+0xaa8>
 800abf4:	d102      	bne.n	800abfc <_dtoa_r+0xb8c>
 800abf6:	f01a 0f01 	tst.w	sl, #1
 800abfa:	d18d      	bne.n	800ab18 <_dtoa_r+0xaa8>
 800abfc:	462b      	mov	r3, r5
 800abfe:	461d      	mov	r5, r3
 800ac00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac04:	2a30      	cmp	r2, #48	; 0x30
 800ac06:	d0fa      	beq.n	800abfe <_dtoa_r+0xb8e>
 800ac08:	e6d7      	b.n	800a9ba <_dtoa_r+0x94a>
 800ac0a:	9a01      	ldr	r2, [sp, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d184      	bne.n	800ab1a <_dtoa_r+0xaaa>
 800ac10:	9b00      	ldr	r3, [sp, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	2331      	movs	r3, #49	; 0x31
 800ac18:	7013      	strb	r3, [r2, #0]
 800ac1a:	e6ce      	b.n	800a9ba <_dtoa_r+0x94a>
 800ac1c:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <_dtoa_r+0xbd4>)
 800ac1e:	f7ff ba95 	b.w	800a14c <_dtoa_r+0xdc>
 800ac22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f47f aa6e 	bne.w	800a106 <_dtoa_r+0x96>
 800ac2a:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <_dtoa_r+0xbd8>)
 800ac2c:	f7ff ba8e 	b.w	800a14c <_dtoa_r+0xdc>
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	dcae      	bgt.n	800ab94 <_dtoa_r+0xb24>
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	f73f aea8 	bgt.w	800a98e <_dtoa_r+0x91e>
 800ac3e:	e7a9      	b.n	800ab94 <_dtoa_r+0xb24>
 800ac40:	0800cad8 	.word	0x0800cad8
 800ac44:	0800cc35 	.word	0x0800cc35
 800ac48:	0800cc28 	.word	0x0800cc28

0800ac4c <fiprintf>:
 800ac4c:	b40e      	push	{r1, r2, r3}
 800ac4e:	b503      	push	{r0, r1, lr}
 800ac50:	4601      	mov	r1, r0
 800ac52:	ab03      	add	r3, sp, #12
 800ac54:	4805      	ldr	r0, [pc, #20]	; (800ac6c <fiprintf+0x20>)
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	f000 f89f 	bl	800ada0 <_vfiprintf_r>
 800ac62:	b002      	add	sp, #8
 800ac64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac68:	b003      	add	sp, #12
 800ac6a:	4770      	bx	lr
 800ac6c:	20000024 	.word	0x20000024

0800ac70 <malloc>:
 800ac70:	4b02      	ldr	r3, [pc, #8]	; (800ac7c <malloc+0xc>)
 800ac72:	4601      	mov	r1, r0
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	f7ff b8c3 	b.w	8009e00 <_malloc_r>
 800ac7a:	bf00      	nop
 800ac7c:	20000024 	.word	0x20000024

0800ac80 <memcpy>:
 800ac80:	440a      	add	r2, r1
 800ac82:	4291      	cmp	r1, r2
 800ac84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac88:	d100      	bne.n	800ac8c <memcpy+0xc>
 800ac8a:	4770      	bx	lr
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac96:	4291      	cmp	r1, r2
 800ac98:	d1f9      	bne.n	800ac8e <memcpy+0xe>
 800ac9a:	bd10      	pop	{r4, pc}

0800ac9c <__malloc_lock>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__malloc_lock+0x8>)
 800ac9e:	f000 bdc3 	b.w	800b828 <__retarget_lock_acquire_recursive>
 800aca2:	bf00      	nop
 800aca4:	20000a08 	.word	0x20000a08

0800aca8 <__malloc_unlock>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__malloc_unlock+0x8>)
 800acaa:	f000 bdbe 	b.w	800b82a <__retarget_lock_release_recursive>
 800acae:	bf00      	nop
 800acb0:	20000a08 	.word	0x20000a08

0800acb4 <_free_r>:
 800acb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acb6:	2900      	cmp	r1, #0
 800acb8:	d044      	beq.n	800ad44 <_free_r+0x90>
 800acba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acbe:	9001      	str	r0, [sp, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f1a1 0404 	sub.w	r4, r1, #4
 800acc6:	bfb8      	it	lt
 800acc8:	18e4      	addlt	r4, r4, r3
 800acca:	f7ff ffe7 	bl	800ac9c <__malloc_lock>
 800acce:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <_free_r+0x94>)
 800acd0:	9801      	ldr	r0, [sp, #4]
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	b933      	cbnz	r3, 800ace4 <_free_r+0x30>
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	6014      	str	r4, [r2, #0]
 800acda:	b003      	add	sp, #12
 800acdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ace0:	f7ff bfe2 	b.w	800aca8 <__malloc_unlock>
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	d908      	bls.n	800acfa <_free_r+0x46>
 800ace8:	6825      	ldr	r5, [r4, #0]
 800acea:	1961      	adds	r1, r4, r5
 800acec:	428b      	cmp	r3, r1
 800acee:	bf01      	itttt	eq
 800acf0:	6819      	ldreq	r1, [r3, #0]
 800acf2:	685b      	ldreq	r3, [r3, #4]
 800acf4:	1949      	addeq	r1, r1, r5
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	e7ed      	b.n	800acd6 <_free_r+0x22>
 800acfa:	461a      	mov	r2, r3
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	b10b      	cbz	r3, 800ad04 <_free_r+0x50>
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d9fa      	bls.n	800acfa <_free_r+0x46>
 800ad04:	6811      	ldr	r1, [r2, #0]
 800ad06:	1855      	adds	r5, r2, r1
 800ad08:	42a5      	cmp	r5, r4
 800ad0a:	d10b      	bne.n	800ad24 <_free_r+0x70>
 800ad0c:	6824      	ldr	r4, [r4, #0]
 800ad0e:	4421      	add	r1, r4
 800ad10:	1854      	adds	r4, r2, r1
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	6011      	str	r1, [r2, #0]
 800ad16:	d1e0      	bne.n	800acda <_free_r+0x26>
 800ad18:	681c      	ldr	r4, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	4421      	add	r1, r4
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	e7da      	b.n	800acda <_free_r+0x26>
 800ad24:	d902      	bls.n	800ad2c <_free_r+0x78>
 800ad26:	230c      	movs	r3, #12
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	e7d6      	b.n	800acda <_free_r+0x26>
 800ad2c:	6825      	ldr	r5, [r4, #0]
 800ad2e:	1961      	adds	r1, r4, r5
 800ad30:	428b      	cmp	r3, r1
 800ad32:	bf04      	itt	eq
 800ad34:	6819      	ldreq	r1, [r3, #0]
 800ad36:	685b      	ldreq	r3, [r3, #4]
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	bf04      	itt	eq
 800ad3c:	1949      	addeq	r1, r1, r5
 800ad3e:	6021      	streq	r1, [r4, #0]
 800ad40:	6054      	str	r4, [r2, #4]
 800ad42:	e7ca      	b.n	800acda <_free_r+0x26>
 800ad44:	b003      	add	sp, #12
 800ad46:	bd30      	pop	{r4, r5, pc}
 800ad48:	200009fc 	.word	0x200009fc

0800ad4c <__sfputc_r>:
 800ad4c:	6893      	ldr	r3, [r2, #8]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	b410      	push	{r4}
 800ad54:	6093      	str	r3, [r2, #8]
 800ad56:	da08      	bge.n	800ad6a <__sfputc_r+0x1e>
 800ad58:	6994      	ldr	r4, [r2, #24]
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	db01      	blt.n	800ad62 <__sfputc_r+0x16>
 800ad5e:	290a      	cmp	r1, #10
 800ad60:	d103      	bne.n	800ad6a <__sfputc_r+0x1e>
 800ad62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad66:	f000 badf 	b.w	800b328 <__swbuf_r>
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	1c58      	adds	r0, r3, #1
 800ad6e:	6010      	str	r0, [r2, #0]
 800ad70:	7019      	strb	r1, [r3, #0]
 800ad72:	4608      	mov	r0, r1
 800ad74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <__sfputs_r>:
 800ad7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	18d5      	adds	r5, r2, r3
 800ad84:	42ac      	cmp	r4, r5
 800ad86:	d101      	bne.n	800ad8c <__sfputs_r+0x12>
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e007      	b.n	800ad9c <__sfputs_r+0x22>
 800ad8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad90:	463a      	mov	r2, r7
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7ff ffda 	bl	800ad4c <__sfputc_r>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d1f3      	bne.n	800ad84 <__sfputs_r+0xa>
 800ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ada0 <_vfiprintf_r>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	460d      	mov	r5, r1
 800ada6:	b09d      	sub	sp, #116	; 0x74
 800ada8:	4614      	mov	r4, r2
 800adaa:	4698      	mov	r8, r3
 800adac:	4606      	mov	r6, r0
 800adae:	b118      	cbz	r0, 800adb8 <_vfiprintf_r+0x18>
 800adb0:	6983      	ldr	r3, [r0, #24]
 800adb2:	b90b      	cbnz	r3, 800adb8 <_vfiprintf_r+0x18>
 800adb4:	f000 fc9a 	bl	800b6ec <__sinit>
 800adb8:	4b89      	ldr	r3, [pc, #548]	; (800afe0 <_vfiprintf_r+0x240>)
 800adba:	429d      	cmp	r5, r3
 800adbc:	d11b      	bne.n	800adf6 <_vfiprintf_r+0x56>
 800adbe:	6875      	ldr	r5, [r6, #4]
 800adc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	d405      	bmi.n	800add2 <_vfiprintf_r+0x32>
 800adc6:	89ab      	ldrh	r3, [r5, #12]
 800adc8:	059a      	lsls	r2, r3, #22
 800adca:	d402      	bmi.n	800add2 <_vfiprintf_r+0x32>
 800adcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adce:	f000 fd2b 	bl	800b828 <__retarget_lock_acquire_recursive>
 800add2:	89ab      	ldrh	r3, [r5, #12]
 800add4:	071b      	lsls	r3, r3, #28
 800add6:	d501      	bpl.n	800addc <_vfiprintf_r+0x3c>
 800add8:	692b      	ldr	r3, [r5, #16]
 800adda:	b9eb      	cbnz	r3, 800ae18 <_vfiprintf_r+0x78>
 800addc:	4629      	mov	r1, r5
 800adde:	4630      	mov	r0, r6
 800ade0:	f000 faf4 	bl	800b3cc <__swsetup_r>
 800ade4:	b1c0      	cbz	r0, 800ae18 <_vfiprintf_r+0x78>
 800ade6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade8:	07dc      	lsls	r4, r3, #31
 800adea:	d50e      	bpl.n	800ae0a <_vfiprintf_r+0x6a>
 800adec:	f04f 30ff 	mov.w	r0, #4294967295
 800adf0:	b01d      	add	sp, #116	; 0x74
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	4b7b      	ldr	r3, [pc, #492]	; (800afe4 <_vfiprintf_r+0x244>)
 800adf8:	429d      	cmp	r5, r3
 800adfa:	d101      	bne.n	800ae00 <_vfiprintf_r+0x60>
 800adfc:	68b5      	ldr	r5, [r6, #8]
 800adfe:	e7df      	b.n	800adc0 <_vfiprintf_r+0x20>
 800ae00:	4b79      	ldr	r3, [pc, #484]	; (800afe8 <_vfiprintf_r+0x248>)
 800ae02:	429d      	cmp	r5, r3
 800ae04:	bf08      	it	eq
 800ae06:	68f5      	ldreq	r5, [r6, #12]
 800ae08:	e7da      	b.n	800adc0 <_vfiprintf_r+0x20>
 800ae0a:	89ab      	ldrh	r3, [r5, #12]
 800ae0c:	0598      	lsls	r0, r3, #22
 800ae0e:	d4ed      	bmi.n	800adec <_vfiprintf_r+0x4c>
 800ae10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae12:	f000 fd0a 	bl	800b82a <__retarget_lock_release_recursive>
 800ae16:	e7e9      	b.n	800adec <_vfiprintf_r+0x4c>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae26:	2330      	movs	r3, #48	; 0x30
 800ae28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afec <_vfiprintf_r+0x24c>
 800ae2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae30:	f04f 0901 	mov.w	r9, #1
 800ae34:	4623      	mov	r3, r4
 800ae36:	469a      	mov	sl, r3
 800ae38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae3c:	b10a      	cbz	r2, 800ae42 <_vfiprintf_r+0xa2>
 800ae3e:	2a25      	cmp	r2, #37	; 0x25
 800ae40:	d1f9      	bne.n	800ae36 <_vfiprintf_r+0x96>
 800ae42:	ebba 0b04 	subs.w	fp, sl, r4
 800ae46:	d00b      	beq.n	800ae60 <_vfiprintf_r+0xc0>
 800ae48:	465b      	mov	r3, fp
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7ff ff93 	bl	800ad7a <__sfputs_r>
 800ae54:	3001      	adds	r0, #1
 800ae56:	f000 80aa 	beq.w	800afae <_vfiprintf_r+0x20e>
 800ae5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae5c:	445a      	add	r2, fp
 800ae5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae60:	f89a 3000 	ldrb.w	r3, [sl]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 80a2 	beq.w	800afae <_vfiprintf_r+0x20e>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae74:	f10a 0a01 	add.w	sl, sl, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	9307      	str	r3, [sp, #28]
 800ae7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae80:	931a      	str	r3, [sp, #104]	; 0x68
 800ae82:	4654      	mov	r4, sl
 800ae84:	2205      	movs	r2, #5
 800ae86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8a:	4858      	ldr	r0, [pc, #352]	; (800afec <_vfiprintf_r+0x24c>)
 800ae8c:	f7f5 f9c8 	bl	8000220 <memchr>
 800ae90:	9a04      	ldr	r2, [sp, #16]
 800ae92:	b9d8      	cbnz	r0, 800aecc <_vfiprintf_r+0x12c>
 800ae94:	06d1      	lsls	r1, r2, #27
 800ae96:	bf44      	itt	mi
 800ae98:	2320      	movmi	r3, #32
 800ae9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae9e:	0713      	lsls	r3, r2, #28
 800aea0:	bf44      	itt	mi
 800aea2:	232b      	movmi	r3, #43	; 0x2b
 800aea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea8:	f89a 3000 	ldrb.w	r3, [sl]
 800aeac:	2b2a      	cmp	r3, #42	; 0x2a
 800aeae:	d015      	beq.n	800aedc <_vfiprintf_r+0x13c>
 800aeb0:	9a07      	ldr	r2, [sp, #28]
 800aeb2:	4654      	mov	r4, sl
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	f04f 0c0a 	mov.w	ip, #10
 800aeba:	4621      	mov	r1, r4
 800aebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec0:	3b30      	subs	r3, #48	; 0x30
 800aec2:	2b09      	cmp	r3, #9
 800aec4:	d94e      	bls.n	800af64 <_vfiprintf_r+0x1c4>
 800aec6:	b1b0      	cbz	r0, 800aef6 <_vfiprintf_r+0x156>
 800aec8:	9207      	str	r2, [sp, #28]
 800aeca:	e014      	b.n	800aef6 <_vfiprintf_r+0x156>
 800aecc:	eba0 0308 	sub.w	r3, r0, r8
 800aed0:	fa09 f303 	lsl.w	r3, r9, r3
 800aed4:	4313      	orrs	r3, r2
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	46a2      	mov	sl, r4
 800aeda:	e7d2      	b.n	800ae82 <_vfiprintf_r+0xe2>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	1d19      	adds	r1, r3, #4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	9103      	str	r1, [sp, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bfbb      	ittet	lt
 800aee8:	425b      	neglt	r3, r3
 800aeea:	f042 0202 	orrlt.w	r2, r2, #2
 800aeee:	9307      	strge	r3, [sp, #28]
 800aef0:	9307      	strlt	r3, [sp, #28]
 800aef2:	bfb8      	it	lt
 800aef4:	9204      	strlt	r2, [sp, #16]
 800aef6:	7823      	ldrb	r3, [r4, #0]
 800aef8:	2b2e      	cmp	r3, #46	; 0x2e
 800aefa:	d10c      	bne.n	800af16 <_vfiprintf_r+0x176>
 800aefc:	7863      	ldrb	r3, [r4, #1]
 800aefe:	2b2a      	cmp	r3, #42	; 0x2a
 800af00:	d135      	bne.n	800af6e <_vfiprintf_r+0x1ce>
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	9203      	str	r2, [sp, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bfb8      	it	lt
 800af0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800af12:	3402      	adds	r4, #2
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800affc <_vfiprintf_r+0x25c>
 800af1a:	7821      	ldrb	r1, [r4, #0]
 800af1c:	2203      	movs	r2, #3
 800af1e:	4650      	mov	r0, sl
 800af20:	f7f5 f97e 	bl	8000220 <memchr>
 800af24:	b140      	cbz	r0, 800af38 <_vfiprintf_r+0x198>
 800af26:	2340      	movs	r3, #64	; 0x40
 800af28:	eba0 000a 	sub.w	r0, r0, sl
 800af2c:	fa03 f000 	lsl.w	r0, r3, r0
 800af30:	9b04      	ldr	r3, [sp, #16]
 800af32:	4303      	orrs	r3, r0
 800af34:	3401      	adds	r4, #1
 800af36:	9304      	str	r3, [sp, #16]
 800af38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af3c:	482c      	ldr	r0, [pc, #176]	; (800aff0 <_vfiprintf_r+0x250>)
 800af3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af42:	2206      	movs	r2, #6
 800af44:	f7f5 f96c 	bl	8000220 <memchr>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d03f      	beq.n	800afcc <_vfiprintf_r+0x22c>
 800af4c:	4b29      	ldr	r3, [pc, #164]	; (800aff4 <_vfiprintf_r+0x254>)
 800af4e:	bb1b      	cbnz	r3, 800af98 <_vfiprintf_r+0x1f8>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	3307      	adds	r3, #7
 800af54:	f023 0307 	bic.w	r3, r3, #7
 800af58:	3308      	adds	r3, #8
 800af5a:	9303      	str	r3, [sp, #12]
 800af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5e:	443b      	add	r3, r7
 800af60:	9309      	str	r3, [sp, #36]	; 0x24
 800af62:	e767      	b.n	800ae34 <_vfiprintf_r+0x94>
 800af64:	fb0c 3202 	mla	r2, ip, r2, r3
 800af68:	460c      	mov	r4, r1
 800af6a:	2001      	movs	r0, #1
 800af6c:	e7a5      	b.n	800aeba <_vfiprintf_r+0x11a>
 800af6e:	2300      	movs	r3, #0
 800af70:	3401      	adds	r4, #1
 800af72:	9305      	str	r3, [sp, #20]
 800af74:	4619      	mov	r1, r3
 800af76:	f04f 0c0a 	mov.w	ip, #10
 800af7a:	4620      	mov	r0, r4
 800af7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af80:	3a30      	subs	r2, #48	; 0x30
 800af82:	2a09      	cmp	r2, #9
 800af84:	d903      	bls.n	800af8e <_vfiprintf_r+0x1ee>
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0c5      	beq.n	800af16 <_vfiprintf_r+0x176>
 800af8a:	9105      	str	r1, [sp, #20]
 800af8c:	e7c3      	b.n	800af16 <_vfiprintf_r+0x176>
 800af8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af92:	4604      	mov	r4, r0
 800af94:	2301      	movs	r3, #1
 800af96:	e7f0      	b.n	800af7a <_vfiprintf_r+0x1da>
 800af98:	ab03      	add	r3, sp, #12
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4b16      	ldr	r3, [pc, #88]	; (800aff8 <_vfiprintf_r+0x258>)
 800afa0:	a904      	add	r1, sp, #16
 800afa2:	4630      	mov	r0, r6
 800afa4:	f3af 8000 	nop.w
 800afa8:	4607      	mov	r7, r0
 800afaa:	1c78      	adds	r0, r7, #1
 800afac:	d1d6      	bne.n	800af5c <_vfiprintf_r+0x1bc>
 800afae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb0:	07d9      	lsls	r1, r3, #31
 800afb2:	d405      	bmi.n	800afc0 <_vfiprintf_r+0x220>
 800afb4:	89ab      	ldrh	r3, [r5, #12]
 800afb6:	059a      	lsls	r2, r3, #22
 800afb8:	d402      	bmi.n	800afc0 <_vfiprintf_r+0x220>
 800afba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afbc:	f000 fc35 	bl	800b82a <__retarget_lock_release_recursive>
 800afc0:	89ab      	ldrh	r3, [r5, #12]
 800afc2:	065b      	lsls	r3, r3, #25
 800afc4:	f53f af12 	bmi.w	800adec <_vfiprintf_r+0x4c>
 800afc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afca:	e711      	b.n	800adf0 <_vfiprintf_r+0x50>
 800afcc:	ab03      	add	r3, sp, #12
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	462a      	mov	r2, r5
 800afd2:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <_vfiprintf_r+0x258>)
 800afd4:	a904      	add	r1, sp, #16
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 f880 	bl	800b0dc <_printf_i>
 800afdc:	e7e4      	b.n	800afa8 <_vfiprintf_r+0x208>
 800afde:	bf00      	nop
 800afe0:	0800cce8 	.word	0x0800cce8
 800afe4:	0800cd08 	.word	0x0800cd08
 800afe8:	0800ccc8 	.word	0x0800ccc8
 800afec:	0800cc92 	.word	0x0800cc92
 800aff0:	0800cc9c 	.word	0x0800cc9c
 800aff4:	00000000 	.word	0x00000000
 800aff8:	0800ad7b 	.word	0x0800ad7b
 800affc:	0800cc98 	.word	0x0800cc98

0800b000 <_printf_common>:
 800b000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b004:	4616      	mov	r6, r2
 800b006:	4699      	mov	r9, r3
 800b008:	688a      	ldr	r2, [r1, #8]
 800b00a:	690b      	ldr	r3, [r1, #16]
 800b00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b010:	4293      	cmp	r3, r2
 800b012:	bfb8      	it	lt
 800b014:	4613      	movlt	r3, r2
 800b016:	6033      	str	r3, [r6, #0]
 800b018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b01c:	4607      	mov	r7, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b10a      	cbz	r2, 800b026 <_printf_common+0x26>
 800b022:	3301      	adds	r3, #1
 800b024:	6033      	str	r3, [r6, #0]
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	0699      	lsls	r1, r3, #26
 800b02a:	bf42      	ittt	mi
 800b02c:	6833      	ldrmi	r3, [r6, #0]
 800b02e:	3302      	addmi	r3, #2
 800b030:	6033      	strmi	r3, [r6, #0]
 800b032:	6825      	ldr	r5, [r4, #0]
 800b034:	f015 0506 	ands.w	r5, r5, #6
 800b038:	d106      	bne.n	800b048 <_printf_common+0x48>
 800b03a:	f104 0a19 	add.w	sl, r4, #25
 800b03e:	68e3      	ldr	r3, [r4, #12]
 800b040:	6832      	ldr	r2, [r6, #0]
 800b042:	1a9b      	subs	r3, r3, r2
 800b044:	42ab      	cmp	r3, r5
 800b046:	dc26      	bgt.n	800b096 <_printf_common+0x96>
 800b048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b04c:	1e13      	subs	r3, r2, #0
 800b04e:	6822      	ldr	r2, [r4, #0]
 800b050:	bf18      	it	ne
 800b052:	2301      	movne	r3, #1
 800b054:	0692      	lsls	r2, r2, #26
 800b056:	d42b      	bmi.n	800b0b0 <_printf_common+0xb0>
 800b058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b05c:	4649      	mov	r1, r9
 800b05e:	4638      	mov	r0, r7
 800b060:	47c0      	blx	r8
 800b062:	3001      	adds	r0, #1
 800b064:	d01e      	beq.n	800b0a4 <_printf_common+0xa4>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	68e5      	ldr	r5, [r4, #12]
 800b06a:	6832      	ldr	r2, [r6, #0]
 800b06c:	f003 0306 	and.w	r3, r3, #6
 800b070:	2b04      	cmp	r3, #4
 800b072:	bf08      	it	eq
 800b074:	1aad      	subeq	r5, r5, r2
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	6922      	ldr	r2, [r4, #16]
 800b07a:	bf0c      	ite	eq
 800b07c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b080:	2500      	movne	r5, #0
 800b082:	4293      	cmp	r3, r2
 800b084:	bfc4      	itt	gt
 800b086:	1a9b      	subgt	r3, r3, r2
 800b088:	18ed      	addgt	r5, r5, r3
 800b08a:	2600      	movs	r6, #0
 800b08c:	341a      	adds	r4, #26
 800b08e:	42b5      	cmp	r5, r6
 800b090:	d11a      	bne.n	800b0c8 <_printf_common+0xc8>
 800b092:	2000      	movs	r0, #0
 800b094:	e008      	b.n	800b0a8 <_printf_common+0xa8>
 800b096:	2301      	movs	r3, #1
 800b098:	4652      	mov	r2, sl
 800b09a:	4649      	mov	r1, r9
 800b09c:	4638      	mov	r0, r7
 800b09e:	47c0      	blx	r8
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d103      	bne.n	800b0ac <_printf_common+0xac>
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	e7c6      	b.n	800b03e <_printf_common+0x3e>
 800b0b0:	18e1      	adds	r1, r4, r3
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	2030      	movs	r0, #48	; 0x30
 800b0b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0ba:	4422      	add	r2, r4
 800b0bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0c4:	3302      	adds	r3, #2
 800b0c6:	e7c7      	b.n	800b058 <_printf_common+0x58>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c0      	blx	r8
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d0e6      	beq.n	800b0a4 <_printf_common+0xa4>
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	e7d9      	b.n	800b08e <_printf_common+0x8e>
	...

0800b0dc <_printf_i>:
 800b0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e0:	7e0f      	ldrb	r7, [r1, #24]
 800b0e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0e4:	2f78      	cmp	r7, #120	; 0x78
 800b0e6:	4691      	mov	r9, r2
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	469a      	mov	sl, r3
 800b0ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0f2:	d807      	bhi.n	800b104 <_printf_i+0x28>
 800b0f4:	2f62      	cmp	r7, #98	; 0x62
 800b0f6:	d80a      	bhi.n	800b10e <_printf_i+0x32>
 800b0f8:	2f00      	cmp	r7, #0
 800b0fa:	f000 80d8 	beq.w	800b2ae <_printf_i+0x1d2>
 800b0fe:	2f58      	cmp	r7, #88	; 0x58
 800b100:	f000 80a3 	beq.w	800b24a <_printf_i+0x16e>
 800b104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b10c:	e03a      	b.n	800b184 <_printf_i+0xa8>
 800b10e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b112:	2b15      	cmp	r3, #21
 800b114:	d8f6      	bhi.n	800b104 <_printf_i+0x28>
 800b116:	a101      	add	r1, pc, #4	; (adr r1, 800b11c <_printf_i+0x40>)
 800b118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b11c:	0800b175 	.word	0x0800b175
 800b120:	0800b189 	.word	0x0800b189
 800b124:	0800b105 	.word	0x0800b105
 800b128:	0800b105 	.word	0x0800b105
 800b12c:	0800b105 	.word	0x0800b105
 800b130:	0800b105 	.word	0x0800b105
 800b134:	0800b189 	.word	0x0800b189
 800b138:	0800b105 	.word	0x0800b105
 800b13c:	0800b105 	.word	0x0800b105
 800b140:	0800b105 	.word	0x0800b105
 800b144:	0800b105 	.word	0x0800b105
 800b148:	0800b295 	.word	0x0800b295
 800b14c:	0800b1b9 	.word	0x0800b1b9
 800b150:	0800b277 	.word	0x0800b277
 800b154:	0800b105 	.word	0x0800b105
 800b158:	0800b105 	.word	0x0800b105
 800b15c:	0800b2b7 	.word	0x0800b2b7
 800b160:	0800b105 	.word	0x0800b105
 800b164:	0800b1b9 	.word	0x0800b1b9
 800b168:	0800b105 	.word	0x0800b105
 800b16c:	0800b105 	.word	0x0800b105
 800b170:	0800b27f 	.word	0x0800b27f
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	1d1a      	adds	r2, r3, #4
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	602a      	str	r2, [r5, #0]
 800b17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b184:	2301      	movs	r3, #1
 800b186:	e0a3      	b.n	800b2d0 <_printf_i+0x1f4>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	6829      	ldr	r1, [r5, #0]
 800b18c:	0606      	lsls	r6, r0, #24
 800b18e:	f101 0304 	add.w	r3, r1, #4
 800b192:	d50a      	bpl.n	800b1aa <_printf_i+0xce>
 800b194:	680e      	ldr	r6, [r1, #0]
 800b196:	602b      	str	r3, [r5, #0]
 800b198:	2e00      	cmp	r6, #0
 800b19a:	da03      	bge.n	800b1a4 <_printf_i+0xc8>
 800b19c:	232d      	movs	r3, #45	; 0x2d
 800b19e:	4276      	negs	r6, r6
 800b1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a4:	485e      	ldr	r0, [pc, #376]	; (800b320 <_printf_i+0x244>)
 800b1a6:	230a      	movs	r3, #10
 800b1a8:	e019      	b.n	800b1de <_printf_i+0x102>
 800b1aa:	680e      	ldr	r6, [r1, #0]
 800b1ac:	602b      	str	r3, [r5, #0]
 800b1ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1b2:	bf18      	it	ne
 800b1b4:	b236      	sxthne	r6, r6
 800b1b6:	e7ef      	b.n	800b198 <_printf_i+0xbc>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	6820      	ldr	r0, [r4, #0]
 800b1bc:	1d19      	adds	r1, r3, #4
 800b1be:	6029      	str	r1, [r5, #0]
 800b1c0:	0601      	lsls	r1, r0, #24
 800b1c2:	d501      	bpl.n	800b1c8 <_printf_i+0xec>
 800b1c4:	681e      	ldr	r6, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <_printf_i+0xf2>
 800b1c8:	0646      	lsls	r6, r0, #25
 800b1ca:	d5fb      	bpl.n	800b1c4 <_printf_i+0xe8>
 800b1cc:	881e      	ldrh	r6, [r3, #0]
 800b1ce:	4854      	ldr	r0, [pc, #336]	; (800b320 <_printf_i+0x244>)
 800b1d0:	2f6f      	cmp	r7, #111	; 0x6f
 800b1d2:	bf0c      	ite	eq
 800b1d4:	2308      	moveq	r3, #8
 800b1d6:	230a      	movne	r3, #10
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1de:	6865      	ldr	r5, [r4, #4]
 800b1e0:	60a5      	str	r5, [r4, #8]
 800b1e2:	2d00      	cmp	r5, #0
 800b1e4:	bfa2      	ittt	ge
 800b1e6:	6821      	ldrge	r1, [r4, #0]
 800b1e8:	f021 0104 	bicge.w	r1, r1, #4
 800b1ec:	6021      	strge	r1, [r4, #0]
 800b1ee:	b90e      	cbnz	r6, 800b1f4 <_printf_i+0x118>
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	d04d      	beq.n	800b290 <_printf_i+0x1b4>
 800b1f4:	4615      	mov	r5, r2
 800b1f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1fa:	fb03 6711 	mls	r7, r3, r1, r6
 800b1fe:	5dc7      	ldrb	r7, [r0, r7]
 800b200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b204:	4637      	mov	r7, r6
 800b206:	42bb      	cmp	r3, r7
 800b208:	460e      	mov	r6, r1
 800b20a:	d9f4      	bls.n	800b1f6 <_printf_i+0x11a>
 800b20c:	2b08      	cmp	r3, #8
 800b20e:	d10b      	bne.n	800b228 <_printf_i+0x14c>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	07de      	lsls	r6, r3, #31
 800b214:	d508      	bpl.n	800b228 <_printf_i+0x14c>
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	6861      	ldr	r1, [r4, #4]
 800b21a:	4299      	cmp	r1, r3
 800b21c:	bfde      	ittt	le
 800b21e:	2330      	movle	r3, #48	; 0x30
 800b220:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b224:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b228:	1b52      	subs	r2, r2, r5
 800b22a:	6122      	str	r2, [r4, #16]
 800b22c:	f8cd a000 	str.w	sl, [sp]
 800b230:	464b      	mov	r3, r9
 800b232:	aa03      	add	r2, sp, #12
 800b234:	4621      	mov	r1, r4
 800b236:	4640      	mov	r0, r8
 800b238:	f7ff fee2 	bl	800b000 <_printf_common>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d14c      	bne.n	800b2da <_printf_i+0x1fe>
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	b004      	add	sp, #16
 800b246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24a:	4835      	ldr	r0, [pc, #212]	; (800b320 <_printf_i+0x244>)
 800b24c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b250:	6829      	ldr	r1, [r5, #0]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	f851 6b04 	ldr.w	r6, [r1], #4
 800b258:	6029      	str	r1, [r5, #0]
 800b25a:	061d      	lsls	r5, r3, #24
 800b25c:	d514      	bpl.n	800b288 <_printf_i+0x1ac>
 800b25e:	07df      	lsls	r7, r3, #31
 800b260:	bf44      	itt	mi
 800b262:	f043 0320 	orrmi.w	r3, r3, #32
 800b266:	6023      	strmi	r3, [r4, #0]
 800b268:	b91e      	cbnz	r6, 800b272 <_printf_i+0x196>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	f023 0320 	bic.w	r3, r3, #32
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	2310      	movs	r3, #16
 800b274:	e7b0      	b.n	800b1d8 <_printf_i+0xfc>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	f043 0320 	orr.w	r3, r3, #32
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	2378      	movs	r3, #120	; 0x78
 800b280:	4828      	ldr	r0, [pc, #160]	; (800b324 <_printf_i+0x248>)
 800b282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b286:	e7e3      	b.n	800b250 <_printf_i+0x174>
 800b288:	0659      	lsls	r1, r3, #25
 800b28a:	bf48      	it	mi
 800b28c:	b2b6      	uxthmi	r6, r6
 800b28e:	e7e6      	b.n	800b25e <_printf_i+0x182>
 800b290:	4615      	mov	r5, r2
 800b292:	e7bb      	b.n	800b20c <_printf_i+0x130>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	6826      	ldr	r6, [r4, #0]
 800b298:	6961      	ldr	r1, [r4, #20]
 800b29a:	1d18      	adds	r0, r3, #4
 800b29c:	6028      	str	r0, [r5, #0]
 800b29e:	0635      	lsls	r5, r6, #24
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	d501      	bpl.n	800b2a8 <_printf_i+0x1cc>
 800b2a4:	6019      	str	r1, [r3, #0]
 800b2a6:	e002      	b.n	800b2ae <_printf_i+0x1d2>
 800b2a8:	0670      	lsls	r0, r6, #25
 800b2aa:	d5fb      	bpl.n	800b2a4 <_printf_i+0x1c8>
 800b2ac:	8019      	strh	r1, [r3, #0]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	4615      	mov	r5, r2
 800b2b4:	e7ba      	b.n	800b22c <_printf_i+0x150>
 800b2b6:	682b      	ldr	r3, [r5, #0]
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	602a      	str	r2, [r5, #0]
 800b2bc:	681d      	ldr	r5, [r3, #0]
 800b2be:	6862      	ldr	r2, [r4, #4]
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f7f4 ffac 	bl	8000220 <memchr>
 800b2c8:	b108      	cbz	r0, 800b2ce <_printf_i+0x1f2>
 800b2ca:	1b40      	subs	r0, r0, r5
 800b2cc:	6060      	str	r0, [r4, #4]
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	6123      	str	r3, [r4, #16]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d8:	e7a8      	b.n	800b22c <_printf_i+0x150>
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	462a      	mov	r2, r5
 800b2de:	4649      	mov	r1, r9
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	47d0      	blx	sl
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d0ab      	beq.n	800b240 <_printf_i+0x164>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	079b      	lsls	r3, r3, #30
 800b2ec:	d413      	bmi.n	800b316 <_printf_i+0x23a>
 800b2ee:	68e0      	ldr	r0, [r4, #12]
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	4298      	cmp	r0, r3
 800b2f4:	bfb8      	it	lt
 800b2f6:	4618      	movlt	r0, r3
 800b2f8:	e7a4      	b.n	800b244 <_printf_i+0x168>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4632      	mov	r2, r6
 800b2fe:	4649      	mov	r1, r9
 800b300:	4640      	mov	r0, r8
 800b302:	47d0      	blx	sl
 800b304:	3001      	adds	r0, #1
 800b306:	d09b      	beq.n	800b240 <_printf_i+0x164>
 800b308:	3501      	adds	r5, #1
 800b30a:	68e3      	ldr	r3, [r4, #12]
 800b30c:	9903      	ldr	r1, [sp, #12]
 800b30e:	1a5b      	subs	r3, r3, r1
 800b310:	42ab      	cmp	r3, r5
 800b312:	dcf2      	bgt.n	800b2fa <_printf_i+0x21e>
 800b314:	e7eb      	b.n	800b2ee <_printf_i+0x212>
 800b316:	2500      	movs	r5, #0
 800b318:	f104 0619 	add.w	r6, r4, #25
 800b31c:	e7f5      	b.n	800b30a <_printf_i+0x22e>
 800b31e:	bf00      	nop
 800b320:	0800cca3 	.word	0x0800cca3
 800b324:	0800ccb4 	.word	0x0800ccb4

0800b328 <__swbuf_r>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	460e      	mov	r6, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	4605      	mov	r5, r0
 800b330:	b118      	cbz	r0, 800b33a <__swbuf_r+0x12>
 800b332:	6983      	ldr	r3, [r0, #24]
 800b334:	b90b      	cbnz	r3, 800b33a <__swbuf_r+0x12>
 800b336:	f000 f9d9 	bl	800b6ec <__sinit>
 800b33a:	4b21      	ldr	r3, [pc, #132]	; (800b3c0 <__swbuf_r+0x98>)
 800b33c:	429c      	cmp	r4, r3
 800b33e:	d12b      	bne.n	800b398 <__swbuf_r+0x70>
 800b340:	686c      	ldr	r4, [r5, #4]
 800b342:	69a3      	ldr	r3, [r4, #24]
 800b344:	60a3      	str	r3, [r4, #8]
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	071a      	lsls	r2, r3, #28
 800b34a:	d52f      	bpl.n	800b3ac <__swbuf_r+0x84>
 800b34c:	6923      	ldr	r3, [r4, #16]
 800b34e:	b36b      	cbz	r3, 800b3ac <__swbuf_r+0x84>
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	6820      	ldr	r0, [r4, #0]
 800b354:	1ac0      	subs	r0, r0, r3
 800b356:	6963      	ldr	r3, [r4, #20]
 800b358:	b2f6      	uxtb	r6, r6
 800b35a:	4283      	cmp	r3, r0
 800b35c:	4637      	mov	r7, r6
 800b35e:	dc04      	bgt.n	800b36a <__swbuf_r+0x42>
 800b360:	4621      	mov	r1, r4
 800b362:	4628      	mov	r0, r5
 800b364:	f000 f92e 	bl	800b5c4 <_fflush_r>
 800b368:	bb30      	cbnz	r0, 800b3b8 <__swbuf_r+0x90>
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	60a3      	str	r3, [r4, #8]
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	6022      	str	r2, [r4, #0]
 800b376:	701e      	strb	r6, [r3, #0]
 800b378:	6963      	ldr	r3, [r4, #20]
 800b37a:	3001      	adds	r0, #1
 800b37c:	4283      	cmp	r3, r0
 800b37e:	d004      	beq.n	800b38a <__swbuf_r+0x62>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	07db      	lsls	r3, r3, #31
 800b384:	d506      	bpl.n	800b394 <__swbuf_r+0x6c>
 800b386:	2e0a      	cmp	r6, #10
 800b388:	d104      	bne.n	800b394 <__swbuf_r+0x6c>
 800b38a:	4621      	mov	r1, r4
 800b38c:	4628      	mov	r0, r5
 800b38e:	f000 f919 	bl	800b5c4 <_fflush_r>
 800b392:	b988      	cbnz	r0, 800b3b8 <__swbuf_r+0x90>
 800b394:	4638      	mov	r0, r7
 800b396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <__swbuf_r+0x9c>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	d101      	bne.n	800b3a2 <__swbuf_r+0x7a>
 800b39e:	68ac      	ldr	r4, [r5, #8]
 800b3a0:	e7cf      	b.n	800b342 <__swbuf_r+0x1a>
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <__swbuf_r+0xa0>)
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	bf08      	it	eq
 800b3a8:	68ec      	ldreq	r4, [r5, #12]
 800b3aa:	e7ca      	b.n	800b342 <__swbuf_r+0x1a>
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f000 f80c 	bl	800b3cc <__swsetup_r>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d0cb      	beq.n	800b350 <__swbuf_r+0x28>
 800b3b8:	f04f 37ff 	mov.w	r7, #4294967295
 800b3bc:	e7ea      	b.n	800b394 <__swbuf_r+0x6c>
 800b3be:	bf00      	nop
 800b3c0:	0800cce8 	.word	0x0800cce8
 800b3c4:	0800cd08 	.word	0x0800cd08
 800b3c8:	0800ccc8 	.word	0x0800ccc8

0800b3cc <__swsetup_r>:
 800b3cc:	4b32      	ldr	r3, [pc, #200]	; (800b498 <__swsetup_r+0xcc>)
 800b3ce:	b570      	push	{r4, r5, r6, lr}
 800b3d0:	681d      	ldr	r5, [r3, #0]
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	b125      	cbz	r5, 800b3e2 <__swsetup_r+0x16>
 800b3d8:	69ab      	ldr	r3, [r5, #24]
 800b3da:	b913      	cbnz	r3, 800b3e2 <__swsetup_r+0x16>
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f000 f985 	bl	800b6ec <__sinit>
 800b3e2:	4b2e      	ldr	r3, [pc, #184]	; (800b49c <__swsetup_r+0xd0>)
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	d10f      	bne.n	800b408 <__swsetup_r+0x3c>
 800b3e8:	686c      	ldr	r4, [r5, #4]
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3f0:	0719      	lsls	r1, r3, #28
 800b3f2:	d42c      	bmi.n	800b44e <__swsetup_r+0x82>
 800b3f4:	06dd      	lsls	r5, r3, #27
 800b3f6:	d411      	bmi.n	800b41c <__swsetup_r+0x50>
 800b3f8:	2309      	movs	r3, #9
 800b3fa:	6033      	str	r3, [r6, #0]
 800b3fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b400:	81a3      	strh	r3, [r4, #12]
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	e03e      	b.n	800b486 <__swsetup_r+0xba>
 800b408:	4b25      	ldr	r3, [pc, #148]	; (800b4a0 <__swsetup_r+0xd4>)
 800b40a:	429c      	cmp	r4, r3
 800b40c:	d101      	bne.n	800b412 <__swsetup_r+0x46>
 800b40e:	68ac      	ldr	r4, [r5, #8]
 800b410:	e7eb      	b.n	800b3ea <__swsetup_r+0x1e>
 800b412:	4b24      	ldr	r3, [pc, #144]	; (800b4a4 <__swsetup_r+0xd8>)
 800b414:	429c      	cmp	r4, r3
 800b416:	bf08      	it	eq
 800b418:	68ec      	ldreq	r4, [r5, #12]
 800b41a:	e7e6      	b.n	800b3ea <__swsetup_r+0x1e>
 800b41c:	0758      	lsls	r0, r3, #29
 800b41e:	d512      	bpl.n	800b446 <__swsetup_r+0x7a>
 800b420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b422:	b141      	cbz	r1, 800b436 <__swsetup_r+0x6a>
 800b424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b428:	4299      	cmp	r1, r3
 800b42a:	d002      	beq.n	800b432 <__swsetup_r+0x66>
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff fc41 	bl	800acb4 <_free_r>
 800b432:	2300      	movs	r3, #0
 800b434:	6363      	str	r3, [r4, #52]	; 0x34
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	2300      	movs	r3, #0
 800b440:	6063      	str	r3, [r4, #4]
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f043 0308 	orr.w	r3, r3, #8
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	b94b      	cbnz	r3, 800b466 <__swsetup_r+0x9a>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b45c:	d003      	beq.n	800b466 <__swsetup_r+0x9a>
 800b45e:	4621      	mov	r1, r4
 800b460:	4630      	mov	r0, r6
 800b462:	f000 fa09 	bl	800b878 <__smakebuf_r>
 800b466:	89a0      	ldrh	r0, [r4, #12]
 800b468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b46c:	f010 0301 	ands.w	r3, r0, #1
 800b470:	d00a      	beq.n	800b488 <__swsetup_r+0xbc>
 800b472:	2300      	movs	r3, #0
 800b474:	60a3      	str	r3, [r4, #8]
 800b476:	6963      	ldr	r3, [r4, #20]
 800b478:	425b      	negs	r3, r3
 800b47a:	61a3      	str	r3, [r4, #24]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	b943      	cbnz	r3, 800b492 <__swsetup_r+0xc6>
 800b480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b484:	d1ba      	bne.n	800b3fc <__swsetup_r+0x30>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	0781      	lsls	r1, r0, #30
 800b48a:	bf58      	it	pl
 800b48c:	6963      	ldrpl	r3, [r4, #20]
 800b48e:	60a3      	str	r3, [r4, #8]
 800b490:	e7f4      	b.n	800b47c <__swsetup_r+0xb0>
 800b492:	2000      	movs	r0, #0
 800b494:	e7f7      	b.n	800b486 <__swsetup_r+0xba>
 800b496:	bf00      	nop
 800b498:	20000024 	.word	0x20000024
 800b49c:	0800cce8 	.word	0x0800cce8
 800b4a0:	0800cd08 	.word	0x0800cd08
 800b4a4:	0800ccc8 	.word	0x0800ccc8

0800b4a8 <abort>:
 800b4a8:	b508      	push	{r3, lr}
 800b4aa:	2006      	movs	r0, #6
 800b4ac:	f000 fa4c 	bl	800b948 <raise>
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	f7f8 fa8b 	bl	80039cc <_exit>
	...

0800b4b8 <__sflush_r>:
 800b4b8:	898a      	ldrh	r2, [r1, #12]
 800b4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	4605      	mov	r5, r0
 800b4c0:	0710      	lsls	r0, r2, #28
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	d458      	bmi.n	800b578 <__sflush_r+0xc0>
 800b4c6:	684b      	ldr	r3, [r1, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dc05      	bgt.n	800b4d8 <__sflush_r+0x20>
 800b4cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	dc02      	bgt.n	800b4d8 <__sflush_r+0x20>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4da:	2e00      	cmp	r6, #0
 800b4dc:	d0f9      	beq.n	800b4d2 <__sflush_r+0x1a>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4e4:	682f      	ldr	r7, [r5, #0]
 800b4e6:	602b      	str	r3, [r5, #0]
 800b4e8:	d032      	beq.n	800b550 <__sflush_r+0x98>
 800b4ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	075a      	lsls	r2, r3, #29
 800b4f0:	d505      	bpl.n	800b4fe <__sflush_r+0x46>
 800b4f2:	6863      	ldr	r3, [r4, #4]
 800b4f4:	1ac0      	subs	r0, r0, r3
 800b4f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4f8:	b10b      	cbz	r3, 800b4fe <__sflush_r+0x46>
 800b4fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4fc:	1ac0      	subs	r0, r0, r3
 800b4fe:	2300      	movs	r3, #0
 800b500:	4602      	mov	r2, r0
 800b502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b504:	6a21      	ldr	r1, [r4, #32]
 800b506:	4628      	mov	r0, r5
 800b508:	47b0      	blx	r6
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	d106      	bne.n	800b51e <__sflush_r+0x66>
 800b510:	6829      	ldr	r1, [r5, #0]
 800b512:	291d      	cmp	r1, #29
 800b514:	d82c      	bhi.n	800b570 <__sflush_r+0xb8>
 800b516:	4a2a      	ldr	r2, [pc, #168]	; (800b5c0 <__sflush_r+0x108>)
 800b518:	40ca      	lsrs	r2, r1
 800b51a:	07d6      	lsls	r6, r2, #31
 800b51c:	d528      	bpl.n	800b570 <__sflush_r+0xb8>
 800b51e:	2200      	movs	r2, #0
 800b520:	6062      	str	r2, [r4, #4]
 800b522:	04d9      	lsls	r1, r3, #19
 800b524:	6922      	ldr	r2, [r4, #16]
 800b526:	6022      	str	r2, [r4, #0]
 800b528:	d504      	bpl.n	800b534 <__sflush_r+0x7c>
 800b52a:	1c42      	adds	r2, r0, #1
 800b52c:	d101      	bne.n	800b532 <__sflush_r+0x7a>
 800b52e:	682b      	ldr	r3, [r5, #0]
 800b530:	b903      	cbnz	r3, 800b534 <__sflush_r+0x7c>
 800b532:	6560      	str	r0, [r4, #84]	; 0x54
 800b534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b536:	602f      	str	r7, [r5, #0]
 800b538:	2900      	cmp	r1, #0
 800b53a:	d0ca      	beq.n	800b4d2 <__sflush_r+0x1a>
 800b53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b540:	4299      	cmp	r1, r3
 800b542:	d002      	beq.n	800b54a <__sflush_r+0x92>
 800b544:	4628      	mov	r0, r5
 800b546:	f7ff fbb5 	bl	800acb4 <_free_r>
 800b54a:	2000      	movs	r0, #0
 800b54c:	6360      	str	r0, [r4, #52]	; 0x34
 800b54e:	e7c1      	b.n	800b4d4 <__sflush_r+0x1c>
 800b550:	6a21      	ldr	r1, [r4, #32]
 800b552:	2301      	movs	r3, #1
 800b554:	4628      	mov	r0, r5
 800b556:	47b0      	blx	r6
 800b558:	1c41      	adds	r1, r0, #1
 800b55a:	d1c7      	bne.n	800b4ec <__sflush_r+0x34>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0c4      	beq.n	800b4ec <__sflush_r+0x34>
 800b562:	2b1d      	cmp	r3, #29
 800b564:	d001      	beq.n	800b56a <__sflush_r+0xb2>
 800b566:	2b16      	cmp	r3, #22
 800b568:	d101      	bne.n	800b56e <__sflush_r+0xb6>
 800b56a:	602f      	str	r7, [r5, #0]
 800b56c:	e7b1      	b.n	800b4d2 <__sflush_r+0x1a>
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b574:	81a3      	strh	r3, [r4, #12]
 800b576:	e7ad      	b.n	800b4d4 <__sflush_r+0x1c>
 800b578:	690f      	ldr	r7, [r1, #16]
 800b57a:	2f00      	cmp	r7, #0
 800b57c:	d0a9      	beq.n	800b4d2 <__sflush_r+0x1a>
 800b57e:	0793      	lsls	r3, r2, #30
 800b580:	680e      	ldr	r6, [r1, #0]
 800b582:	bf08      	it	eq
 800b584:	694b      	ldreq	r3, [r1, #20]
 800b586:	600f      	str	r7, [r1, #0]
 800b588:	bf18      	it	ne
 800b58a:	2300      	movne	r3, #0
 800b58c:	eba6 0807 	sub.w	r8, r6, r7
 800b590:	608b      	str	r3, [r1, #8]
 800b592:	f1b8 0f00 	cmp.w	r8, #0
 800b596:	dd9c      	ble.n	800b4d2 <__sflush_r+0x1a>
 800b598:	6a21      	ldr	r1, [r4, #32]
 800b59a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b59c:	4643      	mov	r3, r8
 800b59e:	463a      	mov	r2, r7
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	47b0      	blx	r6
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	dc06      	bgt.n	800b5b6 <__sflush_r+0xfe>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ae:	81a3      	strh	r3, [r4, #12]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e78e      	b.n	800b4d4 <__sflush_r+0x1c>
 800b5b6:	4407      	add	r7, r0
 800b5b8:	eba8 0800 	sub.w	r8, r8, r0
 800b5bc:	e7e9      	b.n	800b592 <__sflush_r+0xda>
 800b5be:	bf00      	nop
 800b5c0:	20400001 	.word	0x20400001

0800b5c4 <_fflush_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	690b      	ldr	r3, [r1, #16]
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	b913      	cbnz	r3, 800b5d4 <_fflush_r+0x10>
 800b5ce:	2500      	movs	r5, #0
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	b118      	cbz	r0, 800b5de <_fflush_r+0x1a>
 800b5d6:	6983      	ldr	r3, [r0, #24]
 800b5d8:	b90b      	cbnz	r3, 800b5de <_fflush_r+0x1a>
 800b5da:	f000 f887 	bl	800b6ec <__sinit>
 800b5de:	4b14      	ldr	r3, [pc, #80]	; (800b630 <_fflush_r+0x6c>)
 800b5e0:	429c      	cmp	r4, r3
 800b5e2:	d11b      	bne.n	800b61c <_fflush_r+0x58>
 800b5e4:	686c      	ldr	r4, [r5, #4]
 800b5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0ef      	beq.n	800b5ce <_fflush_r+0xa>
 800b5ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5f0:	07d0      	lsls	r0, r2, #31
 800b5f2:	d404      	bmi.n	800b5fe <_fflush_r+0x3a>
 800b5f4:	0599      	lsls	r1, r3, #22
 800b5f6:	d402      	bmi.n	800b5fe <_fflush_r+0x3a>
 800b5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fa:	f000 f915 	bl	800b828 <__retarget_lock_acquire_recursive>
 800b5fe:	4628      	mov	r0, r5
 800b600:	4621      	mov	r1, r4
 800b602:	f7ff ff59 	bl	800b4b8 <__sflush_r>
 800b606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b608:	07da      	lsls	r2, r3, #31
 800b60a:	4605      	mov	r5, r0
 800b60c:	d4e0      	bmi.n	800b5d0 <_fflush_r+0xc>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	059b      	lsls	r3, r3, #22
 800b612:	d4dd      	bmi.n	800b5d0 <_fflush_r+0xc>
 800b614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b616:	f000 f908 	bl	800b82a <__retarget_lock_release_recursive>
 800b61a:	e7d9      	b.n	800b5d0 <_fflush_r+0xc>
 800b61c:	4b05      	ldr	r3, [pc, #20]	; (800b634 <_fflush_r+0x70>)
 800b61e:	429c      	cmp	r4, r3
 800b620:	d101      	bne.n	800b626 <_fflush_r+0x62>
 800b622:	68ac      	ldr	r4, [r5, #8]
 800b624:	e7df      	b.n	800b5e6 <_fflush_r+0x22>
 800b626:	4b04      	ldr	r3, [pc, #16]	; (800b638 <_fflush_r+0x74>)
 800b628:	429c      	cmp	r4, r3
 800b62a:	bf08      	it	eq
 800b62c:	68ec      	ldreq	r4, [r5, #12]
 800b62e:	e7da      	b.n	800b5e6 <_fflush_r+0x22>
 800b630:	0800cce8 	.word	0x0800cce8
 800b634:	0800cd08 	.word	0x0800cd08
 800b638:	0800ccc8 	.word	0x0800ccc8

0800b63c <std>:
 800b63c:	2300      	movs	r3, #0
 800b63e:	b510      	push	{r4, lr}
 800b640:	4604      	mov	r4, r0
 800b642:	e9c0 3300 	strd	r3, r3, [r0]
 800b646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b64a:	6083      	str	r3, [r0, #8]
 800b64c:	8181      	strh	r1, [r0, #12]
 800b64e:	6643      	str	r3, [r0, #100]	; 0x64
 800b650:	81c2      	strh	r2, [r0, #14]
 800b652:	6183      	str	r3, [r0, #24]
 800b654:	4619      	mov	r1, r3
 800b656:	2208      	movs	r2, #8
 800b658:	305c      	adds	r0, #92	; 0x5c
 800b65a:	f7fd fe2d 	bl	80092b8 <memset>
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <std+0x38>)
 800b660:	6263      	str	r3, [r4, #36]	; 0x24
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <std+0x3c>)
 800b664:	62a3      	str	r3, [r4, #40]	; 0x28
 800b666:	4b05      	ldr	r3, [pc, #20]	; (800b67c <std+0x40>)
 800b668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <std+0x44>)
 800b66c:	6224      	str	r4, [r4, #32]
 800b66e:	6323      	str	r3, [r4, #48]	; 0x30
 800b670:	bd10      	pop	{r4, pc}
 800b672:	bf00      	nop
 800b674:	0800b981 	.word	0x0800b981
 800b678:	0800b9a3 	.word	0x0800b9a3
 800b67c:	0800b9db 	.word	0x0800b9db
 800b680:	0800b9ff 	.word	0x0800b9ff

0800b684 <_cleanup_r>:
 800b684:	4901      	ldr	r1, [pc, #4]	; (800b68c <_cleanup_r+0x8>)
 800b686:	f000 b8af 	b.w	800b7e8 <_fwalk_reent>
 800b68a:	bf00      	nop
 800b68c:	0800b5c5 	.word	0x0800b5c5

0800b690 <__sfmoreglue>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	2268      	movs	r2, #104	; 0x68
 800b694:	1e4d      	subs	r5, r1, #1
 800b696:	4355      	muls	r5, r2
 800b698:	460e      	mov	r6, r1
 800b69a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b69e:	f7fe fbaf 	bl	8009e00 <_malloc_r>
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	b140      	cbz	r0, 800b6b8 <__sfmoreglue+0x28>
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b6ac:	300c      	adds	r0, #12
 800b6ae:	60a0      	str	r0, [r4, #8]
 800b6b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6b4:	f7fd fe00 	bl	80092b8 <memset>
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}

0800b6bc <__sfp_lock_acquire>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__sfp_lock_acquire+0x8>)
 800b6be:	f000 b8b3 	b.w	800b828 <__retarget_lock_acquire_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	20000a09 	.word	0x20000a09

0800b6c8 <__sfp_lock_release>:
 800b6c8:	4801      	ldr	r0, [pc, #4]	; (800b6d0 <__sfp_lock_release+0x8>)
 800b6ca:	f000 b8ae 	b.w	800b82a <__retarget_lock_release_recursive>
 800b6ce:	bf00      	nop
 800b6d0:	20000a09 	.word	0x20000a09

0800b6d4 <__sinit_lock_acquire>:
 800b6d4:	4801      	ldr	r0, [pc, #4]	; (800b6dc <__sinit_lock_acquire+0x8>)
 800b6d6:	f000 b8a7 	b.w	800b828 <__retarget_lock_acquire_recursive>
 800b6da:	bf00      	nop
 800b6dc:	20000a0a 	.word	0x20000a0a

0800b6e0 <__sinit_lock_release>:
 800b6e0:	4801      	ldr	r0, [pc, #4]	; (800b6e8 <__sinit_lock_release+0x8>)
 800b6e2:	f000 b8a2 	b.w	800b82a <__retarget_lock_release_recursive>
 800b6e6:	bf00      	nop
 800b6e8:	20000a0a 	.word	0x20000a0a

0800b6ec <__sinit>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	f7ff fff0 	bl	800b6d4 <__sinit_lock_acquire>
 800b6f4:	69a3      	ldr	r3, [r4, #24]
 800b6f6:	b11b      	cbz	r3, 800b700 <__sinit+0x14>
 800b6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6fc:	f7ff bff0 	b.w	800b6e0 <__sinit_lock_release>
 800b700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b704:	6523      	str	r3, [r4, #80]	; 0x50
 800b706:	4b13      	ldr	r3, [pc, #76]	; (800b754 <__sinit+0x68>)
 800b708:	4a13      	ldr	r2, [pc, #76]	; (800b758 <__sinit+0x6c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b70e:	42a3      	cmp	r3, r4
 800b710:	bf04      	itt	eq
 800b712:	2301      	moveq	r3, #1
 800b714:	61a3      	streq	r3, [r4, #24]
 800b716:	4620      	mov	r0, r4
 800b718:	f000 f820 	bl	800b75c <__sfp>
 800b71c:	6060      	str	r0, [r4, #4]
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 f81c 	bl	800b75c <__sfp>
 800b724:	60a0      	str	r0, [r4, #8]
 800b726:	4620      	mov	r0, r4
 800b728:	f000 f818 	bl	800b75c <__sfp>
 800b72c:	2200      	movs	r2, #0
 800b72e:	60e0      	str	r0, [r4, #12]
 800b730:	2104      	movs	r1, #4
 800b732:	6860      	ldr	r0, [r4, #4]
 800b734:	f7ff ff82 	bl	800b63c <std>
 800b738:	68a0      	ldr	r0, [r4, #8]
 800b73a:	2201      	movs	r2, #1
 800b73c:	2109      	movs	r1, #9
 800b73e:	f7ff ff7d 	bl	800b63c <std>
 800b742:	68e0      	ldr	r0, [r4, #12]
 800b744:	2202      	movs	r2, #2
 800b746:	2112      	movs	r1, #18
 800b748:	f7ff ff78 	bl	800b63c <std>
 800b74c:	2301      	movs	r3, #1
 800b74e:	61a3      	str	r3, [r4, #24]
 800b750:	e7d2      	b.n	800b6f8 <__sinit+0xc>
 800b752:	bf00      	nop
 800b754:	0800c960 	.word	0x0800c960
 800b758:	0800b685 	.word	0x0800b685

0800b75c <__sfp>:
 800b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75e:	4607      	mov	r7, r0
 800b760:	f7ff ffac 	bl	800b6bc <__sfp_lock_acquire>
 800b764:	4b1e      	ldr	r3, [pc, #120]	; (800b7e0 <__sfp+0x84>)
 800b766:	681e      	ldr	r6, [r3, #0]
 800b768:	69b3      	ldr	r3, [r6, #24]
 800b76a:	b913      	cbnz	r3, 800b772 <__sfp+0x16>
 800b76c:	4630      	mov	r0, r6
 800b76e:	f7ff ffbd 	bl	800b6ec <__sinit>
 800b772:	3648      	adds	r6, #72	; 0x48
 800b774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b778:	3b01      	subs	r3, #1
 800b77a:	d503      	bpl.n	800b784 <__sfp+0x28>
 800b77c:	6833      	ldr	r3, [r6, #0]
 800b77e:	b30b      	cbz	r3, 800b7c4 <__sfp+0x68>
 800b780:	6836      	ldr	r6, [r6, #0]
 800b782:	e7f7      	b.n	800b774 <__sfp+0x18>
 800b784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b788:	b9d5      	cbnz	r5, 800b7c0 <__sfp+0x64>
 800b78a:	4b16      	ldr	r3, [pc, #88]	; (800b7e4 <__sfp+0x88>)
 800b78c:	60e3      	str	r3, [r4, #12]
 800b78e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b792:	6665      	str	r5, [r4, #100]	; 0x64
 800b794:	f000 f847 	bl	800b826 <__retarget_lock_init_recursive>
 800b798:	f7ff ff96 	bl	800b6c8 <__sfp_lock_release>
 800b79c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7a4:	6025      	str	r5, [r4, #0]
 800b7a6:	61a5      	str	r5, [r4, #24]
 800b7a8:	2208      	movs	r2, #8
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7b0:	f7fd fd82 	bl	80092b8 <memset>
 800b7b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7bc:	4620      	mov	r0, r4
 800b7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c0:	3468      	adds	r4, #104	; 0x68
 800b7c2:	e7d9      	b.n	800b778 <__sfp+0x1c>
 800b7c4:	2104      	movs	r1, #4
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f7ff ff62 	bl	800b690 <__sfmoreglue>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	6030      	str	r0, [r6, #0]
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d1d5      	bne.n	800b780 <__sfp+0x24>
 800b7d4:	f7ff ff78 	bl	800b6c8 <__sfp_lock_release>
 800b7d8:	230c      	movs	r3, #12
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	e7ee      	b.n	800b7bc <__sfp+0x60>
 800b7de:	bf00      	nop
 800b7e0:	0800c960 	.word	0x0800c960
 800b7e4:	ffff0001 	.word	0xffff0001

0800b7e8 <_fwalk_reent>:
 800b7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	4688      	mov	r8, r1
 800b7f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b7fe:	d505      	bpl.n	800b80c <_fwalk_reent+0x24>
 800b800:	6824      	ldr	r4, [r4, #0]
 800b802:	2c00      	cmp	r4, #0
 800b804:	d1f7      	bne.n	800b7f6 <_fwalk_reent+0xe>
 800b806:	4638      	mov	r0, r7
 800b808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d907      	bls.n	800b822 <_fwalk_reent+0x3a>
 800b812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b816:	3301      	adds	r3, #1
 800b818:	d003      	beq.n	800b822 <_fwalk_reent+0x3a>
 800b81a:	4629      	mov	r1, r5
 800b81c:	4630      	mov	r0, r6
 800b81e:	47c0      	blx	r8
 800b820:	4307      	orrs	r7, r0
 800b822:	3568      	adds	r5, #104	; 0x68
 800b824:	e7e9      	b.n	800b7fa <_fwalk_reent+0x12>

0800b826 <__retarget_lock_init_recursive>:
 800b826:	4770      	bx	lr

0800b828 <__retarget_lock_acquire_recursive>:
 800b828:	4770      	bx	lr

0800b82a <__retarget_lock_release_recursive>:
 800b82a:	4770      	bx	lr

0800b82c <__swhatbuf_r>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	460e      	mov	r6, r1
 800b830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b834:	2900      	cmp	r1, #0
 800b836:	b096      	sub	sp, #88	; 0x58
 800b838:	4614      	mov	r4, r2
 800b83a:	461d      	mov	r5, r3
 800b83c:	da08      	bge.n	800b850 <__swhatbuf_r+0x24>
 800b83e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	061a      	lsls	r2, r3, #24
 800b848:	d410      	bmi.n	800b86c <__swhatbuf_r+0x40>
 800b84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b84e:	e00e      	b.n	800b86e <__swhatbuf_r+0x42>
 800b850:	466a      	mov	r2, sp
 800b852:	f000 f8fb 	bl	800ba4c <_fstat_r>
 800b856:	2800      	cmp	r0, #0
 800b858:	dbf1      	blt.n	800b83e <__swhatbuf_r+0x12>
 800b85a:	9a01      	ldr	r2, [sp, #4]
 800b85c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b864:	425a      	negs	r2, r3
 800b866:	415a      	adcs	r2, r3
 800b868:	602a      	str	r2, [r5, #0]
 800b86a:	e7ee      	b.n	800b84a <__swhatbuf_r+0x1e>
 800b86c:	2340      	movs	r3, #64	; 0x40
 800b86e:	2000      	movs	r0, #0
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	b016      	add	sp, #88	; 0x58
 800b874:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b878 <__smakebuf_r>:
 800b878:	898b      	ldrh	r3, [r1, #12]
 800b87a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b87c:	079d      	lsls	r5, r3, #30
 800b87e:	4606      	mov	r6, r0
 800b880:	460c      	mov	r4, r1
 800b882:	d507      	bpl.n	800b894 <__smakebuf_r+0x1c>
 800b884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	2301      	movs	r3, #1
 800b88e:	6163      	str	r3, [r4, #20]
 800b890:	b002      	add	sp, #8
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	ab01      	add	r3, sp, #4
 800b896:	466a      	mov	r2, sp
 800b898:	f7ff ffc8 	bl	800b82c <__swhatbuf_r>
 800b89c:	9900      	ldr	r1, [sp, #0]
 800b89e:	4605      	mov	r5, r0
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7fe faad 	bl	8009e00 <_malloc_r>
 800b8a6:	b948      	cbnz	r0, 800b8bc <__smakebuf_r+0x44>
 800b8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ac:	059a      	lsls	r2, r3, #22
 800b8ae:	d4ef      	bmi.n	800b890 <__smakebuf_r+0x18>
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	f043 0302 	orr.w	r3, r3, #2
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	e7e3      	b.n	800b884 <__smakebuf_r+0xc>
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <__smakebuf_r+0x7c>)
 800b8be:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	6020      	str	r0, [r4, #0]
 800b8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	6163      	str	r3, [r4, #20]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	6120      	str	r0, [r4, #16]
 800b8d2:	b15b      	cbz	r3, 800b8ec <__smakebuf_r+0x74>
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f8c9 	bl	800ba70 <_isatty_r>
 800b8de:	b128      	cbz	r0, 800b8ec <__smakebuf_r+0x74>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	89a0      	ldrh	r0, [r4, #12]
 800b8ee:	4305      	orrs	r5, r0
 800b8f0:	81a5      	strh	r5, [r4, #12]
 800b8f2:	e7cd      	b.n	800b890 <__smakebuf_r+0x18>
 800b8f4:	0800b685 	.word	0x0800b685

0800b8f8 <_raise_r>:
 800b8f8:	291f      	cmp	r1, #31
 800b8fa:	b538      	push	{r3, r4, r5, lr}
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	460d      	mov	r5, r1
 800b900:	d904      	bls.n	800b90c <_raise_r+0x14>
 800b902:	2316      	movs	r3, #22
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	f04f 30ff 	mov.w	r0, #4294967295
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b90e:	b112      	cbz	r2, 800b916 <_raise_r+0x1e>
 800b910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b914:	b94b      	cbnz	r3, 800b92a <_raise_r+0x32>
 800b916:	4620      	mov	r0, r4
 800b918:	f000 f830 	bl	800b97c <_getpid_r>
 800b91c:	462a      	mov	r2, r5
 800b91e:	4601      	mov	r1, r0
 800b920:	4620      	mov	r0, r4
 800b922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b926:	f000 b817 	b.w	800b958 <_kill_r>
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d00a      	beq.n	800b944 <_raise_r+0x4c>
 800b92e:	1c59      	adds	r1, r3, #1
 800b930:	d103      	bne.n	800b93a <_raise_r+0x42>
 800b932:	2316      	movs	r3, #22
 800b934:	6003      	str	r3, [r0, #0]
 800b936:	2001      	movs	r0, #1
 800b938:	e7e7      	b.n	800b90a <_raise_r+0x12>
 800b93a:	2400      	movs	r4, #0
 800b93c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b940:	4628      	mov	r0, r5
 800b942:	4798      	blx	r3
 800b944:	2000      	movs	r0, #0
 800b946:	e7e0      	b.n	800b90a <_raise_r+0x12>

0800b948 <raise>:
 800b948:	4b02      	ldr	r3, [pc, #8]	; (800b954 <raise+0xc>)
 800b94a:	4601      	mov	r1, r0
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	f7ff bfd3 	b.w	800b8f8 <_raise_r>
 800b952:	bf00      	nop
 800b954:	20000024 	.word	0x20000024

0800b958 <_kill_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_kill_r+0x20>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	f7f8 f821 	bl	80039ac <_kill>
 800b96a:	1c43      	adds	r3, r0, #1
 800b96c:	d102      	bne.n	800b974 <_kill_r+0x1c>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	b103      	cbz	r3, 800b974 <_kill_r+0x1c>
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	bf00      	nop
 800b978:	20000a04 	.word	0x20000a04

0800b97c <_getpid_r>:
 800b97c:	f7f8 b80e 	b.w	800399c <_getpid>

0800b980 <__sread>:
 800b980:	b510      	push	{r4, lr}
 800b982:	460c      	mov	r4, r1
 800b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b988:	f000 f894 	bl	800bab4 <_read_r>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	bfab      	itete	ge
 800b990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b992:	89a3      	ldrhlt	r3, [r4, #12]
 800b994:	181b      	addge	r3, r3, r0
 800b996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b99a:	bfac      	ite	ge
 800b99c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b99e:	81a3      	strhlt	r3, [r4, #12]
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <__swrite>:
 800b9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a6:	461f      	mov	r7, r3
 800b9a8:	898b      	ldrh	r3, [r1, #12]
 800b9aa:	05db      	lsls	r3, r3, #23
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	4616      	mov	r6, r2
 800b9b2:	d505      	bpl.n	800b9c0 <__swrite+0x1e>
 800b9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f000 f868 	bl	800ba90 <_lseek_r>
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	f000 b817 	b.w	800ba08 <_write_r>

0800b9da <__sseek>:
 800b9da:	b510      	push	{r4, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e2:	f000 f855 	bl	800ba90 <_lseek_r>
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	bf15      	itete	ne
 800b9ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9f6:	81a3      	strheq	r3, [r4, #12]
 800b9f8:	bf18      	it	ne
 800b9fa:	81a3      	strhne	r3, [r4, #12]
 800b9fc:	bd10      	pop	{r4, pc}

0800b9fe <__sclose>:
 800b9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba02:	f000 b813 	b.w	800ba2c <_close_r>
	...

0800ba08 <_write_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_write_r+0x20>)
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4611      	mov	r1, r2
 800ba12:	2200      	movs	r2, #0
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7f7 fb70 	bl	80030fc <_write>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_write_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_write_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20000a04 	.word	0x20000a04

0800ba2c <_close_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d06      	ldr	r5, [pc, #24]	; (800ba48 <_close_r+0x1c>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f7 ffef 	bl	8003a1a <_close>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_close_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_close_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	20000a04 	.word	0x20000a04

0800ba4c <_fstat_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	; (800ba6c <_fstat_r+0x20>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	f7f7 ffea 	bl	8003a32 <_fstat>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	d102      	bne.n	800ba68 <_fstat_r+0x1c>
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	b103      	cbz	r3, 800ba68 <_fstat_r+0x1c>
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	bd38      	pop	{r3, r4, r5, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000a04 	.word	0x20000a04

0800ba70 <_isatty_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d06      	ldr	r5, [pc, #24]	; (800ba8c <_isatty_r+0x1c>)
 800ba74:	2300      	movs	r3, #0
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	f7f7 ffe9 	bl	8003a52 <_isatty>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_isatty_r+0x1a>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_isatty_r+0x1a>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20000a04 	.word	0x20000a04

0800ba90 <_lseek_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d07      	ldr	r5, [pc, #28]	; (800bab0 <_lseek_r+0x20>)
 800ba94:	4604      	mov	r4, r0
 800ba96:	4608      	mov	r0, r1
 800ba98:	4611      	mov	r1, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f7f7 ffe2 	bl	8003a68 <_lseek>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_lseek_r+0x1e>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_lseek_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	20000a04 	.word	0x20000a04

0800bab4 <_read_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	; (800bad4 <_read_r+0x20>)
 800bab8:	4604      	mov	r4, r0
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f7 ff8c 	bl	80039e0 <_read>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_read_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_read_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	20000a04 	.word	0x20000a04

0800bad8 <pow>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	ed2d 8b02 	vpush	{d8}
 800bade:	eeb0 8a40 	vmov.f32	s16, s0
 800bae2:	eef0 8a60 	vmov.f32	s17, s1
 800bae6:	ec55 4b11 	vmov	r4, r5, d1
 800baea:	f000 f865 	bl	800bbb8 <__ieee754_pow>
 800baee:	4622      	mov	r2, r4
 800baf0:	462b      	mov	r3, r5
 800baf2:	4620      	mov	r0, r4
 800baf4:	4629      	mov	r1, r5
 800baf6:	ec57 6b10 	vmov	r6, r7, d0
 800bafa:	f7f5 f837 	bl	8000b6c <__aeabi_dcmpun>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d13b      	bne.n	800bb7a <pow+0xa2>
 800bb02:	ec51 0b18 	vmov	r0, r1, d8
 800bb06:	2200      	movs	r2, #0
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f7f4 fffd 	bl	8000b08 <__aeabi_dcmpeq>
 800bb0e:	b1b8      	cbz	r0, 800bb40 <pow+0x68>
 800bb10:	2200      	movs	r2, #0
 800bb12:	2300      	movs	r3, #0
 800bb14:	4620      	mov	r0, r4
 800bb16:	4629      	mov	r1, r5
 800bb18:	f7f4 fff6 	bl	8000b08 <__aeabi_dcmpeq>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d146      	bne.n	800bbae <pow+0xd6>
 800bb20:	ec45 4b10 	vmov	d0, r4, r5
 800bb24:	f000 fe61 	bl	800c7ea <finite>
 800bb28:	b338      	cbz	r0, 800bb7a <pow+0xa2>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	f7f4 fff3 	bl	8000b1c <__aeabi_dcmplt>
 800bb36:	b300      	cbz	r0, 800bb7a <pow+0xa2>
 800bb38:	f7fd fb94 	bl	8009264 <__errno>
 800bb3c:	2322      	movs	r3, #34	; 0x22
 800bb3e:	e01b      	b.n	800bb78 <pow+0xa0>
 800bb40:	ec47 6b10 	vmov	d0, r6, r7
 800bb44:	f000 fe51 	bl	800c7ea <finite>
 800bb48:	b9e0      	cbnz	r0, 800bb84 <pow+0xac>
 800bb4a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb4e:	eef0 0a68 	vmov.f32	s1, s17
 800bb52:	f000 fe4a 	bl	800c7ea <finite>
 800bb56:	b1a8      	cbz	r0, 800bb84 <pow+0xac>
 800bb58:	ec45 4b10 	vmov	d0, r4, r5
 800bb5c:	f000 fe45 	bl	800c7ea <finite>
 800bb60:	b180      	cbz	r0, 800bb84 <pow+0xac>
 800bb62:	4632      	mov	r2, r6
 800bb64:	463b      	mov	r3, r7
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 ffff 	bl	8000b6c <__aeabi_dcmpun>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d0e2      	beq.n	800bb38 <pow+0x60>
 800bb72:	f7fd fb77 	bl	8009264 <__errno>
 800bb76:	2321      	movs	r3, #33	; 0x21
 800bb78:	6003      	str	r3, [r0, #0]
 800bb7a:	ecbd 8b02 	vpop	{d8}
 800bb7e:	ec47 6b10 	vmov	d0, r6, r7
 800bb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb84:	2200      	movs	r2, #0
 800bb86:	2300      	movs	r3, #0
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0f2      	beq.n	800bb7a <pow+0xa2>
 800bb94:	eeb0 0a48 	vmov.f32	s0, s16
 800bb98:	eef0 0a68 	vmov.f32	s1, s17
 800bb9c:	f000 fe25 	bl	800c7ea <finite>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d0ea      	beq.n	800bb7a <pow+0xa2>
 800bba4:	ec45 4b10 	vmov	d0, r4, r5
 800bba8:	f000 fe1f 	bl	800c7ea <finite>
 800bbac:	e7c3      	b.n	800bb36 <pow+0x5e>
 800bbae:	4f01      	ldr	r7, [pc, #4]	; (800bbb4 <pow+0xdc>)
 800bbb0:	2600      	movs	r6, #0
 800bbb2:	e7e2      	b.n	800bb7a <pow+0xa2>
 800bbb4:	3ff00000 	.word	0x3ff00000

0800bbb8 <__ieee754_pow>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	ed2d 8b06 	vpush	{d8-d10}
 800bbc0:	b089      	sub	sp, #36	; 0x24
 800bbc2:	ed8d 1b00 	vstr	d1, [sp]
 800bbc6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bbca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bbce:	ea58 0102 	orrs.w	r1, r8, r2
 800bbd2:	ec57 6b10 	vmov	r6, r7, d0
 800bbd6:	d115      	bne.n	800bc04 <__ieee754_pow+0x4c>
 800bbd8:	19b3      	adds	r3, r6, r6
 800bbda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bbde:	4152      	adcs	r2, r2
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	4b89      	ldr	r3, [pc, #548]	; (800be08 <__ieee754_pow+0x250>)
 800bbe4:	4193      	sbcs	r3, r2
 800bbe6:	f080 84d2 	bcs.w	800c58e <__ieee754_pow+0x9d6>
 800bbea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbee:	4630      	mov	r0, r6
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	f7f4 fb6b 	bl	80002cc <__adddf3>
 800bbf6:	ec41 0b10 	vmov	d0, r0, r1
 800bbfa:	b009      	add	sp, #36	; 0x24
 800bbfc:	ecbd 8b06 	vpop	{d8-d10}
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	4b81      	ldr	r3, [pc, #516]	; (800be0c <__ieee754_pow+0x254>)
 800bc06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	ee10 aa10 	vmov	sl, s0
 800bc10:	463d      	mov	r5, r7
 800bc12:	dc06      	bgt.n	800bc22 <__ieee754_pow+0x6a>
 800bc14:	d101      	bne.n	800bc1a <__ieee754_pow+0x62>
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d1e7      	bne.n	800bbea <__ieee754_pow+0x32>
 800bc1a:	4598      	cmp	r8, r3
 800bc1c:	dc01      	bgt.n	800bc22 <__ieee754_pow+0x6a>
 800bc1e:	d10f      	bne.n	800bc40 <__ieee754_pow+0x88>
 800bc20:	b172      	cbz	r2, 800bc40 <__ieee754_pow+0x88>
 800bc22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bc26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bc2a:	ea55 050a 	orrs.w	r5, r5, sl
 800bc2e:	d1dc      	bne.n	800bbea <__ieee754_pow+0x32>
 800bc30:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc34:	18db      	adds	r3, r3, r3
 800bc36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bc3a:	4152      	adcs	r2, r2
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	e7d0      	b.n	800bbe2 <__ieee754_pow+0x2a>
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	da3b      	bge.n	800bcbc <__ieee754_pow+0x104>
 800bc44:	4b72      	ldr	r3, [pc, #456]	; (800be10 <__ieee754_pow+0x258>)
 800bc46:	4598      	cmp	r8, r3
 800bc48:	dc51      	bgt.n	800bcee <__ieee754_pow+0x136>
 800bc4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bc4e:	4598      	cmp	r8, r3
 800bc50:	f340 84ac 	ble.w	800c5ac <__ieee754_pow+0x9f4>
 800bc54:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bc58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc5c:	2b14      	cmp	r3, #20
 800bc5e:	dd0f      	ble.n	800bc80 <__ieee754_pow+0xc8>
 800bc60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bc64:	fa22 f103 	lsr.w	r1, r2, r3
 800bc68:	fa01 f303 	lsl.w	r3, r1, r3
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	f040 849d 	bne.w	800c5ac <__ieee754_pow+0x9f4>
 800bc72:	f001 0101 	and.w	r1, r1, #1
 800bc76:	f1c1 0302 	rsb	r3, r1, #2
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	b182      	cbz	r2, 800bca0 <__ieee754_pow+0xe8>
 800bc7e:	e05f      	b.n	800bd40 <__ieee754_pow+0x188>
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	d15b      	bne.n	800bd3c <__ieee754_pow+0x184>
 800bc84:	f1c3 0314 	rsb	r3, r3, #20
 800bc88:	fa48 f103 	asr.w	r1, r8, r3
 800bc8c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc90:	4543      	cmp	r3, r8
 800bc92:	f040 8488 	bne.w	800c5a6 <__ieee754_pow+0x9ee>
 800bc96:	f001 0101 	and.w	r1, r1, #1
 800bc9a:	f1c1 0302 	rsb	r3, r1, #2
 800bc9e:	9304      	str	r3, [sp, #16]
 800bca0:	4b5c      	ldr	r3, [pc, #368]	; (800be14 <__ieee754_pow+0x25c>)
 800bca2:	4598      	cmp	r8, r3
 800bca4:	d132      	bne.n	800bd0c <__ieee754_pow+0x154>
 800bca6:	f1b9 0f00 	cmp.w	r9, #0
 800bcaa:	f280 8478 	bge.w	800c59e <__ieee754_pow+0x9e6>
 800bcae:	4959      	ldr	r1, [pc, #356]	; (800be14 <__ieee754_pow+0x25c>)
 800bcb0:	4632      	mov	r2, r6
 800bcb2:	463b      	mov	r3, r7
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f7f4 fde9 	bl	800088c <__aeabi_ddiv>
 800bcba:	e79c      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	d13d      	bne.n	800bd40 <__ieee754_pow+0x188>
 800bcc4:	4b51      	ldr	r3, [pc, #324]	; (800be0c <__ieee754_pow+0x254>)
 800bcc6:	4598      	cmp	r8, r3
 800bcc8:	d1ea      	bne.n	800bca0 <__ieee754_pow+0xe8>
 800bcca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bcce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bcd2:	ea53 030a 	orrs.w	r3, r3, sl
 800bcd6:	f000 845a 	beq.w	800c58e <__ieee754_pow+0x9d6>
 800bcda:	4b4f      	ldr	r3, [pc, #316]	; (800be18 <__ieee754_pow+0x260>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	dd08      	ble.n	800bcf2 <__ieee754_pow+0x13a>
 800bce0:	f1b9 0f00 	cmp.w	r9, #0
 800bce4:	f2c0 8457 	blt.w	800c596 <__ieee754_pow+0x9de>
 800bce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcec:	e783      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e7e5      	b.n	800bcbe <__ieee754_pow+0x106>
 800bcf2:	f1b9 0f00 	cmp.w	r9, #0
 800bcf6:	f04f 0000 	mov.w	r0, #0
 800bcfa:	f04f 0100 	mov.w	r1, #0
 800bcfe:	f6bf af7a 	bge.w	800bbf6 <__ieee754_pow+0x3e>
 800bd02:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bd06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bd0a:	e774      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bd0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bd10:	d106      	bne.n	800bd20 <__ieee754_pow+0x168>
 800bd12:	4632      	mov	r2, r6
 800bd14:	463b      	mov	r3, r7
 800bd16:	4630      	mov	r0, r6
 800bd18:	4639      	mov	r1, r7
 800bd1a:	f7f4 fc8d 	bl	8000638 <__aeabi_dmul>
 800bd1e:	e76a      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bd20:	4b3e      	ldr	r3, [pc, #248]	; (800be1c <__ieee754_pow+0x264>)
 800bd22:	4599      	cmp	r9, r3
 800bd24:	d10c      	bne.n	800bd40 <__ieee754_pow+0x188>
 800bd26:	2d00      	cmp	r5, #0
 800bd28:	db0a      	blt.n	800bd40 <__ieee754_pow+0x188>
 800bd2a:	ec47 6b10 	vmov	d0, r6, r7
 800bd2e:	b009      	add	sp, #36	; 0x24
 800bd30:	ecbd 8b06 	vpop	{d8-d10}
 800bd34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	f000 bc6c 	b.w	800c614 <__ieee754_sqrt>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9304      	str	r3, [sp, #16]
 800bd40:	ec47 6b10 	vmov	d0, r6, r7
 800bd44:	f000 fd48 	bl	800c7d8 <fabs>
 800bd48:	ec51 0b10 	vmov	r0, r1, d0
 800bd4c:	f1ba 0f00 	cmp.w	sl, #0
 800bd50:	d129      	bne.n	800bda6 <__ieee754_pow+0x1ee>
 800bd52:	b124      	cbz	r4, 800bd5e <__ieee754_pow+0x1a6>
 800bd54:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <__ieee754_pow+0x25c>)
 800bd56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d123      	bne.n	800bda6 <__ieee754_pow+0x1ee>
 800bd5e:	f1b9 0f00 	cmp.w	r9, #0
 800bd62:	da05      	bge.n	800bd70 <__ieee754_pow+0x1b8>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	2000      	movs	r0, #0
 800bd6a:	492a      	ldr	r1, [pc, #168]	; (800be14 <__ieee754_pow+0x25c>)
 800bd6c:	f7f4 fd8e 	bl	800088c <__aeabi_ddiv>
 800bd70:	2d00      	cmp	r5, #0
 800bd72:	f6bf af40 	bge.w	800bbf6 <__ieee754_pow+0x3e>
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd80:	4323      	orrs	r3, r4
 800bd82:	d108      	bne.n	800bd96 <__ieee754_pow+0x1de>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	f7f4 fa9c 	bl	80002c8 <__aeabi_dsub>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	e78f      	b.n	800bcb6 <__ieee754_pow+0xfe>
 800bd96:	9b04      	ldr	r3, [sp, #16]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	f47f af2c 	bne.w	800bbf6 <__ieee754_pow+0x3e>
 800bd9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bda2:	4619      	mov	r1, r3
 800bda4:	e727      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bda6:	0feb      	lsrs	r3, r5, #31
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	9306      	str	r3, [sp, #24]
 800bdac:	9a06      	ldr	r2, [sp, #24]
 800bdae:	9b04      	ldr	r3, [sp, #16]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	d102      	bne.n	800bdba <__ieee754_pow+0x202>
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	e7e6      	b.n	800bd88 <__ieee754_pow+0x1d0>
 800bdba:	4b19      	ldr	r3, [pc, #100]	; (800be20 <__ieee754_pow+0x268>)
 800bdbc:	4598      	cmp	r8, r3
 800bdbe:	f340 80fb 	ble.w	800bfb8 <__ieee754_pow+0x400>
 800bdc2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bdc6:	4598      	cmp	r8, r3
 800bdc8:	4b13      	ldr	r3, [pc, #76]	; (800be18 <__ieee754_pow+0x260>)
 800bdca:	dd0c      	ble.n	800bde6 <__ieee754_pow+0x22e>
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	dc0f      	bgt.n	800bdf0 <__ieee754_pow+0x238>
 800bdd0:	f1b9 0f00 	cmp.w	r9, #0
 800bdd4:	da0f      	bge.n	800bdf6 <__ieee754_pow+0x23e>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	b009      	add	sp, #36	; 0x24
 800bdda:	ecbd 8b06 	vpop	{d8-d10}
 800bdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde2:	f000 bcf0 	b.w	800c7c6 <__math_oflow>
 800bde6:	429c      	cmp	r4, r3
 800bde8:	dbf2      	blt.n	800bdd0 <__ieee754_pow+0x218>
 800bdea:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <__ieee754_pow+0x25c>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	dd19      	ble.n	800be24 <__ieee754_pow+0x26c>
 800bdf0:	f1b9 0f00 	cmp.w	r9, #0
 800bdf4:	dcef      	bgt.n	800bdd6 <__ieee754_pow+0x21e>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	b009      	add	sp, #36	; 0x24
 800bdfa:	ecbd 8b06 	vpop	{d8-d10}
 800bdfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be02:	f000 bcd7 	b.w	800c7b4 <__math_uflow>
 800be06:	bf00      	nop
 800be08:	fff00000 	.word	0xfff00000
 800be0c:	7ff00000 	.word	0x7ff00000
 800be10:	433fffff 	.word	0x433fffff
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	3fefffff 	.word	0x3fefffff
 800be1c:	3fe00000 	.word	0x3fe00000
 800be20:	41e00000 	.word	0x41e00000
 800be24:	4b60      	ldr	r3, [pc, #384]	; (800bfa8 <__ieee754_pow+0x3f0>)
 800be26:	2200      	movs	r2, #0
 800be28:	f7f4 fa4e 	bl	80002c8 <__aeabi_dsub>
 800be2c:	a354      	add	r3, pc, #336	; (adr r3, 800bf80 <__ieee754_pow+0x3c8>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	f7f4 fbff 	bl	8000638 <__aeabi_dmul>
 800be3a:	a353      	add	r3, pc, #332	; (adr r3, 800bf88 <__ieee754_pow+0x3d0>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	4606      	mov	r6, r0
 800be42:	460f      	mov	r7, r1
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 fbf6 	bl	8000638 <__aeabi_dmul>
 800be4c:	4b57      	ldr	r3, [pc, #348]	; (800bfac <__ieee754_pow+0x3f4>)
 800be4e:	4682      	mov	sl, r0
 800be50:	468b      	mov	fp, r1
 800be52:	2200      	movs	r2, #0
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	f7f4 fbee 	bl	8000638 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	a14b      	add	r1, pc, #300	; (adr r1, 800bf90 <__ieee754_pow+0x3d8>)
 800be62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be66:	f7f4 fa2f 	bl	80002c8 <__aeabi_dsub>
 800be6a:	4622      	mov	r2, r4
 800be6c:	462b      	mov	r3, r5
 800be6e:	f7f4 fbe3 	bl	8000638 <__aeabi_dmul>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	2000      	movs	r0, #0
 800be78:	494d      	ldr	r1, [pc, #308]	; (800bfb0 <__ieee754_pow+0x3f8>)
 800be7a:	f7f4 fa25 	bl	80002c8 <__aeabi_dsub>
 800be7e:	4622      	mov	r2, r4
 800be80:	4680      	mov	r8, r0
 800be82:	4689      	mov	r9, r1
 800be84:	462b      	mov	r3, r5
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 fbd5 	bl	8000638 <__aeabi_dmul>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	f7f4 fbcf 	bl	8000638 <__aeabi_dmul>
 800be9a:	a33f      	add	r3, pc, #252	; (adr r3, 800bf98 <__ieee754_pow+0x3e0>)
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	f7f4 fbca 	bl	8000638 <__aeabi_dmul>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4650      	mov	r0, sl
 800beaa:	4659      	mov	r1, fp
 800beac:	f7f4 fa0c 	bl	80002c8 <__aeabi_dsub>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4680      	mov	r8, r0
 800beb6:	4689      	mov	r9, r1
 800beb8:	4630      	mov	r0, r6
 800beba:	4639      	mov	r1, r7
 800bebc:	f7f4 fa06 	bl	80002cc <__adddf3>
 800bec0:	2000      	movs	r0, #0
 800bec2:	4632      	mov	r2, r6
 800bec4:	463b      	mov	r3, r7
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	f7f4 f9fd 	bl	80002c8 <__aeabi_dsub>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4640      	mov	r0, r8
 800bed4:	4649      	mov	r1, r9
 800bed6:	f7f4 f9f7 	bl	80002c8 <__aeabi_dsub>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	9a06      	ldr	r2, [sp, #24]
 800bede:	3b01      	subs	r3, #1
 800bee0:	4313      	orrs	r3, r2
 800bee2:	4682      	mov	sl, r0
 800bee4:	468b      	mov	fp, r1
 800bee6:	f040 81e7 	bne.w	800c2b8 <__ieee754_pow+0x700>
 800beea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bfa0 <__ieee754_pow+0x3e8>
 800beee:	eeb0 8a47 	vmov.f32	s16, s14
 800bef2:	eef0 8a67 	vmov.f32	s17, s15
 800bef6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800befa:	2600      	movs	r6, #0
 800befc:	4632      	mov	r2, r6
 800befe:	463b      	mov	r3, r7
 800bf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf04:	f7f4 f9e0 	bl	80002c8 <__aeabi_dsub>
 800bf08:	4622      	mov	r2, r4
 800bf0a:	462b      	mov	r3, r5
 800bf0c:	f7f4 fb94 	bl	8000638 <__aeabi_dmul>
 800bf10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf14:	4680      	mov	r8, r0
 800bf16:	4689      	mov	r9, r1
 800bf18:	4650      	mov	r0, sl
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	f7f4 fb8c 	bl	8000638 <__aeabi_dmul>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4640      	mov	r0, r8
 800bf26:	4649      	mov	r1, r9
 800bf28:	f7f4 f9d0 	bl	80002cc <__adddf3>
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	463b      	mov	r3, r7
 800bf30:	4680      	mov	r8, r0
 800bf32:	4689      	mov	r9, r1
 800bf34:	4620      	mov	r0, r4
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7f4 fb7e 	bl	8000638 <__aeabi_dmul>
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
 800bf42:	4602      	mov	r2, r0
 800bf44:	4649      	mov	r1, r9
 800bf46:	4640      	mov	r0, r8
 800bf48:	f7f4 f9c0 	bl	80002cc <__adddf3>
 800bf4c:	4b19      	ldr	r3, [pc, #100]	; (800bfb4 <__ieee754_pow+0x3fc>)
 800bf4e:	4299      	cmp	r1, r3
 800bf50:	ec45 4b19 	vmov	d9, r4, r5
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	468b      	mov	fp, r1
 800bf5a:	f340 82f1 	ble.w	800c540 <__ieee754_pow+0x988>
 800bf5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bf62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bf66:	4303      	orrs	r3, r0
 800bf68:	f000 81e4 	beq.w	800c334 <__ieee754_pow+0x77c>
 800bf6c:	ec51 0b18 	vmov	r0, r1, d8
 800bf70:	2200      	movs	r2, #0
 800bf72:	2300      	movs	r3, #0
 800bf74:	f7f4 fdd2 	bl	8000b1c <__aeabi_dcmplt>
 800bf78:	3800      	subs	r0, #0
 800bf7a:	bf18      	it	ne
 800bf7c:	2001      	movne	r0, #1
 800bf7e:	e72b      	b.n	800bdd8 <__ieee754_pow+0x220>
 800bf80:	60000000 	.word	0x60000000
 800bf84:	3ff71547 	.word	0x3ff71547
 800bf88:	f85ddf44 	.word	0xf85ddf44
 800bf8c:	3e54ae0b 	.word	0x3e54ae0b
 800bf90:	55555555 	.word	0x55555555
 800bf94:	3fd55555 	.word	0x3fd55555
 800bf98:	652b82fe 	.word	0x652b82fe
 800bf9c:	3ff71547 	.word	0x3ff71547
 800bfa0:	00000000 	.word	0x00000000
 800bfa4:	bff00000 	.word	0xbff00000
 800bfa8:	3ff00000 	.word	0x3ff00000
 800bfac:	3fd00000 	.word	0x3fd00000
 800bfb0:	3fe00000 	.word	0x3fe00000
 800bfb4:	408fffff 	.word	0x408fffff
 800bfb8:	4bd5      	ldr	r3, [pc, #852]	; (800c310 <__ieee754_pow+0x758>)
 800bfba:	402b      	ands	r3, r5
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	b92b      	cbnz	r3, 800bfcc <__ieee754_pow+0x414>
 800bfc0:	4bd4      	ldr	r3, [pc, #848]	; (800c314 <__ieee754_pow+0x75c>)
 800bfc2:	f7f4 fb39 	bl	8000638 <__aeabi_dmul>
 800bfc6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bfca:	460c      	mov	r4, r1
 800bfcc:	1523      	asrs	r3, r4, #20
 800bfce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bfd2:	4413      	add	r3, r2
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	4bd0      	ldr	r3, [pc, #832]	; (800c318 <__ieee754_pow+0x760>)
 800bfd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bfdc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bfe6:	dd08      	ble.n	800bffa <__ieee754_pow+0x442>
 800bfe8:	4bcc      	ldr	r3, [pc, #816]	; (800c31c <__ieee754_pow+0x764>)
 800bfea:	429c      	cmp	r4, r3
 800bfec:	f340 8162 	ble.w	800c2b4 <__ieee754_pow+0x6fc>
 800bff0:	9b05      	ldr	r3, [sp, #20]
 800bff2:	3301      	adds	r3, #1
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bffa:	2400      	movs	r4, #0
 800bffc:	00e3      	lsls	r3, r4, #3
 800bffe:	9307      	str	r3, [sp, #28]
 800c000:	4bc7      	ldr	r3, [pc, #796]	; (800c320 <__ieee754_pow+0x768>)
 800c002:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c006:	ed93 7b00 	vldr	d7, [r3]
 800c00a:	4629      	mov	r1, r5
 800c00c:	ec53 2b17 	vmov	r2, r3, d7
 800c010:	eeb0 9a47 	vmov.f32	s18, s14
 800c014:	eef0 9a67 	vmov.f32	s19, s15
 800c018:	4682      	mov	sl, r0
 800c01a:	f7f4 f955 	bl	80002c8 <__aeabi_dsub>
 800c01e:	4652      	mov	r2, sl
 800c020:	4606      	mov	r6, r0
 800c022:	460f      	mov	r7, r1
 800c024:	462b      	mov	r3, r5
 800c026:	ec51 0b19 	vmov	r0, r1, d9
 800c02a:	f7f4 f94f 	bl	80002cc <__adddf3>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	2000      	movs	r0, #0
 800c034:	49bb      	ldr	r1, [pc, #748]	; (800c324 <__ieee754_pow+0x76c>)
 800c036:	f7f4 fc29 	bl	800088c <__aeabi_ddiv>
 800c03a:	ec41 0b1a 	vmov	d10, r0, r1
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7f4 faf7 	bl	8000638 <__aeabi_dmul>
 800c04a:	2300      	movs	r3, #0
 800c04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c050:	9302      	str	r3, [sp, #8]
 800c052:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c056:	46ab      	mov	fp, r5
 800c058:	106d      	asrs	r5, r5, #1
 800c05a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c05e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c062:	ec41 0b18 	vmov	d8, r0, r1
 800c066:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c06a:	2200      	movs	r2, #0
 800c06c:	4640      	mov	r0, r8
 800c06e:	4649      	mov	r1, r9
 800c070:	4614      	mov	r4, r2
 800c072:	461d      	mov	r5, r3
 800c074:	f7f4 fae0 	bl	8000638 <__aeabi_dmul>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4630      	mov	r0, r6
 800c07e:	4639      	mov	r1, r7
 800c080:	f7f4 f922 	bl	80002c8 <__aeabi_dsub>
 800c084:	ec53 2b19 	vmov	r2, r3, d9
 800c088:	4606      	mov	r6, r0
 800c08a:	460f      	mov	r7, r1
 800c08c:	4620      	mov	r0, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	f7f4 f91a 	bl	80002c8 <__aeabi_dsub>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	f7f4 f914 	bl	80002c8 <__aeabi_dsub>
 800c0a0:	4642      	mov	r2, r8
 800c0a2:	464b      	mov	r3, r9
 800c0a4:	f7f4 fac8 	bl	8000638 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	f7f4 f90a 	bl	80002c8 <__aeabi_dsub>
 800c0b4:	ec53 2b1a 	vmov	r2, r3, d10
 800c0b8:	f7f4 fabe 	bl	8000638 <__aeabi_dmul>
 800c0bc:	ec53 2b18 	vmov	r2, r3, d8
 800c0c0:	ec41 0b19 	vmov	d9, r0, r1
 800c0c4:	ec51 0b18 	vmov	r0, r1, d8
 800c0c8:	f7f4 fab6 	bl	8000638 <__aeabi_dmul>
 800c0cc:	a37c      	add	r3, pc, #496	; (adr r3, 800c2c0 <__ieee754_pow+0x708>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	460d      	mov	r5, r1
 800c0d6:	f7f4 faaf 	bl	8000638 <__aeabi_dmul>
 800c0da:	a37b      	add	r3, pc, #492	; (adr r3, 800c2c8 <__ieee754_pow+0x710>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f8f4 	bl	80002cc <__adddf3>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	462b      	mov	r3, r5
 800c0e8:	f7f4 faa6 	bl	8000638 <__aeabi_dmul>
 800c0ec:	a378      	add	r3, pc, #480	; (adr r3, 800c2d0 <__ieee754_pow+0x718>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 f8eb 	bl	80002cc <__adddf3>
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	f7f4 fa9d 	bl	8000638 <__aeabi_dmul>
 800c0fe:	a376      	add	r3, pc, #472	; (adr r3, 800c2d8 <__ieee754_pow+0x720>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f8e2 	bl	80002cc <__adddf3>
 800c108:	4622      	mov	r2, r4
 800c10a:	462b      	mov	r3, r5
 800c10c:	f7f4 fa94 	bl	8000638 <__aeabi_dmul>
 800c110:	a373      	add	r3, pc, #460	; (adr r3, 800c2e0 <__ieee754_pow+0x728>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f8d9 	bl	80002cc <__adddf3>
 800c11a:	4622      	mov	r2, r4
 800c11c:	462b      	mov	r3, r5
 800c11e:	f7f4 fa8b 	bl	8000638 <__aeabi_dmul>
 800c122:	a371      	add	r3, pc, #452	; (adr r3, 800c2e8 <__ieee754_pow+0x730>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f8d0 	bl	80002cc <__adddf3>
 800c12c:	4622      	mov	r2, r4
 800c12e:	4606      	mov	r6, r0
 800c130:	460f      	mov	r7, r1
 800c132:	462b      	mov	r3, r5
 800c134:	4620      	mov	r0, r4
 800c136:	4629      	mov	r1, r5
 800c138:	f7f4 fa7e 	bl	8000638 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 fa78 	bl	8000638 <__aeabi_dmul>
 800c148:	4642      	mov	r2, r8
 800c14a:	4604      	mov	r4, r0
 800c14c:	460d      	mov	r5, r1
 800c14e:	464b      	mov	r3, r9
 800c150:	ec51 0b18 	vmov	r0, r1, d8
 800c154:	f7f4 f8ba 	bl	80002cc <__adddf3>
 800c158:	ec53 2b19 	vmov	r2, r3, d9
 800c15c:	f7f4 fa6c 	bl	8000638 <__aeabi_dmul>
 800c160:	4622      	mov	r2, r4
 800c162:	462b      	mov	r3, r5
 800c164:	f7f4 f8b2 	bl	80002cc <__adddf3>
 800c168:	4642      	mov	r2, r8
 800c16a:	4682      	mov	sl, r0
 800c16c:	468b      	mov	fp, r1
 800c16e:	464b      	mov	r3, r9
 800c170:	4640      	mov	r0, r8
 800c172:	4649      	mov	r1, r9
 800c174:	f7f4 fa60 	bl	8000638 <__aeabi_dmul>
 800c178:	4b6b      	ldr	r3, [pc, #428]	; (800c328 <__ieee754_pow+0x770>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	4606      	mov	r6, r0
 800c17e:	460f      	mov	r7, r1
 800c180:	f7f4 f8a4 	bl	80002cc <__adddf3>
 800c184:	4652      	mov	r2, sl
 800c186:	465b      	mov	r3, fp
 800c188:	f7f4 f8a0 	bl	80002cc <__adddf3>
 800c18c:	2000      	movs	r0, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f4 fa4d 	bl	8000638 <__aeabi_dmul>
 800c19e:	4b62      	ldr	r3, [pc, #392]	; (800c328 <__ieee754_pow+0x770>)
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	4689      	mov	r9, r1
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 f88d 	bl	80002c8 <__aeabi_dsub>
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	463b      	mov	r3, r7
 800c1b2:	f7f4 f889 	bl	80002c8 <__aeabi_dsub>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4650      	mov	r0, sl
 800c1bc:	4659      	mov	r1, fp
 800c1be:	f7f4 f883 	bl	80002c8 <__aeabi_dsub>
 800c1c2:	ec53 2b18 	vmov	r2, r3, d8
 800c1c6:	f7f4 fa37 	bl	8000638 <__aeabi_dmul>
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	462b      	mov	r3, r5
 800c1d2:	ec51 0b19 	vmov	r0, r1, d9
 800c1d6:	f7f4 fa2f 	bl	8000638 <__aeabi_dmul>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4630      	mov	r0, r6
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	f7f4 f873 	bl	80002cc <__adddf3>
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	460f      	mov	r7, r1
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4640      	mov	r0, r8
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	f7f4 f86b 	bl	80002cc <__adddf3>
 800c1f6:	a33e      	add	r3, pc, #248	; (adr r3, 800c2f0 <__ieee754_pow+0x738>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	460d      	mov	r5, r1
 800c202:	f7f4 fa19 	bl	8000638 <__aeabi_dmul>
 800c206:	4642      	mov	r2, r8
 800c208:	ec41 0b18 	vmov	d8, r0, r1
 800c20c:	464b      	mov	r3, r9
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	f7f4 f859 	bl	80002c8 <__aeabi_dsub>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4630      	mov	r0, r6
 800c21c:	4639      	mov	r1, r7
 800c21e:	f7f4 f853 	bl	80002c8 <__aeabi_dsub>
 800c222:	a335      	add	r3, pc, #212	; (adr r3, 800c2f8 <__ieee754_pow+0x740>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	f7f4 fa06 	bl	8000638 <__aeabi_dmul>
 800c22c:	a334      	add	r3, pc, #208	; (adr r3, 800c300 <__ieee754_pow+0x748>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	4606      	mov	r6, r0
 800c234:	460f      	mov	r7, r1
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 f9fd 	bl	8000638 <__aeabi_dmul>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4630      	mov	r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	f7f4 f841 	bl	80002cc <__adddf3>
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4b37      	ldr	r3, [pc, #220]	; (800c32c <__ieee754_pow+0x774>)
 800c24e:	4413      	add	r3, r2
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f83a 	bl	80002cc <__adddf3>
 800c258:	4682      	mov	sl, r0
 800c25a:	9805      	ldr	r0, [sp, #20]
 800c25c:	468b      	mov	fp, r1
 800c25e:	f7f4 f981 	bl	8000564 <__aeabi_i2d>
 800c262:	9a07      	ldr	r2, [sp, #28]
 800c264:	4b32      	ldr	r3, [pc, #200]	; (800c330 <__ieee754_pow+0x778>)
 800c266:	4413      	add	r3, r2
 800c268:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c26c:	4606      	mov	r6, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	4652      	mov	r2, sl
 800c272:	465b      	mov	r3, fp
 800c274:	ec51 0b18 	vmov	r0, r1, d8
 800c278:	f7f4 f828 	bl	80002cc <__adddf3>
 800c27c:	4642      	mov	r2, r8
 800c27e:	464b      	mov	r3, r9
 800c280:	f7f4 f824 	bl	80002cc <__adddf3>
 800c284:	4632      	mov	r2, r6
 800c286:	463b      	mov	r3, r7
 800c288:	f7f4 f820 	bl	80002cc <__adddf3>
 800c28c:	2000      	movs	r0, #0
 800c28e:	4632      	mov	r2, r6
 800c290:	463b      	mov	r3, r7
 800c292:	4604      	mov	r4, r0
 800c294:	460d      	mov	r5, r1
 800c296:	f7f4 f817 	bl	80002c8 <__aeabi_dsub>
 800c29a:	4642      	mov	r2, r8
 800c29c:	464b      	mov	r3, r9
 800c29e:	f7f4 f813 	bl	80002c8 <__aeabi_dsub>
 800c2a2:	ec53 2b18 	vmov	r2, r3, d8
 800c2a6:	f7f4 f80f 	bl	80002c8 <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	4659      	mov	r1, fp
 800c2b2:	e610      	b.n	800bed6 <__ieee754_pow+0x31e>
 800c2b4:	2401      	movs	r4, #1
 800c2b6:	e6a1      	b.n	800bffc <__ieee754_pow+0x444>
 800c2b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c308 <__ieee754_pow+0x750>
 800c2bc:	e617      	b.n	800beee <__ieee754_pow+0x336>
 800c2be:	bf00      	nop
 800c2c0:	4a454eef 	.word	0x4a454eef
 800c2c4:	3fca7e28 	.word	0x3fca7e28
 800c2c8:	93c9db65 	.word	0x93c9db65
 800c2cc:	3fcd864a 	.word	0x3fcd864a
 800c2d0:	a91d4101 	.word	0xa91d4101
 800c2d4:	3fd17460 	.word	0x3fd17460
 800c2d8:	518f264d 	.word	0x518f264d
 800c2dc:	3fd55555 	.word	0x3fd55555
 800c2e0:	db6fabff 	.word	0xdb6fabff
 800c2e4:	3fdb6db6 	.word	0x3fdb6db6
 800c2e8:	33333303 	.word	0x33333303
 800c2ec:	3fe33333 	.word	0x3fe33333
 800c2f0:	e0000000 	.word	0xe0000000
 800c2f4:	3feec709 	.word	0x3feec709
 800c2f8:	dc3a03fd 	.word	0xdc3a03fd
 800c2fc:	3feec709 	.word	0x3feec709
 800c300:	145b01f5 	.word	0x145b01f5
 800c304:	be3e2fe0 	.word	0xbe3e2fe0
 800c308:	00000000 	.word	0x00000000
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	43400000 	.word	0x43400000
 800c318:	0003988e 	.word	0x0003988e
 800c31c:	000bb679 	.word	0x000bb679
 800c320:	0800cd28 	.word	0x0800cd28
 800c324:	3ff00000 	.word	0x3ff00000
 800c328:	40080000 	.word	0x40080000
 800c32c:	0800cd48 	.word	0x0800cd48
 800c330:	0800cd38 	.word	0x0800cd38
 800c334:	a3b5      	add	r3, pc, #724	; (adr r3, 800c60c <__ieee754_pow+0xa54>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	4640      	mov	r0, r8
 800c33c:	4649      	mov	r1, r9
 800c33e:	f7f3 ffc5 	bl	80002cc <__adddf3>
 800c342:	4622      	mov	r2, r4
 800c344:	ec41 0b1a 	vmov	d10, r0, r1
 800c348:	462b      	mov	r3, r5
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	f7f3 ffbb 	bl	80002c8 <__aeabi_dsub>
 800c352:	4602      	mov	r2, r0
 800c354:	460b      	mov	r3, r1
 800c356:	ec51 0b1a 	vmov	r0, r1, d10
 800c35a:	f7f4 fbfd 	bl	8000b58 <__aeabi_dcmpgt>
 800c35e:	2800      	cmp	r0, #0
 800c360:	f47f ae04 	bne.w	800bf6c <__ieee754_pow+0x3b4>
 800c364:	4aa4      	ldr	r2, [pc, #656]	; (800c5f8 <__ieee754_pow+0xa40>)
 800c366:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c36a:	4293      	cmp	r3, r2
 800c36c:	f340 8108 	ble.w	800c580 <__ieee754_pow+0x9c8>
 800c370:	151b      	asrs	r3, r3, #20
 800c372:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c376:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c37a:	fa4a f303 	asr.w	r3, sl, r3
 800c37e:	445b      	add	r3, fp
 800c380:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c384:	4e9d      	ldr	r6, [pc, #628]	; (800c5fc <__ieee754_pow+0xa44>)
 800c386:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c38a:	4116      	asrs	r6, r2
 800c38c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c390:	2000      	movs	r0, #0
 800c392:	ea23 0106 	bic.w	r1, r3, r6
 800c396:	f1c2 0214 	rsb	r2, r2, #20
 800c39a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c39e:	fa4a fa02 	asr.w	sl, sl, r2
 800c3a2:	f1bb 0f00 	cmp.w	fp, #0
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	bfb8      	it	lt
 800c3b0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c3b4:	f7f3 ff88 	bl	80002c8 <__aeabi_dsub>
 800c3b8:	ec41 0b19 	vmov	d9, r0, r1
 800c3bc:	4642      	mov	r2, r8
 800c3be:	464b      	mov	r3, r9
 800c3c0:	ec51 0b19 	vmov	r0, r1, d9
 800c3c4:	f7f3 ff82 	bl	80002cc <__adddf3>
 800c3c8:	a37b      	add	r3, pc, #492	; (adr r3, 800c5b8 <__ieee754_pow+0xa00>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	f7f4 f930 	bl	8000638 <__aeabi_dmul>
 800c3d8:	ec53 2b19 	vmov	r2, r3, d9
 800c3dc:	4606      	mov	r6, r0
 800c3de:	460f      	mov	r7, r1
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f7f3 ff70 	bl	80002c8 <__aeabi_dsub>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	f7f3 ff6a 	bl	80002c8 <__aeabi_dsub>
 800c3f4:	a372      	add	r3, pc, #456	; (adr r3, 800c5c0 <__ieee754_pow+0xa08>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f4 f91d 	bl	8000638 <__aeabi_dmul>
 800c3fe:	a372      	add	r3, pc, #456	; (adr r3, 800c5c8 <__ieee754_pow+0xa10>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	4680      	mov	r8, r0
 800c406:	4689      	mov	r9, r1
 800c408:	4620      	mov	r0, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	f7f4 f914 	bl	8000638 <__aeabi_dmul>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4640      	mov	r0, r8
 800c416:	4649      	mov	r1, r9
 800c418:	f7f3 ff58 	bl	80002cc <__adddf3>
 800c41c:	4604      	mov	r4, r0
 800c41e:	460d      	mov	r5, r1
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	f7f3 ff50 	bl	80002cc <__adddf3>
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	4680      	mov	r8, r0
 800c432:	4689      	mov	r9, r1
 800c434:	f7f3 ff48 	bl	80002c8 <__aeabi_dsub>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4620      	mov	r0, r4
 800c43e:	4629      	mov	r1, r5
 800c440:	f7f3 ff42 	bl	80002c8 <__aeabi_dsub>
 800c444:	4642      	mov	r2, r8
 800c446:	4606      	mov	r6, r0
 800c448:	460f      	mov	r7, r1
 800c44a:	464b      	mov	r3, r9
 800c44c:	4640      	mov	r0, r8
 800c44e:	4649      	mov	r1, r9
 800c450:	f7f4 f8f2 	bl	8000638 <__aeabi_dmul>
 800c454:	a35e      	add	r3, pc, #376	; (adr r3, 800c5d0 <__ieee754_pow+0xa18>)
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	4604      	mov	r4, r0
 800c45c:	460d      	mov	r5, r1
 800c45e:	f7f4 f8eb 	bl	8000638 <__aeabi_dmul>
 800c462:	a35d      	add	r3, pc, #372	; (adr r3, 800c5d8 <__ieee754_pow+0xa20>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f7f3 ff2e 	bl	80002c8 <__aeabi_dsub>
 800c46c:	4622      	mov	r2, r4
 800c46e:	462b      	mov	r3, r5
 800c470:	f7f4 f8e2 	bl	8000638 <__aeabi_dmul>
 800c474:	a35a      	add	r3, pc, #360	; (adr r3, 800c5e0 <__ieee754_pow+0xa28>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	f7f3 ff27 	bl	80002cc <__adddf3>
 800c47e:	4622      	mov	r2, r4
 800c480:	462b      	mov	r3, r5
 800c482:	f7f4 f8d9 	bl	8000638 <__aeabi_dmul>
 800c486:	a358      	add	r3, pc, #352	; (adr r3, 800c5e8 <__ieee754_pow+0xa30>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	f7f3 ff1c 	bl	80002c8 <__aeabi_dsub>
 800c490:	4622      	mov	r2, r4
 800c492:	462b      	mov	r3, r5
 800c494:	f7f4 f8d0 	bl	8000638 <__aeabi_dmul>
 800c498:	a355      	add	r3, pc, #340	; (adr r3, 800c5f0 <__ieee754_pow+0xa38>)
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	f7f3 ff15 	bl	80002cc <__adddf3>
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	f7f4 f8c7 	bl	8000638 <__aeabi_dmul>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	f7f3 ff09 	bl	80002c8 <__aeabi_dsub>
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f4 f8b9 	bl	8000638 <__aeabi_dmul>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	ec41 0b19 	vmov	d9, r0, r1
 800c4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	f7f3 fef8 	bl	80002c8 <__aeabi_dsub>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	ec51 0b19 	vmov	r0, r1, d9
 800c4e0:	f7f4 f9d4 	bl	800088c <__aeabi_ddiv>
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	463b      	mov	r3, r7
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	4649      	mov	r1, r9
 800c4f0:	f7f4 f8a2 	bl	8000638 <__aeabi_dmul>
 800c4f4:	4632      	mov	r2, r6
 800c4f6:	463b      	mov	r3, r7
 800c4f8:	f7f3 fee8 	bl	80002cc <__adddf3>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	4620      	mov	r0, r4
 800c502:	4629      	mov	r1, r5
 800c504:	f7f3 fee0 	bl	80002c8 <__aeabi_dsub>
 800c508:	4642      	mov	r2, r8
 800c50a:	464b      	mov	r3, r9
 800c50c:	f7f3 fedc 	bl	80002c8 <__aeabi_dsub>
 800c510:	460b      	mov	r3, r1
 800c512:	4602      	mov	r2, r0
 800c514:	493a      	ldr	r1, [pc, #232]	; (800c600 <__ieee754_pow+0xa48>)
 800c516:	2000      	movs	r0, #0
 800c518:	f7f3 fed6 	bl	80002c8 <__aeabi_dsub>
 800c51c:	ec41 0b10 	vmov	d0, r0, r1
 800c520:	ee10 3a90 	vmov	r3, s1
 800c524:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c52c:	da2b      	bge.n	800c586 <__ieee754_pow+0x9ce>
 800c52e:	4650      	mov	r0, sl
 800c530:	f000 f966 	bl	800c800 <scalbn>
 800c534:	ec51 0b10 	vmov	r0, r1, d0
 800c538:	ec53 2b18 	vmov	r2, r3, d8
 800c53c:	f7ff bbed 	b.w	800bd1a <__ieee754_pow+0x162>
 800c540:	4b30      	ldr	r3, [pc, #192]	; (800c604 <__ieee754_pow+0xa4c>)
 800c542:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c546:	429e      	cmp	r6, r3
 800c548:	f77f af0c 	ble.w	800c364 <__ieee754_pow+0x7ac>
 800c54c:	4b2e      	ldr	r3, [pc, #184]	; (800c608 <__ieee754_pow+0xa50>)
 800c54e:	440b      	add	r3, r1
 800c550:	4303      	orrs	r3, r0
 800c552:	d009      	beq.n	800c568 <__ieee754_pow+0x9b0>
 800c554:	ec51 0b18 	vmov	r0, r1, d8
 800c558:	2200      	movs	r2, #0
 800c55a:	2300      	movs	r3, #0
 800c55c:	f7f4 fade 	bl	8000b1c <__aeabi_dcmplt>
 800c560:	3800      	subs	r0, #0
 800c562:	bf18      	it	ne
 800c564:	2001      	movne	r0, #1
 800c566:	e447      	b.n	800bdf8 <__ieee754_pow+0x240>
 800c568:	4622      	mov	r2, r4
 800c56a:	462b      	mov	r3, r5
 800c56c:	f7f3 feac 	bl	80002c8 <__aeabi_dsub>
 800c570:	4642      	mov	r2, r8
 800c572:	464b      	mov	r3, r9
 800c574:	f7f4 fae6 	bl	8000b44 <__aeabi_dcmpge>
 800c578:	2800      	cmp	r0, #0
 800c57a:	f43f aef3 	beq.w	800c364 <__ieee754_pow+0x7ac>
 800c57e:	e7e9      	b.n	800c554 <__ieee754_pow+0x99c>
 800c580:	f04f 0a00 	mov.w	sl, #0
 800c584:	e71a      	b.n	800c3bc <__ieee754_pow+0x804>
 800c586:	ec51 0b10 	vmov	r0, r1, d0
 800c58a:	4619      	mov	r1, r3
 800c58c:	e7d4      	b.n	800c538 <__ieee754_pow+0x980>
 800c58e:	491c      	ldr	r1, [pc, #112]	; (800c600 <__ieee754_pow+0xa48>)
 800c590:	2000      	movs	r0, #0
 800c592:	f7ff bb30 	b.w	800bbf6 <__ieee754_pow+0x3e>
 800c596:	2000      	movs	r0, #0
 800c598:	2100      	movs	r1, #0
 800c59a:	f7ff bb2c 	b.w	800bbf6 <__ieee754_pow+0x3e>
 800c59e:	4630      	mov	r0, r6
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	f7ff bb28 	b.w	800bbf6 <__ieee754_pow+0x3e>
 800c5a6:	9204      	str	r2, [sp, #16]
 800c5a8:	f7ff bb7a 	b.w	800bca0 <__ieee754_pow+0xe8>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f7ff bb64 	b.w	800bc7a <__ieee754_pow+0xc2>
 800c5b2:	bf00      	nop
 800c5b4:	f3af 8000 	nop.w
 800c5b8:	00000000 	.word	0x00000000
 800c5bc:	3fe62e43 	.word	0x3fe62e43
 800c5c0:	fefa39ef 	.word	0xfefa39ef
 800c5c4:	3fe62e42 	.word	0x3fe62e42
 800c5c8:	0ca86c39 	.word	0x0ca86c39
 800c5cc:	be205c61 	.word	0xbe205c61
 800c5d0:	72bea4d0 	.word	0x72bea4d0
 800c5d4:	3e663769 	.word	0x3e663769
 800c5d8:	c5d26bf1 	.word	0xc5d26bf1
 800c5dc:	3ebbbd41 	.word	0x3ebbbd41
 800c5e0:	af25de2c 	.word	0xaf25de2c
 800c5e4:	3f11566a 	.word	0x3f11566a
 800c5e8:	16bebd93 	.word	0x16bebd93
 800c5ec:	3f66c16c 	.word	0x3f66c16c
 800c5f0:	5555553e 	.word	0x5555553e
 800c5f4:	3fc55555 	.word	0x3fc55555
 800c5f8:	3fe00000 	.word	0x3fe00000
 800c5fc:	000fffff 	.word	0x000fffff
 800c600:	3ff00000 	.word	0x3ff00000
 800c604:	4090cbff 	.word	0x4090cbff
 800c608:	3f6f3400 	.word	0x3f6f3400
 800c60c:	652b82fe 	.word	0x652b82fe
 800c610:	3c971547 	.word	0x3c971547

0800c614 <__ieee754_sqrt>:
 800c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	ec55 4b10 	vmov	r4, r5, d0
 800c61c:	4e55      	ldr	r6, [pc, #340]	; (800c774 <__ieee754_sqrt+0x160>)
 800c61e:	43ae      	bics	r6, r5
 800c620:	ee10 0a10 	vmov	r0, s0
 800c624:	ee10 3a10 	vmov	r3, s0
 800c628:	462a      	mov	r2, r5
 800c62a:	4629      	mov	r1, r5
 800c62c:	d110      	bne.n	800c650 <__ieee754_sqrt+0x3c>
 800c62e:	ee10 2a10 	vmov	r2, s0
 800c632:	462b      	mov	r3, r5
 800c634:	f7f4 f800 	bl	8000638 <__aeabi_dmul>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4620      	mov	r0, r4
 800c63e:	4629      	mov	r1, r5
 800c640:	f7f3 fe44 	bl	80002cc <__adddf3>
 800c644:	4604      	mov	r4, r0
 800c646:	460d      	mov	r5, r1
 800c648:	ec45 4b10 	vmov	d0, r4, r5
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	2d00      	cmp	r5, #0
 800c652:	dc10      	bgt.n	800c676 <__ieee754_sqrt+0x62>
 800c654:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c658:	4330      	orrs	r0, r6
 800c65a:	d0f5      	beq.n	800c648 <__ieee754_sqrt+0x34>
 800c65c:	b15d      	cbz	r5, 800c676 <__ieee754_sqrt+0x62>
 800c65e:	ee10 2a10 	vmov	r2, s0
 800c662:	462b      	mov	r3, r5
 800c664:	ee10 0a10 	vmov	r0, s0
 800c668:	f7f3 fe2e 	bl	80002c8 <__aeabi_dsub>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	f7f4 f90c 	bl	800088c <__aeabi_ddiv>
 800c674:	e7e6      	b.n	800c644 <__ieee754_sqrt+0x30>
 800c676:	1512      	asrs	r2, r2, #20
 800c678:	d074      	beq.n	800c764 <__ieee754_sqrt+0x150>
 800c67a:	07d4      	lsls	r4, r2, #31
 800c67c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c680:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c688:	bf5e      	ittt	pl
 800c68a:	0fda      	lsrpl	r2, r3, #31
 800c68c:	005b      	lslpl	r3, r3, #1
 800c68e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c692:	2400      	movs	r4, #0
 800c694:	0fda      	lsrs	r2, r3, #31
 800c696:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c69a:	107f      	asrs	r7, r7, #1
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	2516      	movs	r5, #22
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c6a6:	1886      	adds	r6, r0, r2
 800c6a8:	428e      	cmp	r6, r1
 800c6aa:	bfde      	ittt	le
 800c6ac:	1b89      	suble	r1, r1, r6
 800c6ae:	18b0      	addle	r0, r6, r2
 800c6b0:	18a4      	addle	r4, r4, r2
 800c6b2:	0049      	lsls	r1, r1, #1
 800c6b4:	3d01      	subs	r5, #1
 800c6b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c6ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c6be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6c2:	d1f0      	bne.n	800c6a6 <__ieee754_sqrt+0x92>
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	f04f 0e20 	mov.w	lr, #32
 800c6ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c6ce:	4281      	cmp	r1, r0
 800c6d0:	eb06 0c05 	add.w	ip, r6, r5
 800c6d4:	dc02      	bgt.n	800c6dc <__ieee754_sqrt+0xc8>
 800c6d6:	d113      	bne.n	800c700 <__ieee754_sqrt+0xec>
 800c6d8:	459c      	cmp	ip, r3
 800c6da:	d811      	bhi.n	800c700 <__ieee754_sqrt+0xec>
 800c6dc:	f1bc 0f00 	cmp.w	ip, #0
 800c6e0:	eb0c 0506 	add.w	r5, ip, r6
 800c6e4:	da43      	bge.n	800c76e <__ieee754_sqrt+0x15a>
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	db41      	blt.n	800c76e <__ieee754_sqrt+0x15a>
 800c6ea:	f100 0801 	add.w	r8, r0, #1
 800c6ee:	1a09      	subs	r1, r1, r0
 800c6f0:	459c      	cmp	ip, r3
 800c6f2:	bf88      	it	hi
 800c6f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c6f8:	eba3 030c 	sub.w	r3, r3, ip
 800c6fc:	4432      	add	r2, r6
 800c6fe:	4640      	mov	r0, r8
 800c700:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c704:	f1be 0e01 	subs.w	lr, lr, #1
 800c708:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c70c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c710:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c714:	d1db      	bne.n	800c6ce <__ieee754_sqrt+0xba>
 800c716:	430b      	orrs	r3, r1
 800c718:	d006      	beq.n	800c728 <__ieee754_sqrt+0x114>
 800c71a:	1c50      	adds	r0, r2, #1
 800c71c:	bf13      	iteet	ne
 800c71e:	3201      	addne	r2, #1
 800c720:	3401      	addeq	r4, #1
 800c722:	4672      	moveq	r2, lr
 800c724:	f022 0201 	bicne.w	r2, r2, #1
 800c728:	1063      	asrs	r3, r4, #1
 800c72a:	0852      	lsrs	r2, r2, #1
 800c72c:	07e1      	lsls	r1, r4, #31
 800c72e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c732:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c736:	bf48      	it	mi
 800c738:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c73c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c740:	4614      	mov	r4, r2
 800c742:	e781      	b.n	800c648 <__ieee754_sqrt+0x34>
 800c744:	0ad9      	lsrs	r1, r3, #11
 800c746:	3815      	subs	r0, #21
 800c748:	055b      	lsls	r3, r3, #21
 800c74a:	2900      	cmp	r1, #0
 800c74c:	d0fa      	beq.n	800c744 <__ieee754_sqrt+0x130>
 800c74e:	02cd      	lsls	r5, r1, #11
 800c750:	d50a      	bpl.n	800c768 <__ieee754_sqrt+0x154>
 800c752:	f1c2 0420 	rsb	r4, r2, #32
 800c756:	fa23 f404 	lsr.w	r4, r3, r4
 800c75a:	1e55      	subs	r5, r2, #1
 800c75c:	4093      	lsls	r3, r2
 800c75e:	4321      	orrs	r1, r4
 800c760:	1b42      	subs	r2, r0, r5
 800c762:	e78a      	b.n	800c67a <__ieee754_sqrt+0x66>
 800c764:	4610      	mov	r0, r2
 800c766:	e7f0      	b.n	800c74a <__ieee754_sqrt+0x136>
 800c768:	0049      	lsls	r1, r1, #1
 800c76a:	3201      	adds	r2, #1
 800c76c:	e7ef      	b.n	800c74e <__ieee754_sqrt+0x13a>
 800c76e:	4680      	mov	r8, r0
 800c770:	e7bd      	b.n	800c6ee <__ieee754_sqrt+0xda>
 800c772:	bf00      	nop
 800c774:	7ff00000 	.word	0x7ff00000

0800c778 <with_errno>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	4604      	mov	r4, r0
 800c77c:	460d      	mov	r5, r1
 800c77e:	4616      	mov	r6, r2
 800c780:	f7fc fd70 	bl	8009264 <__errno>
 800c784:	4629      	mov	r1, r5
 800c786:	6006      	str	r6, [r0, #0]
 800c788:	4620      	mov	r0, r4
 800c78a:	bd70      	pop	{r4, r5, r6, pc}

0800c78c <xflow>:
 800c78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c78e:	4614      	mov	r4, r2
 800c790:	461d      	mov	r5, r3
 800c792:	b108      	cbz	r0, 800c798 <xflow+0xc>
 800c794:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c798:	e9cd 2300 	strd	r2, r3, [sp]
 800c79c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	f7f3 ff48 	bl	8000638 <__aeabi_dmul>
 800c7a8:	2222      	movs	r2, #34	; 0x22
 800c7aa:	b003      	add	sp, #12
 800c7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7b0:	f7ff bfe2 	b.w	800c778 <with_errno>

0800c7b4 <__math_uflow>:
 800c7b4:	b508      	push	{r3, lr}
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c7bc:	f7ff ffe6 	bl	800c78c <xflow>
 800c7c0:	ec41 0b10 	vmov	d0, r0, r1
 800c7c4:	bd08      	pop	{r3, pc}

0800c7c6 <__math_oflow>:
 800c7c6:	b508      	push	{r3, lr}
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c7ce:	f7ff ffdd 	bl	800c78c <xflow>
 800c7d2:	ec41 0b10 	vmov	d0, r0, r1
 800c7d6:	bd08      	pop	{r3, pc}

0800c7d8 <fabs>:
 800c7d8:	ec51 0b10 	vmov	r0, r1, d0
 800c7dc:	ee10 2a10 	vmov	r2, s0
 800c7e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7e4:	ec43 2b10 	vmov	d0, r2, r3
 800c7e8:	4770      	bx	lr

0800c7ea <finite>:
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	ed8d 0b00 	vstr	d0, [sp]
 800c7f0:	9801      	ldr	r0, [sp, #4]
 800c7f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c7f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c7fa:	0fc0      	lsrs	r0, r0, #31
 800c7fc:	b002      	add	sp, #8
 800c7fe:	4770      	bx	lr

0800c800 <scalbn>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	ec55 4b10 	vmov	r4, r5, d0
 800c806:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c80a:	4606      	mov	r6, r0
 800c80c:	462b      	mov	r3, r5
 800c80e:	b99a      	cbnz	r2, 800c838 <scalbn+0x38>
 800c810:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c814:	4323      	orrs	r3, r4
 800c816:	d036      	beq.n	800c886 <scalbn+0x86>
 800c818:	4b39      	ldr	r3, [pc, #228]	; (800c900 <scalbn+0x100>)
 800c81a:	4629      	mov	r1, r5
 800c81c:	ee10 0a10 	vmov	r0, s0
 800c820:	2200      	movs	r2, #0
 800c822:	f7f3 ff09 	bl	8000638 <__aeabi_dmul>
 800c826:	4b37      	ldr	r3, [pc, #220]	; (800c904 <scalbn+0x104>)
 800c828:	429e      	cmp	r6, r3
 800c82a:	4604      	mov	r4, r0
 800c82c:	460d      	mov	r5, r1
 800c82e:	da10      	bge.n	800c852 <scalbn+0x52>
 800c830:	a32b      	add	r3, pc, #172	; (adr r3, 800c8e0 <scalbn+0xe0>)
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	e03a      	b.n	800c8ae <scalbn+0xae>
 800c838:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c83c:	428a      	cmp	r2, r1
 800c83e:	d10c      	bne.n	800c85a <scalbn+0x5a>
 800c840:	ee10 2a10 	vmov	r2, s0
 800c844:	4620      	mov	r0, r4
 800c846:	4629      	mov	r1, r5
 800c848:	f7f3 fd40 	bl	80002cc <__adddf3>
 800c84c:	4604      	mov	r4, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	e019      	b.n	800c886 <scalbn+0x86>
 800c852:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c856:	460b      	mov	r3, r1
 800c858:	3a36      	subs	r2, #54	; 0x36
 800c85a:	4432      	add	r2, r6
 800c85c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c860:	428a      	cmp	r2, r1
 800c862:	dd08      	ble.n	800c876 <scalbn+0x76>
 800c864:	2d00      	cmp	r5, #0
 800c866:	a120      	add	r1, pc, #128	; (adr r1, 800c8e8 <scalbn+0xe8>)
 800c868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c86c:	da1c      	bge.n	800c8a8 <scalbn+0xa8>
 800c86e:	a120      	add	r1, pc, #128	; (adr r1, 800c8f0 <scalbn+0xf0>)
 800c870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c874:	e018      	b.n	800c8a8 <scalbn+0xa8>
 800c876:	2a00      	cmp	r2, #0
 800c878:	dd08      	ble.n	800c88c <scalbn+0x8c>
 800c87a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c87e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c886:	ec45 4b10 	vmov	d0, r4, r5
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c890:	da19      	bge.n	800c8c6 <scalbn+0xc6>
 800c892:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c896:	429e      	cmp	r6, r3
 800c898:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c89c:	dd0a      	ble.n	800c8b4 <scalbn+0xb4>
 800c89e:	a112      	add	r1, pc, #72	; (adr r1, 800c8e8 <scalbn+0xe8>)
 800c8a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1e2      	bne.n	800c86e <scalbn+0x6e>
 800c8a8:	a30f      	add	r3, pc, #60	; (adr r3, 800c8e8 <scalbn+0xe8>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	f7f3 fec3 	bl	8000638 <__aeabi_dmul>
 800c8b2:	e7cb      	b.n	800c84c <scalbn+0x4c>
 800c8b4:	a10a      	add	r1, pc, #40	; (adr r1, 800c8e0 <scalbn+0xe0>)
 800c8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0b8      	beq.n	800c830 <scalbn+0x30>
 800c8be:	a10e      	add	r1, pc, #56	; (adr r1, 800c8f8 <scalbn+0xf8>)
 800c8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8c4:	e7b4      	b.n	800c830 <scalbn+0x30>
 800c8c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8ca:	3236      	adds	r2, #54	; 0x36
 800c8cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <scalbn+0x108>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	e7e8      	b.n	800c8ae <scalbn+0xae>
 800c8dc:	f3af 8000 	nop.w
 800c8e0:	c2f8f359 	.word	0xc2f8f359
 800c8e4:	01a56e1f 	.word	0x01a56e1f
 800c8e8:	8800759c 	.word	0x8800759c
 800c8ec:	7e37e43c 	.word	0x7e37e43c
 800c8f0:	8800759c 	.word	0x8800759c
 800c8f4:	fe37e43c 	.word	0xfe37e43c
 800c8f8:	c2f8f359 	.word	0xc2f8f359
 800c8fc:	81a56e1f 	.word	0x81a56e1f
 800c900:	43500000 	.word	0x43500000
 800c904:	ffff3cb0 	.word	0xffff3cb0
 800c908:	3c900000 	.word	0x3c900000

0800c90c <_init>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	bf00      	nop
 800c910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c912:	bc08      	pop	{r3}
 800c914:	469e      	mov	lr, r3
 800c916:	4770      	bx	lr

0800c918 <_fini>:
 800c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91a:	bf00      	nop
 800c91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c91e:	bc08      	pop	{r3}
 800c920:	469e      	mov	lr, r3
 800c922:	4770      	bx	lr
