
Data_Storage_Test_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007100  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007918  08007918  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c8  20000088  080079a8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002450  080079a8  00022450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c370  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002358  00000000  00000000  0002c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002384d  00000000  00000000  0002fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010287  00000000  00000000  00053505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cac7a  00000000  00000000  0006378c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000343c  00000000  00000000  0012e458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072b8 	.word	0x080072b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080072b8 	.word	0x080072b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <SELECT+0x18>)
 80005be:	f001 fba3 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f001 f8d6 	bl	8001774 <HAL_Delay>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020800 	.word	0x40020800

080005d0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <DESELECT+0x18>)
 80005da:	f001 fb95 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f001 f8c8 	bl	8001774 <HAL_Delay>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020800 	.word	0x40020800

080005ec <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f6:	bf00      	nop
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <SPI_TxByte+0x30>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	2b02      	cmp	r3, #2
 8000604:	d1f8      	bne.n	80005f8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000606:	1df9      	adds	r1, r7, #7
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2201      	movs	r2, #1
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <SPI_TxByte+0x30>)
 800060e:	f002 f94c 	bl	80028aa <HAL_SPI_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000a8 	.word	0x200000a8

08000620 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062c:	bf00      	nop
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SPI_TxBuffer+0x30>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	2b02      	cmp	r3, #2
 800063a:	d1f8      	bne.n	800062e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800063c:	887a      	ldrh	r2, [r7, #2]
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <SPI_TxBuffer+0x30>)
 8000644:	f002 f931 	bl	80028aa <HAL_SPI_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000a8 	.word	0x200000a8

08000654 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800065e:	bf00      	nop
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <SPI_RxByte+0x34>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	2b02      	cmp	r3, #2
 800066c:	d1f8      	bne.n	8000660 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800066e:	1dba      	adds	r2, r7, #6
 8000670:	1df9      	adds	r1, r7, #7
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <SPI_RxByte+0x34>)
 800067a:	f002 fa52 	bl	8002b22 <HAL_SPI_TransmitReceive>

	return data;
 800067e:	79bb      	ldrb	r3, [r7, #6]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000a8 	.word	0x200000a8

0800068c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000694:	f7ff ffde 	bl	8000654 <SPI_RxByte>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <SD_ReadyWait+0x30>)
 80006b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006b4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006b6:	f7ff ffcd 	bl	8000654 <SPI_RxByte>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2bff      	cmp	r3, #255	; 0xff
 80006c2:	d004      	beq.n	80006ce <SD_ReadyWait+0x26>
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <SD_ReadyWait+0x30>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f3      	bne.n	80006b6 <SD_ReadyWait+0xe>

	return res;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200021f8 	.word	0x200021f8

080006dc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006e6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006e8:	f7ff ff72 	bl	80005d0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	e005      	b.n	80006fe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006f2:	20ff      	movs	r0, #255	; 0xff
 80006f4:	f7ff ff7a 	bl	80005ec <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b09      	cmp	r3, #9
 8000702:	ddf6      	ble.n	80006f2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000704:	f7ff ff56 	bl	80005b4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800071c:	2395      	movs	r3, #149	; 0x95
 800071e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000720:	463b      	mov	r3, r7
 8000722:	2106      	movs	r1, #6
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff7b 	bl	8000620 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800072a:	e002      	b.n	8000732 <SD_PowerOn+0x56>
	{
		cnt--;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3b01      	subs	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000732:	f7ff ff8f 	bl	8000654 <SPI_RxByte>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d002      	beq.n	8000742 <SD_PowerOn+0x66>
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f4      	bne.n	800072c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000742:	f7ff ff45 	bl	80005d0 <DESELECT>
	SPI_TxByte(0XFF);
 8000746:	20ff      	movs	r0, #255	; 0xff
 8000748:	f7ff ff50 	bl	80005ec <SPI_TxByte>

	PowerFlag = 1;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <SD_PowerOn+0x80>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000a5 	.word	0x200000a5

08000760 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <SD_PowerOff+0x14>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	200000a5 	.word	0x200000a5

08000778 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <SD_CheckPower+0x14>)
 800077e:	781b      	ldrb	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200000a5 	.word	0x200000a5

08000790 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <SD_RxDataBlock+0x5c>)
 800079c:	22c8      	movs	r2, #200	; 0xc8
 800079e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007a0:	f7ff ff58 	bl	8000654 <SPI_RxByte>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d104      	bne.n	80007b8 <SD_RxDataBlock+0x28>
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <SD_RxDataBlock+0x5c>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f3      	bne.n	80007a0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	2bfe      	cmp	r3, #254	; 0xfe
 80007bc:	d001      	beq.n	80007c2 <SD_RxDataBlock+0x32>
 80007be:	2300      	movs	r3, #0
 80007c0:	e00f      	b.n	80007e2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5f 	bl	800068c <SPI_RxBytePtr>
	} while(len--);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	603a      	str	r2, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f4      	bne.n	80007c2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007d8:	f7ff ff3c 	bl	8000654 <SPI_RxByte>
	SPI_RxByte();
 80007dc:	f7ff ff3a 	bl	8000654 <SPI_RxByte>

	return TRUE;
 80007e0:	2301      	movs	r3, #1
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200021f6 	.word	0x200021f6

080007f0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000800:	f7ff ff52 	bl	80006a8 <SD_ReadyWait>
 8000804:	4603      	mov	r3, r0
 8000806:	2bff      	cmp	r3, #255	; 0xff
 8000808:	d001      	beq.n	800080e <SD_TxDataBlock+0x1e>
 800080a:	2300      	movs	r3, #0
 800080c:	e02f      	b.n	800086e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feeb 	bl	80005ec <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2bfd      	cmp	r3, #253	; 0xfd
 800081a:	d020      	beq.n	800085e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800081c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fefd 	bl	8000620 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000826:	f7ff ff15 	bl	8000654 <SPI_RxByte>
		SPI_RxByte();
 800082a:	f7ff ff13 	bl	8000654 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800082e:	e00b      	b.n	8000848 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000830:	f7ff ff10 	bl	8000654 <SPI_RxByte>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	f003 031f 	and.w	r3, r3, #31
 800083e:	2b05      	cmp	r3, #5
 8000840:	d006      	beq.n	8000850 <SD_TxDataBlock+0x60>
			i++;
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	3301      	adds	r3, #1
 8000846:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	2b40      	cmp	r3, #64	; 0x40
 800084c:	d9f0      	bls.n	8000830 <SD_TxDataBlock+0x40>
 800084e:	e000      	b.n	8000852 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000850:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000852:	bf00      	nop
 8000854:	f7ff fefe 	bl	8000654 <SPI_RxByte>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0fa      	beq.n	8000854 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	f003 031f 	and.w	r3, r3, #31
 8000864:	2b05      	cmp	r3, #5
 8000866:	d101      	bne.n	800086c <SD_TxDataBlock+0x7c>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <SD_TxDataBlock+0x7e>

	return FALSE;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	6039      	str	r1, [r7, #0]
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000882:	f7ff ff11 	bl	80006a8 <SD_ReadyWait>
 8000886:	4603      	mov	r3, r0
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d001      	beq.n	8000890 <SD_SendCmd+0x1a>
 800088c:	23ff      	movs	r3, #255	; 0xff
 800088e:	e042      	b.n	8000916 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff feaa 	bl	80005ec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	0e1b      	lsrs	r3, r3, #24
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fea4 	bl	80005ec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	0c1b      	lsrs	r3, r3, #16
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe9e 	bl	80005ec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe98 	bl	80005ec <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe93 	bl	80005ec <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d102      	bne.n	80008d2 <SD_SendCmd+0x5c>
 80008cc:	2395      	movs	r3, #149	; 0x95
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e007      	b.n	80008e2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b48      	cmp	r3, #72	; 0x48
 80008d6:	d102      	bne.n	80008de <SD_SendCmd+0x68>
 80008d8:	2387      	movs	r3, #135	; 0x87
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e001      	b.n	80008e2 <SD_SendCmd+0x6c>
	else crc = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe81 	bl	80005ec <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b4c      	cmp	r3, #76	; 0x4c
 80008ee:	d101      	bne.n	80008f4 <SD_SendCmd+0x7e>
 80008f0:	f7ff feb0 	bl	8000654 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008f4:	230a      	movs	r3, #10
 80008f6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008f8:	f7ff feac 	bl	8000654 <SPI_RxByte>
 80008fc:	4603      	mov	r3, r0
 80008fe:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000900:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000904:	2b00      	cmp	r3, #0
 8000906:	da05      	bge.n	8000914 <SD_SendCmd+0x9e>
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	3b01      	subs	r3, #1
 800090c:	73bb      	strb	r3, [r7, #14]
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f1      	bne.n	80008f8 <SD_SendCmd+0x82>

	return res;
 8000914:	7b7b      	ldrb	r3, [r7, #13]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SD_disk_initialize+0x14>
 8000930:	2301      	movs	r3, #1
 8000932:	e0d6      	b.n	8000ae2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000934:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <SD_disk_initialize+0x1cc>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <SD_disk_initialize+0x2a>
 8000942:	4b6a      	ldr	r3, [pc, #424]	; (8000aec <SD_disk_initialize+0x1cc>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	e0cb      	b.n	8000ae2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800094a:	f7ff fec7 	bl	80006dc <SD_PowerOn>

	/* slave select */
	SELECT();
 800094e:	f7ff fe31 	bl	80005b4 <SELECT>

	/* check disk type */
	type = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000956:	2100      	movs	r1, #0
 8000958:	2040      	movs	r0, #64	; 0x40
 800095a:	f7ff ff8c 	bl	8000876 <SD_SendCmd>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	f040 80a6 	bne.w	8000ab2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000966:	4b62      	ldr	r3, [pc, #392]	; (8000af0 <SD_disk_initialize+0x1d0>)
 8000968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800096c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800096e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000972:	2048      	movs	r0, #72	; 0x48
 8000974:	f7ff ff7f 	bl	8000876 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d158      	bne.n	8000a30 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	e00c      	b.n	800099e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000984:	7bfc      	ldrb	r4, [r7, #15]
 8000986:	f7ff fe65 	bl	8000654 <SPI_RxByte>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	f104 0310 	add.w	r3, r4, #16
 8000992:	443b      	add	r3, r7
 8000994:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	3301      	adds	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d9ef      	bls.n	8000984 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009a4:	7abb      	ldrb	r3, [r7, #10]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	f040 8083 	bne.w	8000ab2 <SD_disk_initialize+0x192>
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	2baa      	cmp	r3, #170	; 0xaa
 80009b0:	d17f      	bne.n	8000ab2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009b2:	2100      	movs	r1, #0
 80009b4:	2077      	movs	r0, #119	; 0x77
 80009b6:	f7ff ff5e 	bl	8000876 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d807      	bhi.n	80009d0 <SD_disk_initialize+0xb0>
 80009c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009c4:	2069      	movs	r0, #105	; 0x69
 80009c6:	f7ff ff56 	bl	8000876 <SD_SendCmd>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009d0:	4b47      	ldr	r3, [pc, #284]	; (8000af0 <SD_disk_initialize+0x1d0>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1eb      	bne.n	80009b2 <SD_disk_initialize+0x92>
 80009da:	e000      	b.n	80009de <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009dc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009de:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <SD_disk_initialize+0x1d0>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d064      	beq.n	8000ab2 <SD_disk_initialize+0x192>
 80009e8:	2100      	movs	r1, #0
 80009ea:	207a      	movs	r0, #122	; 0x7a
 80009ec:	f7ff ff43 	bl	8000876 <SD_SendCmd>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d15d      	bne.n	8000ab2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e00c      	b.n	8000a16 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009fc:	7bfc      	ldrb	r4, [r7, #15]
 80009fe:	f7ff fe29 	bl	8000654 <SPI_RxByte>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	f104 0310 	add.w	r3, r4, #16
 8000a0a:	443b      	add	r3, r7
 8000a0c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	3301      	adds	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d9ef      	bls.n	80009fc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a1c:	7a3b      	ldrb	r3, [r7, #8]
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SD_disk_initialize+0x10a>
 8000a26:	230c      	movs	r3, #12
 8000a28:	e000      	b.n	8000a2c <SD_disk_initialize+0x10c>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	73bb      	strb	r3, [r7, #14]
 8000a2e:	e040      	b.n	8000ab2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a30:	2100      	movs	r1, #0
 8000a32:	2077      	movs	r0, #119	; 0x77
 8000a34:	f7ff ff1f 	bl	8000876 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d808      	bhi.n	8000a50 <SD_disk_initialize+0x130>
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2069      	movs	r0, #105	; 0x69
 8000a42:	f7ff ff18 	bl	8000876 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d801      	bhi.n	8000a50 <SD_disk_initialize+0x130>
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	e000      	b.n	8000a52 <SD_disk_initialize+0x132>
 8000a50:	2301      	movs	r3, #1
 8000a52:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d10e      	bne.n	8000a78 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2077      	movs	r0, #119	; 0x77
 8000a5e:	f7ff ff0a 	bl	8000876 <SD_SendCmd>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d80e      	bhi.n	8000a86 <SD_disk_initialize+0x166>
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2069      	movs	r0, #105	; 0x69
 8000a6c:	f7ff ff03 	bl	8000876 <SD_SendCmd>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d107      	bne.n	8000a86 <SD_disk_initialize+0x166>
 8000a76:	e00d      	b.n	8000a94 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2041      	movs	r0, #65	; 0x41
 8000a7c:	f7ff fefb 	bl	8000876 <SD_SendCmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d005      	beq.n	8000a92 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <SD_disk_initialize+0x1d0>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1e1      	bne.n	8000a54 <SD_disk_initialize+0x134>
 8000a90:	e000      	b.n	8000a94 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a92:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <SD_disk_initialize+0x1d0>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d007      	beq.n	8000aae <SD_disk_initialize+0x18e>
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	2050      	movs	r0, #80	; 0x50
 8000aa4:	f7ff fee7 	bl	8000876 <SD_SendCmd>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SD_disk_initialize+0x192>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <SD_disk_initialize+0x1d4>)
 8000ab4:	7bbb      	ldrb	r3, [r7, #14]
 8000ab6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ab8:	f7ff fd8a 	bl	80005d0 <DESELECT>
	SPI_RxByte();
 8000abc:	f7ff fdca 	bl	8000654 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d008      	beq.n	8000ad8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <SD_disk_initialize+0x1cc>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SD_disk_initialize+0x1cc>)
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e001      	b.n	8000adc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ad8:	f7ff fe42 	bl	8000760 <SD_PowerOff>
	}

	return Stat;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <SD_disk_initialize+0x1cc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000
 8000af0:	200021f6 	.word	0x200021f6
 8000af4:	200000a4 	.word	0x200000a4

08000af8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SD_disk_status+0x14>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e002      	b.n	8000b12 <SD_disk_status+0x1a>
	return Stat;
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SD_disk_status+0x28>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000000 	.word	0x20000000

08000b24 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	4603      	mov	r3, r0
 8000b32:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <SD_disk_read+0x1c>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <SD_disk_read+0x20>
 8000b40:	2304      	movs	r3, #4
 8000b42:	e051      	b.n	8000be8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <SD_disk_read+0xcc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SD_disk_read+0x32>
 8000b52:	2303      	movs	r3, #3
 8000b54:	e048      	b.n	8000be8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <SD_disk_read+0xd0>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x44>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	025b      	lsls	r3, r3, #9
 8000b66:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b68:	f7ff fd24 	bl	80005b4 <SELECT>

	if (count == 1)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d111      	bne.n	8000b96 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2051      	movs	r0, #81	; 0x51
 8000b76:	f7ff fe7e 	bl	8000876 <SD_SendCmd>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d129      	bne.n	8000bd4 <SD_disk_read+0xb0>
 8000b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b84:	68b8      	ldr	r0, [r7, #8]
 8000b86:	f7ff fe03 	bl	8000790 <SD_RxDataBlock>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d021      	beq.n	8000bd4 <SD_disk_read+0xb0>
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	e01e      	b.n	8000bd4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	2052      	movs	r0, #82	; 0x52
 8000b9a:	f7ff fe6c 	bl	8000876 <SD_SendCmd>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d117      	bne.n	8000bd4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	68b8      	ldr	r0, [r7, #8]
 8000baa:	f7ff fdf1 	bl	8000790 <SD_RxDataBlock>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00a      	beq.n	8000bca <SD_disk_read+0xa6>
				buff += 512;
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1ed      	bne.n	8000ba4 <SD_disk_read+0x80>
 8000bc8:	e000      	b.n	8000bcc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bca:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	204c      	movs	r0, #76	; 0x4c
 8000bd0:	f7ff fe51 	bl	8000876 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bd4:	f7ff fcfc 	bl	80005d0 <DESELECT>
	SPI_RxByte();
 8000bd8:	f7ff fd3c 	bl	8000654 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf14      	ite	ne
 8000be2:	2301      	movne	r3, #1
 8000be4:	2300      	moveq	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	200000a4 	.word	0x200000a4

08000bf8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	4603      	mov	r3, r0
 8000c06:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <SD_disk_write+0x1c>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <SD_disk_write+0x20>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e06b      	b.n	8000cf0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <SD_disk_write+0x100>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SD_disk_write+0x32>
 8000c26:	2303      	movs	r3, #3
 8000c28:	e062      	b.n	8000cf0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <SD_disk_write+0x100>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SD_disk_write+0x44>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e059      	b.n	8000cf0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <SD_disk_write+0x104>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <SD_disk_write+0x56>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	025b      	lsls	r3, r3, #9
 8000c4c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c4e:	f7ff fcb1 	bl	80005b4 <SELECT>

	if (count == 1)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d110      	bne.n	8000c7a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	2058      	movs	r0, #88	; 0x58
 8000c5c:	f7ff fe0b 	bl	8000876 <SD_SendCmd>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d13a      	bne.n	8000cdc <SD_disk_write+0xe4>
 8000c66:	21fe      	movs	r1, #254	; 0xfe
 8000c68:	68b8      	ldr	r0, [r7, #8]
 8000c6a:	f7ff fdc1 	bl	80007f0 <SD_TxDataBlock>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d033      	beq.n	8000cdc <SD_disk_write+0xe4>
			count = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	e030      	b.n	8000cdc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <SD_disk_write+0x104>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2077      	movs	r0, #119	; 0x77
 8000c8a:	f7ff fdf4 	bl	8000876 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	2057      	movs	r0, #87	; 0x57
 8000c92:	f7ff fdf0 	bl	8000876 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2059      	movs	r0, #89	; 0x59
 8000c9a:	f7ff fdec 	bl	8000876 <SD_SendCmd>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11b      	bne.n	8000cdc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca4:	21fc      	movs	r1, #252	; 0xfc
 8000ca6:	68b8      	ldr	r0, [r7, #8]
 8000ca8:	f7ff fda2 	bl	80007f0 <SD_TxDataBlock>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00a      	beq.n	8000cc8 <SD_disk_write+0xd0>
				buff += 512;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cb8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1ee      	bne.n	8000ca4 <SD_disk_write+0xac>
 8000cc6:	e000      	b.n	8000cca <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cc8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cca:	21fd      	movs	r1, #253	; 0xfd
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fd8f 	bl	80007f0 <SD_TxDataBlock>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <SD_disk_write+0xe4>
			{
				count = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cdc:	f7ff fc78 	bl	80005d0 <DESELECT>
	SPI_RxByte();
 8000ce0:	f7ff fcb8 	bl	8000654 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bf14      	ite	ne
 8000cea:	2301      	movne	r3, #1
 8000cec:	2300      	moveq	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	200000a4 	.word	0x200000a4

08000d00 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	603a      	str	r2, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SD_disk_ioctl+0x1e>
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	e115      	b.n	8000f4a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	d124      	bne.n	8000d74 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d012      	beq.n	8000d58 <SD_disk_ioctl+0x58>
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	dc1a      	bgt.n	8000d6c <SD_disk_ioctl+0x6c>
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <SD_disk_ioctl+0x40>
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d006      	beq.n	8000d4c <SD_disk_ioctl+0x4c>
 8000d3e:	e015      	b.n	8000d6c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d40:	f7ff fd0e 	bl	8000760 <SD_PowerOff>
			res = RES_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e0fc      	b.n	8000f46 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d4c:	f7ff fcc6 	bl	80006dc <SD_PowerOn>
			res = RES_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d56:	e0f6      	b.n	8000f46 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	1c5c      	adds	r4, r3, #1
 8000d5c:	f7ff fd0c 	bl	8000778 <SD_CheckPower>
 8000d60:	4603      	mov	r3, r0
 8000d62:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6a:	e0ec      	b.n	8000f46 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d72:	e0e8      	b.n	8000f46 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d74:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <SD_disk_ioctl+0x254>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SD_disk_ioctl+0x86>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e0e1      	b.n	8000f4a <SD_disk_ioctl+0x24a>

		SELECT();
 8000d86:	f7ff fc15 	bl	80005b4 <SELECT>

		switch (ctrl)
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	2b0d      	cmp	r3, #13
 8000d8e:	f200 80cb 	bhi.w	8000f28 <SD_disk_ioctl+0x228>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <SD_disk_ioctl+0x98>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000e93 	.word	0x08000e93
 8000d9c:	08000dd1 	.word	0x08000dd1
 8000da0:	08000e83 	.word	0x08000e83
 8000da4:	08000f29 	.word	0x08000f29
 8000da8:	08000f29 	.word	0x08000f29
 8000dac:	08000f29 	.word	0x08000f29
 8000db0:	08000f29 	.word	0x08000f29
 8000db4:	08000f29 	.word	0x08000f29
 8000db8:	08000f29 	.word	0x08000f29
 8000dbc:	08000f29 	.word	0x08000f29
 8000dc0:	08000f29 	.word	0x08000f29
 8000dc4:	08000ea5 	.word	0x08000ea5
 8000dc8:	08000ec9 	.word	0x08000ec9
 8000dcc:	08000eed 	.word	0x08000eed
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2049      	movs	r0, #73	; 0x49
 8000dd4:	f7ff fd4f 	bl	8000876 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 80a8 	bne.w	8000f30 <SD_disk_ioctl+0x230>
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2110      	movs	r1, #16
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fcd2 	bl	8000790 <SD_RxDataBlock>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 809e 	beq.w	8000f30 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000df4:	7b3b      	ldrb	r3, [r7, #12]
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d10e      	bne.n	8000e1c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dfe:	7d7b      	ldrb	r3, [r7, #21]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	7d3b      	ldrb	r3, [r7, #20]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e12:	8bfb      	ldrh	r3, [r7, #30]
 8000e14:	029a      	lsls	r2, r3, #10
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e02e      	b.n	8000e7a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e1c:	7c7b      	ldrb	r3, [r7, #17]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	09db      	lsrs	r3, r3, #7
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	7d7b      	ldrb	r3, [r7, #21]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0306 	and.w	r3, r3, #6
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e44:	7d3b      	ldrb	r3, [r7, #20]
 8000e46:	099b      	lsrs	r3, r3, #6
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	7cfb      	ldrb	r3, [r7, #19]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	7cbb      	ldrb	r3, [r7, #18]
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e6c:	8bfa      	ldrh	r2, [r7, #30]
 8000e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e72:	3b09      	subs	r3, #9
 8000e74:	409a      	lsls	r2, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e80:	e056      	b.n	8000f30 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e90:	e055      	b.n	8000f3e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e92:	f7ff fc09 	bl	80006a8 <SD_ReadyWait>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d14b      	bne.n	8000f34 <SD_disk_ioctl+0x234>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ea2:	e047      	b.n	8000f34 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2049      	movs	r0, #73	; 0x49
 8000ea8:	f7ff fce5 	bl	8000876 <SD_SendCmd>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d142      	bne.n	8000f38 <SD_disk_ioctl+0x238>
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	6a38      	ldr	r0, [r7, #32]
 8000eb6:	f7ff fc6b 	bl	8000790 <SD_RxDataBlock>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03b      	beq.n	8000f38 <SD_disk_ioctl+0x238>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ec6:	e037      	b.n	8000f38 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	204a      	movs	r0, #74	; 0x4a
 8000ecc:	f7ff fcd3 	bl	8000876 <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d132      	bne.n	8000f3c <SD_disk_ioctl+0x23c>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc59 	bl	8000790 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d02b      	beq.n	8000f3c <SD_disk_ioctl+0x23c>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eea:	e027      	b.n	8000f3c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000eec:	2100      	movs	r1, #0
 8000eee:	207a      	movs	r0, #122	; 0x7a
 8000ef0:	f7ff fcc1 	bl	8000876 <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f00:	e00b      	b.n	8000f1a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000f02:	6a3c      	ldr	r4, [r7, #32]
 8000f04:	1c63      	adds	r3, r4, #1
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	f7ff fba4 	bl	8000654 <SPI_RxByte>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f14:	3301      	adds	r3, #1
 8000f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d9ef      	bls.n	8000f02 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f2e:	e006      	b.n	8000f3e <SD_disk_ioctl+0x23e>
			break;
 8000f30:	bf00      	nop
 8000f32:	e004      	b.n	8000f3e <SD_disk_ioctl+0x23e>
			break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <SD_disk_ioctl+0x23e>
			break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <SD_disk_ioctl+0x23e>
			break;
 8000f3c:	bf00      	nop
		}

		DESELECT();
 8000f3e:	f7ff fb47 	bl	80005d0 <DESELECT>
		SPI_RxByte();
 8000f42:	f7ff fb87 	bl	8000654 <SPI_RxByte>
	}

	return res;
 8000f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	372c      	adds	r7, #44	; 0x2c
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000

08000f58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f80:	e000      	b.n	8000f84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f9      	beq.n	8000f82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	int i=0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000fb2:	e002      	b.n	8000fba <bufsize+0x14>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f6      	bne.n	8000fb4 <bufsize+0xe>
	return i;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <clear_buffer>:

void clear_buffer (void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	e007      	b.n	8000ff0 <clear_buffer+0x1c>
 8000fe0:	4a08      	ldr	r2, [pc, #32]	; (8001004 <clear_buffer+0x30>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff4:	ddf4      	ble.n	8000fe0 <clear_buffer+0xc>
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20002174 	.word	0x20002174

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fb40 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f886 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f928 	bl	8001268 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001018:	f000 f8f0 	bl	80011fc <MX_SPI1_Init>
  MX_FATFS_Init();
 800101c:	f001 ffee 	bl	8002ffc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (500);
 8001020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001024:	f000 fba6 	bl	8001774 <HAL_Delay>

    fresult = f_mount(&fs, "/", 1);
 8001028:	2201      	movs	r2, #1
 800102a:	492e      	ldr	r1, [pc, #184]	; (80010e4 <main+0xdc>)
 800102c:	482e      	ldr	r0, [pc, #184]	; (80010e8 <main+0xe0>)
 800102e:	f004 fa2f 	bl	8005490 <f_mount>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <main+0xe4>)
 8001038:	701a      	strb	r2, [r3, #0]
    	if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <main+0xe4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <main+0x42>
 8001042:	482b      	ldr	r0, [pc, #172]	; (80010f0 <main+0xe8>)
 8001044:	f005 f9ba 	bl	80063bc <puts>
 8001048:	e002      	b.n	8001050 <main+0x48>
    	else printf("SD CARD mounted successfully...\n\n");
 800104a:	482a      	ldr	r0, [pc, #168]	; (80010f4 <main+0xec>)
 800104c:	f005 f9b6 	bl	80063bc <puts>

    	/* Create second file with read write access and open it */
    	  	fresult = f_open(&fil, "file5.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001050:	220a      	movs	r2, #10
 8001052:	4929      	ldr	r1, [pc, #164]	; (80010f8 <main+0xf0>)
 8001054:	4829      	ldr	r0, [pc, #164]	; (80010fc <main+0xf4>)
 8001056:	f004 fa61 	bl	800551c <f_open>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <main+0xe4>)
 8001060:	701a      	strb	r2, [r3, #0]

    	  	/* Writing text */
    	  	strcpy (buffer, "This is TestFile.txt, written using ...f_write... and it says Hello from Dutah\n");
 8001062:	4a27      	ldr	r2, [pc, #156]	; (8001100 <main+0xf8>)
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <main+0xfc>)
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	2350      	movs	r3, #80	; 0x50
 800106c:	461a      	mov	r2, r3
 800106e:	f005 f909 	bl	8006284 <memcpy>

    	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <main+0xf8>)
 8001074:	f7ff ff97 	bl	8000fa6 <bufsize>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <main+0x100>)
 800107e:	4920      	ldr	r1, [pc, #128]	; (8001100 <main+0xf8>)
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <main+0xf4>)
 8001082:	f004 fd76 	bl	8005b72 <f_write>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <main+0xe4>)
 800108c:	701a      	strb	r2, [r3, #0]

    	  	printf ("File5.txt created and data is written\n");
 800108e:	481f      	ldr	r0, [pc, #124]	; (800110c <main+0x104>)
 8001090:	f005 f994 	bl	80063bc <puts>

    	  	/* Close file */
    	  	f_close(&fil);
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <main+0xf4>)
 8001096:	f004 ff7e 	bl	8005f96 <f_close>



    	  	// clearing buffer to show that result obtained is from the file
    	  	clear_buffer();
 800109a:	f7ff ff9b 	bl	8000fd4 <clear_buffer>

    	  	/* Open second file to read */
    	  	fresult = f_open(&fil, "file3.txt", FA_READ);
 800109e:	2201      	movs	r2, #1
 80010a0:	491b      	ldr	r1, [pc, #108]	; (8001110 <main+0x108>)
 80010a2:	4816      	ldr	r0, [pc, #88]	; (80010fc <main+0xf4>)
 80010a4:	f004 fa3a 	bl	800551c <f_open>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <main+0xe4>)
 80010ae:	701a      	strb	r2, [r3, #0]
    	  	if (fresult == FR_OK)printf ("file2.txt is open and the data is shown below\n");
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <main+0xe4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <main+0xb6>
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <main+0x10c>)
 80010ba:	f005 f97f 	bl	80063bc <puts>

    	  	/* Read data from the file
    	  	 * Please see the function details for the arguments */
    	  	f_read (&fil, buffer, f_size(&fil), &br);
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <main+0xf4>)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <main+0x110>)
 80010c4:	490e      	ldr	r1, [pc, #56]	; (8001100 <main+0xf8>)
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <main+0xf4>)
 80010c8:	f004 fbf4 	bl	80058b4 <f_read>
    	  	printf(buffer);
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <main+0xf8>)
 80010ce:	f005 f8ef 	bl	80062b0 <iprintf>
    	  	printf("\n\n");
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <main+0x114>)
 80010d4:	f005 f972 	bl	80063bc <puts>

    	  	/* Close file */
    	  	f_close(&fil);
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <main+0xf4>)
 80010da:	f004 ff5c 	bl	8005f96 <f_close>

    	  	clear_buffer();
 80010de:	f7ff ff79 	bl	8000fd4 <clear_buffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0xda>
 80010e4:	080072d0 	.word	0x080072d0
 80010e8:	20000100 	.word	0x20000100
 80010ec:	20002168 	.word	0x20002168
 80010f0:	080072d4 	.word	0x080072d4
 80010f4:	080072f8 	.word	0x080072f8
 80010f8:	0800731c 	.word	0x0800731c
 80010fc:	20001138 	.word	0x20001138
 8001100:	20002174 	.word	0x20002174
 8001104:	08007328 	.word	0x08007328
 8001108:	20002170 	.word	0x20002170
 800110c:	08007378 	.word	0x08007378
 8001110:	080073a0 	.word	0x080073a0
 8001114:	080073ac 	.word	0x080073ac
 8001118:	2000216c 	.word	0x2000216c
 800111c:	080073dc 	.word	0x080073dc

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2234      	movs	r2, #52	; 0x34
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f005 f8b6 	bl	80062a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SystemClock_Config+0xd4>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <SystemClock_Config+0xd4>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemClock_Config+0xd4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemClock_Config+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <SystemClock_Config+0xd8>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <SystemClock_Config+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001194:	230f      	movs	r3, #15
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001198:	23d8      	movs	r3, #216	; 0xd8
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 5;
 80011a4:	2305      	movs	r3, #5
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 f855 	bl	800225c <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011b8:	f000 f8c2 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80011c0:	2303      	movs	r3, #3
 80011c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fdae 	bl	8001d3c <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011e6:	f000 f8ab 	bl	8001340 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	; 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_SPI1_Init+0x64>)
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <MX_SPI1_Init+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_SPI1_Init+0x64>)
 8001208:	f44f 7282 	mov.w	r2, #260	; 0x104
 800120c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_SPI1_Init+0x64>)
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_SPI1_Init+0x64>)
 8001230:	2208      	movs	r2, #8
 8001232:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_SPI1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_SPI1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_SPI1_Init+0x64>)
 8001248:	220a      	movs	r2, #10
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_SPI1_Init+0x64>)
 800124e:	f001 faa3 	bl	8002798 <HAL_SPI_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001258:	f000 f872 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000a8 	.word	0x200000a8
 8001264:	40013000 	.word	0x40013000

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_GPIO_Init+0x98>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_GPIO_Init+0x98>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_GPIO_Init+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_GPIO_Init+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <MX_GPIO_Init+0x98>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_GPIO_Init+0x98>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_GPIO_Init+0x98>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <MX_GPIO_Init+0x98>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_GPIO_Init+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2110      	movs	r1, #16
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012d8:	f000 fd16 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80012dc:	2310      	movs	r3, #16
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012f4:	f000 fb74 	bl	80019e0 <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800

08001308 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e009      	b.n	800132e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe18 	bl	8000f58 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf1      	blt.n	800131a <_write+0x12>
	}
	return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_MspInit+0x58>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <HAL_MspInit+0x58>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x58>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x58>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_MspInit+0x58>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x58>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2005      	movs	r0, #5
 8001390:	f000 faef 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001394:	2005      	movs	r0, #5
 8001396:	f000 fb08 	bl	80019aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_SPI_MspInit+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12b      	bne.n	8001422 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_SPI_MspInit+0x88>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_SPI_MspInit+0x88>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_SPI_MspInit+0x88>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_SPI_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_SPI_MspInit+0x88>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_SPI_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001402:	23e0      	movs	r3, #224	; 0xe0
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <HAL_SPI_MspInit+0x8c>)
 800141e:	f000 fadf 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40013000 	.word	0x40013000
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <SDTimer_Handler+0x40>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <SDTimer_Handler+0x1c>
    Timer1--;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <SDTimer_Handler+0x40>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <SDTimer_Handler+0x40>)
 8001452:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <SDTimer_Handler+0x44>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <SDTimer_Handler+0x34>
    Timer2--;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <SDTimer_Handler+0x44>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <SDTimer_Handler+0x44>)
 800146a:	801a      	strh	r2, [r3, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200021f6 	.word	0x200021f6
 800147c:	200021f8 	.word	0x200021f8

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <SysTick_Handler+0x30>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <SysTick_Handler+0x30>)
 80014d8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <SysTick_Handler+0x30>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	d904      	bls.n	80014ee <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Handler+0x30>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80014ea:	f7ff ffa5 	bl	8001438 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ee:	f000 f921 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200021f4 	.word	0x200021f4

080014fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e00a      	b.n	8001532 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800151c:	f3af 8000 	nop.w
 8001520:	4601      	mov	r1, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf0      	blt.n	800151c <_read+0x12>
	}

return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156c:	605a      	str	r2, [r3, #4]
	return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_isatty>:

int _isatty(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
	return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f004 fe28 	bl	8006230 <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20020000 	.word	0x20020000
 800160c:	00000400 	.word	0x00000400
 8001610:	200021fc 	.word	0x200021fc
 8001614:	20002450 	.word	0x20002450

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001666:	f7ff ffd7 	bl	8001618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f004 fde7 	bl	800623c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fccb 	bl	8001008 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001680:	08007920 	.word	0x08007920
  ldr r2, =_sbss
 8001684:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001688:	20002450 	.word	0x20002450

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f94f 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fe42 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f967 	bl	80019c6 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f92f 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000004 	.word	0x20000004
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c
 8001758:	20002200 	.word	0x20002200

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20002200 	.word	0x20002200

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__NVIC_SetPriorityGrouping>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff3e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff31 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e165      	b.n	8001cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8154 	bne.w	8001cc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ae 	beq.w	8001cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x308>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d025      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01f      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x20a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x206>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f ae96 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40021400 	.word	0x40021400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	619a      	str	r2, [r3, #24]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cc      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d90c      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d044      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e067      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4934      	ldr	r1, [pc, #208]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fc96 	bl	800175c <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff fc92 	bl	800175c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	490a      	ldr	r1, [pc, #40]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fbf6 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08007428 	.word	0x08007428
 8001f00:	20000004 	.word	0x20000004
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f0c:	b0a6      	sub	sp, #152	; 0x98
 8001f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f2e:	4bc8      	ldr	r3, [pc, #800]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	f200 817e 	bhi.w	8002238 <HAL_RCC_GetSysClockFreq+0x330>
 8001f3c:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08002239 	.word	0x08002239
 8001f4c:	08002239 	.word	0x08002239
 8001f50:	08002239 	.word	0x08002239
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	08002239 	.word	0x08002239
 8001f5c:	08002239 	.word	0x08002239
 8001f60:	08002239 	.word	0x08002239
 8001f64:	08001f89 	.word	0x08001f89
 8001f68:	08002239 	.word	0x08002239
 8001f6c:	08002239 	.word	0x08002239
 8001f70:	08002239 	.word	0x08002239
 8001f74:	080020f3 	.word	0x080020f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4bb6      	ldr	r3, [pc, #728]	; (8002254 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001f7e:	e15f      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4bb5      	ldr	r3, [pc, #724]	; (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f86:	e15b      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f88:	4bb1      	ldr	r3, [pc, #708]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f94:	4bae      	ldr	r3, [pc, #696]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d031      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa0:	4bab      	ldr	r3, [pc, #684]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8001fb8:	4ba7      	ldr	r3, [pc, #668]	; (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001fbe:	462a      	mov	r2, r5
 8001fc0:	fb03 f202 	mul.w	r2, r3, r2
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	4aa2      	ldr	r2, [pc, #648]	; (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	fba1 1202 	umull	r1, r2, r1, r2
 8001fd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fd8:	460a      	mov	r2, r1
 8001fda:	67ba      	str	r2, [r7, #120]	; 0x78
 8001fdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fde:	4413      	add	r3, r2
 8001fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ff0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ff4:	f7fe f95c 	bl	80002b0 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002002:	e064      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002004:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	2200      	movs	r2, #0
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
 800200e:	657a      	str	r2, [r7, #84]	; 0x54
 8002010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002016:	64bb      	str	r3, [r7, #72]	; 0x48
 8002018:	2300      	movs	r3, #0
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800201c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002020:	4622      	mov	r2, r4
 8002022:	462b      	mov	r3, r5
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	0159      	lsls	r1, r3, #5
 800202e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002032:	0150      	lsls	r0, r2, #5
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4621      	mov	r1, r4
 800203a:	1a51      	subs	r1, r2, r1
 800203c:	6139      	str	r1, [r7, #16]
 800203e:	4629      	mov	r1, r5
 8002040:	eb63 0301 	sbc.w	r3, r3, r1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002052:	4659      	mov	r1, fp
 8002054:	018b      	lsls	r3, r1, #6
 8002056:	4651      	mov	r1, sl
 8002058:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800205c:	4651      	mov	r1, sl
 800205e:	018a      	lsls	r2, r1, #6
 8002060:	4651      	mov	r1, sl
 8002062:	ebb2 0801 	subs.w	r8, r2, r1
 8002066:	4659      	mov	r1, fp
 8002068:	eb63 0901 	sbc.w	r9, r3, r1
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002078:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800207c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002080:	4690      	mov	r8, r2
 8002082:	4699      	mov	r9, r3
 8002084:	4623      	mov	r3, r4
 8002086:	eb18 0303 	adds.w	r3, r8, r3
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	462b      	mov	r3, r5
 800208e:	eb49 0303 	adc.w	r3, r9, r3
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020a0:	4629      	mov	r1, r5
 80020a2:	028b      	lsls	r3, r1, #10
 80020a4:	4621      	mov	r1, r4
 80020a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020aa:	4621      	mov	r1, r4
 80020ac:	028a      	lsls	r2, r1, #10
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020b6:	2200      	movs	r2, #0
 80020b8:	643b      	str	r3, [r7, #64]	; 0x40
 80020ba:	647a      	str	r2, [r7, #68]	; 0x44
 80020bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020c0:	f7fe f8f6 	bl	80002b0 <__aeabi_uldivmod>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4613      	mov	r3, r2
 80020ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ce:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	3301      	adds	r3, #1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80020e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020f0:	e0a6      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02a      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	2200      	movs	r2, #0
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
 8002114:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800211c:	2100      	movs	r1, #0
 800211e:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8002120:	fb03 f201 	mul.w	r2, r3, r1
 8002124:	2300      	movs	r3, #0
 8002126:	fb00 f303 	mul.w	r3, r0, r3
 800212a:	4413      	add	r3, r2
 800212c:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 800212e:	fba0 1202 	umull	r1, r2, r0, r2
 8002132:	677a      	str	r2, [r7, #116]	; 0x74
 8002134:	460a      	mov	r2, r1
 8002136:	673a      	str	r2, [r7, #112]	; 0x70
 8002138:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800213a:	4413      	add	r3, r2
 800213c:	677b      	str	r3, [r7, #116]	; 0x74
 800213e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002142:	2200      	movs	r2, #0
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
 8002146:	637a      	str	r2, [r7, #52]	; 0x34
 8002148:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800214c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002150:	f7fe f8ae 	bl	80002b0 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800215e:	e05b      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002160:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	2200      	movs	r2, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 800216a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800217c:	4642      	mov	r2, r8
 800217e:	464b      	mov	r3, r9
 8002180:	f04f 0000 	mov.w	r0, #0
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	0159      	lsls	r1, r3, #5
 800218a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800218e:	0150      	lsls	r0, r2, #5
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4641      	mov	r1, r8
 8002196:	ebb2 0a01 	subs.w	sl, r2, r1
 800219a:	4649      	mov	r1, r9
 800219c:	eb63 0b01 	sbc.w	fp, r3, r1
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021b4:	ebb2 040a 	subs.w	r4, r2, sl
 80021b8:	eb63 050b 	sbc.w	r5, r3, fp
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	00eb      	lsls	r3, r5, #3
 80021c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ca:	00e2      	lsls	r2, r4, #3
 80021cc:	4614      	mov	r4, r2
 80021ce:	461d      	mov	r5, r3
 80021d0:	4643      	mov	r3, r8
 80021d2:	18e3      	adds	r3, r4, r3
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	464b      	mov	r3, r9
 80021d8:	eb45 0303 	adc.w	r3, r5, r3
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ea:	4629      	mov	r1, r5
 80021ec:	028b      	lsls	r3, r1, #10
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f4:	4621      	mov	r1, r4
 80021f6:	028a      	lsls	r2, r1, #10
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002200:	2200      	movs	r2, #0
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	61fa      	str	r2, [r7, #28]
 8002206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220a:	f7fe f851 	bl	80002b0 <__aeabi_uldivmod>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4613      	mov	r3, r2
 8002214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0f1b      	lsrs	r3, r3, #28
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800222a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002236:	e003      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetSysClockFreq+0x34c>)
 800223a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800223e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002240:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002244:	4618      	mov	r0, r3
 8002246:	3798      	adds	r7, #152	; 0x98
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	00f42400 	.word	0x00f42400
 8002258:	017d7840 	.word	0x017d7840

0800225c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e28d      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8083 	beq.w	8002382 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800227c:	4b94      	ldr	r3, [pc, #592]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b04      	cmp	r3, #4
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002288:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002290:	2b08      	cmp	r3, #8
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002294:	4b8e      	ldr	r3, [pc, #568]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a0:	d00c      	beq.n	80022bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b8b      	ldr	r3, [pc, #556]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x124>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e25a      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x90>
 80022de:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xcc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0xb4>
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a72      	ldr	r2, [pc, #456]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xcc>
 8002310:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6b      	ldr	r2, [pc, #428]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff fa14 	bl	800175c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff fa10 	bl	800175c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e21f      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xdc>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fa00 	bl	800175c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff f9fc 	bl	800175c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e20b      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x104>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06f      	beq.n	800246e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d017      	beq.n	80023ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x186>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1d3      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4937      	ldr	r1, [pc, #220]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x278>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7ff f9a9 	bl	800175c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7ff f9a5 	bl	800175c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1b4      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4925      	ldr	r1, [pc, #148]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x278>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f988 	bl	800175c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002450:	f7ff f984 	bl	800175c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e193      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d036      	beq.n	80024e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7ff f968 	bl	800175c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7ff f964 	bl	800175c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e173      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x234>
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff f951 	bl	800175c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e00e      	b.n	80024dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7ff f94d 	bl	800175c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d907      	bls.n	80024dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e15c      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ea      	bne.n	80024be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8097 	beq.w	8002624 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b83      	ldr	r3, [pc, #524]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a7e      	ldr	r2, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b79      	ldr	r3, [pc, #484]	; (800270c <HAL_RCC_OscConfig+0x4b0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b76      	ldr	r3, [pc, #472]	; (800270c <HAL_RCC_OscConfig+0x4b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a75      	ldr	r2, [pc, #468]	; (800270c <HAL_RCC_OscConfig+0x4b0>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7ff f90d 	bl	800175c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7ff f909 	bl	800175c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e118      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b6c      	ldr	r3, [pc, #432]	; (800270c <HAL_RCC_OscConfig+0x4b0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x31e>
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x358>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x340>
 8002582:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a60      	ldr	r2, [pc, #384]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a5d      	ldr	r2, [pc, #372]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0x358>
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a59      	ldr	r2, [pc, #356]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7ff f8ce 	bl	800175c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7ff f8ca 	bl	800175c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0d7      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ee      	beq.n	80025c4 <HAL_RCC_OscConfig+0x368>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff f8b8 	bl	800175c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7ff f8b4 	bl	800175c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0c1      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a3a      	ldr	r2, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80ad 	beq.w	8002788 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262e:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d060      	beq.n	80026fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d145      	bne.n	80026ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <HAL_RCC_OscConfig+0x4b4>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff f888 	bl	800175c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff f884 	bl	800175c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e093      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	019b      	lsls	r3, r3, #6
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	491b      	ldr	r1, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_RCC_OscConfig+0x4b4>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff f859 	bl	800175c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff f855 	bl	800175c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e064      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x452>
 80026cc:	e05c      	b.n	8002788 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_RCC_OscConfig+0x4b4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f842 	bl	800175c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff f83e 	bl	800175c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e04d      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x480>
 80026fa:	e045      	b.n	8002788 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e040      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000
 8002710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002714:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <HAL_RCC_OscConfig+0x538>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d030      	beq.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d129      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d122      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d119      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07b      	b.n	80028a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d009      	beq.n	80027d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
 80027c2:	e005      	b.n	80027d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fddc 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0104 	and.w	r1, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0210 	and.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b088      	sub	sp, #32
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_SPI_Transmit+0x22>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e126      	b.n	8002b1a <HAL_SPI_Transmit+0x270>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d4:	f7fe ff42 	bl	800175c <HAL_GetTick>
 80028d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d002      	beq.n	80028f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ee:	e10b      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Transmit+0x52>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002900:	e102      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2203      	movs	r2, #3
 8002906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002948:	d10f      	bne.n	800296a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d007      	beq.n	8002988 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002990:	d14b      	bne.n	8002a2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Transmit+0xf6>
 800299a:	8afb      	ldrh	r3, [r7, #22]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d13e      	bne.n	8002a1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	881a      	ldrh	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	1c9a      	adds	r2, r3, #2
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c4:	e02b      	b.n	8002a1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d112      	bne.n	80029fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	1c9a      	adds	r2, r3, #2
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f8:	e011      	b.n	8002a1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fa:	f7fe feaf 	bl	800175c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d803      	bhi.n	8002a12 <HAL_SPI_Transmit+0x168>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d102      	bne.n	8002a18 <HAL_SPI_Transmit+0x16e>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a1c:	e074      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ce      	bne.n	80029c6 <HAL_SPI_Transmit+0x11c>
 8002a28:	e04c      	b.n	8002ac4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0x18e>
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d140      	bne.n	8002aba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a5e:	e02c      	b.n	8002aba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d113      	bne.n	8002a96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a94:	e011      	b.n	8002aba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a96:	f7fe fe61 	bl	800175c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d803      	bhi.n	8002aae <HAL_SPI_Transmit+0x204>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Transmit+0x20a>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab8:	e026      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1cd      	bne.n	8002a60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa55 	bl	8002f78 <SPI_EndRxTxTransaction>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e000      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b08c      	sub	sp, #48	; 0x30
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b30:	2301      	movs	r3, #1
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_SPI_TransmitReceive+0x26>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e18a      	b.n	8002e5e <HAL_SPI_TransmitReceive+0x33c>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b50:	f7fe fe04 	bl	800175c <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d00f      	beq.n	8002b92 <HAL_SPI_TransmitReceive+0x70>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b78:	d107      	bne.n	8002b8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <HAL_SPI_TransmitReceive+0x68>
 8002b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d003      	beq.n	8002b92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b90:	e15b      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x82>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x82>
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002baa:	e14e      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d003      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	887a      	ldrh	r2, [r7, #2]
 8002bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d007      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	d178      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x10a>
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d166      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	881a      	ldrh	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	1c9a      	adds	r2, r3, #2
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c50:	e053      	b.n	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x176>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x176>
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d113      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	881a      	ldrh	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d119      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x1b8>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d014      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	1c9a      	adds	r2, r3, #2
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cda:	f7fe fd3f 	bl	800175c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d807      	bhi.n	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d003      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cf8:	e0a7      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1a6      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x130>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1a1      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x130>
 8002d0e:	e07c      	b.n	8002e0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_TransmitReceive+0x1fc>
 8002d18:	8b7b      	ldrh	r3, [r7, #26]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d16b      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d44:	e057      	b.n	8002df6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d11c      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x26c>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d017      	beq.n	8002d8e <HAL_SPI_TransmitReceive+0x26c>
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d114      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d119      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x2ae>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d014      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dd0:	f7fe fcc4 	bl	800175c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d803      	bhi.n	8002de8 <HAL_SPI_TransmitReceive+0x2c6>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d102      	bne.n	8002dee <HAL_SPI_TransmitReceive+0x2cc>
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002df4:	e029      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1a2      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x224>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d19d      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f8b2 	bl	8002f78 <SPI_EndRxTxTransaction>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e26:	e010      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	e000      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3730      	adds	r7, #48	; 0x30
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e78:	f7fe fc70 	bl	800175c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e88:	f7fe fc68 	bl	800175c <HAL_GetTick>
 8002e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	015b      	lsls	r3, r3, #5
 8002e94:	0d1b      	lsrs	r3, r3, #20
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e9e:	e054      	b.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d050      	beq.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ea8:	f7fe fc58 	bl	800175c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d902      	bls.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d13d      	bne.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed6:	d111      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee0:	d004      	beq.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d107      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f04:	d10f      	bne.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e017      	b.n	8002f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d19b      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000004 	.word	0x20000004

08002f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <SPI_EndRxTxTransaction+0x7c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <SPI_EndRxTxTransaction+0x80>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0d5b      	lsrs	r3, r3, #21
 8002f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa2:	d112      	bne.n	8002fca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff ff5a 	bl	8002e68 <SPI_WaitFlagStateUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e00f      	b.n	8002fea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d0f2      	beq.n	8002fca <SPI_EndRxTxTransaction+0x52>
 8002fe4:	e000      	b.n	8002fe8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fe6:	bf00      	nop
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	165e9f81 	.word	0x165e9f81

08002ffc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003000:	4904      	ldr	r1, [pc, #16]	; (8003014 <MX_FATFS_Init+0x18>)
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_FATFS_Init+0x1c>)
 8003004:	f003 f83e 	bl	8006084 <FATFS_LinkDriver>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <MX_FATFS_Init+0x20>)
 800300e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20002208 	.word	0x20002208
 8003018:	20000010 	.word	0x20000010
 800301c:	20002204 	.word	0x20002204

08003020 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003024:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fc6f 	bl	8000920 <SD_disk_initialize>
 8003042:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fd4d 	bl	8000af8 <SD_disk_status>
 800305e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4603      	mov	r3, r0
 8003076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003078:	7bf8      	ldrb	r0, [r7, #15]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	f7fd fd50 	bl	8000b24 <SD_disk_read>
 8003084:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800309e:	7bf8      	ldrb	r0, [r7, #15]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	f7fd fda7 	bl	8000bf8 <SD_disk_write>
 80030aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	603a      	str	r2, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	460b      	mov	r3, r1
 80030c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 80030c4:	79b9      	ldrb	r1, [r7, #6]
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fe18 	bl	8000d00 <SD_disk_ioctl>
 80030d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <disk_status+0x30>)
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	79fa      	ldrb	r2, [r7, #7]
 80030f4:	4905      	ldr	r1, [pc, #20]	; (800310c <disk_status+0x30>)
 80030f6:	440a      	add	r2, r1
 80030f8:	7a12      	ldrb	r2, [r2, #8]
 80030fa:	4610      	mov	r0, r2
 80030fc:	4798      	blx	r3
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20002434 	.word	0x20002434

08003110 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <disk_initialize+0x48>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	4a0b      	ldr	r2, [pc, #44]	; (8003158 <disk_initialize+0x48>)
 800312c:	2101      	movs	r1, #1
 800312e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <disk_initialize+0x48>)
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	79fa      	ldrb	r2, [r7, #7]
 800313e:	4906      	ldr	r1, [pc, #24]	; (8003158 <disk_initialize+0x48>)
 8003140:	440a      	add	r2, r1
 8003142:	7a12      	ldrb	r2, [r2, #8]
 8003144:	4610      	mov	r0, r2
 8003146:	4798      	blx	r3
 8003148:	4603      	mov	r3, r0
 800314a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20002434 	.word	0x20002434

0800315c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <disk_read+0x3c>)
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	689c      	ldr	r4, [r3, #8]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <disk_read+0x3c>)
 800317c:	4413      	add	r3, r2
 800317e:	7a18      	ldrb	r0, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	47a0      	blx	r4
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]
  return res;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	bf00      	nop
 8003198:	20002434 	.word	0x20002434

0800319c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <disk_write+0x3c>)
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68dc      	ldr	r4, [r3, #12]
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <disk_write+0x3c>)
 80031bc:	4413      	add	r3, r2
 80031be:	7a18      	ldrb	r0, [r3, #8]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	47a0      	blx	r4
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20002434 	.word	0x20002434

080031dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	603a      	str	r2, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
 80031e8:	460b      	mov	r3, r1
 80031ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <disk_ioctl+0x38>)
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	79fa      	ldrb	r2, [r7, #7]
 80031fa:	4906      	ldr	r1, [pc, #24]	; (8003214 <disk_ioctl+0x38>)
 80031fc:	440a      	add	r2, r1
 80031fe:	7a10      	ldrb	r0, [r2, #8]
 8003200:	79b9      	ldrb	r1, [r7, #6]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	4798      	blx	r3
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]
  return res;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20002434 	.word	0x20002434

08003218 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3301      	adds	r3, #1
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	b21a      	sxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b21b      	sxth	r3, r3
 8003234:	4313      	orrs	r3, r2
 8003236:	b21b      	sxth	r3, r3
 8003238:	81fb      	strh	r3, [r7, #14]
	return rv;
 800323a:	89fb      	ldrh	r3, [r7, #14]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3303      	adds	r3, #3
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	3202      	adds	r2, #2
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	3201      	adds	r2, #1
 800326e:	7812      	ldrb	r2, [r2, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003280:	68fb      	ldr	r3, [r7, #12]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	1c53      	adds	r3, r2, #1
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	6179      	str	r1, [r7, #20]
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3b01      	subs	r3, #1
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f1      	bne.n	8003336 <mem_cpy+0x1a>
	}
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800335e:	b480      	push	{r7}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	617a      	str	r2, [r7, #20]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3b01      	subs	r3, #1
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f3      	bne.n	800336e <mem_set+0x10>
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	61ba      	str	r2, [r7, #24]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	1acb      	subs	r3, r1, r3
 80033c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <mem_cmp+0x40>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0eb      	beq.n	80033ac <mem_cmp+0x18>

	return r;
 80033d4:	697b      	ldr	r3, [r7, #20]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80033ec:	e002      	b.n	80033f4 <chk_chr+0x12>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3301      	adds	r3, #1
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <chk_chr+0x26>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4293      	cmp	r3, r2
 8003406:	d1f2      	bne.n	80033ee <chk_chr+0xc>
	return *str;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e029      	b.n	8003480 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <chk_lock+0xb4>)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4413      	add	r3, r2
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01d      	beq.n	8003476 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800343a:	4a24      	ldr	r2, [pc, #144]	; (80034cc <chk_lock+0xb4>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4413      	add	r3, r2
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d116      	bne.n	800347a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <chk_lock+0xb4>)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800345c:	429a      	cmp	r2, r3
 800345e:	d10c      	bne.n	800347a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003460:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <chk_lock+0xb4>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4413      	add	r3, r2
 8003468:	3308      	adds	r3, #8
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003470:	429a      	cmp	r2, r3
 8003472:	d102      	bne.n	800347a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003474:	e007      	b.n	8003486 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003476:	2301      	movs	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3301      	adds	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d9d2      	bls.n	800342c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d109      	bne.n	80034a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <chk_lock+0x80>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d101      	bne.n	800349c <chk_lock+0x84>
 8003498:	2300      	movs	r3, #0
 800349a:	e010      	b.n	80034be <chk_lock+0xa6>
 800349c:	2312      	movs	r3, #18
 800349e:	e00e      	b.n	80034be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <chk_lock+0xa0>
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <chk_lock+0xb4>)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4413      	add	r3, r2
 80034ae:	330c      	adds	r3, #12
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b6:	d101      	bne.n	80034bc <chk_lock+0xa4>
 80034b8:	2310      	movs	r3, #16
 80034ba:	e000      	b.n	80034be <chk_lock+0xa6>
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20002214 	.word	0x20002214

080034d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	e002      	b.n	80034e2 <enq_lock+0x12>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3301      	adds	r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d806      	bhi.n	80034f6 <enq_lock+0x26>
 80034e8:	4a09      	ldr	r2, [pc, #36]	; (8003510 <enq_lock+0x40>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4413      	add	r3, r2
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f2      	bne.n	80034dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20002214 	.word	0x20002214

08003514 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e01f      	b.n	8003564 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003524:	4a41      	ldr	r2, [pc, #260]	; (800362c <inc_lock+0x118>)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4413      	add	r3, r2
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d113      	bne.n	800355e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003536:	4a3d      	ldr	r2, [pc, #244]	; (800362c <inc_lock+0x118>)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003546:	429a      	cmp	r2, r3
 8003548:	d109      	bne.n	800355e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800354a:	4a38      	ldr	r2, [pc, #224]	; (800362c <inc_lock+0x118>)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4413      	add	r3, r2
 8003552:	3308      	adds	r3, #8
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800355a:	429a      	cmp	r2, r3
 800355c:	d006      	beq.n	800356c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3301      	adds	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d9dc      	bls.n	8003524 <inc_lock+0x10>
 800356a:	e000      	b.n	800356e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800356c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d132      	bne.n	80035da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e002      	b.n	8003580 <inc_lock+0x6c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d806      	bhi.n	8003594 <inc_lock+0x80>
 8003586:	4a29      	ldr	r2, [pc, #164]	; (800362c <inc_lock+0x118>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f2      	bne.n	800357a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d101      	bne.n	800359e <inc_lock+0x8a>
 800359a:	2300      	movs	r3, #0
 800359c:	e040      	b.n	8003620 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4922      	ldr	r1, [pc, #136]	; (800362c <inc_lock+0x118>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	440b      	add	r3, r1
 80035aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	491e      	ldr	r1, [pc, #120]	; (800362c <inc_lock+0x118>)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	440b      	add	r3, r1
 80035b8:	3304      	adds	r3, #4
 80035ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	491a      	ldr	r1, [pc, #104]	; (800362c <inc_lock+0x118>)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	440b      	add	r3, r1
 80035c8:	3308      	adds	r3, #8
 80035ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <inc_lock+0x118>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	4413      	add	r3, r2
 80035d4:	330c      	adds	r3, #12
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <inc_lock+0xe0>
 80035e0:	4a12      	ldr	r2, [pc, #72]	; (800362c <inc_lock+0x118>)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	4413      	add	r3, r2
 80035e8:	330c      	adds	r3, #12
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <inc_lock+0xe0>
 80035f0:	2300      	movs	r3, #0
 80035f2:	e015      	b.n	8003620 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <inc_lock+0xf8>
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <inc_lock+0x118>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	4413      	add	r3, r2
 8003602:	330c      	adds	r3, #12
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	e001      	b.n	8003610 <inc_lock+0xfc>
 800360c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <inc_lock+0x118>)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	440b      	add	r3, r1
 8003618:	330c      	adds	r3, #12
 800361a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20002214 	.word	0x20002214

08003630 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d825      	bhi.n	8003690 <dec_lock+0x60>
		n = Files[i].ctr;
 8003644:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <dec_lock+0x74>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	4413      	add	r3, r2
 800364c:	330c      	adds	r3, #12
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003652:	89fb      	ldrh	r3, [r7, #14]
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d101      	bne.n	800365e <dec_lock+0x2e>
 800365a:	2300      	movs	r3, #0
 800365c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800365e:	89fb      	ldrh	r3, [r7, #14]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <dec_lock+0x3a>
 8003664:	89fb      	ldrh	r3, [r7, #14]
 8003666:	3b01      	subs	r3, #1
 8003668:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800366a:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <dec_lock+0x74>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	330c      	adds	r3, #12
 8003674:	89fa      	ldrh	r2, [r7, #14]
 8003676:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003678:	89fb      	ldrh	r3, [r7, #14]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <dec_lock+0x5a>
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <dec_lock+0x74>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4413      	add	r3, r2
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	737b      	strb	r3, [r7, #13]
 800368e:	e001      	b.n	8003694 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003690:	2302      	movs	r3, #2
 8003692:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003694:	7b7b      	ldrb	r3, [r7, #13]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20002214 	.word	0x20002214

080036a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e010      	b.n	80036d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80036b6:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <clear_lock+0x44>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d105      	bne.n	80036d2 <clear_lock+0x2a>
 80036c6:	4a09      	ldr	r2, [pc, #36]	; (80036ec <clear_lock+0x44>)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d9eb      	bls.n	80036b6 <clear_lock+0xe>
	}
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	20002214 	.word	0x20002214

080036f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	78db      	ldrb	r3, [r3, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d034      	beq.n	800376e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7858      	ldrb	r0, [r3, #1]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003714:	2301      	movs	r3, #1
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	f7ff fd40 	bl	800319c <disk_write>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e022      	b.n	800376e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	1ad2      	subs	r2, r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	429a      	cmp	r2, r3
 800373c:	d217      	bcs.n	800376e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	789b      	ldrb	r3, [r3, #2]
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e010      	b.n	8003768 <sync_window+0x78>
					wsect += fs->fsize;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4413      	add	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7858      	ldrb	r0, [r3, #1]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800375a:	2301      	movs	r3, #1
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	f7ff fd1d 	bl	800319c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3b01      	subs	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d8eb      	bhi.n	8003746 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d01b      	beq.n	80037c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ffad 	bl	80036f0 <sync_window>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d113      	bne.n	80037c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7858      	ldrb	r0, [r3, #1]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80037aa:	2301      	movs	r3, #1
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	f7ff fcd5 	bl	800315c <disk_read>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff87 	bl	80036f0 <sync_window>
 80037e2:	4603      	mov	r3, r0
 80037e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d159      	bne.n	80038a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d149      	bne.n	8003888 <sync_fs+0xb4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	791b      	ldrb	r3, [r3, #4]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d145      	bne.n	8003888 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	899b      	ldrh	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	2100      	movs	r1, #0
 800380a:	f7ff fda8 	bl	800335e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3338      	adds	r3, #56	; 0x38
 8003812:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003816:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fd37 	bl	800328e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3338      	adds	r3, #56	; 0x38
 8003824:	4921      	ldr	r1, [pc, #132]	; (80038ac <sync_fs+0xd8>)
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fd4c 	bl	80032c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3338      	adds	r3, #56	; 0x38
 8003830:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003834:	491e      	ldr	r1, [pc, #120]	; (80038b0 <sync_fs+0xdc>)
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fd44 	bl	80032c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3338      	adds	r3, #56	; 0x38
 8003840:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7ff fd3a 	bl	80032c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3338      	adds	r3, #56	; 0x38
 8003854:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7ff fd30 	bl	80032c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7858      	ldrb	r0, [r3, #1]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387c:	2301      	movs	r3, #1
 800387e:	f7ff fc8d 	bl	800319c <disk_write>
			fs->fsi_flag = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2200      	movs	r2, #0
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fca3 	bl	80031dc <disk_ioctl>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <sync_fs+0xcc>
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	41615252 	.word	0x41615252
 80038b0:	61417272 	.word	0x61417272

080038b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	3b02      	subs	r3, #2
 80038c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	3b02      	subs	r3, #2
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d301      	bcc.n	80038d4 <clust2sect+0x20>
 80038d0:	2300      	movs	r3, #0
 80038d2:	e008      	b.n	80038e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	895b      	ldrh	r3, [r3, #10]
 80038d8:	461a      	mov	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	fb03 f202 	mul.w	r2, r3, r2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4413      	add	r3, r2
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d904      	bls.n	8003912 <get_fat+0x20>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003912:	2301      	movs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e0bb      	b.n	8003a90 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
 800391c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b03      	cmp	r3, #3
 8003924:	f000 8083 	beq.w	8003a2e <get_fat+0x13c>
 8003928:	2b03      	cmp	r3, #3
 800392a:	f300 80a7 	bgt.w	8003a7c <get_fat+0x18a>
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <get_fat+0x46>
 8003932:	2b02      	cmp	r3, #2
 8003934:	d056      	beq.n	80039e4 <get_fat+0xf2>
 8003936:	e0a1      	b.n	8003a7c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	899b      	ldrh	r3, [r3, #12]
 800394e:	4619      	mov	r1, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	fbb3 f3f1 	udiv	r3, r3, r1
 8003956:	4413      	add	r3, r2
 8003958:	4619      	mov	r1, r3
 800395a:	6938      	ldr	r0, [r7, #16]
 800395c:	f7ff ff0c 	bl	8003778 <move_window>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 808d 	bne.w	8003a82 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	60fa      	str	r2, [r7, #12]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	8992      	ldrh	r2, [r2, #12]
 8003972:	fbb3 f1f2 	udiv	r1, r3, r2
 8003976:	fb01 f202 	mul.w	r2, r1, r2
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003984:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	899b      	ldrh	r3, [r3, #12]
 800398e:	4619      	mov	r1, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	fbb3 f3f1 	udiv	r3, r3, r1
 8003996:	4413      	add	r3, r2
 8003998:	4619      	mov	r1, r3
 800399a:	6938      	ldr	r0, [r7, #16]
 800399c:	f7ff feec 	bl	8003778 <move_window>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d16f      	bne.n	8003a86 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	899b      	ldrh	r3, [r3, #12]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80039b2:	fb01 f202 	mul.w	r2, r1, r2
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <get_fat+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	e002      	b.n	80039e0 <get_fat+0xee>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	617b      	str	r3, [r7, #20]
			break;
 80039e2:	e055      	b.n	8003a90 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	899b      	ldrh	r3, [r3, #12]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f8:	4413      	add	r3, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	6938      	ldr	r0, [r7, #16]
 80039fe:	f7ff febb 	bl	8003778 <move_window>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d140      	bne.n	8003a8a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	8992      	ldrh	r2, [r2, #12]
 8003a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a1a:	fb00 f202 	mul.w	r2, r0, r2
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	440b      	add	r3, r1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fbf8 	bl	8003218 <ld_word>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	617b      	str	r3, [r7, #20]
			break;
 8003a2c:	e030      	b.n	8003a90 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	899b      	ldrh	r3, [r3, #12]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a42:	4413      	add	r3, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	6938      	ldr	r0, [r7, #16]
 8003a48:	f7ff fe96 	bl	8003778 <move_window>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	8992      	ldrh	r2, [r2, #12]
 8003a60:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a64:	fb00 f202 	mul.w	r2, r0, r2
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fbeb 	bl	8003248 <ld_dword>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a78:	617b      	str	r3, [r7, #20]
			break;
 8003a7a:	e009      	b.n	8003a90 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e006      	b.n	8003a90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a82:	bf00      	nop
 8003a84:	e004      	b.n	8003a90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a8e:	bf00      	nop
		}
	}

	return val;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003a9a:	b590      	push	{r4, r7, lr}
 8003a9c:	b089      	sub	sp, #36	; 0x24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f240 8102 	bls.w	8003cb6 <put_fat+0x21c>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	f080 80fc 	bcs.w	8003cb6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	f000 80b6 	beq.w	8003c34 <put_fat+0x19a>
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	f300 80fd 	bgt.w	8003cc8 <put_fat+0x22e>
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d003      	beq.n	8003ada <put_fat+0x40>
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	f000 8083 	beq.w	8003bde <put_fat+0x144>
 8003ad8:	e0f6      	b.n	8003cc8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	899b      	ldrh	r3, [r3, #12]
 8003af0:	4619      	mov	r1, r3
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003af8:	4413      	add	r3, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fe3b 	bl	8003778 <move_window>
 8003b02:	4603      	mov	r3, r0
 8003b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b06:	7ffb      	ldrb	r3, [r7, #31]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f040 80d6 	bne.w	8003cba <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	61ba      	str	r2, [r7, #24]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	8992      	ldrh	r2, [r2, #12]
 8003b1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b22:	fb00 f202 	mul.w	r2, r0, r2
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	440b      	add	r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <put_fat+0xb8>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	b25b      	sxtb	r3, r3
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e001      	b.n	8003b56 <put_fat+0xbc>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	899b      	ldrh	r3, [r3, #12]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b70:	4413      	add	r3, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fdff 	bl	8003778 <move_window>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b7e:	7ffb      	ldrb	r3, [r7, #31]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 809c 	bne.w	8003cbe <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	899b      	ldrh	r3, [r3, #12]
 8003b90:	461a      	mov	r2, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b98:	fb00 f202 	mul.w	r2, r0, r2
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <put_fat+0x11a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e00e      	b.n	8003bd2 <put_fat+0x138>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	f023 030f 	bic.w	r3, r3, #15
 8003bbe:	b25a      	sxtb	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	70da      	strb	r2, [r3, #3]
			break;
 8003bdc:	e074      	b.n	8003cc8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	899b      	ldrh	r3, [r3, #12]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	4619      	mov	r1, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7ff fdbe 	bl	8003778 <move_window>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d15d      	bne.n	8003cc2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	8992      	ldrh	r2, [r2, #12]
 8003c14:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c18:	fb00 f202 	mul.w	r2, r0, r2
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	b292      	uxth	r2, r2
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fb31 	bl	800328e <st_word>
			fs->wflag = 1;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	70da      	strb	r2, [r3, #3]
			break;
 8003c32:	e049      	b.n	8003cc8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	899b      	ldrh	r3, [r3, #12]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c48:	4413      	add	r3, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fd93 	bl	8003778 <move_window>
 8003c52:	4603      	mov	r3, r0
 8003c54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d134      	bne.n	8003cc6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	8992      	ldrh	r2, [r2, #12]
 8003c70:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c74:	fb00 f202 	mul.w	r2, r0, r2
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fae3 	bl	8003248 <ld_dword>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c88:	4323      	orrs	r3, r4
 8003c8a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	8992      	ldrh	r2, [r2, #12]
 8003c9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c9e:	fb00 f202 	mul.w	r2, r0, r2
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fb0b 	bl	80032c4 <st_dword>
			fs->wflag = 1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	70da      	strb	r2, [r3, #3]
			break;
 8003cb4:	e008      	b.n	8003cc8 <put_fat+0x22e>
		}
	}
 8003cb6:	bf00      	nop
 8003cb8:	e006      	b.n	8003cc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003cba:	bf00      	nop
 8003cbc:	e004      	b.n	8003cc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003cc6:	bf00      	nop
	return res;
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd90      	pop	{r4, r7, pc}

08003cd2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d904      	bls.n	8003cf8 <remove_chain+0x26>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d301      	bcc.n	8003cfc <remove_chain+0x2a>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e04b      	b.n	8003d94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	69b8      	ldr	r0, [r7, #24]
 8003d0a:	f7ff fec6 	bl	8003a9a <put_fat>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <remove_chain+0x4a>
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	e03b      	b.n	8003d94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fde7 	bl	80038f2 <get_fat>
 8003d24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d031      	beq.n	8003d90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <remove_chain+0x64>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e02e      	b.n	8003d94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d101      	bne.n	8003d42 <remove_chain+0x70>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e028      	b.n	8003d94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003d42:	2200      	movs	r2, #0
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	69b8      	ldr	r0, [r7, #24]
 8003d48:	f7ff fea7 	bl	8003a9a <put_fat>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <remove_chain+0x88>
 8003d56:	7ffb      	ldrb	r3, [r7, #31]
 8003d58:	e01c      	b.n	8003d94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	3b02      	subs	r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d20b      	bcs.n	8003d80 <remove_chain+0xae>
			fs->free_clst++;
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	791b      	ldrb	r3, [r3, #4]
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3c6      	bcc.n	8003d1c <remove_chain+0x4a>
 8003d8e:	e000      	b.n	8003d92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003d90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <create_chain+0x2c>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d31b      	bcc.n	8003e00 <create_chain+0x64>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e018      	b.n	8003e00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fd8e 	bl	80038f2 <get_fat>
 8003dd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d801      	bhi.n	8003de2 <create_chain+0x46>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e070      	b.n	8003ec4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d101      	bne.n	8003dee <create_chain+0x52>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	e06a      	b.n	8003ec4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d201      	bcs.n	8003dfc <create_chain+0x60>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	e063      	b.n	8003ec4 <create_chain+0x128>
		scl = clst;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3301      	adds	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d307      	bcc.n	8003e24 <create_chain+0x88>
				ncl = 2;
 8003e14:	2302      	movs	r3, #2
 8003e16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d901      	bls.n	8003e24 <create_chain+0x88>
 8003e20:	2300      	movs	r3, #0
 8003e22:	e04f      	b.n	8003ec4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003e24:	69f9      	ldr	r1, [r7, #28]
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fd63 	bl	80038f2 <get_fat>
 8003e2c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d003      	beq.n	8003e42 <create_chain+0xa6>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d101      	bne.n	8003e46 <create_chain+0xaa>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	e03e      	b.n	8003ec4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d1da      	bne.n	8003e04 <create_chain+0x68>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e038      	b.n	8003ec4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003e52:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6938      	ldr	r0, [r7, #16]
 8003e5c:	f7ff fe1d 	bl	8003a9a <put_fat>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <create_chain+0xe2>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f7ff fe10 	bl	8003a9a <put_fat>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d116      	bne.n	8003eb2 <create_chain+0x116>
		fs->last_clst = ncl;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	3b02      	subs	r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d804      	bhi.n	8003ea2 <create_chain+0x106>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	791b      	ldrb	r3, [r3, #4]
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	711a      	strb	r2, [r3, #4]
 8003eb0:	e007      	b.n	8003ec2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d102      	bne.n	8003ebe <create_chain+0x122>
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebc:	e000      	b.n	8003ec0 <create_chain+0x124>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003ec2:	69fb      	ldr	r3, [r7, #28]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	899b      	ldrh	r3, [r3, #12]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	8952      	ldrh	r2, [r2, #10]
 8003ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	613a      	str	r2, [r7, #16]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <clmt_clust+0x42>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e010      	b.n	8003f30 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d307      	bcc.n	8003f26 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3304      	adds	r3, #4
 8003f22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003f24:	e7e9      	b.n	8003efa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003f26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4413      	add	r3, r2
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f52:	d204      	bcs.n	8003f5e <dir_sdi+0x22>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e071      	b.n	8004046 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <dir_sdi+0x46>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d902      	bls.n	8003f82 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10c      	bne.n	8003fa2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	8912      	ldrh	r2, [r2, #8]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d301      	bcc.n	8003f98 <dir_sdi+0x5c>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e056      	b.n	8004046 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	61da      	str	r2, [r3, #28]
 8003fa0:	e02d      	b.n	8003ffe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	895b      	ldrh	r3, [r3, #10]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	899b      	ldrh	r3, [r3, #12]
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003fb2:	e019      	b.n	8003fe8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fc9a 	bl	80038f2 <get_fat>
 8003fbe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d101      	bne.n	8003fcc <dir_sdi+0x90>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e03c      	b.n	8004046 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d904      	bls.n	8003fdc <dir_sdi+0xa0>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d301      	bcc.n	8003fe0 <dir_sdi+0xa4>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e032      	b.n	8004046 <dir_sdi+0x10a>
			ofs -= csz;
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d2e1      	bcs.n	8003fb4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	6938      	ldr	r0, [r7, #16]
 8003ff4:	f7ff fc5e 	bl	80038b4 <clust2sect>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <dir_sdi+0xd4>
 800400c:	2302      	movs	r3, #2
 800400e:	e01a      	b.n	8004046 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	899b      	ldrh	r3, [r3, #12]
 8004018:	4619      	mov	r1, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	899b      	ldrh	r3, [r3, #12]
 8004030:	461a      	mov	r2, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	fbb3 f0f2 	udiv	r0, r3, r2
 8004038:	fb00 f202 	mul.w	r2, r0, r2
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	18ca      	adds	r2, r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	3320      	adds	r3, #32
 8004064:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <dir_next+0x28>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004074:	d301      	bcc.n	800407a <dir_next+0x2c>
 8004076:	2304      	movs	r3, #4
 8004078:	e0bb      	b.n	80041f2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	899b      	ldrh	r3, [r3, #12]
 800407e:	461a      	mov	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	fbb3 f1f2 	udiv	r1, r3, r2
 8004086:	fb01 f202 	mul.w	r2, r1, r2
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 809d 	bne.w	80041cc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	8912      	ldrh	r2, [r2, #8]
 80040ac:	4293      	cmp	r3, r2
 80040ae:	f0c0 808d 	bcc.w	80041cc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	61da      	str	r2, [r3, #28]
 80040b8:	2304      	movs	r3, #4
 80040ba:	e09a      	b.n	80041f2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	899b      	ldrh	r3, [r3, #12]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	8952      	ldrh	r2, [r2, #10]
 80040cc:	3a01      	subs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d17b      	bne.n	80041cc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7ff fc08 	bl	80038f2 <get_fat>
 80040e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d801      	bhi.n	80040ee <dir_next+0xa0>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e081      	b.n	80041f2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d101      	bne.n	80040fa <dir_next+0xac>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07b      	b.n	80041f2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	d359      	bcc.n	80041b8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	61da      	str	r2, [r3, #28]
 8004110:	2304      	movs	r3, #4
 8004112:	e06e      	b.n	80041f2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f7ff fe3d 	bl	8003d9c <create_chain>
 8004122:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <dir_next+0xe0>
 800412a:	2307      	movs	r3, #7
 800412c:	e061      	b.n	80041f2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <dir_next+0xea>
 8004134:	2302      	movs	r3, #2
 8004136:	e05c      	b.n	80041f2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d101      	bne.n	8004144 <dir_next+0xf6>
 8004140:	2301      	movs	r3, #1
 8004142:	e056      	b.n	80041f2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff fad3 	bl	80036f0 <sync_window>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <dir_next+0x106>
 8004150:	2301      	movs	r3, #1
 8004152:	e04e      	b.n	80041f2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	899b      	ldrh	r3, [r3, #12]
 800415e:	461a      	mov	r2, r3
 8004160:	2100      	movs	r1, #0
 8004162:	f7ff f8fc 	bl	800335e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	6979      	ldr	r1, [r7, #20]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fba1 	bl	80038b4 <clust2sect>
 8004172:	4602      	mov	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	635a      	str	r2, [r3, #52]	; 0x34
 8004178:	e012      	b.n	80041a0 <dir_next+0x152>
						fs->wflag = 1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff fab5 	bl	80036f0 <sync_window>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <dir_next+0x142>
 800418c:	2301      	movs	r3, #1
 800418e:	e030      	b.n	80041f2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3301      	adds	r3, #1
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	635a      	str	r2, [r3, #52]	; 0x34
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	895b      	ldrh	r3, [r3, #10]
 80041a4:	461a      	mov	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d3e6      	bcc.n	800417a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80041be:	6979      	ldr	r1, [r7, #20]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fb77 	bl	80038b4 <clust2sect>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	899b      	ldrh	r3, [r3, #12]
 80041dc:	461a      	mov	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80041e4:	fb00 f202 	mul.w	r2, r0, r2
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	18ca      	adds	r2, r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800420a:	2100      	movs	r1, #0
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fe95 	bl	8003f3c <dir_sdi>
 8004212:	4603      	mov	r3, r0
 8004214:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d12b      	bne.n	8004274 <dir_alloc+0x7a>
		n = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4619      	mov	r1, r3
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff faa6 	bl	8003778 <move_window>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11d      	bne.n	8004272 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2be5      	cmp	r3, #229	; 0xe5
 800423e:	d004      	beq.n	800424a <dir_alloc+0x50>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d102      	bne.n	800425e <dir_alloc+0x64>
 8004258:	e00c      	b.n	8004274 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800425e:	2101      	movs	r1, #1
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fef4 	bl	800404e <dir_next>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0d7      	beq.n	8004220 <dir_alloc+0x26>
 8004270:	e000      	b.n	8004274 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004272:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b04      	cmp	r3, #4
 8004278:	d101      	bne.n	800427e <dir_alloc+0x84>
 800427a:	2307      	movs	r3, #7
 800427c:	75fb      	strb	r3, [r7, #23]
	return res;
 800427e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	331a      	adds	r3, #26
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe ffbe 	bl	8003218 <ld_word>
 800429c:	4603      	mov	r3, r0
 800429e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d109      	bne.n	80042bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe ffb3 	bl	8003218 <ld_word>
 80042b2:	4603      	mov	r3, r0
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	331a      	adds	r3, #26
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	b292      	uxth	r2, r2
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe ffd6 	bl	800328e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d109      	bne.n	80042fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f103 0214 	add.w	r2, r3, #20
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7fe ffc8 	bl	800328e <st_word>
	}
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	331a      	adds	r3, #26
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe ff7e 	bl	8003218 <ld_word>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <cmp_lfn+0x1e>
 8004322:	2300      	movs	r3, #0
 8004324:	e059      	b.n	80043da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432e:	1e5a      	subs	r2, r3, #1
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800433c:	2301      	movs	r3, #1
 800433e:	81fb      	strh	r3, [r7, #14]
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e033      	b.n	80043ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <cmp_lfn+0xdc>)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe ff5f 	bl	8003218 <ld_word>
 800435a:	4603      	mov	r3, r0
 800435c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01a      	beq.n	800439a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2bfe      	cmp	r3, #254	; 0xfe
 8004368:	d812      	bhi.n	8004390 <cmp_lfn+0x88>
 800436a:	89bb      	ldrh	r3, [r7, #12]
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fed5 	bl	800611c <ff_wtoupper>
 8004372:	4603      	mov	r3, r0
 8004374:	461c      	mov	r4, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	617a      	str	r2, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f001 fec9 	bl	800611c <ff_wtoupper>
 800438a:	4603      	mov	r3, r0
 800438c:	429c      	cmp	r4, r3
 800438e:	d001      	beq.n	8004394 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004390:	2300      	movs	r3, #0
 8004392:	e022      	b.n	80043da <cmp_lfn+0xd2>
			}
			wc = uc;
 8004394:	89bb      	ldrh	r3, [r7, #12]
 8004396:	81fb      	strh	r3, [r7, #14]
 8004398:	e006      	b.n	80043a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800439a:	89bb      	ldrh	r3, [r7, #12]
 800439c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d001      	beq.n	80043a8 <cmp_lfn+0xa0>
 80043a4:	2300      	movs	r3, #0
 80043a6:	e018      	b.n	80043da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3301      	adds	r3, #1
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d9c8      	bls.n	8004346 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <cmp_lfn+0xd0>
 80043c0:	89fb      	ldrh	r3, [r7, #14]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <cmp_lfn+0xd0>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <cmp_lfn+0xd0>
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80043d8:	2301      	movs	r3, #1
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	080074b8 	.word	0x080074b8

080043e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	460b      	mov	r3, r1
 80043f8:	71fb      	strb	r3, [r7, #7]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	330d      	adds	r3, #13
 8004402:	79ba      	ldrb	r2, [r7, #6]
 8004404:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	330b      	adds	r3, #11
 800440a:	220f      	movs	r2, #15
 800440c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	330c      	adds	r3, #12
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	331a      	adds	r3, #26
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe ff36 	bl	800328e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	82fb      	strh	r3, [r7, #22]
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800443a:	8afb      	ldrh	r3, [r7, #22]
 800443c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <put_lfn+0x6c>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	61fa      	str	r2, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004454:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <put_lfn+0xcc>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	8afa      	ldrh	r2, [r7, #22]
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ff11 	bl	800328e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800446c:	8afb      	ldrh	r3, [r7, #22]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <put_lfn+0x90>
 8004472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004476:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	3301      	adds	r3, #1
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d9da      	bls.n	800443a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004484:	8afb      	ldrh	r3, [r7, #22]
 8004486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800448a:	4293      	cmp	r3, r2
 800448c:	d006      	beq.n	800449c <put_lfn+0xb4>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <put_lfn+0xbc>
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	79fa      	ldrb	r2, [r7, #7]
 80044a8:	701a      	strb	r2, [r3, #0]
}
 80044aa:	bf00      	nop
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	080074b8 	.word	0x080074b8

080044b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08c      	sub	sp, #48	; 0x30
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80044c6:	220b      	movs	r2, #11
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7fe ff26 	bl	800331c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d92b      	bls.n	800452e <gen_numname+0x76>
		sr = seq;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80044da:	e022      	b.n	8004522 <gen_numname+0x6a>
			wc = *lfn++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	1c9a      	adds	r2, r3, #2
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80044e6:	2300      	movs	r3, #0
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	e017      	b.n	800451c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005a      	lsls	r2, r3, #1
 80044f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80044fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <gen_numname+0x5e>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004510:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004514:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	3301      	adds	r3, #1
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d9e4      	bls.n	80044ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1d8      	bne.n	80044dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800452e:	2307      	movs	r3, #7
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3330      	adds	r3, #48	; 0x30
 800453e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004546:	2b39      	cmp	r3, #57	; 0x39
 8004548:	d904      	bls.n	8004554 <gen_numname+0x9c>
 800454a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800454e:	3307      	adds	r3, #7
 8004550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	1e5a      	subs	r2, r3, #1
 8004558:	62ba      	str	r2, [r7, #40]	; 0x28
 800455a:	3330      	adds	r3, #48	; 0x30
 800455c:	443b      	add	r3, r7
 800455e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004562:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1df      	bne.n	8004532 <gen_numname+0x7a>
	ns[i] = '~';
 8004572:	f107 0214 	add.w	r2, r7, #20
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	4413      	add	r3, r2
 800457a:	227e      	movs	r2, #126	; 0x7e
 800457c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	e002      	b.n	800458a <gen_numname+0xd2>
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	3301      	adds	r3, #1
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	429a      	cmp	r2, r3
 8004590:	d205      	bcs.n	800459e <gen_numname+0xe6>
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b20      	cmp	r3, #32
 800459c:	d1f2      	bne.n	8004584 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	2b07      	cmp	r3, #7
 80045a2:	d807      	bhi.n	80045b4 <gen_numname+0xfc>
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80045aa:	3330      	adds	r3, #48	; 0x30
 80045ac:	443b      	add	r3, r7
 80045ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80045b2:	e000      	b.n	80045b6 <gen_numname+0xfe>
 80045b4:	2120      	movs	r1, #32
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	627a      	str	r2, [r7, #36]	; 0x24
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	460a      	mov	r2, r1
 80045c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	d9e9      	bls.n	800459e <gen_numname+0xe6>
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3730      	adds	r7, #48	; 0x30
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80045e0:	230b      	movs	r3, #11
 80045e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	0852      	lsrs	r2, r2, #1
 80045ea:	01db      	lsls	r3, r3, #7
 80045ec:	4313      	orrs	r3, r2
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	6079      	str	r1, [r7, #4]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ed      	bne.n	80045e4 <sum_sfn+0x10>
	return sum;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004624:	2100      	movs	r1, #0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fc88 	bl	8003f3c <dir_sdi>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <dir_find+0x24>
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	e0a9      	b.n	800478e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800463a:	23ff      	movs	r3, #255	; 0xff
 800463c:	753b      	strb	r3, [r7, #20]
 800463e:	7d3b      	ldrb	r3, [r7, #20]
 8004640:	757b      	strb	r3, [r7, #21]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4619      	mov	r1, r3
 8004650:	6938      	ldr	r0, [r7, #16]
 8004652:	f7ff f891 	bl	8003778 <move_window>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8090 	bne.w	8004782 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800466a:	7dbb      	ldrb	r3, [r7, #22]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <dir_find+0x60>
 8004670:	2304      	movs	r3, #4
 8004672:	75fb      	strb	r3, [r7, #23]
 8004674:	e08a      	b.n	800478c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	330b      	adds	r3, #11
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	7bfa      	ldrb	r2, [r7, #15]
 8004688:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800468a:	7dbb      	ldrb	r3, [r7, #22]
 800468c:	2be5      	cmp	r3, #229	; 0xe5
 800468e:	d007      	beq.n	80046a0 <dir_find+0x8a>
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <dir_find+0x98>
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b0f      	cmp	r3, #15
 800469e:	d006      	beq.n	80046ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80046a0:	23ff      	movs	r3, #255	; 0xff
 80046a2:	757b      	strb	r3, [r7, #21]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
 80046ac:	e05e      	b.n	800476c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b0f      	cmp	r3, #15
 80046b2:	d136      	bne.n	8004722 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d154      	bne.n	800476c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80046c2:	7dbb      	ldrb	r3, [r7, #22]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	7b5b      	ldrb	r3, [r3, #13]
 80046d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80046d4:	7dbb      	ldrb	r3, [r7, #22]
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	75bb      	strb	r3, [r7, #22]
 80046dc:	7dbb      	ldrb	r3, [r7, #22]
 80046de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80046e8:	7dba      	ldrb	r2, [r7, #22]
 80046ea:	7d7b      	ldrb	r3, [r7, #21]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d115      	bne.n	800471c <dir_find+0x106>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	330d      	adds	r3, #13
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	7d3a      	ldrb	r2, [r7, #20]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d10e      	bne.n	800471c <dir_find+0x106>
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7ff fdfd 	bl	8004308 <cmp_lfn>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <dir_find+0x106>
 8004714:	7d7b      	ldrb	r3, [r7, #21]
 8004716:	3b01      	subs	r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e000      	b.n	800471e <dir_find+0x108>
 800471c:	23ff      	movs	r3, #255	; 0xff
 800471e:	757b      	strb	r3, [r7, #21]
 8004720:	e024      	b.n	800476c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004722:	7d7b      	ldrb	r3, [r7, #21]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <dir_find+0x126>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff51 	bl	80045d4 <sum_sfn>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	7d3b      	ldrb	r3, [r7, #20]
 8004738:	4293      	cmp	r3, r2
 800473a:	d024      	beq.n	8004786 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <dir_find+0x14a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a18      	ldr	r0, [r3, #32]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3324      	adds	r3, #36	; 0x24
 8004752:	220b      	movs	r2, #11
 8004754:	4619      	mov	r1, r3
 8004756:	f7fe fe1d 	bl	8003394 <mem_cmp>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d014      	beq.n	800478a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004760:	23ff      	movs	r3, #255	; 0xff
 8004762:	757b      	strb	r3, [r7, #21]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f04f 32ff 	mov.w	r2, #4294967295
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800476c:	2100      	movs	r1, #0
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fc6d 	bl	800404e <dir_next>
 8004774:	4603      	mov	r3, r0
 8004776:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f43f af65 	beq.w	800464a <dir_find+0x34>
 8004780:	e004      	b.n	800478c <dir_find+0x176>
		if (res != FR_OK) break;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800478a:	bf00      	nop

	return res;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80047ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <dir_register+0x20>
 80047b4:	2306      	movs	r3, #6
 80047b6:	e0e0      	b.n	800497a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80047b8:	2300      	movs	r3, #0
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
 80047bc:	e002      	b.n	80047c4 <dir_register+0x2c>
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	3301      	adds	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f4      	bne.n	80047be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80047da:	f107 030c 	add.w	r3, r7, #12
 80047de:	220c      	movs	r2, #12
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fd9b 	bl	800331c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d032      	beq.n	8004856 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2240      	movs	r2, #64	; 0x40
 80047f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80047f8:	2301      	movs	r3, #1
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fc:	e016      	b.n	800482c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	f107 010c 	add.w	r1, r7, #12
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	f7ff fe53 	bl	80044b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff feff 	bl	8004616 <dir_find>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800481e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	3301      	adds	r3, #1
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	2b63      	cmp	r3, #99	; 0x63
 8004830:	d9e5      	bls.n	80047fe <dir_register+0x66>
 8004832:	e000      	b.n	8004836 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004834:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	d101      	bne.n	8004840 <dir_register+0xa8>
 800483c:	2307      	movs	r3, #7
 800483e:	e09c      	b.n	800497a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004844:	2b04      	cmp	r3, #4
 8004846:	d002      	beq.n	800484e <dir_register+0xb6>
 8004848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800484c:	e095      	b.n	800497a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800484e:	7dfa      	ldrb	r2, [r7, #23]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <dir_register+0xd8>
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	330c      	adds	r3, #12
 8004864:	4a47      	ldr	r2, [pc, #284]	; (8004984 <dir_register+0x1ec>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	3301      	adds	r3, #1
 800486e:	e000      	b.n	8004872 <dir_register+0xda>
 8004870:	2301      	movs	r3, #1
 8004872:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004874:	6a39      	ldr	r1, [r7, #32]
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fcbf 	bl	80041fa <dir_alloc>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004886:	2b00      	cmp	r3, #0
 8004888:	d148      	bne.n	800491c <dir_register+0x184>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	3b01      	subs	r3, #1
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d042      	beq.n	800491c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	015b      	lsls	r3, r3, #5
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fb4a 	bl	8003f3c <dir_sdi>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80048ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d132      	bne.n	800491c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3324      	adds	r3, #36	; 0x24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fe8a 	bl	80045d4 <sum_sfn>
 80048c0:	4603      	mov	r3, r0
 80048c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4619      	mov	r1, r3
 80048ca:	69f8      	ldr	r0, [r7, #28]
 80048cc:	f7fe ff54 	bl	8003778 <move_window>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80048d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11d      	bne.n	800491a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	6918      	ldr	r0, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a19      	ldr	r1, [r3, #32]
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	7efb      	ldrb	r3, [r7, #27]
 80048ec:	f7ff fd7c 	bl	80043e8 <put_lfn>
				fs->wflag = 1;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2201      	movs	r2, #1
 80048f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80048f6:	2100      	movs	r1, #0
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fba8 	bl	800404e <dir_next>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <dir_register+0x184>
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	3b01      	subs	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1d5      	bne.n	80048c4 <dir_register+0x12c>
 8004918:	e000      	b.n	800491c <dir_register+0x184>
				if (res != FR_OK) break;
 800491a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800491c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004920:	2b00      	cmp	r3, #0
 8004922:	d128      	bne.n	8004976 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4619      	mov	r1, r3
 800492a:	69f8      	ldr	r0, [r7, #28]
 800492c:	f7fe ff24 	bl	8003778 <move_window>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11b      	bne.n	8004976 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	2220      	movs	r2, #32
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fd09 	bl	800335e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a18      	ldr	r0, [r3, #32]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3324      	adds	r3, #36	; 0x24
 8004954:	220b      	movs	r2, #11
 8004956:	4619      	mov	r1, r3
 8004958:	f7fe fce0 	bl	800331c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	330c      	adds	r3, #12
 8004968:	f002 0218 	and.w	r2, r2, #24
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2201      	movs	r2, #1
 8004974:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800497a:	4618      	mov	r0, r3
 800497c:	3730      	adds	r7, #48	; 0x30
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	4ec4ec4f 	.word	0x4ec4ec4f

08004988 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	61ba      	str	r2, [r7, #24]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80049b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b8:	2b1f      	cmp	r3, #31
 80049ba:	d940      	bls.n	8004a3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80049bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049be:	2b2f      	cmp	r3, #47	; 0x2f
 80049c0:	d006      	beq.n	80049d0 <create_name+0x48>
 80049c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049c4:	2b5c      	cmp	r3, #92	; 0x5c
 80049c6:	d110      	bne.n	80049ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80049c8:	e002      	b.n	80049d0 <create_name+0x48>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4413      	add	r3, r2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b2f      	cmp	r3, #47	; 0x2f
 80049da:	d0f6      	beq.n	80049ca <create_name+0x42>
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b5c      	cmp	r3, #92	; 0x5c
 80049e6:	d0f0      	beq.n	80049ca <create_name+0x42>
			break;
 80049e8:	e02a      	b.n	8004a40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2bfe      	cmp	r3, #254	; 0xfe
 80049ee:	d901      	bls.n	80049f4 <create_name+0x6c>
 80049f0:	2306      	movs	r3, #6
 80049f2:	e17d      	b.n	8004cf0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80049f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80049fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 fb50 	bl	80060a4 <ff_convert>
 8004a04:	4603      	mov	r3, r0
 8004a06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <create_name+0x8a>
 8004a0e:	2306      	movs	r3, #6
 8004a10:	e16e      	b.n	8004cf0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a14:	2b7f      	cmp	r3, #127	; 0x7f
 8004a16:	d809      	bhi.n	8004a2c <create_name+0xa4>
 8004a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	488d      	ldr	r0, [pc, #564]	; (8004c54 <create_name+0x2cc>)
 8004a1e:	f7fe fce0 	bl	80033e2 <chk_chr>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <create_name+0xa4>
 8004a28:	2306      	movs	r3, #6
 8004a2a:	e161      	b.n	8004cf0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	617a      	str	r2, [r7, #20]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004a3c:	e7b4      	b.n	80049a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004a3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	441a      	add	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a4c:	2b1f      	cmp	r3, #31
 8004a4e:	d801      	bhi.n	8004a54 <create_name+0xcc>
 8004a50:	2304      	movs	r3, #4
 8004a52:	e000      	b.n	8004a56 <create_name+0xce>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004a5a:	e011      	b.n	8004a80 <create_name+0xf8>
		w = lfn[di - 1];
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a62:	3b01      	subs	r3, #1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d002      	beq.n	8004a7a <create_name+0xf2>
 8004a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a76:	2b2e      	cmp	r3, #46	; 0x2e
 8004a78:	d106      	bne.n	8004a88 <create_name+0x100>
		di--;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ea      	bne.n	8004a5c <create_name+0xd4>
 8004a86:	e000      	b.n	8004a8a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004a88:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <create_name+0x118>
 8004a9c:	2306      	movs	r3, #6
 8004a9e:	e127      	b.n	8004cf0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3324      	adds	r3, #36	; 0x24
 8004aa4:	220b      	movs	r2, #11
 8004aa6:	2120      	movs	r1, #32
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe fc58 	bl	800335e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e002      	b.n	8004aba <create_name+0x132>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d0f5      	beq.n	8004ab4 <create_name+0x12c>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ad4:	d0ee      	beq.n	8004ab4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <create_name+0x168>
 8004adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ae0:	f043 0303 	orr.w	r3, r3, #3
 8004ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004ae8:	e002      	b.n	8004af0 <create_name+0x168>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <create_name+0x182>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004afc:	3b01      	subs	r3, #1
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	2b2e      	cmp	r3, #46	; 0x2e
 8004b08:	d1ef      	bne.n	8004aea <create_name+0x162>

	i = b = 0; ni = 8;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b10:	2300      	movs	r3, #0
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	2308      	movs	r3, #8
 8004b16:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	61ba      	str	r2, [r7, #24]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8090 	beq.w	8004c50 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d006      	beq.n	8004b44 <create_name+0x1bc>
 8004b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b38:	2b2e      	cmp	r3, #46	; 0x2e
 8004b3a:	d10a      	bne.n	8004b52 <create_name+0x1ca>
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d006      	beq.n	8004b52 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b48:	f043 0303 	orr.w	r3, r3, #3
 8004b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b50:	e07d      	b.n	8004c4e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d203      	bcs.n	8004b62 <create_name+0x1da>
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d123      	bne.n	8004baa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b0b      	cmp	r3, #11
 8004b66:	d106      	bne.n	8004b76 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b6c:	f043 0303 	orr.w	r3, r3, #3
 8004b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b74:	e075      	b.n	8004c62 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d005      	beq.n	8004b8a <create_name+0x202>
 8004b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b82:	f043 0303 	orr.w	r3, r3, #3
 8004b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d866      	bhi.n	8004c60 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	2308      	movs	r3, #8
 8004b98:	623b      	str	r3, [r7, #32]
 8004b9a:	230b      	movs	r3, #11
 8004b9c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ba8:	e051      	b.n	8004c4e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bac:	2b7f      	cmp	r3, #127	; 0x7f
 8004bae:	d914      	bls.n	8004bda <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fa75 	bl	80060a4 <ff_convert>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004bbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <create_name+0x246>
 8004bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bc6:	3b80      	subs	r3, #128	; 0x80
 8004bc8:	4a23      	ldr	r2, [pc, #140]	; (8004c58 <create_name+0x2d0>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bd2:	f043 0302 	orr.w	r3, r3, #2
 8004bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <create_name+0x268>
 8004be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004be2:	4619      	mov	r1, r3
 8004be4:	481d      	ldr	r0, [pc, #116]	; (8004c5c <create_name+0x2d4>)
 8004be6:	f7fe fbfc 	bl	80033e2 <chk_chr>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004bf0:	235f      	movs	r3, #95	; 0x5f
 8004bf2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf8:	f043 0303 	orr.w	r3, r3, #3
 8004bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c00:	e01b      	b.n	8004c3a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d909      	bls.n	8004c1c <create_name+0x294>
 8004c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c0a:	2b5a      	cmp	r3, #90	; 0x5a
 8004c0c:	d806      	bhi.n	8004c1c <create_name+0x294>
					b |= 2;
 8004c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c1a:	e00e      	b.n	8004c3a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c1e:	2b60      	cmp	r3, #96	; 0x60
 8004c20:	d90b      	bls.n	8004c3a <create_name+0x2b2>
 8004c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c24:	2b7a      	cmp	r3, #122	; 0x7a
 8004c26:	d808      	bhi.n	8004c3a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004c28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c36:	3b20      	subs	r3, #32
 8004c38:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	623a      	str	r2, [r7, #32]
 8004c40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c42:	b2d1      	uxtb	r1, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	4413      	add	r3, r2
 8004c48:	460a      	mov	r2, r1
 8004c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004c4e:	e763      	b.n	8004b18 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004c50:	bf00      	nop
 8004c52:	e006      	b.n	8004c62 <create_name+0x2da>
 8004c54:	080073e0 	.word	0x080073e0
 8004c58:	08007438 	.word	0x08007438
 8004c5c:	080073ec 	.word	0x080073ec
			if (si > di) break;			/* No extension */
 8004c60:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c68:	2be5      	cmp	r3, #229	; 0xe5
 8004c6a:	d103      	bne.n	8004c74 <create_name+0x2ec>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2205      	movs	r2, #5
 8004c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d104      	bne.n	8004c84 <create_name+0x2fc>
 8004c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d005      	beq.n	8004c9c <create_name+0x314>
 8004c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d105      	bne.n	8004ca8 <create_name+0x320>
 8004c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d117      	bne.n	8004ce4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d105      	bne.n	8004ccc <create_name+0x344>
 8004cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc4:	f043 0310 	orr.w	r3, r3, #16
 8004cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d105      	bne.n	8004ce4 <create_name+0x35c>
 8004cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cdc:	f043 0308 	orr.w	r3, r3, #8
 8004ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004cea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004cee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004d0c:	e002      	b.n	8004d14 <follow_path+0x1c>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b2f      	cmp	r3, #47	; 0x2f
 8004d1a:	d0f8      	beq.n	8004d0e <follow_path+0x16>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b5c      	cmp	r3, #92	; 0x5c
 8004d22:	d0f4      	beq.n	8004d0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b1f      	cmp	r3, #31
 8004d30:	d80a      	bhi.n	8004d48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff f8fd 	bl	8003f3c <dir_sdi>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]
 8004d46:	e048      	b.n	8004dda <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d48:	463b      	mov	r3, r7
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fe1b 	bl	8004988 <create_name>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d139      	bne.n	8004dd0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fc5a 	bl	8004616 <dir_find>
 8004d62:	4603      	mov	r3, r0
 8004d64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d12c      	bne.n	8004dd4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004d7a:	7afb      	ldrb	r3, [r7, #11]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d127      	bne.n	8004dd4 <follow_path+0xdc>
 8004d84:	2305      	movs	r3, #5
 8004d86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004d88:	e024      	b.n	8004dd4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d121      	bne.n	8004dd8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	799b      	ldrb	r3, [r3, #6]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004da0:	2305      	movs	r3, #5
 8004da2:	75fb      	strb	r3, [r7, #23]
 8004da4:	e019      	b.n	8004dda <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	8992      	ldrh	r2, [r2, #12]
 8004db4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004db8:	fb00 f202 	mul.w	r2, r0, r2
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff fa60 	bl	8004288 <ld_clust>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004dce:	e7bb      	b.n	8004d48 <follow_path+0x50>
			if (res != FR_OK) break;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <follow_path+0xe2>
				break;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004dd8:	bf00      	nop
			}
		}
	}

	return res;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295
 8004df0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d031      	beq.n	8004e5e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e002      	b.n	8004e08 <get_ldnumber+0x24>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3301      	adds	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b1f      	cmp	r3, #31
 8004e0e:	d903      	bls.n	8004e18 <get_ldnumber+0x34>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b3a      	cmp	r3, #58	; 0x3a
 8004e16:	d1f4      	bne.n	8004e02 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b3a      	cmp	r3, #58	; 0x3a
 8004e1e:	d11c      	bne.n	8004e5a <get_ldnumber+0x76>
			tp = *path;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	60fa      	str	r2, [r7, #12]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	3b30      	subs	r3, #48	; 0x30
 8004e30:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	d80e      	bhi.n	8004e56 <get_ldnumber+0x72>
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d10a      	bne.n	8004e56 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <get_ldnumber+0x72>
					vol = (int)i;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	e002      	b.n	8004e60 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e5e:	693b      	ldr	r3, [r7, #16]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	70da      	strb	r2, [r3, #3]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fe fc76 	bl	8003778 <move_window>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <check_fs+0x2a>
 8004e92:	2304      	movs	r3, #4
 8004e94:	e038      	b.n	8004f08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3338      	adds	r3, #56	; 0x38
 8004e9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe f9ba 	bl	8003218 <ld_word>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <check_fs+0x48>
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e029      	b.n	8004f08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eba:	2be9      	cmp	r3, #233	; 0xe9
 8004ebc:	d009      	beq.n	8004ed2 <check_fs+0x66>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ec4:	2beb      	cmp	r3, #235	; 0xeb
 8004ec6:	d11e      	bne.n	8004f06 <check_fs+0x9a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ece:	2b90      	cmp	r3, #144	; 0x90
 8004ed0:	d119      	bne.n	8004f06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3338      	adds	r3, #56	; 0x38
 8004ed6:	3336      	adds	r3, #54	; 0x36
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe f9b5 	bl	8003248 <ld_dword>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <check_fs+0xa4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <check_fs+0x82>
 8004eea:	2300      	movs	r3, #0
 8004eec:	e00c      	b.n	8004f08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3338      	adds	r3, #56	; 0x38
 8004ef2:	3352      	adds	r3, #82	; 0x52
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe f9a7 	bl	8003248 <ld_dword>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <check_fs+0xa8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <check_fs+0x9a>
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004f06:	2302      	movs	r3, #2
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	00544146 	.word	0x00544146
 8004f14:	33544146 	.word	0x33544146

08004f18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b096      	sub	sp, #88	; 0x58
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff59 	bl	8004de4 <get_ldnumber>
 8004f32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da01      	bge.n	8004f3e <find_volume+0x26>
 8004f3a:	230b      	movs	r3, #11
 8004f3c:	e265      	b.n	800540a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004f3e:	4a9f      	ldr	r2, [pc, #636]	; (80051bc <find_volume+0x2a4>)
 8004f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <find_volume+0x3a>
 8004f4e:	230c      	movs	r3, #12
 8004f50:	e25b      	b.n	800540a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe f8b5 	bl	80030dc <disk_status>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10c      	bne.n	8004f9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <find_volume+0x82>
 8004f8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004f96:	230a      	movs	r3, #10
 8004f98:	e237      	b.n	800540a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e235      	b.n	800540a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fe f8ad 	bl	8003110 <disk_initialize>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e21e      	b.n	800540a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <find_volume+0xca>
 8004fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004fde:	230a      	movs	r3, #10
 8004fe0:	e213      	b.n	800540a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	7858      	ldrb	r0, [r3, #1]
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	330c      	adds	r3, #12
 8004fea:	461a      	mov	r2, r3
 8004fec:	2102      	movs	r1, #2
 8004fee:	f7fe f8f5 	bl	80031dc <disk_ioctl>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <find_volume+0xe4>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e206      	b.n	800540a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	899b      	ldrh	r3, [r3, #12]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d80d      	bhi.n	8005022 <find_volume+0x10a>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	899b      	ldrh	r3, [r3, #12]
 800500a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500e:	d308      	bcc.n	8005022 <find_volume+0x10a>
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	899b      	ldrh	r3, [r3, #12]
 8005014:	461a      	mov	r2, r3
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	899b      	ldrh	r3, [r3, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <find_volume+0x10e>
 8005022:	2301      	movs	r3, #1
 8005024:	e1f1      	b.n	800540a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800502a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800502c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800502e:	f7ff ff1d 	bl	8004e6c <check_fs>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800503c:	2b02      	cmp	r3, #2
 800503e:	d149      	bne.n	80050d4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005040:	2300      	movs	r3, #0
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
 8005044:	e01e      	b.n	8005084 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005054:	4413      	add	r3, r2
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	3304      	adds	r3, #4
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <find_volume+0x158>
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	3308      	adds	r3, #8
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe f8ee 	bl	8003248 <ld_dword>
 800506c:	4602      	mov	r2, r0
 800506e:	e000      	b.n	8005072 <find_volume+0x15a>
 8005070:	2200      	movs	r2, #0
 8005072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3358      	adds	r3, #88	; 0x58
 8005078:	443b      	add	r3, r7
 800507a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800507e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005080:	3301      	adds	r3, #1
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	2b03      	cmp	r3, #3
 8005088:	d9dd      	bls.n	8005046 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800508a:	2300      	movs	r3, #0
 800508c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800508e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <find_volume+0x182>
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	3b01      	subs	r3, #1
 8005098:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800509a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	3358      	adds	r3, #88	; 0x58
 80050a0:	443b      	add	r3, r7
 80050a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80050a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <find_volume+0x1a2>
 80050ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050b2:	f7ff fedb 	bl	8004e6c <check_fs>
 80050b6:	4603      	mov	r3, r0
 80050b8:	e000      	b.n	80050bc <find_volume+0x1a4>
 80050ba:	2303      	movs	r3, #3
 80050bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80050c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d905      	bls.n	80050d4 <find_volume+0x1bc>
 80050c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ca:	3301      	adds	r3, #1
 80050cc:	643b      	str	r3, [r7, #64]	; 0x40
 80050ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d9e2      	bls.n	800509a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80050d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d101      	bne.n	80050e0 <find_volume+0x1c8>
 80050dc:	2301      	movs	r3, #1
 80050de:	e194      	b.n	800540a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80050e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d901      	bls.n	80050ec <find_volume+0x1d4>
 80050e8:	230d      	movs	r3, #13
 80050ea:	e18e      	b.n	800540a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	3338      	adds	r3, #56	; 0x38
 80050f0:	330b      	adds	r3, #11
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe f890 	bl	8003218 <ld_word>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	899b      	ldrh	r3, [r3, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <find_volume+0x1f0>
 8005104:	230d      	movs	r3, #13
 8005106:	e180      	b.n	800540a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	3338      	adds	r3, #56	; 0x38
 800510c:	3316      	adds	r3, #22
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe f882 	bl	8003218 <ld_word>
 8005114:	4603      	mov	r3, r0
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <find_volume+0x214>
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	3338      	adds	r3, #56	; 0x38
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe f88f 	bl	8003248 <ld_dword>
 800512a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005130:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	789b      	ldrb	r3, [r3, #2]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d005      	beq.n	8005150 <find_volume+0x238>
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	789b      	ldrb	r3, [r3, #2]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d001      	beq.n	8005150 <find_volume+0x238>
 800514c:	230d      	movs	r3, #13
 800514e:	e15c      	b.n	800540a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	789b      	ldrb	r3, [r3, #2]
 8005154:	461a      	mov	r2, r3
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005164:	b29a      	uxth	r2, r3
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	895b      	ldrh	r3, [r3, #10]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <find_volume+0x26c>
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	895b      	ldrh	r3, [r3, #10]
 8005176:	461a      	mov	r2, r3
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	895b      	ldrh	r3, [r3, #10]
 800517c:	3b01      	subs	r3, #1
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <find_volume+0x270>
 8005184:	230d      	movs	r3, #13
 8005186:	e140      	b.n	800540a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	3338      	adds	r3, #56	; 0x38
 800518c:	3311      	adds	r3, #17
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f842 	bl	8003218 <ld_word>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	891b      	ldrh	r3, [r3, #8]
 80051a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a2:	8992      	ldrh	r2, [r2, #12]
 80051a4:	0952      	lsrs	r2, r2, #5
 80051a6:	b292      	uxth	r2, r2
 80051a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051ac:	fb01 f202 	mul.w	r2, r1, r2
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <find_volume+0x2a8>
 80051b8:	230d      	movs	r3, #13
 80051ba:	e126      	b.n	800540a <find_volume+0x4f2>
 80051bc:	2000220c 	.word	0x2000220c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	3338      	adds	r3, #56	; 0x38
 80051c4:	3313      	adds	r3, #19
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe f826 	bl	8003218 <ld_word>
 80051cc:	4603      	mov	r3, r0
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80051d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <find_volume+0x2cc>
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	3338      	adds	r3, #56	; 0x38
 80051da:	3320      	adds	r3, #32
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe f833 	bl	8003248 <ld_dword>
 80051e2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	3338      	adds	r3, #56	; 0x38
 80051e8:	330e      	adds	r3, #14
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe f814 	bl	8003218 <ld_word>
 80051f0:	4603      	mov	r3, r0
 80051f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80051f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <find_volume+0x2e6>
 80051fa:	230d      	movs	r3, #13
 80051fc:	e105      	b.n	800540a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80051fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	4413      	add	r3, r2
 8005204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005206:	8911      	ldrh	r1, [r2, #8]
 8005208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800520a:	8992      	ldrh	r2, [r2, #12]
 800520c:	0952      	lsrs	r2, r2, #5
 800520e:	b292      	uxth	r2, r2
 8005210:	fbb1 f2f2 	udiv	r2, r1, r2
 8005214:	b292      	uxth	r2, r2
 8005216:	4413      	add	r3, r2
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800521a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	429a      	cmp	r2, r3
 8005220:	d201      	bcs.n	8005226 <find_volume+0x30e>
 8005222:	230d      	movs	r3, #13
 8005224:	e0f1      	b.n	800540a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522e:	8952      	ldrh	r2, [r2, #10]
 8005230:	fbb3 f3f2 	udiv	r3, r3, r2
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <find_volume+0x328>
 800523c:	230d      	movs	r3, #13
 800523e:	e0e4      	b.n	800540a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005240:	2303      	movs	r3, #3
 8005242:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800524c:	4293      	cmp	r3, r2
 800524e:	d802      	bhi.n	8005256 <find_volume+0x33e>
 8005250:	2302      	movs	r3, #2
 8005252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	f640 72f5 	movw	r2, #4085	; 0xff5
 800525c:	4293      	cmp	r3, r2
 800525e:	d802      	bhi.n	8005266 <find_volume+0x34e>
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005274:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005278:	441a      	add	r2, r3
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800527e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	441a      	add	r2, r3
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800528c:	2b03      	cmp	r3, #3
 800528e:	d11e      	bne.n	80052ce <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	3338      	adds	r3, #56	; 0x38
 8005294:	332a      	adds	r3, #42	; 0x2a
 8005296:	4618      	mov	r0, r3
 8005298:	f7fd ffbe 	bl	8003218 <ld_word>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <find_volume+0x38e>
 80052a2:	230d      	movs	r3, #13
 80052a4:	e0b1      	b.n	800540a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	891b      	ldrh	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <find_volume+0x39a>
 80052ae:	230d      	movs	r3, #13
 80052b0:	e0ab      	b.n	800540a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	3338      	adds	r3, #56	; 0x38
 80052b6:	332c      	adds	r3, #44	; 0x2c
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd ffc5 	bl	8003248 <ld_dword>
 80052be:	4602      	mov	r2, r0
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	647b      	str	r3, [r7, #68]	; 0x44
 80052cc:	e01f      	b.n	800530e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	891b      	ldrh	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <find_volume+0x3c2>
 80052d6:	230d      	movs	r3, #13
 80052d8:	e097      	b.n	800540a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	441a      	add	r2, r3
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80052e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d103      	bne.n	80052f6 <find_volume+0x3de>
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	e00a      	b.n	800530c <find_volume+0x3f4>
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	085a      	lsrs	r2, r3, #1
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	899b      	ldrh	r3, [r3, #12]
 8005316:	4619      	mov	r1, r3
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531a:	440b      	add	r3, r1
 800531c:	3b01      	subs	r3, #1
 800531e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005320:	8989      	ldrh	r1, [r1, #12]
 8005322:	fbb3 f3f1 	udiv	r3, r3, r1
 8005326:	429a      	cmp	r2, r3
 8005328:	d201      	bcs.n	800532e <find_volume+0x416>
 800532a:	230d      	movs	r3, #13
 800532c:	e06d      	b.n	800540a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	619a      	str	r2, [r3, #24]
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2280      	movs	r2, #128	; 0x80
 8005342:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005348:	2b03      	cmp	r3, #3
 800534a:	d149      	bne.n	80053e0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	3338      	adds	r3, #56	; 0x38
 8005350:	3330      	adds	r3, #48	; 0x30
 8005352:	4618      	mov	r0, r3
 8005354:	f7fd ff60 	bl	8003218 <ld_word>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d140      	bne.n	80053e0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800535e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005360:	3301      	adds	r3, #1
 8005362:	4619      	mov	r1, r3
 8005364:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005366:	f7fe fa07 	bl	8003778 <move_window>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d137      	bne.n	80053e0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	2200      	movs	r2, #0
 8005374:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	3338      	adds	r3, #56	; 0x38
 800537a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800537e:	4618      	mov	r0, r3
 8005380:	f7fd ff4a 	bl	8003218 <ld_word>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800538c:	429a      	cmp	r2, r3
 800538e:	d127      	bne.n	80053e0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	3338      	adds	r3, #56	; 0x38
 8005394:	4618      	mov	r0, r3
 8005396:	f7fd ff57 	bl	8003248 <ld_dword>
 800539a:	4603      	mov	r3, r0
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <find_volume+0x4fc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d11e      	bne.n	80053e0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	3338      	adds	r3, #56	; 0x38
 80053a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fd ff4c 	bl	8003248 <ld_dword>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4a19      	ldr	r2, [pc, #100]	; (8005418 <find_volume+0x500>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d113      	bne.n	80053e0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	3338      	adds	r3, #56	; 0x38
 80053bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fd ff41 	bl	8003248 <ld_dword>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	3338      	adds	r3, #56	; 0x38
 80053d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fd ff37 	bl	8003248 <ld_dword>
 80053da:	4602      	mov	r2, r0
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80053e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <find_volume+0x504>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <find_volume+0x504>)
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <find_volume+0x504>)
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	4a08      	ldr	r2, [pc, #32]	; (8005420 <find_volume+0x508>)
 8005400:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005404:	f7fe f950 	bl	80036a8 <clear_lock>
#endif
	return FR_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3758      	adds	r7, #88	; 0x58
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	41615252 	.word	0x41615252
 8005418:	61417272 	.word	0x61417272
 800541c:	20002210 	.word	0x20002210
 8005420:	20002234 	.word	0x20002234

08005424 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800542e:	2309      	movs	r3, #9
 8005430:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01c      	beq.n	8005472 <validate+0x4e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d018      	beq.n	8005472 <validate+0x4e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d013      	beq.n	8005472 <validate+0x4e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	889a      	ldrh	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	88db      	ldrh	r3, [r3, #6]
 8005454:	429a      	cmp	r2, r3
 8005456:	d10c      	bne.n	8005472 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd fe3c 	bl	80030dc <disk_status>
 8005464:	4603      	mov	r3, r0
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <validate+0x4e>
			res = FR_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <validate+0x5a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	e000      	b.n	8005480 <validate+0x5c>
 800547e:	2300      	movs	r3, #0
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	6013      	str	r3, [r2, #0]
	return res;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80054a2:	f107 0310 	add.w	r3, r7, #16
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fc9c 	bl	8004de4 <get_ldnumber>
 80054ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da01      	bge.n	80054b8 <f_mount+0x28>
 80054b4:	230b      	movs	r3, #11
 80054b6:	e02b      	b.n	8005510 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80054b8:	4a17      	ldr	r2, [pc, #92]	; (8005518 <f_mount+0x88>)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80054c8:	69b8      	ldr	r0, [r7, #24]
 80054ca:	f7fe f8ed 	bl	80036a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	490d      	ldr	r1, [pc, #52]	; (8005518 <f_mount+0x88>)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <f_mount+0x66>
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <f_mount+0x6a>
 80054f6:	2300      	movs	r3, #0
 80054f8:	e00a      	b.n	8005510 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80054fa:	f107 010c 	add.w	r1, r7, #12
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	2200      	movs	r2, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fd07 	bl	8004f18 <find_volume>
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800550e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3720      	adds	r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	2000220c 	.word	0x2000220c

0800551c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b09a      	sub	sp, #104	; 0x68
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <f_open+0x18>
 8005530:	2309      	movs	r3, #9
 8005532:	e1bb      	b.n	80058ac <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800553a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800553c:	79fa      	ldrb	r2, [r7, #7]
 800553e:	f107 0114 	add.w	r1, r7, #20
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fce6 	bl	8004f18 <find_volume>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005552:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 819f 	bne.w	800589a <f_open+0x37e>
		dj.obj.fs = fs;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	f107 0318 	add.w	r3, r7, #24
 8005566:	4611      	mov	r1, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fbc5 	bl	8004cf8 <follow_path>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005574:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005578:	2b00      	cmp	r3, #0
 800557a:	d11a      	bne.n	80055b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800557c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005580:	b25b      	sxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	da03      	bge.n	800558e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005586:	2306      	movs	r3, #6
 8005588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800558c:	e011      	b.n	80055b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	f107 0318 	add.w	r3, r7, #24
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd ff36 	bl	8003418 <chk_lock>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	f003 031c 	and.w	r3, r3, #28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d07f      	beq.n	80056bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80055bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d017      	beq.n	80055f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80055c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d10e      	bne.n	80055ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80055cc:	f7fd ff80 	bl	80034d0 <enq_lock>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <f_open+0xc8>
 80055d6:	f107 0318 	add.w	r3, r7, #24
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f8dc 	bl	8004798 <dir_register>
 80055e0:	4603      	mov	r3, r0
 80055e2:	e000      	b.n	80055e6 <f_open+0xca>
 80055e4:	2312      	movs	r3, #18
 80055e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	f043 0308 	orr.w	r3, r3, #8
 80055f0:	71fb      	strb	r3, [r7, #7]
 80055f2:	e010      	b.n	8005616 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80055f4:	7fbb      	ldrb	r3, [r7, #30]
 80055f6:	f003 0311 	and.w	r3, r3, #17
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <f_open+0xea>
					res = FR_DENIED;
 80055fe:	2307      	movs	r3, #7
 8005600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005604:	e007      	b.n	8005616 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <f_open+0xfa>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005616:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800561a:	2b00      	cmp	r3, #0
 800561c:	d168      	bne.n	80056f0 <f_open+0x1d4>
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d063      	beq.n	80056f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005628:	f7fd fcfa 	bl	8003020 <get_fattime>
 800562c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	330e      	adds	r3, #14
 8005632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005634:	4618      	mov	r0, r3
 8005636:	f7fd fe45 	bl	80032c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	3316      	adds	r3, #22
 800563e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005640:	4618      	mov	r0, r3
 8005642:	f7fd fe3f 	bl	80032c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	330b      	adds	r3, #11
 800564a:	2220      	movs	r2, #32
 800564c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe fe17 	bl	8004288 <ld_clust>
 800565a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005660:	2200      	movs	r2, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fe2f 	bl	80042c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	331c      	adds	r3, #28
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd fe28 	bl	80032c4 <st_dword>
					fs->wflag = 1;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2201      	movs	r2, #1
 8005678:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800567a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567c:	2b00      	cmp	r3, #0
 800567e:	d037      	beq.n	80056f0 <f_open+0x1d4>
						dw = fs->winsect;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005686:	f107 0318 	add.w	r3, r7, #24
 800568a:	2200      	movs	r2, #0
 800568c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fb1f 	bl	8003cd2 <remove_chain>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800569a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d126      	bne.n	80056f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe f866 	bl	8003778 <move_window>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056b6:	3a01      	subs	r2, #1
 80056b8:	615a      	str	r2, [r3, #20]
 80056ba:	e019      	b.n	80056f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80056bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d115      	bne.n	80056f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80056c4:	7fbb      	ldrb	r3, [r7, #30]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80056ce:	2304      	movs	r3, #4
 80056d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80056d4:	e00c      	b.n	80056f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <f_open+0x1d4>
 80056e0:	7fbb      	ldrb	r3, [r7, #30]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <f_open+0x1d4>
						res = FR_DENIED;
 80056ea:	2307      	movs	r3, #7
 80056ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80056f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d128      	bne.n	800574a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005708:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	f107 0318 	add.w	r3, r7, #24
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f7fd feef 	bl	8003514 <inc_lock>
 8005736:	4602      	mov	r2, r0
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <f_open+0x22e>
 8005744:	2302      	movs	r3, #2
 8005746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800574a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800574e:	2b00      	cmp	r3, #0
 8005750:	f040 80a3 	bne.w	800589a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fd94 	bl	8004288 <ld_clust>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	331c      	adds	r3, #28
 800576a:	4618      	mov	r0, r3
 800576c:	f7fd fd6c 	bl	8003248 <ld_dword>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	88da      	ldrh	r2, [r3, #6]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	79fa      	ldrb	r2, [r7, #7]
 800578e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3330      	adds	r3, #48	; 0x30
 80057a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fd fdd6 	bl	800335e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d06e      	beq.n	800589a <f_open+0x37e>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d06a      	beq.n	800589a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	895b      	ldrh	r3, [r3, #10]
 80057d0:	461a      	mov	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	899b      	ldrh	r3, [r3, #12]
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
 80057da:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e8:	e016      	b.n	8005818 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe f87f 	bl	80038f2 <get_fat>
 80057f4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80057f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d802      	bhi.n	8005802 <f_open+0x2e6>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d102      	bne.n	8005810 <f_open+0x2f4>
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005818:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <f_open+0x30c>
 8005820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005824:	429a      	cmp	r2, r3
 8005826:	d8e0      	bhi.n	80057ea <f_open+0x2ce>
				}
				fp->clust = clst;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800582c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800582e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005832:	2b00      	cmp	r3, #0
 8005834:	d131      	bne.n	800589a <f_open+0x37e>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	899b      	ldrh	r3, [r3, #12]
 800583a:	461a      	mov	r2, r3
 800583c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005842:	fb01 f202 	mul.w	r2, r1, r2
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d026      	beq.n	800589a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe f82f 	bl	80038b4 <clust2sect>
 8005856:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <f_open+0x34a>
						res = FR_INT_ERR;
 800585e:	2302      	movs	r3, #2
 8005860:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005864:	e019      	b.n	800589a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	899b      	ldrh	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	7858      	ldrb	r0, [r3, #1]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	2301      	movs	r3, #1
 800588a:	f7fd fc67 	bl	800315c <disk_read>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <f_open+0x37e>
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800589a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <f_open+0x38c>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80058a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3768      	adds	r7, #104	; 0x68
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f107 0214 	add.w	r2, r7, #20
 80058d2:	4611      	mov	r1, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fda5 	bl	8005424 <validate>
 80058da:	4603      	mov	r3, r0
 80058dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80058e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <f_read+0x44>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	7d5b      	ldrb	r3, [r3, #21]
 80058ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80058f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <f_read+0x4a>
 80058f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058fc:	e135      	b.n	8005b6a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	7d1b      	ldrb	r3, [r3, #20]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <f_read+0x5a>
 800590a:	2307      	movs	r3, #7
 800590c:	e12d      	b.n	8005b6a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	429a      	cmp	r2, r3
 8005920:	f240 811e 	bls.w	8005b60 <f_read+0x2ac>
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005928:	e11a      	b.n	8005b60 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	8992      	ldrh	r2, [r2, #12]
 8005932:	fbb3 f1f2 	udiv	r1, r3, r2
 8005936:	fb01 f202 	mul.w	r2, r1, r2
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 80d5 	bne.w	8005aec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	8992      	ldrh	r2, [r2, #12]
 800594a:	fbb3 f3f2 	udiv	r3, r3, r2
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	8952      	ldrh	r2, [r2, #10]
 8005952:	3a01      	subs	r2, #1
 8005954:	4013      	ands	r3, r2
 8005956:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d12f      	bne.n	80059be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
 800596c:	e013      	b.n	8005996 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	4619      	mov	r1, r3
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7fe faa5 	bl	8003ecc <clmt_clust>
 8005982:	6338      	str	r0, [r7, #48]	; 0x30
 8005984:	e007      	b.n	8005996 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fd ffaf 	bl	80038f2 <get_fat>
 8005994:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	2b01      	cmp	r3, #1
 800599a:	d804      	bhi.n	80059a6 <f_read+0xf2>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2202      	movs	r2, #2
 80059a0:	755a      	strb	r2, [r3, #21]
 80059a2:	2302      	movs	r3, #2
 80059a4:	e0e1      	b.n	8005b6a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d104      	bne.n	80059b8 <f_read+0x104>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	755a      	strb	r2, [r3, #21]
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0d8      	b.n	8005b6a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fd ff74 	bl	80038b4 <clust2sect>
 80059cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <f_read+0x12a>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2202      	movs	r2, #2
 80059d8:	755a      	strb	r2, [r3, #21]
 80059da:	2302      	movs	r3, #2
 80059dc:	e0c5      	b.n	8005b6a <f_read+0x2b6>
			sect += csect;
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	899b      	ldrh	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d041      	beq.n	8005a7e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	4413      	add	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	8952      	ldrh	r2, [r2, #10]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d905      	bls.n	8005a14 <f_read+0x160>
					cc = fs->csize - csect;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	895b      	ldrh	r3, [r3, #10]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	7858      	ldrb	r0, [r3, #1]
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a1e:	f7fd fb9d 	bl	800315c <disk_read>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <f_read+0x17e>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	755a      	strb	r2, [r3, #21]
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e09b      	b.n	8005b6a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7d1b      	ldrb	r3, [r3, #20]
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da18      	bge.n	8005a6e <f_read+0x1ba>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d911      	bls.n	8005a6e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	8992      	ldrh	r2, [r2, #12]
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	18d0      	adds	r0, r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	899b      	ldrh	r3, [r3, #12]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f7fd fc57 	bl	800331c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	899b      	ldrh	r3, [r3, #12]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005a7c:	e05c      	b.n	8005b38 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d02e      	beq.n	8005ae6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	7d1b      	ldrb	r3, [r3, #20]
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da18      	bge.n	8005ac4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	7858      	ldrb	r0, [r3, #1]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f7fd fb7b 	bl	800319c <disk_write>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <f_read+0x202>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	755a      	strb	r2, [r3, #21]
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e059      	b.n	8005b6a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	7d1b      	ldrb	r3, [r3, #20]
 8005aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	7858      	ldrb	r0, [r3, #1]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ace:	2301      	movs	r3, #1
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	f7fd fb43 	bl	800315c <disk_read>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <f_read+0x232>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	755a      	strb	r2, [r3, #21]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e041      	b.n	8005b6a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	899b      	ldrh	r3, [r3, #12]
 8005af0:	4618      	mov	r0, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	8992      	ldrh	r2, [r2, #12]
 8005afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005afe:	fb01 f202 	mul.w	r2, r1, r2
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	1ac3      	subs	r3, r0, r3
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d901      	bls.n	8005b14 <f_read+0x260>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	8992      	ldrh	r2, [r2, #12]
 8005b22:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b26:	fb00 f202 	mul.w	r2, r0, r2
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b30:	4619      	mov	r1, r3
 8005b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b34:	f7fd fbf2 	bl	800331c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	4413      	add	r3, r2
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	441a      	add	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	619a      	str	r2, [r3, #24]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	441a      	add	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f47f aee1 	bne.w	800592a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3738      	adds	r7, #56	; 0x38
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08c      	sub	sp, #48	; 0x30
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f107 0210 	add.w	r2, r7, #16
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fc46 	bl	8005424 <validate>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <f_write+0x44>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	7d5b      	ldrb	r3, [r3, #21]
 8005baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <f_write+0x4a>
 8005bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bba:	e16a      	b.n	8005e92 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	7d1b      	ldrb	r3, [r3, #20]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <f_write+0x5a>
 8005bc8:	2307      	movs	r3, #7
 8005bca:	e162      	b.n	8005e92 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	441a      	add	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	f080 814c 	bcs.w	8005e76 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005be6:	e146      	b.n	8005e76 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	8992      	ldrh	r2, [r2, #12]
 8005bf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bf4:	fb01 f202 	mul.w	r2, r1, r2
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 80f1 	bne.w	8005de2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	8992      	ldrh	r2, [r2, #12]
 8005c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	8952      	ldrh	r2, [r2, #10]
 8005c10:	3a01      	subs	r2, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d143      	bne.n	8005ca4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d11a      	bne.n	8005c66 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe f8b1 	bl	8003d9c <create_chain>
 8005c3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c3c:	e013      	b.n	8005c66 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7fe f93d 	bl	8003ecc <clmt_clust>
 8005c52:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c54:	e007      	b.n	8005c66 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe f89c 	bl	8003d9c <create_chain>
 8005c64:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8109 	beq.w	8005e80 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d104      	bne.n	8005c7e <f_write+0x10c>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2202      	movs	r2, #2
 8005c78:	755a      	strb	r2, [r3, #21]
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e109      	b.n	8005e92 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d104      	bne.n	8005c90 <f_write+0x11e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	755a      	strb	r2, [r3, #21]
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e100      	b.n	8005e92 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c94:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <f_write+0x132>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	7d1b      	ldrb	r3, [r3, #20]
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da18      	bge.n	8005ce0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	7858      	ldrb	r0, [r3, #1]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f7fd fa6d 	bl	800319c <disk_write>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <f_write+0x160>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	755a      	strb	r2, [r3, #21]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e0df      	b.n	8005e92 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	7d1b      	ldrb	r3, [r3, #20]
 8005cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f7fd fde3 	bl	80038b4 <clust2sect>
 8005cee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <f_write+0x18e>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	755a      	strb	r2, [r3, #21]
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0c8      	b.n	8005e92 <f_write+0x320>
			sect += csect;
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4413      	add	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	899b      	ldrh	r3, [r3, #12]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d043      	beq.n	8005da4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	4413      	add	r3, r2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	8952      	ldrh	r2, [r2, #10]
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d905      	bls.n	8005d36 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	895b      	ldrh	r3, [r3, #10]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	7858      	ldrb	r0, [r3, #1]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	69f9      	ldr	r1, [r7, #28]
 8005d40:	f7fd fa2c 	bl	800319c <disk_write>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <f_write+0x1e2>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	755a      	strb	r2, [r3, #21]
 8005d50:	2301      	movs	r3, #1
 8005d52:	e09e      	b.n	8005e92 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d918      	bls.n	8005d94 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1a      	ldr	r2, [r3, #32]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	8992      	ldrh	r2, [r2, #12]
 8005d74:	fb02 f303 	mul.w	r3, r2, r3
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	18d1      	adds	r1, r2, r3
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	899b      	ldrh	r3, [r3, #12]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f7fd facb 	bl	800331c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	7d1b      	ldrb	r3, [r3, #20]
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	899b      	ldrh	r3, [r3, #12]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005da2:	e04b      	b.n	8005e3c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d016      	beq.n	8005ddc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d210      	bcs.n	8005ddc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	7858      	ldrb	r0, [r3, #1]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	f7fd f9c8 	bl	800315c <disk_read>
 8005dcc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	755a      	strb	r2, [r3, #21]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e05a      	b.n	8005e92 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	899b      	ldrh	r3, [r3, #12]
 8005de6:	4618      	mov	r0, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	8992      	ldrh	r2, [r2, #12]
 8005df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005df4:	fb01 f202 	mul.w	r2, r1, r2
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	1ac3      	subs	r3, r0, r3
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d901      	bls.n	8005e0a <f_write+0x298>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	8992      	ldrh	r2, [r2, #12]
 8005e18:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e1c:	fb00 f202 	mul.w	r2, r0, r2
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	440b      	add	r3, r1
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	69f9      	ldr	r1, [r7, #28]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fd fa77 	bl	800331c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	7d1b      	ldrb	r3, [r3, #20]
 8005e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	4413      	add	r3, r2
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	619a      	str	r2, [r3, #24]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	bf38      	it	cc
 8005e5c:	461a      	movcc	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	441a      	add	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f aeb5 	bne.w	8005be8 <f_write+0x76>
 8005e7e:	e000      	b.n	8005e82 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	7d1b      	ldrb	r3, [r3, #20]
 8005e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3730      	adds	r7, #48	; 0x30
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f107 0208 	add.w	r2, r7, #8
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff faba 	bl	8005424 <validate>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d168      	bne.n	8005f8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7d1b      	ldrb	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d062      	beq.n	8005f8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7d1b      	ldrb	r3, [r3, #20]
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	da15      	bge.n	8005efc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	7858      	ldrb	r0, [r3, #1]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1a      	ldr	r2, [r3, #32]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f7fd f95c 	bl	800319c <disk_write>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <f_sync+0x54>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e04f      	b.n	8005f8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7d1b      	ldrb	r3, [r3, #20]
 8005ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005efc:	f7fd f890 	bl	8003020 <get_fattime>
 8005f00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fd fc34 	bl	8003778 <move_window>
 8005f10:	4603      	mov	r3, r0
 8005f12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d138      	bne.n	8005f8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	330b      	adds	r3, #11
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	330b      	adds	r3, #11
 8005f2a:	f042 0220 	orr.w	r2, r2, #32
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	f7fe f9c2 	bl	80042c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f103 021c 	add.w	r2, r3, #28
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fd f9b8 	bl	80032c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3316      	adds	r3, #22
 8005f58:	6939      	ldr	r1, [r7, #16]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fd f9b2 	bl	80032c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3312      	adds	r3, #18
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fd f991 	bl	800328e <st_word>
					fs->wflag = 1;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fd fc2d 	bl	80037d4 <sync_fs>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7d1b      	ldrb	r3, [r3, #20]
 8005f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ff7b 	bl	8005e9a <f_sync>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d118      	bne.n	8005fe0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f107 0208 	add.w	r2, r7, #8
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fa34 	bl	8005424 <validate>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10c      	bne.n	8005fe0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd fb30 	bl	8003630 <dec_lock>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006002:	4b1f      	ldr	r3, [pc, #124]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 8006004:	7a5b      	ldrb	r3, [r3, #9]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d131      	bne.n	8006070 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800600c:	4b1c      	ldr	r3, [pc, #112]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 800600e:	7a5b      	ldrb	r3, [r3, #9]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 8006016:	2100      	movs	r1, #0
 8006018:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800601a:	4b19      	ldr	r3, [pc, #100]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 800601c:	7a5b      	ldrb	r3, [r3, #9]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	4a17      	ldr	r2, [pc, #92]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800602a:	4b15      	ldr	r3, [pc, #84]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 800602c:	7a5b      	ldrb	r3, [r3, #9]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 8006034:	4413      	add	r3, r2
 8006036:	79fa      	ldrb	r2, [r7, #7]
 8006038:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 800603c:	7a5b      	ldrb	r3, [r3, #9]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	b2d1      	uxtb	r1, r2
 8006044:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <FATFS_LinkDriverEx+0x94>)
 8006046:	7251      	strb	r1, [r2, #9]
 8006048:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800604a:	7dbb      	ldrb	r3, [r7, #22]
 800604c:	3330      	adds	r3, #48	; 0x30
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3301      	adds	r3, #1
 8006058:	223a      	movs	r2, #58	; 0x3a
 800605a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	3302      	adds	r3, #2
 8006060:	222f      	movs	r2, #47	; 0x2f
 8006062:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3303      	adds	r3, #3
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20002434 	.word	0x20002434

08006084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800608e:	2200      	movs	r2, #0
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ffaa 	bl	8005fec <FATFS_LinkDriverEx>
 8006098:	4603      	mov	r3, r0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	6039      	str	r1, [r7, #0]
 80060ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	2b7f      	cmp	r3, #127	; 0x7f
 80060b4:	d802      	bhi.n	80060bc <ff_convert+0x18>
		c = chr;
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	81fb      	strh	r3, [r7, #14]
 80060ba:	e025      	b.n	8006108 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	2bff      	cmp	r3, #255	; 0xff
 80060c6:	d805      	bhi.n	80060d4 <ff_convert+0x30>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	3b80      	subs	r3, #128	; 0x80
 80060cc:	4a12      	ldr	r2, [pc, #72]	; (8006118 <ff_convert+0x74>)
 80060ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d2:	e000      	b.n	80060d6 <ff_convert+0x32>
 80060d4:	2300      	movs	r3, #0
 80060d6:	81fb      	strh	r3, [r7, #14]
 80060d8:	e016      	b.n	8006108 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80060da:	2300      	movs	r3, #0
 80060dc:	81fb      	strh	r3, [r7, #14]
 80060de:	e009      	b.n	80060f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <ff_convert+0x74>)
 80060e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d006      	beq.n	80060fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80060ee:	89fb      	ldrh	r3, [r7, #14]
 80060f0:	3301      	adds	r3, #1
 80060f2:	81fb      	strh	r3, [r7, #14]
 80060f4:	89fb      	ldrh	r3, [r7, #14]
 80060f6:	2b7f      	cmp	r3, #127	; 0x7f
 80060f8:	d9f2      	bls.n	80060e0 <ff_convert+0x3c>
 80060fa:	e000      	b.n	80060fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80060fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80060fe:	89fb      	ldrh	r3, [r7, #14]
 8006100:	3380      	adds	r3, #128	; 0x80
 8006102:	b29b      	uxth	r3, r3
 8006104:	b2db      	uxtb	r3, r3
 8006106:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006108:	89fb      	ldrh	r3, [r7, #14]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	080074c8 	.word	0x080074c8

0800611c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612c:	d201      	bcs.n	8006132 <ff_wtoupper+0x16>
 800612e:	4b3e      	ldr	r3, [pc, #248]	; (8006228 <ff_wtoupper+0x10c>)
 8006130:	e000      	b.n	8006134 <ff_wtoupper+0x18>
 8006132:	4b3e      	ldr	r3, [pc, #248]	; (800622c <ff_wtoupper+0x110>)
 8006134:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	617a      	str	r2, [r7, #20]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006140:	8a7b      	ldrh	r3, [r7, #18]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d068      	beq.n	8006218 <ff_wtoupper+0xfc>
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	8a7b      	ldrh	r3, [r7, #18]
 800614a:	429a      	cmp	r2, r3
 800614c:	d364      	bcc.n	8006218 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1c9a      	adds	r2, r3, #2
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	823b      	strh	r3, [r7, #16]
 8006158:	8a3b      	ldrh	r3, [r7, #16]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	81fb      	strh	r3, [r7, #14]
 800615e:	8a3b      	ldrh	r3, [r7, #16]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	8a79      	ldrh	r1, [r7, #18]
 8006168:	8a3b      	ldrh	r3, [r7, #16]
 800616a:	440b      	add	r3, r1
 800616c:	429a      	cmp	r2, r3
 800616e:	da49      	bge.n	8006204 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006170:	89fb      	ldrh	r3, [r7, #14]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d84f      	bhi.n	8006216 <ff_wtoupper+0xfa>
 8006176:	a201      	add	r2, pc, #4	; (adr r2, 800617c <ff_wtoupper+0x60>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061b3 	.word	0x080061b3
 8006184:	080061c9 	.word	0x080061c9
 8006188:	080061d1 	.word	0x080061d1
 800618c:	080061d9 	.word	0x080061d9
 8006190:	080061e1 	.word	0x080061e1
 8006194:	080061e9 	.word	0x080061e9
 8006198:	080061f1 	.word	0x080061f1
 800619c:	080061f9 	.word	0x080061f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	8a7b      	ldrh	r3, [r7, #18]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	80fb      	strh	r3, [r7, #6]
 80061b0:	e027      	b.n	8006202 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	8a7b      	ldrh	r3, [r7, #18]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	b29b      	uxth	r3, r3
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	80fb      	strh	r3, [r7, #6]
 80061c6:	e01c      	b.n	8006202 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	3b10      	subs	r3, #16
 80061cc:	80fb      	strh	r3, [r7, #6]
 80061ce:	e018      	b.n	8006202 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	3b20      	subs	r3, #32
 80061d4:	80fb      	strh	r3, [r7, #6]
 80061d6:	e014      	b.n	8006202 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	3b30      	subs	r3, #48	; 0x30
 80061dc:	80fb      	strh	r3, [r7, #6]
 80061de:	e010      	b.n	8006202 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	3b1a      	subs	r3, #26
 80061e4:	80fb      	strh	r3, [r7, #6]
 80061e6:	e00c      	b.n	8006202 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	3308      	adds	r3, #8
 80061ec:	80fb      	strh	r3, [r7, #6]
 80061ee:	e008      	b.n	8006202 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	3b50      	subs	r3, #80	; 0x50
 80061f4:	80fb      	strh	r3, [r7, #6]
 80061f6:	e004      	b.n	8006202 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80061fe:	80fb      	strh	r3, [r7, #6]
 8006200:	bf00      	nop
			}
			break;
 8006202:	e008      	b.n	8006216 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006204:	89fb      	ldrh	r3, [r7, #14]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d195      	bne.n	8006136 <ff_wtoupper+0x1a>
 800620a:	8a3b      	ldrh	r3, [r7, #16]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006214:	e78f      	b.n	8006136 <ff_wtoupper+0x1a>
			break;
 8006216:	bf00      	nop
	}

	return chr;
 8006218:	88fb      	ldrh	r3, [r7, #6]
}
 800621a:	4618      	mov	r0, r3
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	080075c8 	.word	0x080075c8
 800622c:	080077bc 	.word	0x080077bc

08006230 <__errno>:
 8006230:	4b01      	ldr	r3, [pc, #4]	; (8006238 <__errno+0x8>)
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000024 	.word	0x20000024

0800623c <__libc_init_array>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4d0d      	ldr	r5, [pc, #52]	; (8006274 <__libc_init_array+0x38>)
 8006240:	4c0d      	ldr	r4, [pc, #52]	; (8006278 <__libc_init_array+0x3c>)
 8006242:	1b64      	subs	r4, r4, r5
 8006244:	10a4      	asrs	r4, r4, #2
 8006246:	2600      	movs	r6, #0
 8006248:	42a6      	cmp	r6, r4
 800624a:	d109      	bne.n	8006260 <__libc_init_array+0x24>
 800624c:	4d0b      	ldr	r5, [pc, #44]	; (800627c <__libc_init_array+0x40>)
 800624e:	4c0c      	ldr	r4, [pc, #48]	; (8006280 <__libc_init_array+0x44>)
 8006250:	f001 f832 	bl	80072b8 <_init>
 8006254:	1b64      	subs	r4, r4, r5
 8006256:	10a4      	asrs	r4, r4, #2
 8006258:	2600      	movs	r6, #0
 800625a:	42a6      	cmp	r6, r4
 800625c:	d105      	bne.n	800626a <__libc_init_array+0x2e>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	f855 3b04 	ldr.w	r3, [r5], #4
 8006264:	4798      	blx	r3
 8006266:	3601      	adds	r6, #1
 8006268:	e7ee      	b.n	8006248 <__libc_init_array+0xc>
 800626a:	f855 3b04 	ldr.w	r3, [r5], #4
 800626e:	4798      	blx	r3
 8006270:	3601      	adds	r6, #1
 8006272:	e7f2      	b.n	800625a <__libc_init_array+0x1e>
 8006274:	08007918 	.word	0x08007918
 8006278:	08007918 	.word	0x08007918
 800627c:	08007918 	.word	0x08007918
 8006280:	0800791c 	.word	0x0800791c

08006284 <memcpy>:
 8006284:	440a      	add	r2, r1
 8006286:	4291      	cmp	r1, r2
 8006288:	f100 33ff 	add.w	r3, r0, #4294967295
 800628c:	d100      	bne.n	8006290 <memcpy+0xc>
 800628e:	4770      	bx	lr
 8006290:	b510      	push	{r4, lr}
 8006292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800629a:	4291      	cmp	r1, r2
 800629c:	d1f9      	bne.n	8006292 <memcpy+0xe>
 800629e:	bd10      	pop	{r4, pc}

080062a0 <memset>:
 80062a0:	4402      	add	r2, r0
 80062a2:	4603      	mov	r3, r0
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d100      	bne.n	80062aa <memset+0xa>
 80062a8:	4770      	bx	lr
 80062aa:	f803 1b01 	strb.w	r1, [r3], #1
 80062ae:	e7f9      	b.n	80062a4 <memset+0x4>

080062b0 <iprintf>:
 80062b0:	b40f      	push	{r0, r1, r2, r3}
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <iprintf+0x2c>)
 80062b4:	b513      	push	{r0, r1, r4, lr}
 80062b6:	681c      	ldr	r4, [r3, #0]
 80062b8:	b124      	cbz	r4, 80062c4 <iprintf+0x14>
 80062ba:	69a3      	ldr	r3, [r4, #24]
 80062bc:	b913      	cbnz	r3, 80062c4 <iprintf+0x14>
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fa5e 	bl	8006780 <__sinit>
 80062c4:	ab05      	add	r3, sp, #20
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	68a1      	ldr	r1, [r4, #8]
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 fc67 	bl	8006ba0 <_vfiprintf_r>
 80062d2:	b002      	add	sp, #8
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	b004      	add	sp, #16
 80062da:	4770      	bx	lr
 80062dc:	20000024 	.word	0x20000024

080062e0 <_puts_r>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	460e      	mov	r6, r1
 80062e4:	4605      	mov	r5, r0
 80062e6:	b118      	cbz	r0, 80062f0 <_puts_r+0x10>
 80062e8:	6983      	ldr	r3, [r0, #24]
 80062ea:	b90b      	cbnz	r3, 80062f0 <_puts_r+0x10>
 80062ec:	f000 fa48 	bl	8006780 <__sinit>
 80062f0:	69ab      	ldr	r3, [r5, #24]
 80062f2:	68ac      	ldr	r4, [r5, #8]
 80062f4:	b913      	cbnz	r3, 80062fc <_puts_r+0x1c>
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 fa42 	bl	8006780 <__sinit>
 80062fc:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <_puts_r+0xd0>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d120      	bne.n	8006344 <_puts_r+0x64>
 8006302:	686c      	ldr	r4, [r5, #4]
 8006304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006306:	07db      	lsls	r3, r3, #31
 8006308:	d405      	bmi.n	8006316 <_puts_r+0x36>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	0598      	lsls	r0, r3, #22
 800630e:	d402      	bmi.n	8006316 <_puts_r+0x36>
 8006310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006312:	f000 fad3 	bl	80068bc <__retarget_lock_acquire_recursive>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	0719      	lsls	r1, r3, #28
 800631a:	d51d      	bpl.n	8006358 <_puts_r+0x78>
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	b1db      	cbz	r3, 8006358 <_puts_r+0x78>
 8006320:	3e01      	subs	r6, #1
 8006322:	68a3      	ldr	r3, [r4, #8]
 8006324:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006328:	3b01      	subs	r3, #1
 800632a:	60a3      	str	r3, [r4, #8]
 800632c:	bb39      	cbnz	r1, 800637e <_puts_r+0x9e>
 800632e:	2b00      	cmp	r3, #0
 8006330:	da38      	bge.n	80063a4 <_puts_r+0xc4>
 8006332:	4622      	mov	r2, r4
 8006334:	210a      	movs	r1, #10
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f848 	bl	80063cc <__swbuf_r>
 800633c:	3001      	adds	r0, #1
 800633e:	d011      	beq.n	8006364 <_puts_r+0x84>
 8006340:	250a      	movs	r5, #10
 8006342:	e011      	b.n	8006368 <_puts_r+0x88>
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <_puts_r+0xd4>)
 8006346:	429c      	cmp	r4, r3
 8006348:	d101      	bne.n	800634e <_puts_r+0x6e>
 800634a:	68ac      	ldr	r4, [r5, #8]
 800634c:	e7da      	b.n	8006304 <_puts_r+0x24>
 800634e:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <_puts_r+0xd8>)
 8006350:	429c      	cmp	r4, r3
 8006352:	bf08      	it	eq
 8006354:	68ec      	ldreq	r4, [r5, #12]
 8006356:	e7d5      	b.n	8006304 <_puts_r+0x24>
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	f000 f888 	bl	8006470 <__swsetup_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	d0dd      	beq.n	8006320 <_puts_r+0x40>
 8006364:	f04f 35ff 	mov.w	r5, #4294967295
 8006368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800636a:	07da      	lsls	r2, r3, #31
 800636c:	d405      	bmi.n	800637a <_puts_r+0x9a>
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	059b      	lsls	r3, r3, #22
 8006372:	d402      	bmi.n	800637a <_puts_r+0x9a>
 8006374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006376:	f000 faa2 	bl	80068be <__retarget_lock_release_recursive>
 800637a:	4628      	mov	r0, r5
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	2b00      	cmp	r3, #0
 8006380:	da04      	bge.n	800638c <_puts_r+0xac>
 8006382:	69a2      	ldr	r2, [r4, #24]
 8006384:	429a      	cmp	r2, r3
 8006386:	dc06      	bgt.n	8006396 <_puts_r+0xb6>
 8006388:	290a      	cmp	r1, #10
 800638a:	d004      	beq.n	8006396 <_puts_r+0xb6>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	7019      	strb	r1, [r3, #0]
 8006394:	e7c5      	b.n	8006322 <_puts_r+0x42>
 8006396:	4622      	mov	r2, r4
 8006398:	4628      	mov	r0, r5
 800639a:	f000 f817 	bl	80063cc <__swbuf_r>
 800639e:	3001      	adds	r0, #1
 80063a0:	d1bf      	bne.n	8006322 <_puts_r+0x42>
 80063a2:	e7df      	b.n	8006364 <_puts_r+0x84>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	250a      	movs	r5, #10
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	6022      	str	r2, [r4, #0]
 80063ac:	701d      	strb	r5, [r3, #0]
 80063ae:	e7db      	b.n	8006368 <_puts_r+0x88>
 80063b0:	0800789c 	.word	0x0800789c
 80063b4:	080078bc 	.word	0x080078bc
 80063b8:	0800787c 	.word	0x0800787c

080063bc <puts>:
 80063bc:	4b02      	ldr	r3, [pc, #8]	; (80063c8 <puts+0xc>)
 80063be:	4601      	mov	r1, r0
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	f7ff bf8d 	b.w	80062e0 <_puts_r>
 80063c6:	bf00      	nop
 80063c8:	20000024 	.word	0x20000024

080063cc <__swbuf_r>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	460e      	mov	r6, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	4605      	mov	r5, r0
 80063d4:	b118      	cbz	r0, 80063de <__swbuf_r+0x12>
 80063d6:	6983      	ldr	r3, [r0, #24]
 80063d8:	b90b      	cbnz	r3, 80063de <__swbuf_r+0x12>
 80063da:	f000 f9d1 	bl	8006780 <__sinit>
 80063de:	4b21      	ldr	r3, [pc, #132]	; (8006464 <__swbuf_r+0x98>)
 80063e0:	429c      	cmp	r4, r3
 80063e2:	d12b      	bne.n	800643c <__swbuf_r+0x70>
 80063e4:	686c      	ldr	r4, [r5, #4]
 80063e6:	69a3      	ldr	r3, [r4, #24]
 80063e8:	60a3      	str	r3, [r4, #8]
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	071a      	lsls	r2, r3, #28
 80063ee:	d52f      	bpl.n	8006450 <__swbuf_r+0x84>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	b36b      	cbz	r3, 8006450 <__swbuf_r+0x84>
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	6820      	ldr	r0, [r4, #0]
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	6963      	ldr	r3, [r4, #20]
 80063fc:	b2f6      	uxtb	r6, r6
 80063fe:	4283      	cmp	r3, r0
 8006400:	4637      	mov	r7, r6
 8006402:	dc04      	bgt.n	800640e <__swbuf_r+0x42>
 8006404:	4621      	mov	r1, r4
 8006406:	4628      	mov	r0, r5
 8006408:	f000 f926 	bl	8006658 <_fflush_r>
 800640c:	bb30      	cbnz	r0, 800645c <__swbuf_r+0x90>
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	3b01      	subs	r3, #1
 8006412:	60a3      	str	r3, [r4, #8]
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	701e      	strb	r6, [r3, #0]
 800641c:	6963      	ldr	r3, [r4, #20]
 800641e:	3001      	adds	r0, #1
 8006420:	4283      	cmp	r3, r0
 8006422:	d004      	beq.n	800642e <__swbuf_r+0x62>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	07db      	lsls	r3, r3, #31
 8006428:	d506      	bpl.n	8006438 <__swbuf_r+0x6c>
 800642a:	2e0a      	cmp	r6, #10
 800642c:	d104      	bne.n	8006438 <__swbuf_r+0x6c>
 800642e:	4621      	mov	r1, r4
 8006430:	4628      	mov	r0, r5
 8006432:	f000 f911 	bl	8006658 <_fflush_r>
 8006436:	b988      	cbnz	r0, 800645c <__swbuf_r+0x90>
 8006438:	4638      	mov	r0, r7
 800643a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <__swbuf_r+0x9c>)
 800643e:	429c      	cmp	r4, r3
 8006440:	d101      	bne.n	8006446 <__swbuf_r+0x7a>
 8006442:	68ac      	ldr	r4, [r5, #8]
 8006444:	e7cf      	b.n	80063e6 <__swbuf_r+0x1a>
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <__swbuf_r+0xa0>)
 8006448:	429c      	cmp	r4, r3
 800644a:	bf08      	it	eq
 800644c:	68ec      	ldreq	r4, [r5, #12]
 800644e:	e7ca      	b.n	80063e6 <__swbuf_r+0x1a>
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f80c 	bl	8006470 <__swsetup_r>
 8006458:	2800      	cmp	r0, #0
 800645a:	d0cb      	beq.n	80063f4 <__swbuf_r+0x28>
 800645c:	f04f 37ff 	mov.w	r7, #4294967295
 8006460:	e7ea      	b.n	8006438 <__swbuf_r+0x6c>
 8006462:	bf00      	nop
 8006464:	0800789c 	.word	0x0800789c
 8006468:	080078bc 	.word	0x080078bc
 800646c:	0800787c 	.word	0x0800787c

08006470 <__swsetup_r>:
 8006470:	4b32      	ldr	r3, [pc, #200]	; (800653c <__swsetup_r+0xcc>)
 8006472:	b570      	push	{r4, r5, r6, lr}
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	4606      	mov	r6, r0
 8006478:	460c      	mov	r4, r1
 800647a:	b125      	cbz	r5, 8006486 <__swsetup_r+0x16>
 800647c:	69ab      	ldr	r3, [r5, #24]
 800647e:	b913      	cbnz	r3, 8006486 <__swsetup_r+0x16>
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f97d 	bl	8006780 <__sinit>
 8006486:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <__swsetup_r+0xd0>)
 8006488:	429c      	cmp	r4, r3
 800648a:	d10f      	bne.n	80064ac <__swsetup_r+0x3c>
 800648c:	686c      	ldr	r4, [r5, #4]
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006494:	0719      	lsls	r1, r3, #28
 8006496:	d42c      	bmi.n	80064f2 <__swsetup_r+0x82>
 8006498:	06dd      	lsls	r5, r3, #27
 800649a:	d411      	bmi.n	80064c0 <__swsetup_r+0x50>
 800649c:	2309      	movs	r3, #9
 800649e:	6033      	str	r3, [r6, #0]
 80064a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	e03e      	b.n	800652a <__swsetup_r+0xba>
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <__swsetup_r+0xd4>)
 80064ae:	429c      	cmp	r4, r3
 80064b0:	d101      	bne.n	80064b6 <__swsetup_r+0x46>
 80064b2:	68ac      	ldr	r4, [r5, #8]
 80064b4:	e7eb      	b.n	800648e <__swsetup_r+0x1e>
 80064b6:	4b24      	ldr	r3, [pc, #144]	; (8006548 <__swsetup_r+0xd8>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	bf08      	it	eq
 80064bc:	68ec      	ldreq	r4, [r5, #12]
 80064be:	e7e6      	b.n	800648e <__swsetup_r+0x1e>
 80064c0:	0758      	lsls	r0, r3, #29
 80064c2:	d512      	bpl.n	80064ea <__swsetup_r+0x7a>
 80064c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c6:	b141      	cbz	r1, 80064da <__swsetup_r+0x6a>
 80064c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__swsetup_r+0x66>
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 fa5b 	bl	800698c <_free_r>
 80064d6:	2300      	movs	r3, #0
 80064d8:	6363      	str	r3, [r4, #52]	; 0x34
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	2300      	movs	r3, #0
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0308 	orr.w	r3, r3, #8
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	b94b      	cbnz	r3, 800650a <__swsetup_r+0x9a>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d003      	beq.n	800650a <__swsetup_r+0x9a>
 8006502:	4621      	mov	r1, r4
 8006504:	4630      	mov	r0, r6
 8006506:	f000 fa01 	bl	800690c <__smakebuf_r>
 800650a:	89a0      	ldrh	r0, [r4, #12]
 800650c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006510:	f010 0301 	ands.w	r3, r0, #1
 8006514:	d00a      	beq.n	800652c <__swsetup_r+0xbc>
 8006516:	2300      	movs	r3, #0
 8006518:	60a3      	str	r3, [r4, #8]
 800651a:	6963      	ldr	r3, [r4, #20]
 800651c:	425b      	negs	r3, r3
 800651e:	61a3      	str	r3, [r4, #24]
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	b943      	cbnz	r3, 8006536 <__swsetup_r+0xc6>
 8006524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006528:	d1ba      	bne.n	80064a0 <__swsetup_r+0x30>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	0781      	lsls	r1, r0, #30
 800652e:	bf58      	it	pl
 8006530:	6963      	ldrpl	r3, [r4, #20]
 8006532:	60a3      	str	r3, [r4, #8]
 8006534:	e7f4      	b.n	8006520 <__swsetup_r+0xb0>
 8006536:	2000      	movs	r0, #0
 8006538:	e7f7      	b.n	800652a <__swsetup_r+0xba>
 800653a:	bf00      	nop
 800653c:	20000024 	.word	0x20000024
 8006540:	0800789c 	.word	0x0800789c
 8006544:	080078bc 	.word	0x080078bc
 8006548:	0800787c 	.word	0x0800787c

0800654c <__sflush_r>:
 800654c:	898a      	ldrh	r2, [r1, #12]
 800654e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006552:	4605      	mov	r5, r0
 8006554:	0710      	lsls	r0, r2, #28
 8006556:	460c      	mov	r4, r1
 8006558:	d458      	bmi.n	800660c <__sflush_r+0xc0>
 800655a:	684b      	ldr	r3, [r1, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dc05      	bgt.n	800656c <__sflush_r+0x20>
 8006560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	dc02      	bgt.n	800656c <__sflush_r+0x20>
 8006566:	2000      	movs	r0, #0
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800656e:	2e00      	cmp	r6, #0
 8006570:	d0f9      	beq.n	8006566 <__sflush_r+0x1a>
 8006572:	2300      	movs	r3, #0
 8006574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006578:	682f      	ldr	r7, [r5, #0]
 800657a:	602b      	str	r3, [r5, #0]
 800657c:	d032      	beq.n	80065e4 <__sflush_r+0x98>
 800657e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	075a      	lsls	r2, r3, #29
 8006584:	d505      	bpl.n	8006592 <__sflush_r+0x46>
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	1ac0      	subs	r0, r0, r3
 800658a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800658c:	b10b      	cbz	r3, 8006592 <__sflush_r+0x46>
 800658e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006590:	1ac0      	subs	r0, r0, r3
 8006592:	2300      	movs	r3, #0
 8006594:	4602      	mov	r2, r0
 8006596:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006598:	6a21      	ldr	r1, [r4, #32]
 800659a:	4628      	mov	r0, r5
 800659c:	47b0      	blx	r6
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	d106      	bne.n	80065b2 <__sflush_r+0x66>
 80065a4:	6829      	ldr	r1, [r5, #0]
 80065a6:	291d      	cmp	r1, #29
 80065a8:	d82c      	bhi.n	8006604 <__sflush_r+0xb8>
 80065aa:	4a2a      	ldr	r2, [pc, #168]	; (8006654 <__sflush_r+0x108>)
 80065ac:	40ca      	lsrs	r2, r1
 80065ae:	07d6      	lsls	r6, r2, #31
 80065b0:	d528      	bpl.n	8006604 <__sflush_r+0xb8>
 80065b2:	2200      	movs	r2, #0
 80065b4:	6062      	str	r2, [r4, #4]
 80065b6:	04d9      	lsls	r1, r3, #19
 80065b8:	6922      	ldr	r2, [r4, #16]
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	d504      	bpl.n	80065c8 <__sflush_r+0x7c>
 80065be:	1c42      	adds	r2, r0, #1
 80065c0:	d101      	bne.n	80065c6 <__sflush_r+0x7a>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	b903      	cbnz	r3, 80065c8 <__sflush_r+0x7c>
 80065c6:	6560      	str	r0, [r4, #84]	; 0x54
 80065c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ca:	602f      	str	r7, [r5, #0]
 80065cc:	2900      	cmp	r1, #0
 80065ce:	d0ca      	beq.n	8006566 <__sflush_r+0x1a>
 80065d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <__sflush_r+0x92>
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 f9d7 	bl	800698c <_free_r>
 80065de:	2000      	movs	r0, #0
 80065e0:	6360      	str	r0, [r4, #52]	; 0x34
 80065e2:	e7c1      	b.n	8006568 <__sflush_r+0x1c>
 80065e4:	6a21      	ldr	r1, [r4, #32]
 80065e6:	2301      	movs	r3, #1
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b0      	blx	r6
 80065ec:	1c41      	adds	r1, r0, #1
 80065ee:	d1c7      	bne.n	8006580 <__sflush_r+0x34>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0c4      	beq.n	8006580 <__sflush_r+0x34>
 80065f6:	2b1d      	cmp	r3, #29
 80065f8:	d001      	beq.n	80065fe <__sflush_r+0xb2>
 80065fa:	2b16      	cmp	r3, #22
 80065fc:	d101      	bne.n	8006602 <__sflush_r+0xb6>
 80065fe:	602f      	str	r7, [r5, #0]
 8006600:	e7b1      	b.n	8006566 <__sflush_r+0x1a>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	e7ad      	b.n	8006568 <__sflush_r+0x1c>
 800660c:	690f      	ldr	r7, [r1, #16]
 800660e:	2f00      	cmp	r7, #0
 8006610:	d0a9      	beq.n	8006566 <__sflush_r+0x1a>
 8006612:	0793      	lsls	r3, r2, #30
 8006614:	680e      	ldr	r6, [r1, #0]
 8006616:	bf08      	it	eq
 8006618:	694b      	ldreq	r3, [r1, #20]
 800661a:	600f      	str	r7, [r1, #0]
 800661c:	bf18      	it	ne
 800661e:	2300      	movne	r3, #0
 8006620:	eba6 0807 	sub.w	r8, r6, r7
 8006624:	608b      	str	r3, [r1, #8]
 8006626:	f1b8 0f00 	cmp.w	r8, #0
 800662a:	dd9c      	ble.n	8006566 <__sflush_r+0x1a>
 800662c:	6a21      	ldr	r1, [r4, #32]
 800662e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006630:	4643      	mov	r3, r8
 8006632:	463a      	mov	r2, r7
 8006634:	4628      	mov	r0, r5
 8006636:	47b0      	blx	r6
 8006638:	2800      	cmp	r0, #0
 800663a:	dc06      	bgt.n	800664a <__sflush_r+0xfe>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e78e      	b.n	8006568 <__sflush_r+0x1c>
 800664a:	4407      	add	r7, r0
 800664c:	eba8 0800 	sub.w	r8, r8, r0
 8006650:	e7e9      	b.n	8006626 <__sflush_r+0xda>
 8006652:	bf00      	nop
 8006654:	20400001 	.word	0x20400001

08006658 <_fflush_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	4605      	mov	r5, r0
 800665e:	460c      	mov	r4, r1
 8006660:	b913      	cbnz	r3, 8006668 <_fflush_r+0x10>
 8006662:	2500      	movs	r5, #0
 8006664:	4628      	mov	r0, r5
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	b118      	cbz	r0, 8006672 <_fflush_r+0x1a>
 800666a:	6983      	ldr	r3, [r0, #24]
 800666c:	b90b      	cbnz	r3, 8006672 <_fflush_r+0x1a>
 800666e:	f000 f887 	bl	8006780 <__sinit>
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <_fflush_r+0x6c>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d11b      	bne.n	80066b0 <_fflush_r+0x58>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ef      	beq.n	8006662 <_fflush_r+0xa>
 8006682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006684:	07d0      	lsls	r0, r2, #31
 8006686:	d404      	bmi.n	8006692 <_fflush_r+0x3a>
 8006688:	0599      	lsls	r1, r3, #22
 800668a:	d402      	bmi.n	8006692 <_fflush_r+0x3a>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f000 f915 	bl	80068bc <__retarget_lock_acquire_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	4621      	mov	r1, r4
 8006696:	f7ff ff59 	bl	800654c <__sflush_r>
 800669a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800669c:	07da      	lsls	r2, r3, #31
 800669e:	4605      	mov	r5, r0
 80066a0:	d4e0      	bmi.n	8006664 <_fflush_r+0xc>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	059b      	lsls	r3, r3, #22
 80066a6:	d4dd      	bmi.n	8006664 <_fflush_r+0xc>
 80066a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066aa:	f000 f908 	bl	80068be <__retarget_lock_release_recursive>
 80066ae:	e7d9      	b.n	8006664 <_fflush_r+0xc>
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <_fflush_r+0x70>)
 80066b2:	429c      	cmp	r4, r3
 80066b4:	d101      	bne.n	80066ba <_fflush_r+0x62>
 80066b6:	68ac      	ldr	r4, [r5, #8]
 80066b8:	e7df      	b.n	800667a <_fflush_r+0x22>
 80066ba:	4b04      	ldr	r3, [pc, #16]	; (80066cc <_fflush_r+0x74>)
 80066bc:	429c      	cmp	r4, r3
 80066be:	bf08      	it	eq
 80066c0:	68ec      	ldreq	r4, [r5, #12]
 80066c2:	e7da      	b.n	800667a <_fflush_r+0x22>
 80066c4:	0800789c 	.word	0x0800789c
 80066c8:	080078bc 	.word	0x080078bc
 80066cc:	0800787c 	.word	0x0800787c

080066d0 <std>:
 80066d0:	2300      	movs	r3, #0
 80066d2:	b510      	push	{r4, lr}
 80066d4:	4604      	mov	r4, r0
 80066d6:	e9c0 3300 	strd	r3, r3, [r0]
 80066da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066de:	6083      	str	r3, [r0, #8]
 80066e0:	8181      	strh	r1, [r0, #12]
 80066e2:	6643      	str	r3, [r0, #100]	; 0x64
 80066e4:	81c2      	strh	r2, [r0, #14]
 80066e6:	6183      	str	r3, [r0, #24]
 80066e8:	4619      	mov	r1, r3
 80066ea:	2208      	movs	r2, #8
 80066ec:	305c      	adds	r0, #92	; 0x5c
 80066ee:	f7ff fdd7 	bl	80062a0 <memset>
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <std+0x38>)
 80066f4:	6263      	str	r3, [r4, #36]	; 0x24
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <std+0x3c>)
 80066f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <std+0x40>)
 80066fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066fe:	4b05      	ldr	r3, [pc, #20]	; (8006714 <std+0x44>)
 8006700:	6224      	str	r4, [r4, #32]
 8006702:	6323      	str	r3, [r4, #48]	; 0x30
 8006704:	bd10      	pop	{r4, pc}
 8006706:	bf00      	nop
 8006708:	08007149 	.word	0x08007149
 800670c:	0800716b 	.word	0x0800716b
 8006710:	080071a3 	.word	0x080071a3
 8006714:	080071c7 	.word	0x080071c7

08006718 <_cleanup_r>:
 8006718:	4901      	ldr	r1, [pc, #4]	; (8006720 <_cleanup_r+0x8>)
 800671a:	f000 b8af 	b.w	800687c <_fwalk_reent>
 800671e:	bf00      	nop
 8006720:	08006659 	.word	0x08006659

08006724 <__sfmoreglue>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	2268      	movs	r2, #104	; 0x68
 8006728:	1e4d      	subs	r5, r1, #1
 800672a:	4355      	muls	r5, r2
 800672c:	460e      	mov	r6, r1
 800672e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006732:	f000 f997 	bl	8006a64 <_malloc_r>
 8006736:	4604      	mov	r4, r0
 8006738:	b140      	cbz	r0, 800674c <__sfmoreglue+0x28>
 800673a:	2100      	movs	r1, #0
 800673c:	e9c0 1600 	strd	r1, r6, [r0]
 8006740:	300c      	adds	r0, #12
 8006742:	60a0      	str	r0, [r4, #8]
 8006744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006748:	f7ff fdaa 	bl	80062a0 <memset>
 800674c:	4620      	mov	r0, r4
 800674e:	bd70      	pop	{r4, r5, r6, pc}

08006750 <__sfp_lock_acquire>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__sfp_lock_acquire+0x8>)
 8006752:	f000 b8b3 	b.w	80068bc <__retarget_lock_acquire_recursive>
 8006756:	bf00      	nop
 8006758:	20002441 	.word	0x20002441

0800675c <__sfp_lock_release>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__sfp_lock_release+0x8>)
 800675e:	f000 b8ae 	b.w	80068be <__retarget_lock_release_recursive>
 8006762:	bf00      	nop
 8006764:	20002441 	.word	0x20002441

08006768 <__sinit_lock_acquire>:
 8006768:	4801      	ldr	r0, [pc, #4]	; (8006770 <__sinit_lock_acquire+0x8>)
 800676a:	f000 b8a7 	b.w	80068bc <__retarget_lock_acquire_recursive>
 800676e:	bf00      	nop
 8006770:	20002442 	.word	0x20002442

08006774 <__sinit_lock_release>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__sinit_lock_release+0x8>)
 8006776:	f000 b8a2 	b.w	80068be <__retarget_lock_release_recursive>
 800677a:	bf00      	nop
 800677c:	20002442 	.word	0x20002442

08006780 <__sinit>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	f7ff fff0 	bl	8006768 <__sinit_lock_acquire>
 8006788:	69a3      	ldr	r3, [r4, #24]
 800678a:	b11b      	cbz	r3, 8006794 <__sinit+0x14>
 800678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006790:	f7ff bff0 	b.w	8006774 <__sinit_lock_release>
 8006794:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006798:	6523      	str	r3, [r4, #80]	; 0x50
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <__sinit+0x68>)
 800679c:	4a13      	ldr	r2, [pc, #76]	; (80067ec <__sinit+0x6c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	bf04      	itt	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	61a3      	streq	r3, [r4, #24]
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f820 	bl	80067f0 <__sfp>
 80067b0:	6060      	str	r0, [r4, #4]
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f81c 	bl	80067f0 <__sfp>
 80067b8:	60a0      	str	r0, [r4, #8]
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f818 	bl	80067f0 <__sfp>
 80067c0:	2200      	movs	r2, #0
 80067c2:	60e0      	str	r0, [r4, #12]
 80067c4:	2104      	movs	r1, #4
 80067c6:	6860      	ldr	r0, [r4, #4]
 80067c8:	f7ff ff82 	bl	80066d0 <std>
 80067cc:	68a0      	ldr	r0, [r4, #8]
 80067ce:	2201      	movs	r2, #1
 80067d0:	2109      	movs	r1, #9
 80067d2:	f7ff ff7d 	bl	80066d0 <std>
 80067d6:	68e0      	ldr	r0, [r4, #12]
 80067d8:	2202      	movs	r2, #2
 80067da:	2112      	movs	r1, #18
 80067dc:	f7ff ff78 	bl	80066d0 <std>
 80067e0:	2301      	movs	r3, #1
 80067e2:	61a3      	str	r3, [r4, #24]
 80067e4:	e7d2      	b.n	800678c <__sinit+0xc>
 80067e6:	bf00      	nop
 80067e8:	08007878 	.word	0x08007878
 80067ec:	08006719 	.word	0x08006719

080067f0 <__sfp>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	4607      	mov	r7, r0
 80067f4:	f7ff ffac 	bl	8006750 <__sfp_lock_acquire>
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <__sfp+0x84>)
 80067fa:	681e      	ldr	r6, [r3, #0]
 80067fc:	69b3      	ldr	r3, [r6, #24]
 80067fe:	b913      	cbnz	r3, 8006806 <__sfp+0x16>
 8006800:	4630      	mov	r0, r6
 8006802:	f7ff ffbd 	bl	8006780 <__sinit>
 8006806:	3648      	adds	r6, #72	; 0x48
 8006808:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800680c:	3b01      	subs	r3, #1
 800680e:	d503      	bpl.n	8006818 <__sfp+0x28>
 8006810:	6833      	ldr	r3, [r6, #0]
 8006812:	b30b      	cbz	r3, 8006858 <__sfp+0x68>
 8006814:	6836      	ldr	r6, [r6, #0]
 8006816:	e7f7      	b.n	8006808 <__sfp+0x18>
 8006818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800681c:	b9d5      	cbnz	r5, 8006854 <__sfp+0x64>
 800681e:	4b16      	ldr	r3, [pc, #88]	; (8006878 <__sfp+0x88>)
 8006820:	60e3      	str	r3, [r4, #12]
 8006822:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006826:	6665      	str	r5, [r4, #100]	; 0x64
 8006828:	f000 f847 	bl	80068ba <__retarget_lock_init_recursive>
 800682c:	f7ff ff96 	bl	800675c <__sfp_lock_release>
 8006830:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006834:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006838:	6025      	str	r5, [r4, #0]
 800683a:	61a5      	str	r5, [r4, #24]
 800683c:	2208      	movs	r2, #8
 800683e:	4629      	mov	r1, r5
 8006840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006844:	f7ff fd2c 	bl	80062a0 <memset>
 8006848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800684c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006850:	4620      	mov	r0, r4
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	3468      	adds	r4, #104	; 0x68
 8006856:	e7d9      	b.n	800680c <__sfp+0x1c>
 8006858:	2104      	movs	r1, #4
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ff62 	bl	8006724 <__sfmoreglue>
 8006860:	4604      	mov	r4, r0
 8006862:	6030      	str	r0, [r6, #0]
 8006864:	2800      	cmp	r0, #0
 8006866:	d1d5      	bne.n	8006814 <__sfp+0x24>
 8006868:	f7ff ff78 	bl	800675c <__sfp_lock_release>
 800686c:	230c      	movs	r3, #12
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	e7ee      	b.n	8006850 <__sfp+0x60>
 8006872:	bf00      	nop
 8006874:	08007878 	.word	0x08007878
 8006878:	ffff0001 	.word	0xffff0001

0800687c <_fwalk_reent>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4606      	mov	r6, r0
 8006882:	4688      	mov	r8, r1
 8006884:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006888:	2700      	movs	r7, #0
 800688a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800688e:	f1b9 0901 	subs.w	r9, r9, #1
 8006892:	d505      	bpl.n	80068a0 <_fwalk_reent+0x24>
 8006894:	6824      	ldr	r4, [r4, #0]
 8006896:	2c00      	cmp	r4, #0
 8006898:	d1f7      	bne.n	800688a <_fwalk_reent+0xe>
 800689a:	4638      	mov	r0, r7
 800689c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a0:	89ab      	ldrh	r3, [r5, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d907      	bls.n	80068b6 <_fwalk_reent+0x3a>
 80068a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068aa:	3301      	adds	r3, #1
 80068ac:	d003      	beq.n	80068b6 <_fwalk_reent+0x3a>
 80068ae:	4629      	mov	r1, r5
 80068b0:	4630      	mov	r0, r6
 80068b2:	47c0      	blx	r8
 80068b4:	4307      	orrs	r7, r0
 80068b6:	3568      	adds	r5, #104	; 0x68
 80068b8:	e7e9      	b.n	800688e <_fwalk_reent+0x12>

080068ba <__retarget_lock_init_recursive>:
 80068ba:	4770      	bx	lr

080068bc <__retarget_lock_acquire_recursive>:
 80068bc:	4770      	bx	lr

080068be <__retarget_lock_release_recursive>:
 80068be:	4770      	bx	lr

080068c0 <__swhatbuf_r>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	460e      	mov	r6, r1
 80068c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c8:	2900      	cmp	r1, #0
 80068ca:	b096      	sub	sp, #88	; 0x58
 80068cc:	4614      	mov	r4, r2
 80068ce:	461d      	mov	r5, r3
 80068d0:	da08      	bge.n	80068e4 <__swhatbuf_r+0x24>
 80068d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	602a      	str	r2, [r5, #0]
 80068da:	061a      	lsls	r2, r3, #24
 80068dc:	d410      	bmi.n	8006900 <__swhatbuf_r+0x40>
 80068de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e2:	e00e      	b.n	8006902 <__swhatbuf_r+0x42>
 80068e4:	466a      	mov	r2, sp
 80068e6:	f000 fc95 	bl	8007214 <_fstat_r>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	dbf1      	blt.n	80068d2 <__swhatbuf_r+0x12>
 80068ee:	9a01      	ldr	r2, [sp, #4]
 80068f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068f8:	425a      	negs	r2, r3
 80068fa:	415a      	adcs	r2, r3
 80068fc:	602a      	str	r2, [r5, #0]
 80068fe:	e7ee      	b.n	80068de <__swhatbuf_r+0x1e>
 8006900:	2340      	movs	r3, #64	; 0x40
 8006902:	2000      	movs	r0, #0
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	b016      	add	sp, #88	; 0x58
 8006908:	bd70      	pop	{r4, r5, r6, pc}
	...

0800690c <__smakebuf_r>:
 800690c:	898b      	ldrh	r3, [r1, #12]
 800690e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006910:	079d      	lsls	r5, r3, #30
 8006912:	4606      	mov	r6, r0
 8006914:	460c      	mov	r4, r1
 8006916:	d507      	bpl.n	8006928 <__smakebuf_r+0x1c>
 8006918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	2301      	movs	r3, #1
 8006922:	6163      	str	r3, [r4, #20]
 8006924:	b002      	add	sp, #8
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	ab01      	add	r3, sp, #4
 800692a:	466a      	mov	r2, sp
 800692c:	f7ff ffc8 	bl	80068c0 <__swhatbuf_r>
 8006930:	9900      	ldr	r1, [sp, #0]
 8006932:	4605      	mov	r5, r0
 8006934:	4630      	mov	r0, r6
 8006936:	f000 f895 	bl	8006a64 <_malloc_r>
 800693a:	b948      	cbnz	r0, 8006950 <__smakebuf_r+0x44>
 800693c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006940:	059a      	lsls	r2, r3, #22
 8006942:	d4ef      	bmi.n	8006924 <__smakebuf_r+0x18>
 8006944:	f023 0303 	bic.w	r3, r3, #3
 8006948:	f043 0302 	orr.w	r3, r3, #2
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	e7e3      	b.n	8006918 <__smakebuf_r+0xc>
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <__smakebuf_r+0x7c>)
 8006952:	62b3      	str	r3, [r6, #40]	; 0x28
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	6020      	str	r0, [r4, #0]
 8006958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	9b00      	ldr	r3, [sp, #0]
 8006960:	6163      	str	r3, [r4, #20]
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	6120      	str	r0, [r4, #16]
 8006966:	b15b      	cbz	r3, 8006980 <__smakebuf_r+0x74>
 8006968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800696c:	4630      	mov	r0, r6
 800696e:	f000 fc63 	bl	8007238 <_isatty_r>
 8006972:	b128      	cbz	r0, 8006980 <__smakebuf_r+0x74>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	89a0      	ldrh	r0, [r4, #12]
 8006982:	4305      	orrs	r5, r0
 8006984:	81a5      	strh	r5, [r4, #12]
 8006986:	e7cd      	b.n	8006924 <__smakebuf_r+0x18>
 8006988:	08006719 	.word	0x08006719

0800698c <_free_r>:
 800698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698e:	2900      	cmp	r1, #0
 8006990:	d044      	beq.n	8006a1c <_free_r+0x90>
 8006992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006996:	9001      	str	r0, [sp, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f1a1 0404 	sub.w	r4, r1, #4
 800699e:	bfb8      	it	lt
 80069a0:	18e4      	addlt	r4, r4, r3
 80069a2:	f000 fc6b 	bl	800727c <__malloc_lock>
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <_free_r+0x94>)
 80069a8:	9801      	ldr	r0, [sp, #4]
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	b933      	cbnz	r3, 80069bc <_free_r+0x30>
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	6014      	str	r4, [r2, #0]
 80069b2:	b003      	add	sp, #12
 80069b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b8:	f000 bc66 	b.w	8007288 <__malloc_unlock>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d908      	bls.n	80069d2 <_free_r+0x46>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	1961      	adds	r1, r4, r5
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf01      	itttt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	1949      	addeq	r1, r1, r5
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	e7ed      	b.n	80069ae <_free_r+0x22>
 80069d2:	461a      	mov	r2, r3
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b10b      	cbz	r3, 80069dc <_free_r+0x50>
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d9fa      	bls.n	80069d2 <_free_r+0x46>
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	1855      	adds	r5, r2, r1
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d10b      	bne.n	80069fc <_free_r+0x70>
 80069e4:	6824      	ldr	r4, [r4, #0]
 80069e6:	4421      	add	r1, r4
 80069e8:	1854      	adds	r4, r2, r1
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	d1e0      	bne.n	80069b2 <_free_r+0x26>
 80069f0:	681c      	ldr	r4, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	6053      	str	r3, [r2, #4]
 80069f6:	4421      	add	r1, r4
 80069f8:	6011      	str	r1, [r2, #0]
 80069fa:	e7da      	b.n	80069b2 <_free_r+0x26>
 80069fc:	d902      	bls.n	8006a04 <_free_r+0x78>
 80069fe:	230c      	movs	r3, #12
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	e7d6      	b.n	80069b2 <_free_r+0x26>
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf04      	itt	eq
 8006a0c:	6819      	ldreq	r1, [r3, #0]
 8006a0e:	685b      	ldreq	r3, [r3, #4]
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	bf04      	itt	eq
 8006a14:	1949      	addeq	r1, r1, r5
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	6054      	str	r4, [r2, #4]
 8006a1a:	e7ca      	b.n	80069b2 <_free_r+0x26>
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bd30      	pop	{r4, r5, pc}
 8006a20:	20002444 	.word	0x20002444

08006a24 <sbrk_aligned>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4e0e      	ldr	r6, [pc, #56]	; (8006a60 <sbrk_aligned+0x3c>)
 8006a28:	460c      	mov	r4, r1
 8006a2a:	6831      	ldr	r1, [r6, #0]
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	b911      	cbnz	r1, 8006a36 <sbrk_aligned+0x12>
 8006a30:	f000 fb7a 	bl	8007128 <_sbrk_r>
 8006a34:	6030      	str	r0, [r6, #0]
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 fb75 	bl	8007128 <_sbrk_r>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d00a      	beq.n	8006a58 <sbrk_aligned+0x34>
 8006a42:	1cc4      	adds	r4, r0, #3
 8006a44:	f024 0403 	bic.w	r4, r4, #3
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d007      	beq.n	8006a5c <sbrk_aligned+0x38>
 8006a4c:	1a21      	subs	r1, r4, r0
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fb6a 	bl	8007128 <_sbrk_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d101      	bne.n	8006a5c <sbrk_aligned+0x38>
 8006a58:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	20002448 	.word	0x20002448

08006a64 <_malloc_r>:
 8006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a68:	1ccd      	adds	r5, r1, #3
 8006a6a:	f025 0503 	bic.w	r5, r5, #3
 8006a6e:	3508      	adds	r5, #8
 8006a70:	2d0c      	cmp	r5, #12
 8006a72:	bf38      	it	cc
 8006a74:	250c      	movcc	r5, #12
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	4607      	mov	r7, r0
 8006a7a:	db01      	blt.n	8006a80 <_malloc_r+0x1c>
 8006a7c:	42a9      	cmp	r1, r5
 8006a7e:	d905      	bls.n	8006a8c <_malloc_r+0x28>
 8006a80:	230c      	movs	r3, #12
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	2600      	movs	r6, #0
 8006a86:	4630      	mov	r0, r6
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	4e2e      	ldr	r6, [pc, #184]	; (8006b48 <_malloc_r+0xe4>)
 8006a8e:	f000 fbf5 	bl	800727c <__malloc_lock>
 8006a92:	6833      	ldr	r3, [r6, #0]
 8006a94:	461c      	mov	r4, r3
 8006a96:	bb34      	cbnz	r4, 8006ae6 <_malloc_r+0x82>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff ffc2 	bl	8006a24 <sbrk_aligned>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	d14d      	bne.n	8006b42 <_malloc_r+0xde>
 8006aa6:	6834      	ldr	r4, [r6, #0]
 8006aa8:	4626      	mov	r6, r4
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	d140      	bne.n	8006b30 <_malloc_r+0xcc>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	eb04 0803 	add.w	r8, r4, r3
 8006ab8:	f000 fb36 	bl	8007128 <_sbrk_r>
 8006abc:	4580      	cmp	r8, r0
 8006abe:	d13a      	bne.n	8006b36 <_malloc_r+0xd2>
 8006ac0:	6821      	ldr	r1, [r4, #0]
 8006ac2:	3503      	adds	r5, #3
 8006ac4:	1a6d      	subs	r5, r5, r1
 8006ac6:	f025 0503 	bic.w	r5, r5, #3
 8006aca:	3508      	adds	r5, #8
 8006acc:	2d0c      	cmp	r5, #12
 8006ace:	bf38      	it	cc
 8006ad0:	250c      	movcc	r5, #12
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f7ff ffa5 	bl	8006a24 <sbrk_aligned>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d02b      	beq.n	8006b36 <_malloc_r+0xd2>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	442b      	add	r3, r5
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	e00e      	b.n	8006b04 <_malloc_r+0xa0>
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	1b52      	subs	r2, r2, r5
 8006aea:	d41e      	bmi.n	8006b2a <_malloc_r+0xc6>
 8006aec:	2a0b      	cmp	r2, #11
 8006aee:	d916      	bls.n	8006b1e <_malloc_r+0xba>
 8006af0:	1961      	adds	r1, r4, r5
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	bf18      	it	ne
 8006af8:	6059      	strne	r1, [r3, #4]
 8006afa:	6863      	ldr	r3, [r4, #4]
 8006afc:	bf08      	it	eq
 8006afe:	6031      	streq	r1, [r6, #0]
 8006b00:	5162      	str	r2, [r4, r5]
 8006b02:	604b      	str	r3, [r1, #4]
 8006b04:	4638      	mov	r0, r7
 8006b06:	f104 060b 	add.w	r6, r4, #11
 8006b0a:	f000 fbbd 	bl	8007288 <__malloc_unlock>
 8006b0e:	f026 0607 	bic.w	r6, r6, #7
 8006b12:	1d23      	adds	r3, r4, #4
 8006b14:	1af2      	subs	r2, r6, r3
 8006b16:	d0b6      	beq.n	8006a86 <_malloc_r+0x22>
 8006b18:	1b9b      	subs	r3, r3, r6
 8006b1a:	50a3      	str	r3, [r4, r2]
 8006b1c:	e7b3      	b.n	8006a86 <_malloc_r+0x22>
 8006b1e:	6862      	ldr	r2, [r4, #4]
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	bf0c      	ite	eq
 8006b24:	6032      	streq	r2, [r6, #0]
 8006b26:	605a      	strne	r2, [r3, #4]
 8006b28:	e7ec      	b.n	8006b04 <_malloc_r+0xa0>
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	6864      	ldr	r4, [r4, #4]
 8006b2e:	e7b2      	b.n	8006a96 <_malloc_r+0x32>
 8006b30:	4634      	mov	r4, r6
 8006b32:	6876      	ldr	r6, [r6, #4]
 8006b34:	e7b9      	b.n	8006aaa <_malloc_r+0x46>
 8006b36:	230c      	movs	r3, #12
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f000 fba4 	bl	8007288 <__malloc_unlock>
 8006b40:	e7a1      	b.n	8006a86 <_malloc_r+0x22>
 8006b42:	6025      	str	r5, [r4, #0]
 8006b44:	e7de      	b.n	8006b04 <_malloc_r+0xa0>
 8006b46:	bf00      	nop
 8006b48:	20002444 	.word	0x20002444

08006b4c <__sfputc_r>:
 8006b4c:	6893      	ldr	r3, [r2, #8]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	b410      	push	{r4}
 8006b54:	6093      	str	r3, [r2, #8]
 8006b56:	da08      	bge.n	8006b6a <__sfputc_r+0x1e>
 8006b58:	6994      	ldr	r4, [r2, #24]
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	db01      	blt.n	8006b62 <__sfputc_r+0x16>
 8006b5e:	290a      	cmp	r1, #10
 8006b60:	d103      	bne.n	8006b6a <__sfputc_r+0x1e>
 8006b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b66:	f7ff bc31 	b.w	80063cc <__swbuf_r>
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	1c58      	adds	r0, r3, #1
 8006b6e:	6010      	str	r0, [r2, #0]
 8006b70:	7019      	strb	r1, [r3, #0]
 8006b72:	4608      	mov	r0, r1
 8006b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <__sfputs_r>:
 8006b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	4614      	mov	r4, r2
 8006b82:	18d5      	adds	r5, r2, r3
 8006b84:	42ac      	cmp	r4, r5
 8006b86:	d101      	bne.n	8006b8c <__sfputs_r+0x12>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e007      	b.n	8006b9c <__sfputs_r+0x22>
 8006b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b90:	463a      	mov	r2, r7
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffda 	bl	8006b4c <__sfputc_r>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d1f3      	bne.n	8006b84 <__sfputs_r+0xa>
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ba0 <_vfiprintf_r>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	b09d      	sub	sp, #116	; 0x74
 8006ba8:	4614      	mov	r4, r2
 8006baa:	4698      	mov	r8, r3
 8006bac:	4606      	mov	r6, r0
 8006bae:	b118      	cbz	r0, 8006bb8 <_vfiprintf_r+0x18>
 8006bb0:	6983      	ldr	r3, [r0, #24]
 8006bb2:	b90b      	cbnz	r3, 8006bb8 <_vfiprintf_r+0x18>
 8006bb4:	f7ff fde4 	bl	8006780 <__sinit>
 8006bb8:	4b89      	ldr	r3, [pc, #548]	; (8006de0 <_vfiprintf_r+0x240>)
 8006bba:	429d      	cmp	r5, r3
 8006bbc:	d11b      	bne.n	8006bf6 <_vfiprintf_r+0x56>
 8006bbe:	6875      	ldr	r5, [r6, #4]
 8006bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	d405      	bmi.n	8006bd2 <_vfiprintf_r+0x32>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	059a      	lsls	r2, r3, #22
 8006bca:	d402      	bmi.n	8006bd2 <_vfiprintf_r+0x32>
 8006bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bce:	f7ff fe75 	bl	80068bc <__retarget_lock_acquire_recursive>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	071b      	lsls	r3, r3, #28
 8006bd6:	d501      	bpl.n	8006bdc <_vfiprintf_r+0x3c>
 8006bd8:	692b      	ldr	r3, [r5, #16]
 8006bda:	b9eb      	cbnz	r3, 8006c18 <_vfiprintf_r+0x78>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff fc46 	bl	8006470 <__swsetup_r>
 8006be4:	b1c0      	cbz	r0, 8006c18 <_vfiprintf_r+0x78>
 8006be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006be8:	07dc      	lsls	r4, r3, #31
 8006bea:	d50e      	bpl.n	8006c0a <_vfiprintf_r+0x6a>
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	b01d      	add	sp, #116	; 0x74
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	; (8006de4 <_vfiprintf_r+0x244>)
 8006bf8:	429d      	cmp	r5, r3
 8006bfa:	d101      	bne.n	8006c00 <_vfiprintf_r+0x60>
 8006bfc:	68b5      	ldr	r5, [r6, #8]
 8006bfe:	e7df      	b.n	8006bc0 <_vfiprintf_r+0x20>
 8006c00:	4b79      	ldr	r3, [pc, #484]	; (8006de8 <_vfiprintf_r+0x248>)
 8006c02:	429d      	cmp	r5, r3
 8006c04:	bf08      	it	eq
 8006c06:	68f5      	ldreq	r5, [r6, #12]
 8006c08:	e7da      	b.n	8006bc0 <_vfiprintf_r+0x20>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	0598      	lsls	r0, r3, #22
 8006c0e:	d4ed      	bmi.n	8006bec <_vfiprintf_r+0x4c>
 8006c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c12:	f7ff fe54 	bl	80068be <__retarget_lock_release_recursive>
 8006c16:	e7e9      	b.n	8006bec <_vfiprintf_r+0x4c>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c26:	2330      	movs	r3, #48	; 0x30
 8006c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dec <_vfiprintf_r+0x24c>
 8006c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c30:	f04f 0901 	mov.w	r9, #1
 8006c34:	4623      	mov	r3, r4
 8006c36:	469a      	mov	sl, r3
 8006c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c3c:	b10a      	cbz	r2, 8006c42 <_vfiprintf_r+0xa2>
 8006c3e:	2a25      	cmp	r2, #37	; 0x25
 8006c40:	d1f9      	bne.n	8006c36 <_vfiprintf_r+0x96>
 8006c42:	ebba 0b04 	subs.w	fp, sl, r4
 8006c46:	d00b      	beq.n	8006c60 <_vfiprintf_r+0xc0>
 8006c48:	465b      	mov	r3, fp
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ff93 	bl	8006b7a <__sfputs_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	f000 80aa 	beq.w	8006dae <_vfiprintf_r+0x20e>
 8006c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c5c:	445a      	add	r2, fp
 8006c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c60:	f89a 3000 	ldrb.w	r3, [sl]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a2 	beq.w	8006dae <_vfiprintf_r+0x20e>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c74:	f10a 0a01 	add.w	sl, sl, #1
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	9307      	str	r3, [sp, #28]
 8006c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c80:	931a      	str	r3, [sp, #104]	; 0x68
 8006c82:	4654      	mov	r4, sl
 8006c84:	2205      	movs	r2, #5
 8006c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8a:	4858      	ldr	r0, [pc, #352]	; (8006dec <_vfiprintf_r+0x24c>)
 8006c8c:	f7f9 fac0 	bl	8000210 <memchr>
 8006c90:	9a04      	ldr	r2, [sp, #16]
 8006c92:	b9d8      	cbnz	r0, 8006ccc <_vfiprintf_r+0x12c>
 8006c94:	06d1      	lsls	r1, r2, #27
 8006c96:	bf44      	itt	mi
 8006c98:	2320      	movmi	r3, #32
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9e:	0713      	lsls	r3, r2, #28
 8006ca0:	bf44      	itt	mi
 8006ca2:	232b      	movmi	r3, #43	; 0x2b
 8006ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cac:	2b2a      	cmp	r3, #42	; 0x2a
 8006cae:	d015      	beq.n	8006cdc <_vfiprintf_r+0x13c>
 8006cb0:	9a07      	ldr	r2, [sp, #28]
 8006cb2:	4654      	mov	r4, sl
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f04f 0c0a 	mov.w	ip, #10
 8006cba:	4621      	mov	r1, r4
 8006cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc0:	3b30      	subs	r3, #48	; 0x30
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d94e      	bls.n	8006d64 <_vfiprintf_r+0x1c4>
 8006cc6:	b1b0      	cbz	r0, 8006cf6 <_vfiprintf_r+0x156>
 8006cc8:	9207      	str	r2, [sp, #28]
 8006cca:	e014      	b.n	8006cf6 <_vfiprintf_r+0x156>
 8006ccc:	eba0 0308 	sub.w	r3, r0, r8
 8006cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	46a2      	mov	sl, r4
 8006cda:	e7d2      	b.n	8006c82 <_vfiprintf_r+0xe2>
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	1d19      	adds	r1, r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	9103      	str	r1, [sp, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bfbb      	ittet	lt
 8006ce8:	425b      	neglt	r3, r3
 8006cea:	f042 0202 	orrlt.w	r2, r2, #2
 8006cee:	9307      	strge	r3, [sp, #28]
 8006cf0:	9307      	strlt	r3, [sp, #28]
 8006cf2:	bfb8      	it	lt
 8006cf4:	9204      	strlt	r2, [sp, #16]
 8006cf6:	7823      	ldrb	r3, [r4, #0]
 8006cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfa:	d10c      	bne.n	8006d16 <_vfiprintf_r+0x176>
 8006cfc:	7863      	ldrb	r3, [r4, #1]
 8006cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006d00:	d135      	bne.n	8006d6e <_vfiprintf_r+0x1ce>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9203      	str	r2, [sp, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfb8      	it	lt
 8006d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d12:	3402      	adds	r4, #2
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006dfc <_vfiprintf_r+0x25c>
 8006d1a:	7821      	ldrb	r1, [r4, #0]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	4650      	mov	r0, sl
 8006d20:	f7f9 fa76 	bl	8000210 <memchr>
 8006d24:	b140      	cbz	r0, 8006d38 <_vfiprintf_r+0x198>
 8006d26:	2340      	movs	r3, #64	; 0x40
 8006d28:	eba0 000a 	sub.w	r0, r0, sl
 8006d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d30:	9b04      	ldr	r3, [sp, #16]
 8006d32:	4303      	orrs	r3, r0
 8006d34:	3401      	adds	r4, #1
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3c:	482c      	ldr	r0, [pc, #176]	; (8006df0 <_vfiprintf_r+0x250>)
 8006d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d42:	2206      	movs	r2, #6
 8006d44:	f7f9 fa64 	bl	8000210 <memchr>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d03f      	beq.n	8006dcc <_vfiprintf_r+0x22c>
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <_vfiprintf_r+0x254>)
 8006d4e:	bb1b      	cbnz	r3, 8006d98 <_vfiprintf_r+0x1f8>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	3307      	adds	r3, #7
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	3308      	adds	r3, #8
 8006d5a:	9303      	str	r3, [sp, #12]
 8006d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5e:	443b      	add	r3, r7
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	e767      	b.n	8006c34 <_vfiprintf_r+0x94>
 8006d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d68:	460c      	mov	r4, r1
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	e7a5      	b.n	8006cba <_vfiprintf_r+0x11a>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	3401      	adds	r4, #1
 8006d72:	9305      	str	r3, [sp, #20]
 8006d74:	4619      	mov	r1, r3
 8006d76:	f04f 0c0a 	mov.w	ip, #10
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d80:	3a30      	subs	r2, #48	; 0x30
 8006d82:	2a09      	cmp	r2, #9
 8006d84:	d903      	bls.n	8006d8e <_vfiprintf_r+0x1ee>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0c5      	beq.n	8006d16 <_vfiprintf_r+0x176>
 8006d8a:	9105      	str	r1, [sp, #20]
 8006d8c:	e7c3      	b.n	8006d16 <_vfiprintf_r+0x176>
 8006d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d92:	4604      	mov	r4, r0
 8006d94:	2301      	movs	r3, #1
 8006d96:	e7f0      	b.n	8006d7a <_vfiprintf_r+0x1da>
 8006d98:	ab03      	add	r3, sp, #12
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	462a      	mov	r2, r5
 8006d9e:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <_vfiprintf_r+0x258>)
 8006da0:	a904      	add	r1, sp, #16
 8006da2:	4630      	mov	r0, r6
 8006da4:	f3af 8000 	nop.w
 8006da8:	4607      	mov	r7, r0
 8006daa:	1c78      	adds	r0, r7, #1
 8006dac:	d1d6      	bne.n	8006d5c <_vfiprintf_r+0x1bc>
 8006dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db0:	07d9      	lsls	r1, r3, #31
 8006db2:	d405      	bmi.n	8006dc0 <_vfiprintf_r+0x220>
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	059a      	lsls	r2, r3, #22
 8006db8:	d402      	bmi.n	8006dc0 <_vfiprintf_r+0x220>
 8006dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dbc:	f7ff fd7f 	bl	80068be <__retarget_lock_release_recursive>
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	065b      	lsls	r3, r3, #25
 8006dc4:	f53f af12 	bmi.w	8006bec <_vfiprintf_r+0x4c>
 8006dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dca:	e711      	b.n	8006bf0 <_vfiprintf_r+0x50>
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <_vfiprintf_r+0x258>)
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f000 f880 	bl	8006edc <_printf_i>
 8006ddc:	e7e4      	b.n	8006da8 <_vfiprintf_r+0x208>
 8006dde:	bf00      	nop
 8006de0:	0800789c 	.word	0x0800789c
 8006de4:	080078bc 	.word	0x080078bc
 8006de8:	0800787c 	.word	0x0800787c
 8006dec:	080078dc 	.word	0x080078dc
 8006df0:	080078e6 	.word	0x080078e6
 8006df4:	00000000 	.word	0x00000000
 8006df8:	08006b7b 	.word	0x08006b7b
 8006dfc:	080078e2 	.word	0x080078e2

08006e00 <_printf_common>:
 8006e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	4616      	mov	r6, r2
 8006e06:	4699      	mov	r9, r3
 8006e08:	688a      	ldr	r2, [r1, #8]
 8006e0a:	690b      	ldr	r3, [r1, #16]
 8006e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	bfb8      	it	lt
 8006e14:	4613      	movlt	r3, r2
 8006e16:	6033      	str	r3, [r6, #0]
 8006e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b10a      	cbz	r2, 8006e26 <_printf_common+0x26>
 8006e22:	3301      	adds	r3, #1
 8006e24:	6033      	str	r3, [r6, #0]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	0699      	lsls	r1, r3, #26
 8006e2a:	bf42      	ittt	mi
 8006e2c:	6833      	ldrmi	r3, [r6, #0]
 8006e2e:	3302      	addmi	r3, #2
 8006e30:	6033      	strmi	r3, [r6, #0]
 8006e32:	6825      	ldr	r5, [r4, #0]
 8006e34:	f015 0506 	ands.w	r5, r5, #6
 8006e38:	d106      	bne.n	8006e48 <_printf_common+0x48>
 8006e3a:	f104 0a19 	add.w	sl, r4, #25
 8006e3e:	68e3      	ldr	r3, [r4, #12]
 8006e40:	6832      	ldr	r2, [r6, #0]
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	42ab      	cmp	r3, r5
 8006e46:	dc26      	bgt.n	8006e96 <_printf_common+0x96>
 8006e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e4c:	1e13      	subs	r3, r2, #0
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	bf18      	it	ne
 8006e52:	2301      	movne	r3, #1
 8006e54:	0692      	lsls	r2, r2, #26
 8006e56:	d42b      	bmi.n	8006eb0 <_printf_common+0xb0>
 8006e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	4638      	mov	r0, r7
 8006e60:	47c0      	blx	r8
 8006e62:	3001      	adds	r0, #1
 8006e64:	d01e      	beq.n	8006ea4 <_printf_common+0xa4>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	68e5      	ldr	r5, [r4, #12]
 8006e6a:	6832      	ldr	r2, [r6, #0]
 8006e6c:	f003 0306 	and.w	r3, r3, #6
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	bf08      	it	eq
 8006e74:	1aad      	subeq	r5, r5, r2
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	bf0c      	ite	eq
 8006e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e80:	2500      	movne	r5, #0
 8006e82:	4293      	cmp	r3, r2
 8006e84:	bfc4      	itt	gt
 8006e86:	1a9b      	subgt	r3, r3, r2
 8006e88:	18ed      	addgt	r5, r5, r3
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	341a      	adds	r4, #26
 8006e8e:	42b5      	cmp	r5, r6
 8006e90:	d11a      	bne.n	8006ec8 <_printf_common+0xc8>
 8006e92:	2000      	movs	r0, #0
 8006e94:	e008      	b.n	8006ea8 <_printf_common+0xa8>
 8006e96:	2301      	movs	r3, #1
 8006e98:	4652      	mov	r2, sl
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	47c0      	blx	r8
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d103      	bne.n	8006eac <_printf_common+0xac>
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eac:	3501      	adds	r5, #1
 8006eae:	e7c6      	b.n	8006e3e <_printf_common+0x3e>
 8006eb0:	18e1      	adds	r1, r4, r3
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	2030      	movs	r0, #48	; 0x30
 8006eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eba:	4422      	add	r2, r4
 8006ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	e7c7      	b.n	8006e58 <_printf_common+0x58>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4622      	mov	r2, r4
 8006ecc:	4649      	mov	r1, r9
 8006ece:	4638      	mov	r0, r7
 8006ed0:	47c0      	blx	r8
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d0e6      	beq.n	8006ea4 <_printf_common+0xa4>
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7d9      	b.n	8006e8e <_printf_common+0x8e>
	...

08006edc <_printf_i>:
 8006edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	7e0f      	ldrb	r7, [r1, #24]
 8006ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ee4:	2f78      	cmp	r7, #120	; 0x78
 8006ee6:	4691      	mov	r9, r2
 8006ee8:	4680      	mov	r8, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	469a      	mov	sl, r3
 8006eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ef2:	d807      	bhi.n	8006f04 <_printf_i+0x28>
 8006ef4:	2f62      	cmp	r7, #98	; 0x62
 8006ef6:	d80a      	bhi.n	8006f0e <_printf_i+0x32>
 8006ef8:	2f00      	cmp	r7, #0
 8006efa:	f000 80d8 	beq.w	80070ae <_printf_i+0x1d2>
 8006efe:	2f58      	cmp	r7, #88	; 0x58
 8006f00:	f000 80a3 	beq.w	800704a <_printf_i+0x16e>
 8006f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f0c:	e03a      	b.n	8006f84 <_printf_i+0xa8>
 8006f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f12:	2b15      	cmp	r3, #21
 8006f14:	d8f6      	bhi.n	8006f04 <_printf_i+0x28>
 8006f16:	a101      	add	r1, pc, #4	; (adr r1, 8006f1c <_printf_i+0x40>)
 8006f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f1c:	08006f75 	.word	0x08006f75
 8006f20:	08006f89 	.word	0x08006f89
 8006f24:	08006f05 	.word	0x08006f05
 8006f28:	08006f05 	.word	0x08006f05
 8006f2c:	08006f05 	.word	0x08006f05
 8006f30:	08006f05 	.word	0x08006f05
 8006f34:	08006f89 	.word	0x08006f89
 8006f38:	08006f05 	.word	0x08006f05
 8006f3c:	08006f05 	.word	0x08006f05
 8006f40:	08006f05 	.word	0x08006f05
 8006f44:	08006f05 	.word	0x08006f05
 8006f48:	08007095 	.word	0x08007095
 8006f4c:	08006fb9 	.word	0x08006fb9
 8006f50:	08007077 	.word	0x08007077
 8006f54:	08006f05 	.word	0x08006f05
 8006f58:	08006f05 	.word	0x08006f05
 8006f5c:	080070b7 	.word	0x080070b7
 8006f60:	08006f05 	.word	0x08006f05
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	08006f05 	.word	0x08006f05
 8006f6c:	08006f05 	.word	0x08006f05
 8006f70:	0800707f 	.word	0x0800707f
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	1d1a      	adds	r2, r3, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	602a      	str	r2, [r5, #0]
 8006f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0a3      	b.n	80070d0 <_printf_i+0x1f4>
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	6829      	ldr	r1, [r5, #0]
 8006f8c:	0606      	lsls	r6, r0, #24
 8006f8e:	f101 0304 	add.w	r3, r1, #4
 8006f92:	d50a      	bpl.n	8006faa <_printf_i+0xce>
 8006f94:	680e      	ldr	r6, [r1, #0]
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	da03      	bge.n	8006fa4 <_printf_i+0xc8>
 8006f9c:	232d      	movs	r3, #45	; 0x2d
 8006f9e:	4276      	negs	r6, r6
 8006fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa4:	485e      	ldr	r0, [pc, #376]	; (8007120 <_printf_i+0x244>)
 8006fa6:	230a      	movs	r3, #10
 8006fa8:	e019      	b.n	8006fde <_printf_i+0x102>
 8006faa:	680e      	ldr	r6, [r1, #0]
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fb2:	bf18      	it	ne
 8006fb4:	b236      	sxthne	r6, r6
 8006fb6:	e7ef      	b.n	8006f98 <_printf_i+0xbc>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	1d19      	adds	r1, r3, #4
 8006fbe:	6029      	str	r1, [r5, #0]
 8006fc0:	0601      	lsls	r1, r0, #24
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_i+0xec>
 8006fc4:	681e      	ldr	r6, [r3, #0]
 8006fc6:	e002      	b.n	8006fce <_printf_i+0xf2>
 8006fc8:	0646      	lsls	r6, r0, #25
 8006fca:	d5fb      	bpl.n	8006fc4 <_printf_i+0xe8>
 8006fcc:	881e      	ldrh	r6, [r3, #0]
 8006fce:	4854      	ldr	r0, [pc, #336]	; (8007120 <_printf_i+0x244>)
 8006fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8006fd2:	bf0c      	ite	eq
 8006fd4:	2308      	moveq	r3, #8
 8006fd6:	230a      	movne	r3, #10
 8006fd8:	2100      	movs	r1, #0
 8006fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fde:	6865      	ldr	r5, [r4, #4]
 8006fe0:	60a5      	str	r5, [r4, #8]
 8006fe2:	2d00      	cmp	r5, #0
 8006fe4:	bfa2      	ittt	ge
 8006fe6:	6821      	ldrge	r1, [r4, #0]
 8006fe8:	f021 0104 	bicge.w	r1, r1, #4
 8006fec:	6021      	strge	r1, [r4, #0]
 8006fee:	b90e      	cbnz	r6, 8006ff4 <_printf_i+0x118>
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	d04d      	beq.n	8007090 <_printf_i+0x1b4>
 8006ff4:	4615      	mov	r5, r2
 8006ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8006ffe:	5dc7      	ldrb	r7, [r0, r7]
 8007000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007004:	4637      	mov	r7, r6
 8007006:	42bb      	cmp	r3, r7
 8007008:	460e      	mov	r6, r1
 800700a:	d9f4      	bls.n	8006ff6 <_printf_i+0x11a>
 800700c:	2b08      	cmp	r3, #8
 800700e:	d10b      	bne.n	8007028 <_printf_i+0x14c>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	07de      	lsls	r6, r3, #31
 8007014:	d508      	bpl.n	8007028 <_printf_i+0x14c>
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	6861      	ldr	r1, [r4, #4]
 800701a:	4299      	cmp	r1, r3
 800701c:	bfde      	ittt	le
 800701e:	2330      	movle	r3, #48	; 0x30
 8007020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007024:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007028:	1b52      	subs	r2, r2, r5
 800702a:	6122      	str	r2, [r4, #16]
 800702c:	f8cd a000 	str.w	sl, [sp]
 8007030:	464b      	mov	r3, r9
 8007032:	aa03      	add	r2, sp, #12
 8007034:	4621      	mov	r1, r4
 8007036:	4640      	mov	r0, r8
 8007038:	f7ff fee2 	bl	8006e00 <_printf_common>
 800703c:	3001      	adds	r0, #1
 800703e:	d14c      	bne.n	80070da <_printf_i+0x1fe>
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	b004      	add	sp, #16
 8007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704a:	4835      	ldr	r0, [pc, #212]	; (8007120 <_printf_i+0x244>)
 800704c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007050:	6829      	ldr	r1, [r5, #0]
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f851 6b04 	ldr.w	r6, [r1], #4
 8007058:	6029      	str	r1, [r5, #0]
 800705a:	061d      	lsls	r5, r3, #24
 800705c:	d514      	bpl.n	8007088 <_printf_i+0x1ac>
 800705e:	07df      	lsls	r7, r3, #31
 8007060:	bf44      	itt	mi
 8007062:	f043 0320 	orrmi.w	r3, r3, #32
 8007066:	6023      	strmi	r3, [r4, #0]
 8007068:	b91e      	cbnz	r6, 8007072 <_printf_i+0x196>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f023 0320 	bic.w	r3, r3, #32
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	2310      	movs	r3, #16
 8007074:	e7b0      	b.n	8006fd8 <_printf_i+0xfc>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	f043 0320 	orr.w	r3, r3, #32
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	2378      	movs	r3, #120	; 0x78
 8007080:	4828      	ldr	r0, [pc, #160]	; (8007124 <_printf_i+0x248>)
 8007082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007086:	e7e3      	b.n	8007050 <_printf_i+0x174>
 8007088:	0659      	lsls	r1, r3, #25
 800708a:	bf48      	it	mi
 800708c:	b2b6      	uxthmi	r6, r6
 800708e:	e7e6      	b.n	800705e <_printf_i+0x182>
 8007090:	4615      	mov	r5, r2
 8007092:	e7bb      	b.n	800700c <_printf_i+0x130>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	6826      	ldr	r6, [r4, #0]
 8007098:	6961      	ldr	r1, [r4, #20]
 800709a:	1d18      	adds	r0, r3, #4
 800709c:	6028      	str	r0, [r5, #0]
 800709e:	0635      	lsls	r5, r6, #24
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	d501      	bpl.n	80070a8 <_printf_i+0x1cc>
 80070a4:	6019      	str	r1, [r3, #0]
 80070a6:	e002      	b.n	80070ae <_printf_i+0x1d2>
 80070a8:	0670      	lsls	r0, r6, #25
 80070aa:	d5fb      	bpl.n	80070a4 <_printf_i+0x1c8>
 80070ac:	8019      	strh	r1, [r3, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	4615      	mov	r5, r2
 80070b4:	e7ba      	b.n	800702c <_printf_i+0x150>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	681d      	ldr	r5, [r3, #0]
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f7f9 f8a4 	bl	8000210 <memchr>
 80070c8:	b108      	cbz	r0, 80070ce <_printf_i+0x1f2>
 80070ca:	1b40      	subs	r0, r0, r5
 80070cc:	6060      	str	r0, [r4, #4]
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	2300      	movs	r3, #0
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d8:	e7a8      	b.n	800702c <_printf_i+0x150>
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	462a      	mov	r2, r5
 80070de:	4649      	mov	r1, r9
 80070e0:	4640      	mov	r0, r8
 80070e2:	47d0      	blx	sl
 80070e4:	3001      	adds	r0, #1
 80070e6:	d0ab      	beq.n	8007040 <_printf_i+0x164>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	079b      	lsls	r3, r3, #30
 80070ec:	d413      	bmi.n	8007116 <_printf_i+0x23a>
 80070ee:	68e0      	ldr	r0, [r4, #12]
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	4298      	cmp	r0, r3
 80070f4:	bfb8      	it	lt
 80070f6:	4618      	movlt	r0, r3
 80070f8:	e7a4      	b.n	8007044 <_printf_i+0x168>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4632      	mov	r2, r6
 80070fe:	4649      	mov	r1, r9
 8007100:	4640      	mov	r0, r8
 8007102:	47d0      	blx	sl
 8007104:	3001      	adds	r0, #1
 8007106:	d09b      	beq.n	8007040 <_printf_i+0x164>
 8007108:	3501      	adds	r5, #1
 800710a:	68e3      	ldr	r3, [r4, #12]
 800710c:	9903      	ldr	r1, [sp, #12]
 800710e:	1a5b      	subs	r3, r3, r1
 8007110:	42ab      	cmp	r3, r5
 8007112:	dcf2      	bgt.n	80070fa <_printf_i+0x21e>
 8007114:	e7eb      	b.n	80070ee <_printf_i+0x212>
 8007116:	2500      	movs	r5, #0
 8007118:	f104 0619 	add.w	r6, r4, #25
 800711c:	e7f5      	b.n	800710a <_printf_i+0x22e>
 800711e:	bf00      	nop
 8007120:	080078ed 	.word	0x080078ed
 8007124:	080078fe 	.word	0x080078fe

08007128 <_sbrk_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	; (8007144 <_sbrk_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7fa fa3a 	bl	80015ac <_sbrk>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_sbrk_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_sbrk_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	2000244c 	.word	0x2000244c

08007148 <__sread>:
 8007148:	b510      	push	{r4, lr}
 800714a:	460c      	mov	r4, r1
 800714c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007150:	f000 f8a0 	bl	8007294 <_read_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	bfab      	itete	ge
 8007158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800715a:	89a3      	ldrhlt	r3, [r4, #12]
 800715c:	181b      	addge	r3, r3, r0
 800715e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007162:	bfac      	ite	ge
 8007164:	6563      	strge	r3, [r4, #84]	; 0x54
 8007166:	81a3      	strhlt	r3, [r4, #12]
 8007168:	bd10      	pop	{r4, pc}

0800716a <__swrite>:
 800716a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716e:	461f      	mov	r7, r3
 8007170:	898b      	ldrh	r3, [r1, #12]
 8007172:	05db      	lsls	r3, r3, #23
 8007174:	4605      	mov	r5, r0
 8007176:	460c      	mov	r4, r1
 8007178:	4616      	mov	r6, r2
 800717a:	d505      	bpl.n	8007188 <__swrite+0x1e>
 800717c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007180:	2302      	movs	r3, #2
 8007182:	2200      	movs	r2, #0
 8007184:	f000 f868 	bl	8007258 <_lseek_r>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800718e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	4632      	mov	r2, r6
 8007196:	463b      	mov	r3, r7
 8007198:	4628      	mov	r0, r5
 800719a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800719e:	f000 b817 	b.w	80071d0 <_write_r>

080071a2 <__sseek>:
 80071a2:	b510      	push	{r4, lr}
 80071a4:	460c      	mov	r4, r1
 80071a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071aa:	f000 f855 	bl	8007258 <_lseek_r>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	bf15      	itete	ne
 80071b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071be:	81a3      	strheq	r3, [r4, #12]
 80071c0:	bf18      	it	ne
 80071c2:	81a3      	strhne	r3, [r4, #12]
 80071c4:	bd10      	pop	{r4, pc}

080071c6 <__sclose>:
 80071c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ca:	f000 b813 	b.w	80071f4 <_close_r>
	...

080071d0 <_write_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	; (80071f0 <_write_r+0x20>)
 80071d4:	4604      	mov	r4, r0
 80071d6:	4608      	mov	r0, r1
 80071d8:	4611      	mov	r1, r2
 80071da:	2200      	movs	r2, #0
 80071dc:	602a      	str	r2, [r5, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	f7fa f892 	bl	8001308 <_write>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_write_r+0x1e>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_write_r+0x1e>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	2000244c 	.word	0x2000244c

080071f4 <_close_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d06      	ldr	r5, [pc, #24]	; (8007210 <_close_r+0x1c>)
 80071f8:	2300      	movs	r3, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	f7fa f9a0 	bl	8001544 <_close>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_close_r+0x1a>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_close_r+0x1a>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	2000244c 	.word	0x2000244c

08007214 <_fstat_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d07      	ldr	r5, [pc, #28]	; (8007234 <_fstat_r+0x20>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	f7fa f99b 	bl	800155c <_fstat>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d102      	bne.n	8007230 <_fstat_r+0x1c>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b103      	cbz	r3, 8007230 <_fstat_r+0x1c>
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	bf00      	nop
 8007234:	2000244c 	.word	0x2000244c

08007238 <_isatty_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d06      	ldr	r5, [pc, #24]	; (8007254 <_isatty_r+0x1c>)
 800723c:	2300      	movs	r3, #0
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7fa f99a 	bl	800157c <_isatty>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_isatty_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_isatty_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	2000244c 	.word	0x2000244c

08007258 <_lseek_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d07      	ldr	r5, [pc, #28]	; (8007278 <_lseek_r+0x20>)
 800725c:	4604      	mov	r4, r0
 800725e:	4608      	mov	r0, r1
 8007260:	4611      	mov	r1, r2
 8007262:	2200      	movs	r2, #0
 8007264:	602a      	str	r2, [r5, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	f7fa f993 	bl	8001592 <_lseek>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_lseek_r+0x1e>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_lseek_r+0x1e>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	2000244c 	.word	0x2000244c

0800727c <__malloc_lock>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__malloc_lock+0x8>)
 800727e:	f7ff bb1d 	b.w	80068bc <__retarget_lock_acquire_recursive>
 8007282:	bf00      	nop
 8007284:	20002440 	.word	0x20002440

08007288 <__malloc_unlock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_unlock+0x8>)
 800728a:	f7ff bb18 	b.w	80068be <__retarget_lock_release_recursive>
 800728e:	bf00      	nop
 8007290:	20002440 	.word	0x20002440

08007294 <_read_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_read_r+0x20>)
 8007298:	4604      	mov	r4, r0
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7fa f931 	bl	800150a <_read>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_read_r+0x1e>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_read_r+0x1e>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	2000244c 	.word	0x2000244c

080072b8 <_init>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr

080072c4 <_fini>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr
